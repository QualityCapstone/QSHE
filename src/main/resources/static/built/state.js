/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp"];
/******/ 	window["webpackJsonp"] = function webpackJsonpCallback(chunkIds, moreModules, executeModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [], result;
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules, executeModules);
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 	};
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// objects to store loaded and loading chunks
/******/ 	var installedChunks = {
/******/ 		4: 0
/******/ 	};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId) {
/******/ 		var installedChunkData = installedChunks[chunkId];
/******/ 		if(installedChunkData === 0) {
/******/ 			return new Promise(function(resolve) { resolve(); });
/******/ 		}
/******/
/******/ 		// a Promise means "currently loading".
/******/ 		if(installedChunkData) {
/******/ 			return installedChunkData[2];
/******/ 		}
/******/
/******/ 		// setup Promise in chunk cache
/******/ 		var promise = new Promise(function(resolve, reject) {
/******/ 			installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 		});
/******/ 		installedChunkData[2] = promise;
/******/
/******/ 		// start chunk loading
/******/ 		var head = document.getElementsByTagName('head')[0];
/******/ 		var script = document.createElement('script');
/******/ 		script.type = "text/javascript";
/******/ 		script.charset = 'utf-8';
/******/ 		script.async = true;
/******/ 		script.timeout = 120000;
/******/
/******/ 		if (__webpack_require__.nc) {
/******/ 			script.setAttribute("nonce", __webpack_require__.nc);
/******/ 		}
/******/ 		script.src = __webpack_require__.p + "" + chunkId + ".js";
/******/ 		var timeout = setTimeout(onScriptComplete, 120000);
/******/ 		script.onerror = script.onload = onScriptComplete;
/******/ 		function onScriptComplete() {
/******/ 			// avoid mem leaks in IE.
/******/ 			script.onerror = script.onload = null;
/******/ 			clearTimeout(timeout);
/******/ 			var chunk = installedChunks[chunkId];
/******/ 			if(chunk !== 0) {
/******/ 				if(chunk) {
/******/ 					chunk[1](new Error('Loading chunk ' + chunkId + ' failed.'));
/******/ 				}
/******/ 				installedChunks[chunkId] = undefined;
/******/ 			}
/******/ 		};
/******/ 		head.appendChild(script);
/******/
/******/ 		return promise;
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 197);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Registry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return registry; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_EventDispatcher__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Dictionary__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Cache__ = __webpack_require__(90);



/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Registry is used to store miscellaneous system-wide information, like ids,
 * maps, themes, and registered classes.
 *
 * @ignore Exclude from docs
 */
var Registry = /** @class */ (function () {
    function Registry() {
        /**
         * Event dispacther.
         *
         * @type {EventDispatcher}
         */
        this.events = new __WEBPACK_IMPORTED_MODULE_0__utils_EventDispatcher__["a" /* EventDispatcher */]();
        /**
         * All currently applied themes. All new chart instances created will
         * automatically inherit and retain System's themes.
         *
         * @type {ITheme}
         */
        this.themes = [];
        /**
         * List of all loaded available themes.
         *
         * Whenever a theme loads, it registers itself in System's `loadedThemes`
         * collection.
         */
        this.loadedThemes = {};
        /**
         * An indeternal counter used to generate unique IDs.
         *
         * @ignore Exclude from docs
         * @type {number}
         */
        this._uidCount = 0;
        /**
         * Keeps register of class references so that they can be instnatiated using
         * string key.
         *
         * @ignore Exclude from docs
         */
        this.registeredClasses = {};
        /**
         * Number of times per second charts will be updated.
         *
         * This means that each time an element is invalidated it will wait for the
         * next cycle to be re-validated, and possibly redrawn.
         *
         * This happens every `1000 / frameRate` milliseconds.
         *
         * Reducing this number may reduce the load on the CPU, but might slightly
         * reduce smoothness of the animations.
         *
         * @type {number}
         */
        this.frameRate = 60;
        /**
     * A list of invalid(ated) [[Sprite]] objects that need to be re-validated
     * during next cycle.
     *
     * @ignore Exclude from docs
     * @type {Array<Sprite>}
     */
        this.invalidSprites = [];
        /**
         * Components are added to this list when their data provider changes to
         * a new one or data is added/removed from their data provider.
         *
         * @ignore Exclude from docs
         * @type {Array<Component>}
         */
        this.invalidDatas = [];
        /**
         * Components are added to this list when values of their raw data change.
         * Used when we want a smooth animation from one set of values to another.
         *
         * @ignore Exclude from docs
         * @type {Array<Component>}
         */
        this.invalidRawDatas = [];
        /**
         * Components are added to this list when values of their data changes
         * (but not data provider itself).
         *
         * @ignore Exclude from docs
         * @type {Array<Component>}
         */
        this.invalidDataItems = [];
        /**
         * Components are added to this list when their data range (selection) is
         * changed, e.g. zoomed.
         *
         * @ignore Exclude from docs
         * @type {Array<Component>}
         */
        this.invalidDataRange = [];
        /**
         * A list of [[Sprite]] objects that have invalid(ated) positions, that need
         * to be recalculated.
         *
         * @ignore Exclude from docs
         * @type {Array<Sprite>}
         */
        this.invalidPositions = [];
        /**
         * A list of [[Container]] objects with invalid(ated) layouts.
         *
         * @ignore Exclude from docs
         * @type {Array<Container>}
         */
        this.invalidLayouts = [];
        this.uid = this.getUniqueId();
    }
    /**
     * Generates a unique chart system-wide ID.
     *
     * @return {string} Generated ID
     */
    Registry.prototype.getUniqueId = function () {
        var uid = this._uidCount;
        this._uidCount += 1;
        return "id-" + uid;
    };
    Object.defineProperty(Registry.prototype, "map", {
        /**
         * Returns a universal collection for mapping ids with objects.
         *
         * @ignore Exclude from docs
         * @return {Dictionary<string, any>} Map collection
         */
        get: function () {
            if (!this._map) {
                this._map = new __WEBPACK_IMPORTED_MODULE_1__utils_Dictionary__["a" /* Dictionary */]();
            }
            return this._map;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Caches value in object's cache.
     *
     * @ignore Exclude from docs
     * @param {string}  key    Key
     * @param {any}     value  Value
     */
    Registry.prototype.setCache = function (key, value) {
        __WEBPACK_IMPORTED_MODULE_2__utils_Cache__["b" /* cache */].set(this.uid, key, value);
    };
    /**
     * Retrieves cached value.
     *
     * @ignore Exclude from docs
     * @param  {string}  key  Key
     * @return {any}          Value
     */
    Registry.prototype.getCache = function (key) {
        return __WEBPACK_IMPORTED_MODULE_2__utils_Cache__["b" /* cache */].get(this.uid, key);
    };
    /**
     * Dispatches an event using own event dispatcher. Will automatically
     * populate event data object with event type and target (this element).
     * It also checks if there are any handlers registered for this sepecific
     * event.
     *
     * @param {Key} eventType Event type (name)
     * @param {any}    data      Data to pass into event handler(s)
     */
    Registry.prototype.dispatch = function (eventType, data) {
        // @todo Implement proper type check
        if (this.events.isEnabled(eventType)) {
            if (data) {
                data.type = eventType;
                data.target = data.target || this;
                this.events.dispatch(eventType, {
                    type: eventType,
                    target: this
                });
            }
            else {
                this.events.dispatch(eventType, {
                    type: eventType,
                    target: this
                });
            }
        }
    };
    /**
     * Works like `dispatch`, except event is triggered immediately, without
     * waiting for the next frame cycle.
     *
     * @param {Key} eventType Event type (name)
     * @param {any}    data      Data to pass into event handler(s)
     */
    Registry.prototype.dispatchImmediately = function (eventType, data) {
        // @todo Implement proper type check
        if (this.events.isEnabled(eventType)) {
            if (data) {
                data.type = eventType;
                data.target = data.target || this;
                this.events.dispatchImmediately(eventType, data);
            }
            else {
                this.events.dispatchImmediately(eventType, {
                    type: eventType,
                    target: this
                });
            }
        }
    };
    return Registry;
}());

/**
 * A singleton global instance of [[Registry]].
 *
 * @ignore Exclude from docs
 */
var registry = new Registry();
//# sourceMappingURL=Registry.js.map

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["isNaN"] = isNaN;
/* harmony export (immutable) */ __webpack_exports__["getType"] = getType;
/* harmony export (immutable) */ __webpack_exports__["getDefault"] = getDefault;
/* harmony export (immutable) */ __webpack_exports__["checkString"] = checkString;
/* harmony export (immutable) */ __webpack_exports__["checkBoolean"] = checkBoolean;
/* harmony export (immutable) */ __webpack_exports__["checkNumber"] = checkNumber;
/* harmony export (immutable) */ __webpack_exports__["checkObject"] = checkObject;
/* harmony export (immutable) */ __webpack_exports__["checkArray"] = checkArray;
/* harmony export (immutable) */ __webpack_exports__["checkDate"] = checkDate;
/* harmony export (immutable) */ __webpack_exports__["castString"] = castString;
/* harmony export (immutable) */ __webpack_exports__["castNumber"] = castNumber;
/* harmony export (immutable) */ __webpack_exports__["toBoolean"] = toBoolean;
/* harmony export (immutable) */ __webpack_exports__["toNumber"] = toNumber;
/* harmony export (immutable) */ __webpack_exports__["toText"] = toText;
/* harmony export (immutable) */ __webpack_exports__["toNumberOrPercent"] = toNumberOrPercent;
/* harmony export (immutable) */ __webpack_exports__["hasValue"] = hasValue;
/* harmony export (immutable) */ __webpack_exports__["getValue"] = getValue;
/* harmony export (immutable) */ __webpack_exports__["getValueDefault"] = getValueDefault;
/* harmony export (immutable) */ __webpack_exports__["isDate"] = isDate;
/* harmony export (immutable) */ __webpack_exports__["isString"] = isString;
/* harmony export (immutable) */ __webpack_exports__["isNumber"] = isNumber;
/* harmony export (immutable) */ __webpack_exports__["isObject"] = isObject;
/* harmony export (immutable) */ __webpack_exports__["isArray"] = isArray;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Percent__ = __webpack_require__(7);
/**
 * A collection of utility functions for various type checks and conversion
 * @todo Review unused functions for removal
 * @hidden
 */
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

/**
 * ============================================================================
 * TYPE CHECK
 * ============================================================================
 * @hidden
 */
/**
 * Returns `true` if value is not a number (NaN).
 *
 * @param  {number}  value Input value
 * @return {boolean}       Is NaN?
 * @deprecated Is not used anywhere. JS built-in isNaN is used everywhere. Maybe we don't need this, or if we do, then we should use it everywhere
 */
function isNaN(value) {
    return Number(value) !== value;
    //return value !== value;
}
/**
 * Returns a type of the value.
 *
 * @param  {any}   value  Input value
 * @return {Type}         Type of the value
 */
function getType(value) {
    return ({}).toString.call(value);
}
/**
 * Returns a default value if the passed in value is empty.
 *
 * @param  {any}   value     Input value
 * @param  {any}   optional  Default value
 * @return {any}             Value or default value whichever is available
 * @deprecated Not used anywhere
 */
function getDefault(value, optional) {
    return value || optional;
}
/**
 * Checks if the passed in value is a string.
 *
 * @param  {any}   value  Value
 * @return {value}        Is string?
 * @throws {Error}
 * @deprecated Not used anywhere
 */
function checkString(value) {
    if (typeof value === "string") {
        return true;
    }
    else {
        throw new Error("Expected a string but got " + getType(value));
    }
}
/**
 * Checks if the passed in value is a boolean.
 *
 * @param  {any}   value  Value
 * @return {value}        Is boolean?
 * @throws {Error}
 * @deprecated Not used anywhere
 */
function checkBoolean(value) {
    if (typeof value === "boolean") {
        return true;
    }
    else {
        throw new Error("Expected a boolean but got " + getType(value));
    }
}
/**
 * Checks if the passed in value is a number.
 *
 * @param  {any}   value  Value
 * @return {value}        Is number?
 * @throws {Error}
 */
function checkNumber(value) {
    if (typeof value === "number") {
        if (isNaN(value)) {
            throw new Error("Expected a number but got NaN");
        }
    }
    else {
        throw new Error("Expected a number but got " + getType(value));
    }
    return true;
}
/**
 * Checks if the passed in value is an object.
 *
 * @param  {any}   value  Value
 * @return {value}        Is object?
 * @throws {Error}
 * @todo Is the input type correct?
 * @deprecated Not used anywhere
 */
function checkObject(value) {
    var t = getType(value);
    if (t === "[object Object]") {
        return true;
    }
    else {
        throw new Error("Expected an object but got " + t);
    }
}
/**
 * Checks if the passed in value is an array.
 *
 * @param  {any}   value  Value
 * @return {value}        Is array?
 * @throws {Error}
 * @deprecated Not used anywhere
 */
function checkArray(value) {
    if (Array.isArray(value)) {
        return true;
    }
    else {
        throw new Error("Expected an array but got " + getType(value));
    }
}
/**
 * Checks if the passed in value is a Date object.
 *
 * @param  {any}   value  Value
 * @return {value}        Is Date object?
 * @throws {Error}
 * @deprecated Not used anywhere
 */
function checkDate(value) {
    var t = getType(value);
    if (t === "[object Date]") {
        return true;
    }
    else {
        throw new Error("Expected a date but got " + t);
    }
}
/**
 * ============================================================================
 * TYPE CASTING
 * ============================================================================
 * @hidden
 */
/**
 * Casts string or a number into string.
 *
 * @param  {string | number}  value  Input
 * @return {string}                  String value
 * @deprecated Not used anywhere
 */
function castString(value) {
    if (typeof value === "string") {
        return value;
    }
    else if (typeof value === "number") {
        return "" + value;
    }
    else {
        throw new Error("Expected a string or number but got " + getType(value));
    }
}
/**
 * Casts string or a number into a number.
 *
 * @param  {string | number | Date}  value   Input value
 * @return {number}                  Number  value
 * @throws {Error}
 */
function castNumber(value) {
    if (typeof value === "string") {
        var number = +value;
        if (isNaN(number)) {
            throw new Error("Cannot cast string " + JSON.stringify(value) + " to a number");
        }
        else {
            return number;
        }
    }
    else if (typeof value === "number") {
        if (isNaN(value)) {
            throw new Error("Expected a number but got NaN");
        }
        else {
            return value;
        }
    }
    else {
        var t = getType(value);
        if (t === "[object Date]") {
            return value.getTime();
        }
        else {
            throw new Error("Expected a string, number, or date but got " + t);
        }
    }
}
/**
 * Casts number, string or Date into a Date object.
 *
 * @param  {string | number | Date}   value  Input value
 * @return {Date}                            Date object
 * @deprecated Not used anywhere
 * @throws {Error}
 * @hidden
 * @deprecated
 */
/*export function castDate(value: string | number | Date, formatter?: DateFormatter): Date {
    if (typeof value === "string") {
        if (formatter) {
            return formatter.parse(value);
        }
        return new Date(value);

    } else if (typeof value === "number") {
        return new Date(value);

    } else {
        const t = getType(value);

        if (t === "[object Date]") {
            return value;

        } else {
            throw new Error("Expected a string, number, or date but got " + t);
        }
    }
}*/
/**
 * ============================================================================
 * QUICK CONVERSION
 * ============================================================================
 * @hidden
 */
/**
 * Converts any value into `boolean`.
 *
 * @param  {any}      value  Source value
 * @return {boolean}         `true` or `false`
 */
function toBoolean(value) {
    return value ? true : false;
}
/**
 * Converts any value into a `number`.
 *
 * @param  {any}     value  Source value
 * @return {number}         Number representation of value
 */
function toNumber(value) {
    if (hasValue(value) && !isNumber(value)) {
        var converted = Number(value);
        if (isNaN(converted) && isString(value) && value != "") {
            return toNumber(value.replace(/[^0-9.\-]+/g, ''));
        }
        return converted;
    }
    return value;
}
/**
 * Converts any value into a string (text).
 *
 * @param  {any}     value  Source value
 * @return {string}         String representation of the input
 */
function toText(value) {
    if (hasValue(value) && !isString(value)) {
        return castString(value);
    }
    return value;
}
/**
 * Converts any value to a number or [[Percent]].
 *
 * If the parameter is a string and contains "%", it will
 * convert it into a [[Percent]].
 *
 * Otherwise, it will convert into a number.
 *
 * @param {number | Percent}   value  Number or percent
 * @return {number | Percent}         Percent object
 */
function toNumberOrPercent(value) {
    if (!hasValue(value) || isNumber(value) || Object(__WEBPACK_IMPORTED_MODULE_0__Percent__["b" /* isPercent */])(value)) {
        return value;
    }
    if (isString(value) && value.indexOf("%") != -1) {
        return Object(__WEBPACK_IMPORTED_MODULE_0__Percent__["c" /* percent */])(toNumber(value));
    }
    return toNumber(value);
}
/**
 * Checks if a variable has a value.
 *
 * @param {Optional<A> | null}  a  Input value
 * @returns                        Has value?
 */
function hasValue(a) {
    return a != null;
}
/**
 * Returns a value or throws an {Error} exception if the variable has not
 * value.
 *
 * @param {Optional<A> | null}  a  Input value
 * @returns                        Value
 */
function getValue(a) {
    if (hasValue(a)) {
        return a;
    }
    else {
        throw new Error("Value doesn't exist");
    }
}
/**
 * Returns a value, or returns the default value if it doesn't have a value.
 *
 * @param {Optional<A> | null}  a  Input value
 * @returns                        Value
 */
function getValueDefault(a, defaultValue) {
    if (hasValue(a)) {
        return a;
    }
    else {
        return defaultValue;
    }
}
/**
 * ============================================================================
 * TYPE CHECK
 * ============================================================================
 * @hidden
 */
/**
 * Checks if parameter is `Date`.
 *
 * @param  {any}    value  Input value
 * @return {value}         Is Date?
 */
function isDate(value) {
    return getType(value) === "[object Date]";
}
/**
 * Checks if parameter is `string`.
 *
 * @param  {any}    value  Input value
 * @return {value}         Is string?
 */
function isString(value) {
    return typeof value === "string";
}
/**
 * Checks if parameter is `number`.
 *
 * @param  {any}    value  Input value
 * @return {value}         Is number?
 */
function isNumber(value) {
    return typeof value === "number" && !isNaN(value);
}
/**
 * Checks if parameter is `object`.
 *
 * @param  {any}    value  Input value
 * @return {value}         Is object?
 */
function isObject(value) {
    return typeof value === "object";
}
/**
 * Checks if parameter is `Array`.
 *
 * @param  {any}    value  Input value
 * @return {value}         Is Array?
 */
function isArray(value) {
    return Array.isArray(value);
}
//# sourceMappingURL=Type.js.map

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PI", function() { return PI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HALFPI", function() { return HALFPI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RADIANS", function() { return RADIANS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEGREES", function() { return DEGREES; });
/* harmony export (immutable) */ __webpack_exports__["toNumberRange"] = toNumberRange;
/* harmony export (immutable) */ __webpack_exports__["round"] = round;
/* harmony export (immutable) */ __webpack_exports__["stretch"] = stretch;
/* harmony export (immutable) */ __webpack_exports__["fitToRange"] = fitToRange;
/* harmony export (immutable) */ __webpack_exports__["sin"] = sin;
/* harmony export (immutable) */ __webpack_exports__["tan"] = tan;
/* harmony export (immutable) */ __webpack_exports__["cos"] = cos;
/* harmony export (immutable) */ __webpack_exports__["max"] = max;
/* harmony export (immutable) */ __webpack_exports__["min"] = min;
/* harmony export (immutable) */ __webpack_exports__["closest"] = closest;
/* harmony export (immutable) */ __webpack_exports__["intersect"] = intersect;
/* harmony export (immutable) */ __webpack_exports__["invertRange"] = invertRange;
/* harmony export (immutable) */ __webpack_exports__["intersection"] = intersection;
/* harmony export (immutable) */ __webpack_exports__["getDistance"] = getDistance;
/* harmony export (immutable) */ __webpack_exports__["getScale"] = getScale;
/* harmony export (immutable) */ __webpack_exports__["getMidPoint"] = getMidPoint;
/* harmony export (immutable) */ __webpack_exports__["getRotation"] = getRotation;
/* harmony export (immutable) */ __webpack_exports__["getAngle"] = getAngle;
/* harmony export (immutable) */ __webpack_exports__["getCenterShift"] = getCenterShift;
/* harmony export (immutable) */ __webpack_exports__["getBBox"] = getBBox;
/* harmony export (immutable) */ __webpack_exports__["getCommonRectangle"] = getCommonRectangle;
/* harmony export (immutable) */ __webpack_exports__["getPointOnQuadraticCurve"] = getPointOnQuadraticCurve;
/* harmony export (immutable) */ __webpack_exports__["getPointOnCubicCurve"] = getPointOnCubicCurve;
/* harmony export (immutable) */ __webpack_exports__["getCubicControlPointA"] = getCubicControlPointA;
/* harmony export (immutable) */ __webpack_exports__["getCubicControlPointB"] = getCubicControlPointB;
/* harmony export (immutable) */ __webpack_exports__["adjustTension"] = adjustTension;
/* harmony export (immutable) */ __webpack_exports__["normalizeAngle"] = normalizeAngle;
/* harmony export (immutable) */ __webpack_exports__["fitAngleToRange"] = fitAngleToRange;
/* harmony export (immutable) */ __webpack_exports__["getArcRect"] = getArcRect;
/* harmony export (immutable) */ __webpack_exports__["isInRectangle"] = isInRectangle;
/* harmony export (immutable) */ __webpack_exports__["getLineIntersection"] = getLineIntersection;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Type__ = __webpack_require__(1);
/**
 * A collection of Math-related functions
 *
 * @todo Comment trigonometric functions?
 */

/**
 * ============================================================================
 * CONSTANTS
 * ============================================================================
 * @hidden
 */
var PI = Math.PI;
var HALFPI = PI / 2;
var RADIANS = PI / 180;
var DEGREES = 180 / PI;
/**
 * Converts any value and fits it into a specific value range.
 *
 * @param  {any}     value  Source value
 * @param  {number}  min    Minimum allowable value
 * @param  {number}  max    Maximum allowable value
 * @return {number}         Number
 */
function toNumberRange(value, min, max) {
    if (__WEBPACK_IMPORTED_MODULE_0__Type__["hasValue"](value)) {
        value = __WEBPACK_IMPORTED_MODULE_0__Type__["toNumber"](value);
        return fitToRange(value, min, max);
    }
    return value;
}
/**
 * Rounds the numeric value to whole number or specific precision of set.
 *
 * @param  {number} value      Value
 * @param  {number} precision  Precision (number of decimal points)
 * @return {number}            Rounded value
 */
function round(value, precision) {
    if (!__WEBPACK_IMPORTED_MODULE_0__Type__["isNumber"](precision) || precision <= 0) {
        return Math.round(value);
    }
    else {
        var d = Math.pow(10, precision);
        return Math.round(value * d) / d;
    }
}
/**
 * Stretches `t` so that it will always be between `from` and `to`.
 *
 * @param  {number} t     Number from 0 to 1
 * @param  {number} from  Lowest possible value
 * @param  {number} to    Highest possible value
 * @return {number}       Adjusted value
 */
function stretch(t, from, to) {
    return (t * (to - from)) + from;
}
/**
 * Adjust numeric value so it fits to specific value range.
 *
 * @param  {number} value     Value
 * @param  {Optional<number>} minValue  Lowest possible value
 * @param  {Optional<number>} maxValue  Highest possible value
 * @return {number}                     Adjusted value
 */
function fitToRange(value, minValue, maxValue) {
    if (__WEBPACK_IMPORTED_MODULE_0__Type__["isNumber"](minValue)) {
        if (__WEBPACK_IMPORTED_MODULE_0__Type__["isNumber"](maxValue) && maxValue < minValue) {
            var temp = maxValue;
            maxValue = minValue;
            minValue = temp;
        }
        if (value < minValue) {
            value = minValue;
        }
    }
    if (__WEBPACK_IMPORTED_MODULE_0__Type__["isNumber"](maxValue)) {
        if (value > maxValue) {
            value = maxValue;
        }
    }
    return value;
}
/**
 * Returns sine of a number.
 *
 * @param  {number} value  Value
 * @return {number}        Sine
 */
function sin(value) {
    return round(Math.sin(RADIANS * value), 10);
}
/**
 * Returns tan of a number.
 *
 * @param  {number} value  Value
 * @return {number}        Sine
 */
function tan(value) {
    return round(Math.tan(RADIANS * value), 10);
}
/**
 * Returns cosine of a number.
 *
 * @param  {number} value  Value
 * @return {number}        Cosine
 */
function cos(value) {
    return round(Math.cos(RADIANS * value), 10);
}
function max(left, right) {
    if (__WEBPACK_IMPORTED_MODULE_0__Type__["isNumber"](left)) {
        if (__WEBPACK_IMPORTED_MODULE_0__Type__["isNumber"](right)) {
            if (right > left) {
                return right;
            }
            else {
                return left;
            }
        }
        else {
            return left;
        }
    }
    else if (__WEBPACK_IMPORTED_MODULE_0__Type__["isNumber"](right)) {
        return right;
    }
    else {
        return null;
    }
}
function min(left, right) {
    if (__WEBPACK_IMPORTED_MODULE_0__Type__["isNumber"](left)) {
        if (__WEBPACK_IMPORTED_MODULE_0__Type__["isNumber"](right)) {
            if (right < left) {
                return right;
            }
            else {
                return left;
            }
        }
        else {
            return left;
        }
    }
    else if (__WEBPACK_IMPORTED_MODULE_0__Type__["isNumber"](right)) {
        return right;
    }
    else {
        return null;
    }
}
/**
 * Returns the closest value from the array of values to the reference value.
 *
 * @param  {number[]}  values  Array of values
 * @param  {number}    value   Reference value
 * @return {number}            Closes value from the array
 */
function closest(values, referenceValue) {
    return values.reduce(function (prev, curr) {
        return (Math.abs(curr - referenceValue) < Math.abs(prev - referenceValue) ? curr : prev);
    });
}
/**
 * Checks whether two ranges of values intersect.
 *
 * @param {IRange}    range1  Range 1
 * @param {IRange}    range2  Range 2
 * @return {boolean}          Any intersecting numbers?
 */
function intersect(range1, range2) {
    var start1 = __WEBPACK_IMPORTED_MODULE_0__Type__["getValue"](range1.start);
    var start2 = __WEBPACK_IMPORTED_MODULE_0__Type__["getValue"](range2.start);
    var end1 = __WEBPACK_IMPORTED_MODULE_0__Type__["getValue"](range1.end);
    var end2 = __WEBPACK_IMPORTED_MODULE_0__Type__["getValue"](range2.end);
    return Math.max(start1, start2) <= Math.min(end1, end2);
}
/**
 * Inverts the range of values.
 *
 * @param {IRange}  range  Range
 */
function invertRange(range) {
    var start = __WEBPACK_IMPORTED_MODULE_0__Type__["getValue"](range.start);
    var end = __WEBPACK_IMPORTED_MODULE_0__Type__["getValue"](range.end);
    return { start: 1 - end, end: 1 - start };
}
/**
 * Returns an intersection range between two ranges of values.
 *
 * @param  {IRange}  range1  Range 1
 * @param  {IRange}  range2  Range 2
 * @return {IRange}          Intersecting value range
 */
function intersection(range1, range2) {
    var start1 = __WEBPACK_IMPORTED_MODULE_0__Type__["getValue"](range1.start);
    var start2 = __WEBPACK_IMPORTED_MODULE_0__Type__["getValue"](range2.start);
    var end1 = __WEBPACK_IMPORTED_MODULE_0__Type__["getValue"](range1.end);
    var end2 = __WEBPACK_IMPORTED_MODULE_0__Type__["getValue"](range2.end);
    var startMax = Math.max(start1, start2);
    var endMin = Math.min(end1, end2);
    if (endMin < startMax) {
        return undefined;
    }
    else {
        return { start: startMax, end: endMin };
    }
}
/**
 * Returns pixel "distance" between two points.
 *
 * If second point is not specified, distance from {x:0, y:0} point is
 * calculated.
 *
 * @param  {IPoint}  point1  Point 1
 * @param  {IPoint}  point2  Point 2
 * @return {number}          Distance in relative pixels
 */
function getDistance(point1, point2) {
    if (!point2) {
        point2 = { x: 0, y: 0 };
    }
    return Math.sqrt(Math.pow(Math.abs(point1.x - point2.x), 2) + Math.pow(Math.abs(point1.y - point2.y), 2));
}
/**
 * Returns scale based on original and end position of the two points.
 *
 * @param  {IPoint}  point1       Current position of point 1
 * @param  {IPoint}  startPoint1  Start position of point 1
 * @param  {IPoint}  point2       Current position of point 1
 * @param  {IPoint}  startPoint2  Start position of point 2
 * @return {number}  Scale        Calculated scale
 */
function getScale(point1, startPoint1, point2, startPoint2) {
    var initialDistance = getDistance(startPoint1, startPoint2);
    var currentDistance = getDistance(point1, point2);
    return Math.abs(currentDistance / initialDistance);
}
/**
 * Returns an exact mid point between two points.
 *
 * @param  {IPoint}  point1     Position of point 1
 * @param  {IPoint}  point2     Position of point 2
 * @return {IPoint}  Mid point  Position of mid-point
 */
function getMidPoint(point1, point2, position) {
    if (!__WEBPACK_IMPORTED_MODULE_0__Type__["isNumber"](position)) {
        position = 0.5;
    }
    return {
        "x": (point1.x + (point2.x - point1.x) * position),
        "y": (point1.y + (point2.y - point1.y) * position)
    };
}
/**
 * Returns difference in angles between starting and ending position of two
 * vectors.
 *
 * @param  {IPoint}  point1       Current position of point 1
 * @param  {IPoint}  startPoint1  Start position of point 1
 * @param  {IPoint}  point2       Current position of point 1
 * @param  {IPoint}  startPoint2  Start position of point 2
 * @return {number}               Angle difference in degrees
 */
function getRotation(point1, startPoint1, point2, startPoint2) {
    // Get start and end angles
    var startAngle = getAngle(startPoint1, startPoint2);
    var angle = getAngle(point1, point2);
    // Calculate angle
    var diff = startAngle - angle;
    if (diff < 0) {
        diff += 360;
    }
    return diff;
}
/**
 * Calculates angle of the vector based on two or one point.
 *
 * @param  {IPoint}  point1  Point 1
 * @param  {IPoint}  point2  Point 2
 * @return {number}          Angle in degrees
 */
function getAngle(point1, point2) {
    if (!point2) {
        point2 = { x: point1.x * 2, y: point1.y * 2 };
    }
    var diffX = point2.x - point1.x;
    var diffY = point2.y - point1.y;
    var angle = Math.atan2(diffY, diffX) * DEGREES;
    if (angle < 0) {
        angle += 360;
    }
    return normalizeAngle(angle);
}
/**
 * Returns the shift in coordinates of the center when item is rotated, moved
 * and scaled at the same time.
 *
 * @param  {IPoint}  center       Current center
 * @param  {IPoint}  point1       Frst reference point
 * @param  {IPoint}  startPoint1  Original position of the first reference point
 * @param  {IPoint}  point2       Second reference point
 * @param  {IPoint}  startPoint2  Original position of the first reference point
 * @return {IPoint}               Shift in center point coordinates
 */
function getCenterShift(center, point1, startPoint1, point2, startPoint2) {
    // Get angle
    var angle = getRotation(point1, startPoint1, point2, startPoint2) - 90;
    if (angle < 0) {
        angle += 360;
    }
    // Get distance between new position
    var distance = getDistance(point1, point2);
    // Calculate new X
    var x = Math.cos(angle) / distance + point1.x;
    var y = Math.cos(angle) / distance + point1.y;
    var shift = {
        "x": x - center.x,
        "y": y - center.y
    };
    return shift;
}
/**
 * Converts an array of points into a bounding box rectangle.
 *
 * Array can contain any number of points.
 *
 * @param  {IPoint[]}              points  Points
 * @return {Optional<IRectangle>}          Bounding box rectangle
 */
function getBBox(points) {
    if (points) {
        var length_1 = points.length;
        if (length_1 !== 0) {
            var left = void 0;
            var right = void 0;
            var top_1;
            var bottom = void 0;
            for (var i = 0; i < length_1; i++) {
                var point = points[i];
                if (!__WEBPACK_IMPORTED_MODULE_0__Type__["isNumber"](right) || (point.x > right)) {
                    right = point.x;
                }
                if (!__WEBPACK_IMPORTED_MODULE_0__Type__["isNumber"](left) || (point.x < left)) {
                    left = point.x;
                }
                if (!__WEBPACK_IMPORTED_MODULE_0__Type__["isNumber"](top_1) || (point.y < top_1)) {
                    top_1 = point.y;
                }
                if (!__WEBPACK_IMPORTED_MODULE_0__Type__["isNumber"](bottom) || (point.y > bottom)) {
                    bottom = point.y;
                }
            }
            return { x: left, y: top_1, width: right - left, height: bottom - top_1 };
        }
    }
    return { x: 0, y: 0, width: 0, height: 0 };
}
/**
 * Returns a [[IRectangle]] object representing a common rectangle that fits
 * all passed in rectangles in it.
 *
 * @param {IRectangle[]}           rectangles  An array of rectangles
 * @return {Optional<IRectangle>}              Common rectangle
 */
function getCommonRectangle(rectangles) {
    var length = rectangles.length;
    if (length !== 0) {
        var minX = void 0;
        var minY = void 0;
        var maxX = void 0;
        var maxY = void 0;
        for (var i = 0; i < length; i++) {
            var rectangle = rectangles[i];
            minX = min(rectangle.x, minX);
            minY = min(rectangle.y, minY);
            maxX = max(rectangle.x + rectangle.width, maxX);
            maxY = max(rectangle.y + rectangle.height, maxY);
        }
        return { x: minX, y: minY, width: maxX - minX, height: maxY - minY };
    }
}
/**
 * [getPointOnQuadraticCurve description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {IPoint}  pointA        [description]
 * @param  {IPoint}  pointB        [description]
 * @param  {IPoint}  controlPoint  [description]
 * @param  {number}  position      [description]
 * @return {IPoint}                [description]
 */
function getPointOnQuadraticCurve(pointA, pointB, controlPoint, position) {
    var x = (1 - position) * (1 - position) * pointA.x + 2 * (1 - position) * position * controlPoint.x + position * position * pointB.x;
    var y = (1 - position) * (1 - position) * pointA.y + 2 * (1 - position) * position * controlPoint.y + position * position * pointB.y;
    return { x: x, y: y };
}
/**
 * [getPointOnCubicCurve description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {IPoint}  pointA         [description]
 * @param  {IPoint}  pointB         [description]
 * @param  {IPoint}  controlPointA  [description]
 * @param  {IPoint}  controlPointB  [description]
 * @param  {number}  position       [description]
 * @return {IPoint}                 [description]
 */
function getPointOnCubicCurve(pointA, pointB, controlPointA, controlPointB, position) {
    var point = { x: 0, y: 0 };
    var mt1 = 1 - position;
    var mt2 = mt1 * mt1;
    var mt3 = mt2 * mt1;
    point.x = pointA.x * mt3 + controlPointA.x * 3 * mt2 * position + controlPointB.x * 3 * mt1 * position * position + pointB.x * position * position * position;
    point.y = pointA.y * mt3 + controlPointA.y * 3 * mt2 * position + controlPointB.y * 3 * mt1 * position * position + pointB.y * position * position * position;
    return point;
}
/**
 * [getCubicControlPointA description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {IPoint}  p0        [description]
 * @param  {IPoint}  p1        [description]
 * @param  {IPoint}  p2        [description]
 * @param  {IPoint}  p3        [description]
 * @param  {number}  tensionX  [description]
 * @param  {number}  tensionY  [description]
 * @return {IPoint}            [description]
 */
function getCubicControlPointA(p0, p1, p2, p3, tensionX, tensionY) {
    tensionX = adjustTension(tensionX);
    tensionY = adjustTension(tensionY);
    return { x: ((-p0.x + p1.x / tensionX + p2.x) * tensionX), y: ((-p0.y + p1.y / tensionY + p2.y) * tensionY) };
}
/**
 * [getCubicControlPointB description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {IPoint}  p0        [description]
 * @param  {IPoint}  p1        [description]
 * @param  {IPoint}  p2        [description]
 * @param  {IPoint}  p3        [description]
 * @param  {number}  tensionX  [description]
 * @param  {number}  tensionY  [description]
 * @return {IPoint}            [description]
 */
function getCubicControlPointB(p0, p1, p2, p3, tensionX, tensionY) {
    tensionX = adjustTension(tensionX);
    tensionY = adjustTension(tensionY);
    return { x: ((p1.x + p2.x / tensionX - p3.x) * tensionX), y: ((p1.y + p2.y / tensionY - p3.y) * tensionY) };
}
/**
 * [adjustTension description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {number}  tension  [description]
 * @return {number}           [description]
 */
function adjustTension(tension) {
    return 1 - tension + 0.00001;
}
/**
 * [normalizeAngle description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {number}  value  [description]
 * @return {number}         [description]
 */
function normalizeAngle(value) {
    if (value == 360) {
        return 360;
    }
    return value % 360;
}
/**
 * [normalizeAngleToRange description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @todo review this with various angles, can be tested on radar chart with custom start/end angles
 * @param {number}   value       [description]
 * @param {number}   startAngle  [description]
 * @param {number}   endAngle    [description]
 * @return {number}              [description]
 */
function fitAngleToRange(value, startAngle, endAngle) {
    if (startAngle > endAngle) {
        var temp = startAngle;
        startAngle = endAngle;
        endAngle = temp;
    }
    value = normalizeAngle(value);
    var count = (startAngle - normalizeAngle(startAngle)) / 360;
    if (value < startAngle) {
        value += 360 * (count + 1);
    }
    var maxEnd = startAngle + (endAngle - startAngle) / 2 + 180;
    var maxStart = startAngle + (endAngle - startAngle) / 2 - 180;
    if (value > endAngle) {
        if (value - 360 > startAngle) {
            value -= 360;
        }
        else {
            if (value < maxEnd) {
                value = endAngle;
            }
            else {
                value = startAngle;
            }
        }
    }
    if (value < startAngle) {
        if (value > maxStart) {
            value = startAngle;
        }
        else {
            value = endAngle;
        }
    }
    return value;
}
/**
 * Returns [[IRectangle]] of an arc in relative values, assuming that the
 * center is at the circle center.
 *
 * Used to find out max radius of an arc.
 *
 * @ignore Exclude from docs
 * @param  {number}      startAngle  Start angle
 * @param  {number}      endAngle    End angle
 * @param  {number}      radius    	 Relative radius
 * @return {IRectangle}              Rectangle
 */
function getArcRect(startAngle, endAngle, radius) {
    // do not normalize here!
    //startAngle = normalizeAngle(startAngle);
    //endAngle = normalizeAngle(endAngle);
    if (!__WEBPACK_IMPORTED_MODULE_0__Type__["isNumber"](radius)) {
        radius = 1;
    }
    if (startAngle == endAngle) {
        endAngle += 360;
    }
    if (startAngle > endAngle) {
        var temp = endAngle;
        endAngle = startAngle;
        startAngle = temp;
    }
    var minX;
    var maxX;
    var minY;
    var maxY;
    for (var angle = startAngle; angle < endAngle; angle += 0.1) {
        minX = min(cos(angle) * radius, minX);
        maxX = max(cos(angle) * radius, maxX);
        minY = min(sin(angle) * radius, minY);
        maxY = max(sin(angle) * radius, maxY);
    }
    return { x: minX, y: minY, width: (maxX - minX), height: (maxY - minY) };
}
/**
 * Returns true if a point is within rectangle
 *
 * @param  {IPoint}      point
 * @param  {IRectangle}  rectangle
 * @return {boolean}
 */
function isInRectangle(point, rectangle) {
    if (point.x >= rectangle.x && point.x <= rectangle.x + rectangle.width && point.y > rectangle.y && point.y < rectangle.y + rectangle.height) {
        return true;
    }
    return false;
}
function getLineIntersection(pointA1, pointA2, pointB1, pointB2) {
    var x = ((pointA1.x * pointA2.y - pointA2.x * pointA1.y) * (pointB1.x - pointB2.x) - (pointA1.x - pointA2.x) * (pointB1.x * pointB2.y - pointB1.y * pointB2.x)) / ((pointA1.x - pointA2.x) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x - pointB2.x));
    var y = ((pointA1.x * pointA2.y - pointA2.x * pointA1.y) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x * pointB2.y - pointB1.y * pointB2.x)) / ((pointA1.x - pointA2.x) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x - pointB2.x));
    return { x: x, y: y };
}
//# sourceMappingURL=Math.js.map

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["fromArray"] = fromArray;
/* harmony export (immutable) */ __webpack_exports__["length"] = length;
/* harmony export (immutable) */ __webpack_exports__["toArray"] = toArray;
/* harmony export (immutable) */ __webpack_exports__["eachContinue"] = eachContinue;
/* harmony export (immutable) */ __webpack_exports__["each"] = each;
/* harmony export (immutable) */ __webpack_exports__["sort"] = sort;
/* harmony export (immutable) */ __webpack_exports__["map"] = map;
/* harmony export (immutable) */ __webpack_exports__["filter"] = filter;
/* harmony export (immutable) */ __webpack_exports__["concat"] = concat;
/* harmony export (immutable) */ __webpack_exports__["flatten"] = flatten;
/* harmony export (immutable) */ __webpack_exports__["indexed"] = indexed;
/* harmony export (immutable) */ __webpack_exports__["findIndex"] = findIndex;
/* harmony export (immutable) */ __webpack_exports__["find"] = find;
/* harmony export (immutable) */ __webpack_exports__["findMap"] = findMap;
/* harmony export (immutable) */ __webpack_exports__["contains"] = contains;
/* harmony export (immutable) */ __webpack_exports__["foldl"] = foldl;
/* harmony export (immutable) */ __webpack_exports__["min"] = min;
/* harmony export (immutable) */ __webpack_exports__["max"] = max;
/* harmony export (immutable) */ __webpack_exports__["join"] = join;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListIterator", function() { return ListIterator; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Array__ = __webpack_require__(12);

/**
 * @ignore Exclude from docs
 * @todo Description
 */
function fromArray(array) {
    return function (push) {
        var length = array.length;
        for (var i = 0; i < length; ++i) {
            if (!push(array[i])) {
                break;
            }
        }
    };
}
/**
 * @ignore Exclude from docs
 * @todo Description
 */
function length(iter) {
    var sum = 0;
    iter(function (_) {
        ++sum;
        return true;
    });
    return sum;
}
/**
 * @ignore Exclude from docs
 * @todo Description
 */
function toArray(iter) {
    var output = [];
    iter(function (value) {
        output.push(value);
        return true;
    });
    return output;
}
/**
 * [iter description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @type {Iterator<A>}
 */
function eachContinue(iter, fn) {
    return iter(fn);
}
/**
 * [iter description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @type {Iterator<A>}
 */
function each(iter, fn) {
    return iter(function (value) {
        fn(value);
        return true;
    });
}
/**
 * [iter description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @type {Iterator<A>}
 */
function sort(iter, fn) {
    return fromArray(toArray(iter).sort(fn));
}
/**
 * [A description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @type {[type]}
 */
function map(iter, fn) {
    return function (push) { return iter(function (value) { return push(fn(value)); }); };
}
/**
 * [iter description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @type {Iterator<A>}
 */
function filter(iter, fn) {
    return function (push) { return iter(function (value) {
        if (fn(value)) {
            return push(value);
        }
        else {
            return true;
        }
    }); };
}
/**
 * @ignore Exclude from docs
 * @todo Description
 */
function concat() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return function (push) {
        var go = true;
        var push2 = function (value) { return (go = push(value)); };
        var length = args.length;
        for (var i = 0; i < length; ++i) {
            args[i](push2);
            if (!go) {
                break;
            }
        }
    };
}
/**
 * @ignore Exclude from docs
 * @todo Description
 */
function flatten(iter) {
    return function (push) {
        var go = true;
        var push2 = function (value) { return (go = push(value)); };
        return iter(function (value) {
            value(push2);
            return go;
        });
    };
}
/**
 * [number description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @type {[type]}
 */
function indexed(iter) {
    return function (push) {
        var index = 0;
        return iter(function (value) { return push([index++, value]); });
    };
}
/**
 * [iter description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @type {Iterator<A>}
 */
function findIndex(iter, matches) {
    var found = false;
    var i = 0;
    iter(function (value) {
        if (matches(value)) {
            found = true;
            return false;
        }
        else {
            ++i;
            return true;
        }
    });
    return (found ? i : -1);
}
/**
 * [iter description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @type {Iterator<A>}
 */
function find(iter, matches) {
    var output;
    iter(function (value) {
        if (matches(value)) {
            output = value;
            return false;
        }
        else {
            return true;
        }
    });
    return output;
}
/**
 * [A description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @type {[type]}
 */
function findMap(iter, matches) {
    var output;
    iter(function (value) {
        var v = matches(value);
        if (v !== null) {
            output = v;
            return false;
        }
        else {
            return true;
        }
    });
    return output;
}
/**
 * [iter description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @type {Iterator<A>}
 */
function contains(iter, matches) {
    var output = false;
    iter(function (value) {
        if (matches(value)) {
            output = true;
            return false;
        }
        else {
            return true;
        }
    });
    return output;
}
/**
 * [A description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @type {[type]}
 */
function foldl(iter, init, fn) {
    iter(function (value) {
        init = fn(init, value);
        return true;
    });
    return init;
}
/**
 * [min2 description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {number |     null}        left [description]
 * @param  {number}    right [description]
 * @return {number}          [description]
 */
function min2(left, right) {
    if (left == null || right < left) {
        return right;
    }
    else {
        return left;
    }
}
/**
 * [min description]
 *
 * @ignore Exclude from docs
 * @todo Verify that this works correctly
 * @todo Description
 * @param  {Iterator<number>} a [description]
 * @return {number}             [description]
 */
function min(a) {
    return foldl(a, null, min2);
}
/**
 * [max2 description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {number |     null}        left [description]
 * @param  {number}    right [description]
 * @return {number}          [description]
 */
function max2(left, right) {
    if (left == null || right > left) {
        return right;
    }
    else {
        return left;
    }
}
/**
 * [max description]
 *
 * @ignore Exclude from docs
 * @todo Verify that this works correctly
 * @todo Description
 * @param  {Iterator<number>} a [description]
 * @return {number}             [description]
 */
function max(a) {
    return foldl(a, null, max2);
}
/**
 * [join description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {Iterator<string>} iter [description]
 * @param  {string        =    ""}          separator [description]
 * @return {string}                [description]
 */
function join(iter, separator) {
    if (separator === void 0) { separator = ""; }
    var first = true;
    var init = "";
    iter(function (value) {
        if (first) {
            first = false;
        }
        else {
            init += separator;
        }
        init += value;
        return true;
    });
    return init;
}
/**
 * @ignore Exclude from docs
 * @todo Description
 */
var ListIterator = /** @class */ (function () {
    /**
     * Constructor
     *
     * @param {Iterable<T>} list [description]
     * @param {()       =>   T}           create [description]
     */
    function ListIterator(list, create) {
        // flag specifies if iterator should create new list item if it is reqested for a nextItem but there is no more left in the list
        this.createNewItems = false;
        this.list = list;
        this._create = create;
        this.reset();
    }
    ListIterator.prototype.reset = function () {
        this._listCopy = toArray(this.list.iterator());
    };
    ListIterator.prototype.clear = function () {
        this._listCopy.length = 0;
    };
    ListIterator.prototype.getFirst = function () {
        return this.returnItem(0);
    };
    ListIterator.prototype.getLast = function () {
        return this.returnItem(this._listCopy.length - 1);
    };
    ListIterator.prototype.find = function (fn) {
        var index = __WEBPACK_IMPORTED_MODULE_0__Array__["e" /* findIndex */](this._listCopy, fn);
        if (index !== -1) {
            var item = this._listCopy[index];
            // TODO use removeIndex instead ?
            __WEBPACK_IMPORTED_MODULE_0__Array__["k" /* remove */](this._listCopy, item);
            return item;
        }
        else {
            return this.getLast();
        }
    };
    ListIterator.prototype.removeItem = function (item) {
        return __WEBPACK_IMPORTED_MODULE_0__Array__["k" /* remove */](this._listCopy, item);
    };
    ListIterator.prototype.returnItem = function (index) {
        if (index >= 0 && index < this._listCopy.length) {
            var item = this._listCopy[index];
            // TODO use removeIndex instead ?
            __WEBPACK_IMPORTED_MODULE_0__Array__["k" /* remove */](this._listCopy, item);
            return item;
        }
        else if (this.createNewItems) {
            return this._create();
        }
    };
    ListIterator.prototype.iterator = function () {
        return fromArray(this._listCopy);
    };
    return ListIterator;
}());

//# sourceMappingURL=Iterator.js.map

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Container; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__SpriteState__ = __webpack_require__(70);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__elements_Rectangle__ = __webpack_require__(64);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_Array__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__utils_Type__ = __webpack_require__(1);
/**
 * Container module
 * @todo Needs description
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */











;
/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Container can contain multiple sprites and arrange them in various layouts.
 *
 * @see {@link IContainerEvents} for a list of available events
 * @see {@link IContainerAdapters} for a list of available Adapters
 * @important
 */
var Container = /** @class */ (function (_super) {
    __extends(Container, _super);
    /**
     * Constructor
     */
    function Container() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * Container children. (sorted by layout)
         *
         * @ignore Exclude from docs
         * @type {List<Sprite>}
         */
        _this._childrenByLayout = [];
        /**
         * Indicates if this container contains any focused elements, including
         * itself.
         *
         * @type {boolean}
         */
        _this.hasFocused = false;
        /**
         * Specifies if, when state is applied on this container, the same state should be applied to container's children
         * @type {boolean}
         */
        _this.setStateOnChildren = false;
        /*
         * @ignore
         */
        _this.layoutInvalid = false;
        _this._absoluteWidth = 0;
        _this._absoluteHeight = 0;
        _this.className = "Container";
        _this.element = _this.paper.addGroup("g");
        _this.pixelPerfect = false;
        _this._positionPrecision = 4;
        _this.group.add(_this.element);
        _this.layout = "absolute";
        _this._fixedWidthGrid = false;
        _this.verticalCenter = "none";
        _this.horizontalCenter = "none";
        _this.children.events.on("insert", _this.handleChildAdded, _this);
        _this.children.events.on("remove", _this.handleChildRemoved, _this);
        _this.applyTheme();
        return _this;
    }
    /**
     * Handles adding of a new child into `children`. Adding new children might
     * affect the whole layout so it needs to be revalidated.
     *
     * @ignore Exclude from docs
     * @param {IListEvents<Sprite>["insert"]} event Event object
     * @todo Throw an exception on adding a disposed object. Of course it's better NOT TO add disposed objects, so that what we should focus on.
     */
    Container.prototype.handleChildAdded = function (event) {
        var child = event.newValue;
        // Do not add disposed objects
        if (child.isDisposed()) {
            console.log("Added to children a disposed object!");
            return;
        }
        if (this.element) {
            var group = this.element;
            group.add(child.group);
        }
        // TODO this is hacky
        if (!__WEBPACK_IMPORTED_MODULE_10__utils_Type__["hasValue"](child._childAddedDisposer)) {
            // it's not enough to listen to POSITION_CHANGED only, as some extra redrawals will happen.
            child._childAddedDisposer = child.events.on("transformed", this.handleChildTransform, this);
            //@todo: temporary commenting this because of error it causes when I add contents Container in AxisRange constructor. this._disposers.push((<any>child)._childAddedDisposer);
        }
        this.invalidate();
        this.invalidateLayout();
    };
    /**
     * Handles child removal. Changing size of the child may change the
     * whole layout of the Container, hence layout needs to be invalidated.
     *
     * @ignore Exclude from docs
     * @param {IListEvents<Sprite>["remove"]} event Event object
     */
    Container.prototype.handleChildRemoved = function (event) {
        var child = event.oldValue;
        // TODO figure out why this is sometimes undefined
        // TODO this is hacky
        if (__WEBPACK_IMPORTED_MODULE_10__utils_Type__["hasValue"](child._childAddedDisposer)) {
            this.removeDispose(child._childAddedDisposer);
            //(<any>child)._childAddedDisposer.dispose();
            delete child._childAddedDisposer;
        }
        if (this.element) {
            var group = this.element;
            group.removeElement(child.group);
        }
        if (child.isMeasured) {
            this.invalidateLayout();
        }
    };
    /**
     * Handles child transformation. Changing size of the child may change the
     * whole layout of the Container, hence layout needs to be invalidated.
     *
     * @ignore Exclude from docs
     * @param {AMEvent<Sprite, ISpriteEvents>["transformed"]} event Event object
     */
    Container.prototype.handleChildTransform = function (event) {
        var child = event.target;
        if (child.isMeasured) {
            this.invalidateLayout();
        }
    };
    /**
     * Invalidates Container's layout, causing it to be re-evaluated again.
     *
     * @ignore Exclude from docs
     */
    Container.prototype.invalidateLayout = function () {
        if (this.disabled || this.isTemplate || this.layout == "none") {
            return;
        }
        //this.validateLayout();
        if (!this.layoutInvalid) {
            this.layoutInvalid = true;
            __WEBPACK_IMPORTED_MODULE_8__utils_Array__["a" /* add */](__WEBPACK_IMPORTED_MODULE_5__Registry__["b" /* registry */].invalidLayouts, this);
        }
    };
    /**
     * Invalidates the whole element, including layout.
     *
     * @ignore Exclude from docs
     */
    Container.prototype.invalidate = function () {
        _super.prototype.invalidate.call(this);
        this.sortChildren();
        __WEBPACK_IMPORTED_MODULE_8__utils_Array__["c" /* each */](this._childrenByLayout, function (child) {
            if (child.invalid) {
                child.invalidate(); // this sorts invalid components in correct order
            }
        });
        this.invalidateLayout();
    };
    /**
     * Invalidates the whole element, including layout AND all its child
     * elements.
     *
     * @ignore Exclude from docs
     */
    Container.prototype.deepInvalidate = function () {
        _super.prototype.invalidate.call(this);
        this.sortChildren();
        __WEBPACK_IMPORTED_MODULE_8__utils_Array__["c" /* each */](this._childrenByLayout, function (child) {
            if (child instanceof Container) {
                child.deepInvalidate();
            }
            else {
                child.invalidate();
            }
        });
        this.invalidateLayout();
    };
    /**
     * Appends `<defs>` section to the element. This section holds all the SVG
     * definitions for the element, such as filters.
     *
     * @ignore Exclude from docs
     */
    Container.prototype.appendDefs = function () {
        _super.prototype.appendDefs.call(this);
        __WEBPACK_IMPORTED_MODULE_8__utils_Array__["c" /* each */](this._childrenByLayout, function (child) {
            if (child instanceof Container) {
                child.appendDefs();
            }
            else {
                child.appendDefs();
            }
        });
    };
    Object.defineProperty(Container.prototype, "children", {
        /**
         * Returns a list of the child [[Sprite]] elements contained in this
         * Container.
         *
         * @return {List<Sprite>} List of child elements (Sprites)
         */
        get: function () {
            var _this = this;
            // @todo Review if we can add all children to disposers
            if (!this._children) {
                this._children = new __WEBPACK_IMPORTED_MODULE_2__utils_List__["b" /* List */]();
                this._children.events.on("insert", function (event) {
                    _this.dispatchImmediately("childadded", { type: "childadded", newValue: event.newValue });
                });
                this._children.events.on("insert", function (event) {
                    _this.dispatchImmediately("childremoved", { type: "childremoved", newValue: event.newValue });
                });
                //this._disposers.push(new ListDisposer(this._children));
            }
            return this._children;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "minWidth", {
        /**
         * Retruns current minimum width. (px)
         *
         * @return {Optional<number>} Width (px)
         */
        get: function () {
            return this.getPropertyValue("minWidth");
        },
        /**
         * Sets minimum width (px) for the Container. A container will not
         * auto-shrink beyond this value, even if child elements are smaller.
         *
         * @param {Optional<number>} value Width (px)
         */
        set: function (value) {
            if (this.setPropertyValue("minWidth", value)) {
                this.invalidateLayout();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "minHeight", {
        /**
         * Retruns current minimum height. (px)
         *
         * @return {Optional<number>} Height (px)
         */
        get: function () {
            return this.getPropertyValue("minHeight");
        },
        /**
         * Sets minimum height (px) for the Container. A container will not
         * auto-shrink beyond this value, even if child elements are smaller.
         * @param {Optional<number>} value Height (px)
         */
        set: function (value) {
            if (this.setPropertyValue("minHeight", value)) {
                this.invalidateLayout();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "maxWidth", {
        /**
         * Retruns current maximum width. (px)
         *
         * @return {Optional<number>} Width (px)
         */
        get: function () {
            var maxWidth = this.getPropertyValue("maxWidth");
            if (!__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](maxWidth)) {
                if (this.parent) {
                    return this.parent.maxWidth; // used to be pixelWidth, but this causes problems
                }
            }
            return maxWidth;
        },
        /**
         * Sets maximum width (px) for the Container. A container will not
         * grow beyond this value, even if child elements do not fit.
         *
         * @param {Optional<number>} value Width (px)
         */
        set: function (value) {
            if (this.setPropertyValue("maxWidth", value)) {
                if (__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](this.relativeWidth)) {
                    this.invalidateLayout();
                }
                this.dispatchImmediately("maxsizechanged");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "maxHeight", {
        /**
         * Retruns current maximum height. (px)
         *
         * @return {Optional<number>} Height (px)
         */
        get: function () {
            var maxHeight = this.getPropertyValue("maxHeight");
            if (!__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](maxHeight)) {
                if (this.parent) {
                    return this.parent.maxHeight; // used to be pixelHeight, but this causes problems
                }
            }
            return maxHeight;
        },
        /**
         * Sets maximum height (px) for the Container. A container will not
         * grow beyond this value, even if child elements do not fit.
         *
         * @param {Optional<number>} value Height (px)
         */
        set: function (value) {
            if (this.setPropertyValue("maxHeight", value)) {
                if (__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](this.relativeHeight)) {
                    this.invalidateLayout();
                }
                this.dispatchImmediately("maxsizechanged");
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Initiates drawing of this element.
     *
     * @ignore Exclude from docs
     */
    Container.prototype.draw = function () {
        //this.validateLayout();
        this.addChildren();
        _super.prototype.draw.call(this);
    };
    /**
     * Overrides the original `removeElement` so that Container's actual element
     * is not removed. We do not need to remove element of a Container.
     *
     * We do this because remove element each time will fail the `getBBox`.
     *
     * @ignore Exclude from docs
     */
    Container.prototype.removeElement = function () {
    };
    /**
     * Sorts Container's children: the ones with variable width and height are
     * put at the end of the list (depending on layout type), so that fixed-width
     * ones can be drawn first.
     *
     * @ignore Exclude from docs
     * @param {Sprite[]}  children  Container's children (elements)
     */
    Container.prototype.sortChildren = function (children) {
        var _this = this;
        if (children) {
            var length_1 = children.length;
            for (var i = 0; i < length_1; ++i) {
                var child = children[i];
                // TODO don't do anything if the indexes are the same ?
                if (this.children.indexOf(child) != -1) {
                    this.children.moveValue(child, i);
                }
            }
        }
        this._childrenByLayout = [];
        if (this.layout == "none" || this.layout == "absolute" || !this.layout) {
            __WEBPACK_IMPORTED_MODULE_7__utils_Iterator__["each"](this.children.iterator(), function (child) {
                _this._childrenByLayout.push(child);
            });
        }
        else {
            // Assemble fixed-size and relative lists
            var fixed_1 = [];
            var relative_1 = [];
            __WEBPACK_IMPORTED_MODULE_7__utils_Iterator__["each"](this.children.iterator(), function (child) {
                if (_this.layout == "horizontal" || _this.layout == "grid") {
                    if (!__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](child.percentWidth)) {
                        fixed_1.push(child);
                    }
                    else {
                        relative_1.push(child);
                    }
                }
                else if (_this.layout == "vertical") {
                    if (!__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](child.percentHeight)) {
                        fixed_1.push(child);
                    }
                    else {
                        relative_1.push(child);
                    }
                }
                else {
                    fixed_1.push(child);
                }
            });
            // Concat everything into list
            this._childrenByLayout = fixed_1.concat(relative_1);
        }
        this.calculateRelativeSize();
    };
    /**
     * Calculates relative sizes for all Container's children.
     *
     * @ignore Exclude from docs
     * @todo Make it protected?
     */
    Container.prototype.calculateRelativeSize = function () {
        var _this = this;
        var totalRelativeWidth = 0;
        var totalRelativeHeight = 0;
        __WEBPACK_IMPORTED_MODULE_8__utils_Array__["c" /* each */](this._childrenByLayout, function (child) {
            // if child is not measured, we do not care about it at all.
            if (child.isMeasured) {
                if (__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](child.percentWidth)) {
                    totalRelativeWidth += child.percentWidth;
                }
                if (__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](child.percentHeight)) {
                    totalRelativeHeight += child.percentHeight;
                }
            }
        });
        __WEBPACK_IMPORTED_MODULE_8__utils_Array__["c" /* each */](this._childrenByLayout, function (child) {
            if (child.isMeasured) {
                if (_this.layout == "horizontal") {
                    if (__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](child.percentWidth)) {
                        child.relativeWidth = child.percentWidth / totalRelativeWidth;
                    }
                    if (__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](child.percentHeight)) {
                        // consider adding a property which would make the container of 100% when it's height is set to % value but there is only one object with percent width set in the parent container
                        child.relativeHeight = child.percentHeight / 100;
                    }
                }
                if (_this.layout == "vertical") {
                    if (__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](child.percentHeight)) {
                        child.relativeHeight = child.percentHeight / totalRelativeHeight;
                    }
                    if (__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](child.percentWidth)) {
                        // consider adding a property which would make the container of 100% when it's height is set to % value but there is only one object with percent width set in the parent container
                        child.relativeWidth = child.percentWidth / 100;
                    }
                }
            }
            if (_this.layout == "absolute" || !child.isMeasured) {
                if (__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](child.percentWidth)) {
                    // consider adding a property which would make the container of 100% when it's height is set to % value but there is only one object with percent width set in the parent container
                    child.relativeWidth = child.percentWidth / 100;
                }
                if (__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](child.percentHeight)) {
                    // consider adding a property which would make the container of 100% when it's height is set to % value but there is only one object with percent width set in the parent container
                    child.relativeHeight = child.percentHeight / 100;
                }
            }
        });
    };
    /**
     * Adds all children to Container's SVG element.
     *
     * @ignore Exclude from docs
     * @todo Make it protected?
     */
    Container.prototype.addChildren = function () {
        var _this = this;
        this.sortChildren();
        // add it to parent
        if (this.element) {
            var zindexed = __WEBPACK_IMPORTED_MODULE_8__utils_Array__["b" /* copy */](this._childrenByLayout);
            zindexed.sort(function (a, b) {
                return (a.zIndex || 0) - (b.zIndex || 0);
            });
            __WEBPACK_IMPORTED_MODULE_8__utils_Array__["c" /* each */](zindexed, function (child) {
                if (child.group) {
                    var group = _this.element;
                    group.add(child.group);
                }
            });
        }
    };
    /**
     * Creates a new element of specific type and assigns as a child to the
     * Container.
     *
     * @param  {T extends Sprite}  Class type for the new element
     * @return {T}                 New element
     */
    Container.prototype.createChild = function (classType) {
        var sprite = new classType();
        sprite.parent = this;
        return sprite;
    };
    /**
     * Removes all Container's children without actually destroying them.
     *
     * To destroy children use `disposeChildren()` instead.
     */
    Container.prototype.removeChildren = function () {
        // remove all children
        // TODO use iteration instead
        while (this.children.length > 0) {
            var child = this.children.getIndex(0);
            child.parent = undefined;
            this.children.removeValue(child);
        }
    };
    /**
     * Removes and destroys all Container's children.
     *
     * To remove children from Container without destroying them, use
     * `removeChildren()`.
     */
    Container.prototype.disposeChildren = function () {
        // TODO use iteration instead
        while (this.children.length > 0) {
            var child = this.children.getIndex(0);
            child.dispose();
            this.children.removeValue(child);
        }
    };
    Object.defineProperty(Container.prototype, "background", {
        /**
         * @return {Sprite} Background element
         */
        get: function () {
            if (!this._background) {
                this._background = this.createBackground();
                this.processBackground();
            }
            return this._background;
        },
        /**
         * An element to use as container background.
         *
         * @param {Sprite}  background  Background element
         */
        set: function (background) {
            if (this._background && this.background != background) {
                this.removeDispose(this._background);
            }
            if (background) {
                this._background = background;
                this._disposers.push(background);
                this.processBackground();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates and returns a [[Rectangle]] to use as a background for Container.
     *
     * @ignore Exclude from docs
     * @return {this} Background Rectangle element
     */
    Container.prototype.createBackground = function () {
        return new __WEBPACK_IMPORTED_MODULE_3__elements_Rectangle__["a" /* Rectangle */]();
    };
    /**
     * Decorates background element with required properties.
     *
     * @ignore Exclude from docs
     */
    Container.prototype.processBackground = function () {
        var background = this._background;
        if (background) {
            background.isMeasured = false;
            this._background.fill = new __WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]().getFor("background");
            background.parent = this;
            background.isMeasured = false;
            this.children.removeValue(background);
            this._disposers.push(background);
        }
    };
    /**
     * Measures the size of container and informs its children of how much size
     * they can occupy, by setting their relative `maxWidth` and `maxHeight`
     * properties.
     *
     * @ignore Exclude from docs
     */
    Container.prototype.validateLayout = function () {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_8__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_5__Registry__["b" /* registry */].invalidLayouts, this);
        this.layoutInvalid = false;
        this._availableWidth = this.innerWidth;
        this._availableHeight = this.innerHeight;
        var measuredWidth = 0;
        var measuredHeight = 0;
        var allValid = true;
        if (this.children) {
            this.sortChildren();
            // we itterate through list of children, sorted by layout priority. sprites which width non-relative width/height will go first, so we will reduce available width before proceeding to sprites with relative width/height
            __WEBPACK_IMPORTED_MODULE_8__utils_Array__["c" /* each */](this._childrenByLayout, function (child) {
                var maxWidth;
                var maxHeight;
                if (__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](child.relativeWidth)) {
                    maxWidth = __WEBPACK_IMPORTED_MODULE_9__utils_Math__["round"](_this._availableWidth * child.relativeWidth);
                    if (_this.layout == "horizontal") { // || this.layout == "absolute") { 
                        maxWidth -= child.pixelMarginRight + child.pixelMarginLeft;
                    }
                }
                else {
                    if (_this.layout == "horizontal") {
                        if (child.invalid) {
                            child.validate();
                        }
                    }
                }
                if (__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](child.relativeHeight)) {
                    maxHeight = __WEBPACK_IMPORTED_MODULE_9__utils_Math__["round"](_this._availableHeight * child.relativeHeight);
                    if (_this.layout == "vertical") { //  || this.layout == "absolute") { 
                        maxHeight -= child.pixelMarginTop + child.pixelMarginBottom;
                    }
                }
                else {
                    if (_this.layout == "vertical") {
                        if (child.invalid) {
                            child.validate();
                        }
                    }
                }
                // if child is valid
                if (child.invalid == false) {
                    if (__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](child.relativeWidth)) {
                        child.maxWidth = maxWidth;
                    }
                    if (__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](child.relativeHeight)) {
                        child.maxHeight = maxHeight;
                    }
                    if (child.isMeasured) {
                        // reduce available width if this is horizontal layout
                        if (_this.layout == "horizontal") {
                            if (!__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](child.percentWidth)) {
                                if (child.measuredWidth > 0) {
                                    _this._availableWidth -= child.measuredWidth + child.pixelMarginLeft + child.pixelMarginRight;
                                }
                            }
                        }
                        // reduce available height if this is vertical layout
                        if (_this.layout == "vertical") {
                            if (!__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](child.percentHeight)) {
                                if (child.measuredHeight > 0) {
                                    _this._availableHeight -= child.measuredHeight + child.pixelMarginTop + child.pixelMarginBottom;
                                }
                            }
                        }
                        var childMeasuredWidth = child.measuredWidth;
                        var childMeasuredHeight = child.measuredHeight;
                        if (child.align != "none") {
                            childMeasuredWidth += child.pixelMarginLeft + child.pixelMarginRight;
                        }
                        if (child.valign != "none") {
                            childMeasuredHeight += child.pixelMarginTop + child.pixelMarginBottom;
                        }
                        measuredWidth = Math.max(measuredWidth, childMeasuredWidth);
                        measuredHeight = Math.max(measuredHeight, childMeasuredHeight);
                    }
                }
                // if child is not valid
                else {
                    // tell child what maximum width/ height it can occupy
                    if (child.isMeasured) {
                        if (__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](child.relativeWidth)) {
                            if (child.maxWidth != maxWidth) { // need to check this because of allValid
                                child.maxWidth = maxWidth;
                                allValid = false;
                            }
                        }
                        if (__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](child.relativeHeight)) {
                            if (child.maxHeight != maxHeight) { // need to check this because of allValid
                                child.maxHeight = maxHeight;
                                allValid = false;
                            }
                        }
                    }
                }
            });
        }
        this._absoluteWidth = measuredWidth;
        this._absoluteHeight = measuredHeight;
        // arrange after measuring, only if all children are valid already
        if (allValid) {
            this.arrange();
        }
    };
    /**
     * Arranges children according to layout specs and available space / child
     * sizes.
     *
     * @ignore Exclude from docs
     */
    Container.prototype.arrange = function () {
        var _this = this;
        if (this.children) {
            /*
               in this method we not only arrange children but also find out the size of the container
               it might seem it would be easier to get container size using sprite's measure method,
               however it would return only actual size of the bbox. However as each child meight have
               margins set, we need to check each child - we do it here.

               This method doesn't do anything with DOM, so it's not expensive
            */
            var measuredWidth = 0;
            var measuredHeight = 0;
            //let innerWidth: number = this.innerWidth; //$math.max(this.innerWidth, this._measuredWidth - paddingLeft - paddingRight);
            //let innerHeight: number = this.innerHeight; //$math.max(this.innerHeight, this._measuredHeight - paddingTop - paddingBottom);
            // above is wrong, as if a w/h is not specified, it is 0 and alignment doesn't work at all.
            var innerWidth_1 = __WEBPACK_IMPORTED_MODULE_9__utils_Math__["max"](this.innerWidth, this._absoluteWidth);
            var innerHeight_1 = __WEBPACK_IMPORTED_MODULE_9__utils_Math__["max"](this.innerHeight, this._absoluteHeight);
            var left = void 0; // = 0;
            var right = void 0; // = innerWidth;
            var top_1; // = 0;
            var bottom = void 0; // = innerHeight;
            var paddingLeft = this.pixelPaddingLeft;
            var paddingRight = this.pixelPaddingRight;
            var paddingTop = this.pixelPaddingTop;
            var paddingBottom = this.pixelPaddingBottom;
            var nextX = 0;
            var nextY = 0;
            var row = 0;
            var column = 0;
            var columnWidth = [];
            var rowHeight = [];
            var maxCellWidth = void 0;
            var minCellWidth = void 0;
            var columnCount = void 0;
            // GRID PRECALCULATIONS
            if (this.layout == "grid") {
                minCellWidth = __WEBPACK_IMPORTED_MODULE_9__utils_Math__["fitToRange"](__WEBPACK_IMPORTED_MODULE_7__utils_Iterator__["min"](__WEBPACK_IMPORTED_MODULE_7__utils_Iterator__["map"](this.children.iterator(), function (x) { return x.measuredWidth; })), 1, this.maxWidth);
                maxCellWidth = __WEBPACK_IMPORTED_MODULE_9__utils_Math__["fitToRange"](__WEBPACK_IMPORTED_MODULE_7__utils_Iterator__["max"](__WEBPACK_IMPORTED_MODULE_7__utils_Iterator__["map"](this.children.iterator(), function (x) { return x.measuredWidth; })), 1, this.maxWidth);
                if (this.fixedWidthGrid) {
                    columnCount = this.maxWidth / maxCellWidth;
                }
                else {
                    columnCount = this.maxWidth / minCellWidth; // predicted number of columns, yes it is usually much more than real number, but we fix that later
                }
                columnCount = __WEBPACK_IMPORTED_MODULE_9__utils_Math__["max"](1, Math.floor(columnCount));
                columnWidth = this.getColumnWidth(columnCount, maxCellWidth);
            }
            var contentLeft = void 0;
            var contentRight = void 0;
            var contentTop = void 0;
            var contentBottom = void 0;
            // we itterate through array of children
            // TODO use iterator instead
            for (var i = 0, len = this.children.length; i < len; i++) {
                var child = this.children.getIndex(i);
                var x = undefined; // must reset
                var y = undefined; // must reset
                var childMarginLeft = child.pixelMarginLeft;
                var childMarginRight = child.pixelMarginRight;
                var childMarginTop = child.pixelMarginTop;
                var childMarginBottom = child.pixelMarginBottom;
                var childWidth = child.measuredWidth;
                var childHeight = child.measuredHeight;
                var childLeft = void 0;
                var childRight = void 0;
                var childTop = void 0;
                var childBottom = void 0;
                if (child.isMeasured && !child.disabled && !child.__disabled) {
                    switch (this.layout) {
                        // absolute layout
                        case "absolute":
                            // horizontal alignment
                            switch (child.align) {
                                case "left":
                                    x = childMarginLeft - child.maxLeft;
                                    break;
                                case "center":
                                    x = (innerWidth_1 - childWidth) / 2 - child.maxLeft;
                                    break;
                                case "right":
                                    x = innerWidth_1 - childMarginRight - child.maxRight;
                                    break;
                                default:
                                    if (!(child.x instanceof __WEBPACK_IMPORTED_MODULE_4__utils_Percent__["a" /* Percent */])) {
                                        x = child.pixelX;
                                    }
                                    break;
                            }
                            // vertical alignment
                            switch (child.valign) {
                                case "top":
                                    y = childMarginTop - child.maxTop;
                                    break;
                                case "middle":
                                    y = (innerHeight_1 - childHeight) / 2 - child.maxTop;
                                    break;
                                case "bottom":
                                    y = innerHeight_1 - childMarginBottom - child.maxBottom;
                                    break;
                                default:
                                    if (!(child.y instanceof __WEBPACK_IMPORTED_MODULE_4__utils_Percent__["a" /* Percent */])) {
                                        y = child.pixelY;
                                    }
                                    break;
                            }
                            break;
                        // vertical layout
                        case "vertical":
                            //if ($type.isNumber(child.relativeHeight)) {
                            //	childHeight = child.maxHeight;
                            //}
                            switch (child.align) {
                                case "left":
                                    x = childMarginLeft - child.maxLeft;
                                    break;
                                case "center":
                                    x = (innerWidth_1 - childWidth) / 2 - child.maxLeft;
                                    break;
                                case "right":
                                    x = innerWidth_1 - childMarginRight - child.maxRight;
                                    break;
                                default:
                                    x = child.pixelX;
                                    break;
                            }
                            y = nextY + childMarginTop - child.maxTop;
                            nextY = y + child.maxBottom + childMarginBottom;
                            break;
                        // horizontal layout
                        case "horizontal":
                            //if ($type.isNumber(child.relativeHeight)) {
                            //	childHeight = child.maxHeight;
                            //}
                            switch (child.valign) {
                                case "top":
                                    y = childMarginTop - child.maxTop;
                                    break;
                                case "middle":
                                    y = (innerHeight_1 - childHeight) / 2 - child.maxTop;
                                    break;
                                case "bottom":
                                    y = innerHeight_1 - childMarginBottom - child.maxBottom;
                                    break;
                                default:
                                    y = child.pixelY;
                                    break;
                            }
                            x = nextX + childMarginLeft - child.maxLeft;
                            nextX = x + child.maxRight + childMarginRight;
                            break;
                        case "grid":
                            x = nextX + childMarginLeft - child.maxLeft;
                            switch (child.valign) {
                                case "top":
                                    y = nextY + childMarginTop - child.maxTop;
                                    break;
                                case "middle":
                                    y = nextY + (innerHeight_1 - childHeight) / 2 - child.maxTop;
                                    break;
                                case "bottom":
                                    y = nextY + innerHeight_1 - childMarginBottom - child.maxBottom;
                                    break;
                                default:
                                    y = nextY - child.maxTop;
                                    break;
                            }
                            nextX += columnWidth[column];
                            rowHeight[row] = __WEBPACK_IMPORTED_MODULE_9__utils_Math__["max"](rowHeight[row], childHeight);
                            column++;
                            var nextColumnWidth = columnWidth[column];
                            if (!__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](nextColumnWidth)) {
                                nextColumnWidth = maxCellWidth;
                            }
                            // here we reduce number of columns
                            if (nextX > __WEBPACK_IMPORTED_MODULE_9__utils_Math__["min"](this.innerWidth, this.maxWidth) - nextColumnWidth && column < columnCount) {
                                columnCount = column - 1; // cause we added one and we need current item to go to next row
                                nextX = 0;
                                nextY = 0;
                                row = 0;
                                column = 0;
                                columnWidth = this.getColumnWidth(columnCount, maxCellWidth);
                                rowHeight = [];
                                i = -1;
                                continue;
                            }
                            if (column >= columnCount) {
                                column = 0;
                                nextY += rowHeight[row];
                                row++;
                                nextX = 0;
                            }
                            break;
                    }
                    // NaN is handled by setter
                    child.moveTo({ x: x, y: y });
                    childLeft = x + child.maxLeft - childMarginLeft;
                    childRight = x + child.maxRight + childMarginRight;
                    childTop = y + child.maxTop - childMarginTop;
                    childBottom = y + child.maxBottom + childMarginBottom;
                    /* not good, maybe leave this for absolute layouts only
                                        if (child.align == "none") {
                                            childLeft += childMarginLeft;
                                            childRight -= childMarginRight;
                                        }
                    
                                        if (child.valign == "none") {
                                            childTop += childMarginTop;
                                            childBottom -= childMarginBottom;
                                        }
                    */
                    if (childRight > right || !__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](right)) {
                        right = childRight;
                    }
                    if (childLeft < left || !__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](left)) {
                        left = childLeft;
                    }
                    if (childTop < top_1 || !__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](top_1)) {
                        top_1 = childTop;
                    }
                    if (childBottom > bottom || !__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](bottom)) {
                        bottom = childBottom;
                    }
                    if (childRight > contentRight || !__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](contentRight)) {
                        contentRight = childRight;
                    }
                    if (childLeft < contentLeft || !__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](contentLeft)) {
                        contentLeft = childLeft;
                    }
                    if (childTop < contentTop || !__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](contentTop)) {
                        contentTop = childTop;
                    }
                    if (childBottom > contentBottom || !__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](contentBottom)) {
                        contentBottom = contentBottom;
                    }
                }
            }
            if (!__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](left)) {
                left = 0;
                contentLeft = 0;
            }
            if (!__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](right)) {
                right = this._availableWidth;
                contentRight = right;
            }
            if (!__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](top_1)) {
                top_1 = 0;
                contentTop = 0;
            }
            if (!__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](bottom)) {
                bottom = this._availableHeight;
                contentBottom = bottom;
            }
            if (!__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](contentTop)) {
                contentTop = 0;
            }
            if (!__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](contentBottom)) {
                contentBottom = contentTop;
            }
            if (!__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](contentLeft)) {
                contentLeft = 0;
            }
            if (!__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](contentRight)) {
                contentRight = contentLeft;
            }
            measuredWidth = right - left;
            measuredHeight = bottom - top_1;
            if (__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](this.relativeWidth)) {
                measuredWidth = this.maxWidth - this.pixelPaddingLeft - this.pixelPaddingRight;
                left = 0;
                right = measuredWidth;
            }
            if (__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](this.relativeHeight)) {
                measuredHeight = this.maxHeight - this.pixelPaddingTop - this.pixelPaddingBottom;
                top_1 = 0;
                bottom = measuredHeight;
            }
            if (__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](this._pixelWidth)) {
                left = 0;
                measuredWidth = this._pixelWidth;
            }
            if (__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](this.minWidth) && measuredWidth < this.minWidth) {
                left = 0;
                measuredWidth = this.minWidth;
            }
            if (__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](this._pixelHeight)) {
                top_1 = 0;
                measuredHeight = this._pixelHeight;
            }
            if (__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](this.minHeight) && measuredHeight < this.minHeight) {
                top_1 = 0;
                measuredHeight = this.minHeight;
            }
            var measuredContentWidth = contentRight - contentLeft;
            var measuredContentHeight = contentBottom - contentTop;
            /// handle content alignment
            var dx_1;
            var dy_1;
            if (this.contentAlign == "center") {
                dx_1 = (measuredWidth - measuredContentWidth) / 2;
            }
            if (this.contentAlign == "right") {
                dx_1 = measuredWidth - measuredContentWidth;
            }
            if (this.contentValign == "middle") {
                dy_1 = (measuredHeight - measuredContentHeight) / 2;
            }
            if (this.contentValign == "bottom") {
                dy_1 = measuredHeight - measuredContentHeight;
            }
            if (__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](dx_1)) {
                __WEBPACK_IMPORTED_MODULE_7__utils_Iterator__["each"](this.children.iterator(), function (child) {
                    var childLeft = child.maxLeft;
                    var ddx = dx_1;
                    if (_this.layout == "horizontal") {
                        child.x = child.pixelX + ddx;
                    }
                    // individual grid elements can not be aligned vertically, that's why it's different from horizontal
                    if (_this.layout == "grid") {
                        child.x = child.pixelX + ddx;
                    }
                    if (_this.layout == "vertical") {
                        ddx += child.pixelMarginLeft;
                        if (child.align == "none") {
                            child.x = ddx - childLeft;
                        }
                    }
                    if (_this.layout == "absolute") {
                        ddx += child.pixelMarginLeft;
                        if (child.align == "none") {
                            child.x = ddx - childLeft;
                        }
                    }
                });
            }
            if (__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](dy_1)) {
                __WEBPACK_IMPORTED_MODULE_7__utils_Iterator__["each"](this.children.iterator(), function (child) {
                    var childTop = child.maxTop;
                    var ddy = dy_1;
                    if (_this.layout == "horizontal") {
                        ddy += child.pixelMarginTop;
                        if (child.valign == "none") {
                            child.y = ddy - childTop;
                        }
                    }
                    // individual grid elements can not be aligned vertically, that's why it's different from horizontal
                    if (_this.layout == "grid") {
                        ddy += child.pixelMarginTop;
                        child.y = ddy - childTop;
                    }
                    if (_this.layout == "vertical") {
                        child.y = child.pixelY + ddy;
                    }
                    if (_this.layout == "absolute") {
                        ddy += child.pixelMarginTop;
                        if (child.valign == "none") {
                            child.y = ddy - childTop;
                        }
                    }
                });
            }
            var oldBBox = this.bbox;
            // this will mess up maxw/maxh set by container layout, we need a separate min/maxwidth for users
            // this prevents invalidating layout in such cases as scrolling category axis, when labels go outside bounds and results transformed event
            // todo: need to check if this doesn't cause other problems.
            //if (this.maxWidth > 0) {
            //measuredWidth = $math.min(measuredWidth, this.maxWidth);
            //measuredWidth = $math.max(measuredWidth, this.minWidth);
            //}
            //if (this.maxHeight > 0) {
            //measuredHeight = $math.min(measuredHeight, this.maxHeight);
            //measuredHeight = $math.max(measuredHeight, this.minHeight);				
            //}
            measuredWidth = __WEBPACK_IMPORTED_MODULE_9__utils_Math__["max"](measuredWidth, this.minWidth);
            measuredHeight = __WEBPACK_IMPORTED_MODULE_9__utils_Math__["max"](measuredHeight, this.minHeight);
            this.bbox = this.getContainerBBox(left, top_1, measuredWidth, measuredHeight);
            var prevLeft = this.maxLeft;
            var prevTop = this.maxTop;
            var prevBotttom = this.maxBottom;
            var prevRight = this.maxRight;
            this.measure();
            //if (!oldBBox || ($math.round(oldBBox.width, 1) != $math.round(measuredWidth, 1) || $math.round(oldBBox.height, 1) != $math.round(measuredHeight, 1))) {
            if (prevLeft != this.maxLeft || prevRight != this.maxRight || prevTop != this.maxTop || prevBotttom != this.maxBottom) {
                if (this.events.isEnabled("transformed")) {
                    var event_1 = {
                        type: "transformed",
                        target: this
                    };
                    if (oldBBox) {
                        event_1.dummyData = oldBBox.width + " " + measuredWidth + "  " + oldBBox.height + " " + measuredHeight;
                    }
                    this.events.dispatchImmediately("transformed", event_1);
                }
            }
        }
    };
    Container.prototype.getContainerBBox = function (x, y, width, height) {
        if (this.definedBBox) {
            return this.definedBBox;
        }
        else {
            return { x: x, y: y, width: width, height: height };
        }
    };
    Container.prototype.updateCenter = function () {
        _super.prototype.updateCenter.call(this);
        this.updateBackground();
    };
    /**
     * Update the background to fit into specific dimensions.
     *
     * @ignore Exclude from docs
     * @todo Make it protected?
     */
    Container.prototype.updateBackground = function () {
        var background = this._background; // accessing protected, as getter creates instance if it doesn't exist
        if (background) {
            background.x = this.maxLeft;
            background.y = this.maxTop;
            background.width = this.maxRight - this.maxLeft;
            background.height = this.maxBottom - this.maxTop;
            //console.log(this._right, this._left)
            this.group.addToBack(background.group);
        }
    };
    /**
     * Returns widths of all columns in a horizontal Container layout.
     *
     * @ignore Exclude from docs
     * @param  {number}    columnCount   Number of columns
     * @param  {number}    maxCellWidth  Maximum width of one grid cell
     * @return {number[]}                An array of column widths
     */
    Container.prototype.getColumnWidth = function (columnCount, maxCellWidth) {
        var _this = this;
        var columnWidth = [];
        var column = 0;
        __WEBPACK_IMPORTED_MODULE_7__utils_Iterator__["each"](this.children.iterator(), function (child) {
            if (child.isMeasured) {
                if (_this.fixedWidthGrid) {
                    columnWidth[column] = maxCellWidth;
                }
                else {
                    columnWidth[column] = __WEBPACK_IMPORTED_MODULE_9__utils_Math__["max"](columnWidth[column], child.measuredWidth + child.pixelMarginRight + child.pixelMarginLeft);
                }
                column++;
                if (column == columnCount) {
                    column = 0;
                }
            }
        });
        return columnWidth;
    };
    Object.defineProperty(Container.prototype, "layout", {
        /**
         * @return {ContainerLayout} Layout
         */
        get: function () {
            return this.getPropertyValue("layout");
        },
        /**
         * Container layout.
         *
         * Options: "absolute" (default), "vertical", "horizontal", "grid", "none". "none" is quite the same as "absolute" - the objects will
         * be positioned at their x, y coordinates, the difference is that with "absolute" you can still use align/valign for children and with "none" you can not.
         * Use "none" as much as you can as it's most cpu-saving layout.
         *
         * @default "absolute"
         * @param {ContainerLayout} value Layout
         */
        set: function (value) {
            if (this.setPropertyValue("layout", value)) {
                this.invalidateLayout();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "contentValign", {
        /**
         * @return {VerticalAlign} Vertical alignement
         */
        get: function () {
            return this._contentValign;
        },
        /**
         * Vertical alignement of the elements for the vertical Container.
         *
         * This is used when Container is larger than the height of all its children.
         *
         * @param {VerticalAlign} value vertical alignement
         */
        set: function (value) {
            this._contentValign = value;
            this.invalidateLayout();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "contentAlign", {
        /**
         * @return {Align} Horizontal alignement
         */
        get: function () {
            return this._contentAlign;
        },
        /**
         * Horizontal alignement of the elements for the horizontal Container.
         *
         * This is used when Container is larger than the height of all its children.
         *
         * @param {Align}  value  Horizontal alignement
         */
        set: function (value) {
            this._contentAlign = value;
            this.invalidateLayout();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "fixedWidthGrid", {
        /**
         * @return {boolean} Should use fixed width grid?
         */
        get: function () {
            return this._fixedWidthGrid;
        },
        /**
         * Controls if the grid of the Container should use fixed width. Fixed width
         * grid will divide available space to all its columns/rows equally, without
         * adapting to actual child sizes or size requirements.
         *
         * @default false
         * @param {boolean}  value  Should use fixed width grid?
         */
        set: function (value) {
            if (this._fixedWidthGrid != value) {
                this._fixedWidthGrid = value;
                this.invalidate();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Checks if point is within bounds of a container.
     *
     * @param  {IPoint}   point  A coordinate to check
     * @return {boolean}         `true` if it fits within container
     */
    Container.prototype.fitsToBounds = function (point) {
        var x = point.x;
        var y = point.y;
        var deviation = 0.5; // sometimes coordinates are rounded to numbers like .999 so we add deviation here
        if (x >= -deviation && x <= this.pixelWidth + deviation && y >= -deviation && y <= this.pixelHeight + deviation) {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * Copies all properties from different Container, including background
     * clone.
     *
     * @param {this}  source  Source Container to copy from
     */
    Container.prototype.copyFrom = function (source) {
        var _this = this;
        _super.prototype.copyFrom.call(this, source);
        this.layout = source.layout;
        this.setStateOnChildren = source.setStateOnChildren;
        if (source._background) {
            this.background = source._background.clone();
        }
        __WEBPACK_IMPORTED_MODULE_7__utils_Iterator__["each"](source.children.iterator(), function (child) {
            if (child.shouldClone) {
                var clonedChild = child.clone();
                clonedChild.parent = _this;
            }
        });
    };
    Object.defineProperty(Container.prototype, "preloader", {
        /**
         * @return {Optional<Preloader>} Preloader instance
         */
        get: function () {
            var preloader = this._preloader;
            if (preloader) {
                return preloader;
            }
            else if (this.parent) {
                return this.parent.preloader;
            }
        },
        /**
         * A [[Preloader]] instance to be used when Container is busy.
         *
         * @param {Optional<Preloader>}  preloader  Preloader instance
         */
        set: function (preloader) {
            if (this._preloader) {
                this.removeDispose(this._preloader);
            }
            this._preloader = preloader;
            if (preloader) {
                preloader.parent = this.tooltipContainer;
                this._disposers.push(preloader);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets [[Paper]] instance to use to draw elements.
     *
     * @ignore Exclude from docs
     * @param {Paper}  paper  Paper
     */
    Container.prototype.setPaper = function (paper) {
        _super.prototype.setPaper.call(this, paper);
        __WEBPACK_IMPORTED_MODULE_8__utils_Array__["c" /* each */](this._childrenByLayout, function (child) {
            if (child instanceof Container) {
                child.setPaper(paper);
            }
            else {
                child.setPaper(paper);
            }
        });
    };
    /**
     * Removes Container from the system-wide list of invalid Containers.
     *
     * @ignore Exclude from docs
     */
    Container.prototype.removeFromInvalids = function () {
        _super.prototype.removeFromInvalids.call(this);
        __WEBPACK_IMPORTED_MODULE_8__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_5__Registry__["b" /* registry */].invalidLayouts, this);
    };
    /**
     * Sets a [[DataItem]] to be used as data for the Container.
     *
     * @todo Description
     * @param {DataItem} dataItem DataItem
     */
    Container.prototype.setDataItem = function (dataItem) {
        // this place is potentially dangerous, as if we set datItem for some dummy container, all children dataItems will be overriden
        // the main reason for doing this is that we need a setDataItem code to be called for each sprite, otherwise property fields won't be
        // applied. Also, getting dataItem from parent all the time is more expensive than saving value.
        if (this._dataItem != dataItem) {
            __WEBPACK_IMPORTED_MODULE_7__utils_Iterator__["each"](this.children.iterator(), function (child) {
                child.dataItem = dataItem;
            });
        }
        _super.prototype.setDataItem.call(this, dataItem);
    };
    /**
     * Measures the element.
     *
     * @ignore Exclude from docs
     */
    Container.prototype.measureElement = function () {
        this.validateLayout();
    };
    /**
     * Returns Tooltip X coordinate if it's set, or middle of the element.
     *
     * @ignore Exclude from docs
     * @return {number} X (px)
     */
    Container.prototype.getTooltipX = function () {
        return _super.prototype.getTooltipX.call(this);
    };
    /**
     * Returns Tooltip Y coordinate if it's set, or middle of the element.
     *
     * @ignore Exclude from docs
     * @return {number} Y (px)
     */
    Container.prototype.getTooltipY = function () {
        return _super.prototype.getTooltipY.call(this);
    };
    Object.defineProperty(Container.prototype, "fontSize", {
        /**
         * @return {any} Font size
         */
        get: function () {
            return this.getPropertyValue("fontSize");
        },
        /**
         * Font size to be used for the text. The size can either be numeric, in
         * pxels, or other measurements.
         *
         * Parts of the text may override this setting using in-line formatting.
         *
         * @param {any} value Font size value
         */
        set: function (value) {
            this.setPropertyValue("fontSize", value, true);
            this.setSVGAttribute({ "font-size": value });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "fontWeight", {
        /**
         * @return {FontWeight} Font weight
         */
        get: function () {
            return this.getPropertyValue("fontWeight");
        },
        /**
         * Font weight to use for text.
         *
         * Parts of the text may override this setting using in-line formatting.
         *
         * @param {FontWeight} value Font weight
         */
        set: function (value) {
            this.setPropertyValue("fontWeight", value);
            this.setSVGAttribute({ "font-weight": value });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "textDecoration", {
        /**
         * @return {TextDecoration} Decoration
         */
        get: function () {
            return this.getPropertyValue("textDecoration");
        },
        /**
         * A text decoration to use for text.
         *
         * Parts of the text may override this setting using in-line formatting.
         *
         * @param {TextDecoration}  value  Decoration
         */
        set: function (value) {
            this.setPropertyValue("textDecoration", value);
            this.setSVGAttribute({ "text-decoration": value });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Disposes (destroys) the element and all its children.
     */
    Container.prototype.dispose = function () {
        this.disposeChildren();
        _super.prototype.dispose.call(this);
    };
    /**
     * Applies a [[SpriteState]] on this element.
     *
     * The first parameter can either be a name state or a [[SpriteState]]
     * instance.
     *
     * When run, this method will apply SVG properties defined in a
     * [[SpriteState]], but only those that are relevant to this particular
     * element, i.e. are in the `properties` array.
     *
     * @see {@link SpriteState}
     * @param {string | SpriteState} value               A state - name key or instance
     * @param {number}               transitionDuration  Duration of the transition between current and new state
     * @param {number) => number}    easing              An easing function
     */
    Container.prototype.setState = function (value, transitionDuration, easing) {
        var stateName = value;
        if (value instanceof __WEBPACK_IMPORTED_MODULE_1__SpriteState__["a" /* SpriteState */]) {
            stateName = value.name;
        }
        if (this.setStateOnChildren) {
            __WEBPACK_IMPORTED_MODULE_7__utils_Iterator__["each"](this.children.iterator(), function (child) {
                child.setState(stateName, transitionDuration, easing);
            });
            this.background.setState(stateName);
        }
        return _super.prototype.setState.call(this, value, transitionDuration, easing);
    };
    return Container;
}(__WEBPACK_IMPORTED_MODULE_0__Sprite__["a" /* Sprite */]));

//# sourceMappingURL=Container.js.map

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return IndexedIterable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return ListGrouper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return ListDisposer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return List; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return ListTemplate; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Disposer__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__EventDispatcher__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Array__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Iterator__ = __webpack_require__(3);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};




/**
 * @todo Description
 */
var IndexedIterable = /** @class */ (function () {
    /**
     * Constructor.
     *
     * @param {Array<A>}  array  List items
     * @param {number}    start  Start index
     * @param {number}    end    End index
     */
    function IndexedIterable(array, start, end) {
        this._array = array;
        this._start = start;
        this._end = end;
    }
    /**
     * Returns a list item iterator.
     *
     * @return {Iterator} Iterator
     */
    IndexedIterable.prototype.iterator = function () {
        var _this = this;
        return function (push) {
            if (_this._start !== _this._end) {
                if (_this._start < _this._end) {
                    for (var i = _this._start; i < _this._end; ++i) {
                        if (!push(_this._array[i])) {
                            break;
                        }
                    }
                }
                else {
                    for (var i = _this._start - 1; i >= _this._end; --i) {
                        if (!push(_this._array[i])) {
                            break;
                        }
                    }
                }
            }
        };
    };
    /**
     * Returns an interable list sorted backwards than current list.
     *
     * @return {IndexedIterable<A>} List
     */
    IndexedIterable.prototype.backwards = function () {
        return new IndexedIterable(this._array, this._end, this._start);
    };
    /**
     * Returns a new list consisting only of specific range of items between
     * `start` and `end` indexes.
     *
     * @param  {number}              start  Start index
     * @param  {number}              end    End index
     * @return {IndexedIterable<A>}         List
     */
    IndexedIterable.prototype.range = function (start, end) {
        if (start <= end) {
            if (this._start === this._end) {
                return this;
            }
            else if (this._start < this._end) {
                var diff = end - start;
                start = Math.max(this._start + start, this._start);
                end = Math.min(start + diff, this._end);
                return new IndexedIterable(this._array, start, end);
            }
            else {
                var diff = end - start;
                start = Math.max(this._start - start, this._end);
                end = Math.max(start - diff, this._end);
                return new IndexedIterable(this._array, start, end);
            }
        }
        else {
            throw new Error("Start index must be lower than end index");
        }
    };
    return IndexedIterable;
}());

/**
 * ListGrouper organizes [[List]] items into groups.
 *
 * @ignore Exclude from docs
 */
var ListGrouper = /** @class */ (function (_super) {
    __extends(ListGrouper, _super);
    /**
     * Constructor.
     */
    function ListGrouper(list, getKey, sort) {
        var _this = _super.call(this, [
            list.events.on("insert", function (x) {
                var value = x.newValue;
                var key = _this._getKey(value);
                var index = 0;
                __WEBPACK_IMPORTED_MODULE_3__Iterator__["eachContinue"](list.iterator(), function (x) {
                    if (x === value) {
                        return false;
                    }
                    else if (_this._getKey(x) === key) {
                        ++index;
                    }
                    return true;
                });
                _this._insert(value, key, index);
            }),
            list.events.on("remove", function (x) {
                _this._remove(x.oldValue);
            })
        ]) || this;
        /**
         * Grouping keys.
         *
         * @type {Array<number>}
         */
        _this._keys = [];
        /**
         * List item groups.
         */
        _this._groups = {};
        _this._getKey = getKey;
        _this._sort = sort;
        __WEBPACK_IMPORTED_MODULE_3__Iterator__["each"](list.iterator(), function (x) {
            _this._insert(x, getKey(x));
        });
        return _this;
    }
    /**
     * Inserts an item (`x`) to a specific group (`key`) and specific `index`.
     *
     * @param {A}       x      Item
     * @param {number}  key    Group name
     * @param {number}  index  Index
     */
    ListGrouper.prototype._insert = function (x, key, index) {
        if (this._groups[key] == null) {
            this._groups[key] = [];
            // TODO code duplication with SortedList
            var _a = __WEBPACK_IMPORTED_MODULE_2__Array__["f" /* getSortedIndex */](this._keys, this._sort, key), found = _a.found, index_1 = _a.index;
            if (found) {
                throw new Error("Key already exists: " + key);
            }
            else {
                __WEBPACK_IMPORTED_MODULE_2__Array__["h" /* insertIndex */](this._keys, index_1, key);
            }
        }
        if (index == null) {
            this._groups[key].push(x);
        }
        else {
            __WEBPACK_IMPORTED_MODULE_2__Array__["h" /* insertIndex */](this._groups[key], index, x);
        }
    };
    /**
     * Removes an item from the list.
     *
     * @param {A} x Item to remove
     */
    ListGrouper.prototype._remove = function (x) {
        var key = this._getKey(x);
        var values = this._groups[key];
        if (values != null) {
            __WEBPACK_IMPORTED_MODULE_2__Array__["k" /* remove */](values, x);
            if (values.length === 0) {
                delete this._groups[key];
                var _a = __WEBPACK_IMPORTED_MODULE_2__Array__["f" /* getSortedIndex */](this._keys, this._sort, key), found = _a.found, index = _a.index;
                if (found) {
                    __WEBPACK_IMPORTED_MODULE_2__Array__["l" /* removeIndex */](this._keys, index);
                }
                else {
                    throw new Error("Key doesn't exist: " + key);
                }
            }
        }
    };
    /**
     * Returns an iterator for the list.
     *
     * The iterator will iterate through all items in all groups.
     *
     * @return {.Iterator<A>} Iterator
     */
    ListGrouper.prototype.iterator = function () {
        var _this = this;
        return __WEBPACK_IMPORTED_MODULE_3__Iterator__["flatten"](__WEBPACK_IMPORTED_MODULE_3__Iterator__["map"](__WEBPACK_IMPORTED_MODULE_3__Iterator__["fromArray"](this._keys), function (key) {
            return __WEBPACK_IMPORTED_MODULE_3__Iterator__["fromArray"](_this._groups[key]);
        }));
    };
    return ListGrouper;
}(__WEBPACK_IMPORTED_MODULE_0__Disposer__["c" /* MultiDisposer */]));

/**
 * A disposable list, which when disposed itself will call `dispose()` method
 * on all its items.
 */
var ListDisposer = /** @class */ (function (_super) {
    __extends(ListDisposer, _super);
    function ListDisposer(list) {
        var _this = this;
        var disposer = list.events.on("remove", function (x) {
            x.oldValue.dispose();
        });
        _this = _super.call(this, function () {
            disposer.dispose();
            // TODO clear the list ?
            __WEBPACK_IMPORTED_MODULE_3__Iterator__["each"](list.iterator(), function (x) {
                x.dispose();
            });
        }) || this;
        return _this;
    }
    return ListDisposer;
}(__WEBPACK_IMPORTED_MODULE_0__Disposer__["b" /* Disposer */]));

/**
 * Checks if specific index fits into length.
 *
 * @param {number}  index  Index
 * @param {number}  len    Length
 */
function checkBounds(index, len) {
    if (!(index >= 0 && index < len)) {
        throw new Error("Index out of bounds: " + index);
    }
}
/**
 * A List class is used to hold a number of indexed items of the same type.
 */
var List = /** @class */ (function () {
    /**
     * Constructor
     *
     * @param {Array<T>}  initial  Inital list of values to add to list
     */
    function List(initial) {
        if (initial === void 0) { initial = []; }
        /**
         * Event dispatcher.
         *
         * @type {EventDispatcher<AMEvent<this, IListEvents<T>>>}
         */
        this.events = new __WEBPACK_IMPORTED_MODULE_1__EventDispatcher__["a" /* EventDispatcher */]();
        this._values = initial;
    }
    Object.defineProperty(List.prototype, "values", {
        /**
         * An array of values in the list.
         *
         * Do not use this property to add values. Rather use dedicated methods, like
         * `push()`, `removeIndex()`, etc.
         *
         * @readonly
         * @return {Array<T>} List values
         */
        get: function () {
            return this._values;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Checks if list contains specific item reference.
     *
     * @param  {T}        item  Item to search for
     * @return {boolean}        `true` if found, `false` if not found
     */
    List.prototype.contains = function (value) {
        return this._values.indexOf(value) !== -1;
    };
    /**
     * Removes specific item from the list.
     *
     * @param {T} item An item to remove
     */
    List.prototype.removeValue = function (value) {
        var index;
        while ((index = this.indexOf(value)) !== -1) {
            this.removeIndex(index);
        }
    };
    /**
     * Searches the list for specific item and returns its index.
     *
     * @param  {T}       item  An item to search for
     * @return {number}        Index or -1 if not found
     */
    List.prototype.indexOf = function (value) {
        return __WEBPACK_IMPORTED_MODULE_2__Array__["g" /* indexOf */](this._values, value);
    };
    Object.defineProperty(List.prototype, "length", {
        /**
         * Number of items in list.
         *
         * @readonly
         * @return {number} Number of items
         */
        get: function () {
            return this._values.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Checks if there's a value at specific index.
     *
     * @param  {number}   index  Index
     * @return {boolean}         Value exists?
     */
    List.prototype.hasIndex = function (index) {
        return index >= 0 && index < this._values.length;
    };
    /**
     * Returns an item at specified index.
     *
     * @param  {number}  index  Index
     * @return {T}              List item
     */
    List.prototype.getIndex = function (index) {
        return this._values[index];
    };
    /**
     * Sets value at specific index.
     *
     * If there's already a value at the index, it is overwritten.
     *
     * @param  {number}  index  Index
     * @param  {T}       value  New value
     * @return {T}              New value
     */
    List.prototype.setIndex = function (index, value) {
        checkBounds(index, this._values.length);
        var oldValue = this._values[index];
        // Do nothing if the old value and the new value are the same
        if (oldValue !== value) {
            this._values[index] = value;
            if (this.events.isEnabled("setIndex")) {
                this.events.dispatchImmediately("setIndex", {
                    type: "setIndex",
                    target: this,
                    index: index,
                    oldValue: oldValue,
                    newValue: value
                });
            }
            if (this.events.isEnabled("remove")) {
                this.events.dispatchImmediately("remove", {
                    type: "remove",
                    target: this,
                    oldValue: oldValue
                });
            }
            if (this.events.isEnabled("insert")) {
                this.events.dispatchImmediately("insert", {
                    type: "insert",
                    target: this,
                    newValue: value
                });
            }
        }
        return oldValue;
    };
    /**
     * Adds an item to the list at a specific index, which pushes all the other
     * items further down the list.
     *
     * @param  {number} index Index
     * @param  {T}      item  An item to add
     */
    List.prototype.insertIndex = function (index, value) {
        checkBounds(index, this._values.length + 1);
        __WEBPACK_IMPORTED_MODULE_2__Array__["h" /* insertIndex */](this._values, index, value);
        if (this.events.isEnabled("insertIndex")) {
            this.events.dispatchImmediately("insertIndex", {
                type: "insertIndex",
                target: this,
                index: index,
                newValue: value
            });
        }
        if (this.events.isEnabled("insert")) {
            this.events.dispatchImmediately("insert", {
                type: "insert",
                target: this,
                newValue: value
            });
        }
    };
    /**
     * [_sortQuicksort description]
     *
     * @todo Description
     * @param {number}    low    [description]
     * @param {number}    high   [description]
     * @param {function}  order  [description]
     */
    List.prototype._sortQuicksort = function (low, high, order) {
        if (low < high) {
            var p = this._sortPartition(low, high, order);
            this._sortQuicksort(low, p, order);
            this._sortQuicksort(p + 1, high, order);
        }
    };
    /**
     * [_sortPartition description]
     *
     * @todo Description
     * @param  {number}    low    [description]
     * @param  {number}    high   [description]
     * @param  {function}  order  [description]
     * @return {number}           [description]
     */
    List.prototype._sortPartition = function (low, high, order) {
        var values = this._values;
        var pivot = values[low];
        var i = low - 1;
        var j = high + 1;
        for (;;) {
            do {
                ++i;
            } while (order(values[i], pivot) < 0);
            do {
                --j;
            } while (order(values[j], pivot) > 0);
            if (i >= j) {
                return j;
            }
            else {
                this.swap(i, j);
            }
        }
    };
    /**
     * Reorders list items according to specific ordering function.
     *
     * @param {T) => Ordering}  order  Ordering function
     */
    List.prototype.sort = function (order) {
        // https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme
        // @todo faster implementation of this
        // @todo test this
        this._sortQuicksort(0, this._values.length - 1, order);
    };
    /**
     * Swaps indexes of two items in the list.
     *
     * @param {number}  a  Item 1
     * @param {number}  b  Item 2
     */
    List.prototype.swap = function (a, b) {
        var len = this._values.length;
        checkBounds(a, len);
        checkBounds(b, len);
        if (a !== b) {
            var value_a = this._values[a];
            var value_b = this._values[b];
            this._values[a] = value_b;
            if (this.events.isEnabled("setIndex")) {
                this.events.dispatchImmediately("setIndex", {
                    type: "setIndex",
                    target: this,
                    index: a,
                    oldValue: value_a,
                    newValue: value_b
                });
            }
            this._values[b] = value_a;
            if (this.events.isEnabled("setIndex")) {
                this.events.dispatchImmediately("setIndex", {
                    type: "setIndex",
                    target: this,
                    index: b,
                    oldValue: value_b,
                    newValue: value_a
                });
            }
        }
    };
    /**
     * Removes a value at specific index.
     *
     * @param  {number}  index  Index of value to remove
     * @return {T}              Removed value
     */
    List.prototype.removeIndex = function (index) {
        checkBounds(index, this._values.length);
        var oldValue = this._values[index];
        __WEBPACK_IMPORTED_MODULE_2__Array__["l" /* removeIndex */](this._values, index);
        if (this.events.isEnabled("removeIndex")) {
            this.events.dispatchImmediately("removeIndex", {
                type: "removeIndex",
                target: this,
                index: index,
                oldValue: oldValue
            });
        }
        if (this.events.isEnabled("remove")) {
            this.events.dispatchImmediately("remove", {
                type: "remove",
                target: this,
                oldValue: oldValue
            });
        }
        return oldValue;
    };
    /**
     * Moves an item to a specific index within the list
     *
     * If the index is not specified it will move the item to the end of the
     * list.
     *
     * @param {T}       value  Item to move
     * @param {number}  index  Index to place item at
     */
    List.prototype.moveValue = function (value, toIndex) {
        // TODO don't do anything if the desired index is the same as the current index
        var index = this.indexOf(value);
        // TODO remove all old values rather than only the first ?
        if (index !== -1) {
            var oldValue = this._values[index];
            __WEBPACK_IMPORTED_MODULE_2__Array__["l" /* removeIndex */](this._values, index);
            if (this.events.isEnabled("removeIndex")) {
                this.events.dispatchImmediately("removeIndex", {
                    type: "removeIndex",
                    target: this,
                    index: index,
                    oldValue: oldValue
                });
            }
        }
        if (toIndex == null) {
            toIndex = this._values.length;
            this._values.push(value);
        }
        else {
            __WEBPACK_IMPORTED_MODULE_2__Array__["h" /* insertIndex */](this._values, toIndex, value);
        }
        if (this.events.isEnabled("insertIndex")) {
            this.events.dispatchImmediately("insertIndex", {
                type: "insertIndex",
                target: this,
                index: toIndex,
                newValue: value
            });
        }
        if (index === -1) {
            if (this.events.isEnabled("insert")) {
                this.events.dispatchImmediately("insert", {
                    type: "insert",
                    target: this,
                    newValue: value
                });
            }
        }
    };
    /**
     * Adds an item to the end of the list.
     *
     * @param  {T}  item  An item to add
     */
    List.prototype.push = function (value) {
        var index = this._values.push(value) - 1;
        if (this.events.isEnabled("insertIndex")) {
            this.events.dispatchImmediately("insertIndex", {
                type: "insertIndex",
                target: this,
                index: index,
                newValue: value
            });
        }
        if (this.events.isEnabled("insert")) {
            this.events.dispatchImmediately("insert", {
                type: "insert",
                target: this,
                newValue: value
            });
        }
        return value;
    };
    /**
     * Adds an item as a first item in the list.
     *
     * @param  {T}  item  An item to add
     */
    List.prototype.unshift = function (value) {
        return this.insertIndex(0, value);
    };
    /**
     * Adds multiple items to the list.
     *
     * @param {Array<T>}  items  An Array of items to add
     */
    List.prototype.pushAll = function (values) {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_2__Array__["c" /* each */](values, function (value) {
            _this.push(value);
        });
    };
    /**
     * Copies and adds items from abother list.
     *
     * @param {List<T>}  source  A list top copy items from
     */
    List.prototype.copyFrom = function (source) {
        this.pushAll(source._values);
    };
    /**
     * Returns the last item from the list, and removes it.
     *
     * @return {T} Item
     */
    List.prototype.pop = function () {
        var index = this._values.length - 1;
        return index < 0 ? undefined : this.removeIndex(this._values.length - 1);
    };
    /**
     * Returns the first item from the list, and removes it.
     *
     * @return {T} Item
     */
    List.prototype.shift = function () {
        return this._values.length ? this.removeIndex(0) : undefined;
    };
    /**
     * Sets multiple items to the list.
     *
     * All current items are removed.
     *
     * @param {Array<T>}  newArray  New items
     */
    List.prototype.setAll = function (newArray) {
        var _this = this;
        // @tod if a value exists in both the new and old arrays, don't send remove/insert events
        var oldArray = __WEBPACK_IMPORTED_MODULE_2__Array__["b" /* copy */](this._values);
        this._values.length = 0;
        __WEBPACK_IMPORTED_MODULE_2__Array__["c" /* each */](newArray, function (value) {
            _this._values.push(value);
        });
        if (this.events.isEnabled("setAll")) {
            this.events.dispatchImmediately("setAll", {
                type: "setAll",
                target: this,
                oldArray: oldArray,
                newArray: this._values // TODO make a copy ?
            });
        }
        if (this.events.isEnabled("remove")) {
            __WEBPACK_IMPORTED_MODULE_2__Array__["c" /* each */](oldArray, function (x) {
                _this.events.dispatchImmediately("remove", {
                    type: "remove",
                    target: _this,
                    oldValue: x
                });
            });
        }
        if (this.events.isEnabled("insert")) {
            __WEBPACK_IMPORTED_MODULE_2__Array__["c" /* each */](this._values, function (x) {
                _this.events.dispatchImmediately("insert", {
                    type: "insert",
                    target: _this,
                    newValue: x
                });
            });
        }
    };
    /**
     * Removes all items from the list.
     */
    List.prototype.clear = function () {
        this.setAll([]);
    };
    /**
     * Returns a list iterator.
     *
     * @return {Iterator} Iterator
     */
    List.prototype.iterator = function () {
        return __WEBPACK_IMPORTED_MODULE_3__Iterator__["fromArray"](this._values);
    };
    /**
     * Returns an ES6 iterator for the list.
     */
    List.prototype[Symbol.iterator] = function () {
        var length, i;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    length = this._values.length;
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < length)) return [3 /*break*/, 4];
                    return [4 /*yield*/, this._values[i]];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    ++i;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    };
    /**
     * Calls `f` for each element in the list.
     */
    List.prototype.each = function (f) {
        __WEBPACK_IMPORTED_MODULE_2__Array__["c" /* each */](this._values, f);
    };
    /**
     * Returns a specific range of list items, which can be iterated.
     *
     * @ignore Exclude from docs
     * @todo Code duplication with IndexedIterable
     * @param  {number}              start  Start index
     * @param  {number}              end    End index
     * @return {IndexedIterable<T>}         Range
     */
    List.prototype.range = function (start, end) {
        if (start <= end) {
            var diff = end - start;
            start = Math.max(start, 0);
            end = Math.min(start + diff, this._values.length);
            return new IndexedIterable(this._values, start, end);
        }
        else {
            throw new Error("Start index must be lower than end index");
        }
    };
    /**
     * Returns an iterator that has list items sorted backwards.
     *
     * @ignore Exclude from docs
     * @return {IndexedIterable<T>} List
     */
    List.prototype.backwards = function () {
        return new IndexedIterable(this._values, this._values.length, 0);
    };
    return List;
}());

/**
 * A version of a [[List]] that has a "template".
 *
 * A template is an instance of an object, that can be used to create new
 * elements in the list without actually needing to create instances for those.
 *
 * When new element is created in the list, e.g. by calling its `create()`
 * method, an exact copy of the element is created (including properties and
 * other attributes), inserted into the list and returned.
 */
var ListTemplate = /** @class */ (function (_super) {
    __extends(ListTemplate, _super);
    /**
     * Constructor
     *
     * @param {T} t Template object
     */
    function ListTemplate(t) {
        var _this = _super.call(this) || this;
        _this.template = t;
        return _this;
    }
    Object.defineProperty(ListTemplate.prototype, "template", {
        /**
         * @return {T} Template object
         */
        get: function () {
            return this._template;
        },
        /**
         * A "template" object to copy all properties from when creating new list
         * items.
         *
         * @param {T}  v  Template object
         */
        set: function (v) {
            v.isTemplate = true;
            this._template = v;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Copies all elements from other list.
     *
     * @param {ListTemplate}  source  Source list
     */
    ListTemplate.prototype.copyFrom = function (source) {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_3__Iterator__["each"](source.iterator(), function (value) {
            _this.push(value.clone());
        });
    };
    ListTemplate.prototype.create = function (make) {
        var clone = (make != null
            ? new make()
            : this.template.clone());
        this.push(clone);
        return clone;
    };
    /**
     * Creates an exact clone of the list, including its items and template.
     *
     * @return {ListTemplate<T>} New list
     */
    ListTemplate.prototype.clone = function () {
        var out = new ListTemplate(this.template);
        var values = this.values;
        var length = values.length;
        for (var i = 0; i < length; ++i) {
            out.push(values[i].clone());
        }
        return out;
    };
    return ListTemplate;
}(List));

//# sourceMappingURL=List.js.map

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["copyProperties"] = copyProperties;
/* harmony export (immutable) */ __webpack_exports__["copy"] = copy;
/* harmony export (immutable) */ __webpack_exports__["isNotEmpty"] = isNotEmpty;
/* harmony export (immutable) */ __webpack_exports__["relativeToValue"] = relativeToValue;
/* harmony export (immutable) */ __webpack_exports__["relativeRadiusToValue"] = relativeRadiusToValue;
/* harmony export (immutable) */ __webpack_exports__["valueToRelative"] = valueToRelative;
/* harmony export (immutable) */ __webpack_exports__["camelToDashed"] = camelToDashed;
/* harmony export (immutable) */ __webpack_exports__["capitalize"] = capitalize;
/* harmony export (immutable) */ __webpack_exports__["stringify"] = stringify;
/* harmony export (immutable) */ __webpack_exports__["splitTextByCharCount"] = splitTextByCharCount;
/* harmony export (immutable) */ __webpack_exports__["truncateWithEllipsis"] = truncateWithEllipsis;
/* harmony export (immutable) */ __webpack_exports__["trim"] = trim;
/* harmony export (immutable) */ __webpack_exports__["rtrim"] = rtrim;
/* harmony export (immutable) */ __webpack_exports__["ltrim"] = ltrim;
/* harmony export (immutable) */ __webpack_exports__["reverseString"] = reverseString;
/* harmony export (immutable) */ __webpack_exports__["unquote"] = unquote;
/* harmony export (immutable) */ __webpack_exports__["padString"] = padString;
/* harmony export (immutable) */ __webpack_exports__["getFormat"] = getFormat;
/* harmony export (immutable) */ __webpack_exports__["cleanFormat"] = cleanFormat;
/* harmony export (immutable) */ __webpack_exports__["stripTags"] = stripTags;
/* harmony export (immutable) */ __webpack_exports__["plainText"] = plainText;
/* harmony export (immutable) */ __webpack_exports__["numberToString"] = numberToString;
/* harmony export (immutable) */ __webpack_exports__["anyToDate"] = anyToDate;
/* harmony export (immutable) */ __webpack_exports__["anyToNumber"] = anyToNumber;
/* harmony export (immutable) */ __webpack_exports__["getYearDay"] = getYearDay;
/* harmony export (immutable) */ __webpack_exports__["getWeek"] = getWeek;
/* harmony export (immutable) */ __webpack_exports__["getMonthWeek"] = getMonthWeek;
/* harmony export (immutable) */ __webpack_exports__["getDayFromWeek"] = getDayFromWeek;
/* harmony export (immutable) */ __webpack_exports__["get12Hours"] = get12Hours;
/* harmony export (immutable) */ __webpack_exports__["getTimeZone"] = getTimeZone;
/* harmony export (immutable) */ __webpack_exports__["random"] = random;
/* harmony export (immutable) */ __webpack_exports__["fitNumber"] = fitNumber;
/* harmony export (immutable) */ __webpack_exports__["fitNumberRelative"] = fitNumberRelative;
/* harmony export (immutable) */ __webpack_exports__["svgPointToSprite"] = svgPointToSprite;
/* harmony export (immutable) */ __webpack_exports__["spritePointToSvg"] = spritePointToSvg;
/* harmony export (immutable) */ __webpack_exports__["spritePointToSprite"] = spritePointToSprite;
/* harmony export (immutable) */ __webpack_exports__["svgRectToSprite"] = svgRectToSprite;
/* harmony export (immutable) */ __webpack_exports__["spriteRectToSvg"] = spriteRectToSvg;
/* harmony export (immutable) */ __webpack_exports__["documentPointToSvg"] = documentPointToSvg;
/* harmony export (immutable) */ __webpack_exports__["svgPointToDocument"] = svgPointToDocument;
/* harmony export (immutable) */ __webpack_exports__["documentPointToSprite"] = documentPointToSprite;
/* harmony export (immutable) */ __webpack_exports__["spritePointToDocument"] = spritePointToDocument;
/* harmony export (immutable) */ __webpack_exports__["width"] = width;
/* harmony export (immutable) */ __webpack_exports__["height"] = height;
/* harmony export (immutable) */ __webpack_exports__["decimalPlaces"] = decimalPlaces;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Type__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__String__ = __webpack_require__(69);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Strings__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Object__ = __webpack_require__(13);
/**
 * A collection of universal utility functions.
 */






/**
 * ============================================================================
 * MISC FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Copies all properties of one object to the other, omitting undefined.
 *
 * @param  {Object}   fromObject  Source object
 * @param  {Object}   toObject    Target object
 * @return {Object}               Updated target object
 * @todo Maybe consolidate with utils.copy?
 */
function copyProperties(source, target) {
    __WEBPACK_IMPORTED_MODULE_5__Object__["each"](source, function (key, value) {
        // only if value is set
        if (__WEBPACK_IMPORTED_MODULE_2__utils_Type__["hasValue"](value)) {
            target[key] = value;
        }
    });
    return target;
}
/**
 * Copies all properties of one object to the other.
 *
 * @param  {Object}  source     Source object
 * @param  {Object}  recipient  Target object
 * @return {Object}             Updated target object
 */
function copy(source, target) {
    __WEBPACK_IMPORTED_MODULE_5__Object__["each"](source, function (key, value) {
        target[key] = value;
    });
    return target;
}
/**
 * Checks if value is not empty (undefined or zero-length string).
 *
 * @param  {Optional<string>}  value  Value to check
 * @return {boolean}                  `true` if value is not "empty"
 */
function isNotEmpty(value) {
    return __WEBPACK_IMPORTED_MODULE_2__utils_Type__["hasValue"](value) && (value.toString() !== "");
}
/**
 * [relativeToValue description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {$type.Optional<number | Percent>}  percent  [description]
 * @param  {number}                            full     [description]
 * @return {number}                                     [description]
 */
function relativeToValue(percent, full) {
    if (__WEBPACK_IMPORTED_MODULE_2__utils_Type__["isNumber"](percent)) {
        return percent;
    }
    else if (percent != null && __WEBPACK_IMPORTED_MODULE_2__utils_Type__["isNumber"](percent.value)) {
        return full * percent.value;
    }
    else {
        return 0;
    }
}
/**
 * [relativeRadiusToValue description]
 *
 * Differs from relativeToValue so that if a value is negative, it subtracts
 * it from full value.
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {$type.Optional<number | Percent>}  percent             [description]
 * @param  {number}                            full                [description]
 * @param  {boolean}                           subtractIfNegative  [description]
 * @return {number}                                                [description]
 */
function relativeRadiusToValue(percent, full, subtractIfNegative) {
    var value;
    if (__WEBPACK_IMPORTED_MODULE_2__utils_Type__["isNumber"](percent)) {
        value = percent;
        if (value < 0) {
            if (subtractIfNegative) {
                value = full + value;
            }
            else {
                value = full - value;
            }
        }
    }
    else if (percent != null && __WEBPACK_IMPORTED_MODULE_2__utils_Type__["isNumber"](percent.value)) {
        value = full * percent.value;
    }
    return value;
}
/**
 * [valueToRelative description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {number | Percent}  value  [description]
 * @param  {number}            full   [description]
 * @return {number}                   [description]
 */
function valueToRelative(value, full) {
    if (value instanceof __WEBPACK_IMPORTED_MODULE_0__Percent__["a" /* Percent */]) {
        return value.value;
    }
    else {
        return value / full;
    }
}
/**
 * ============================================================================
 * STRING FORMATTING FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Converts camelCased text to dashed version:
 * ("thisIsString" > "this-is-string")
 *
 * @param  {string}  str  Input
 * @return {string}       Output
 */
function camelToDashed(str) {
    return str.replace(/\W+/g, '-').replace(/([a-z\d])([A-Z])/g, '$1-$2').toLowerCase();
}
/**
 * Converts tring to uppercase.
 *
 * @param  {string}  str  String to convert
 * @return {string}       uppercased string
 * @todo Maybe make it better
 */
function capitalize(str) {
    var arr = str.split("");
    arr[0] = arr[0].toUpperCase();
    return arr.join("");
}
/**
 * Converts any value into its string representation.
 *
 * @param  {any}     value  Value
 * @return {string}         String represantation of the value
 */
function stringify(value) {
    return JSON.stringify(value);
}
/**
 * Splits the text into multiple lines, respecting maximum character count.
 * Prioretizes splitting on spaces and punctuation. Falls back on splitting
 * mid-word if there's no other option.
 *
 * @param  {string}    text      Text
 * @param  {number}    maxChars  Maximum number of characters per line
 * @return {string[]}            An array of split text
 */
function splitTextByCharCount(text, maxChars, fullWords, rtl) {
    // Maybe the text fits?
    if (text.length <= maxChars) {
        return [text];
    }
    // Init result
    var res = [];
    // Split by spacing
    var currentIndex = -1;
    var tmpText = text.replace(/([,;:!?\\\/\.\s]+)/g, __WEBPACK_IMPORTED_MODULE_4__Strings__["d" /* PLACEHOLDER */] + "$1" + __WEBPACK_IMPORTED_MODULE_4__Strings__["d" /* PLACEHOLDER */]);
    var words = tmpText.split(__WEBPACK_IMPORTED_MODULE_4__Strings__["d" /* PLACEHOLDER */]);
    // Process each word
    for (var i = 0; i < words.length; i++) {
        // Get word and symbol count
        var word = words[i];
        var wordLength = word.length;
        // Ignore empty words
        if (wordLength === 0) {
            continue;
        }
        // Check word length
        if ((wordLength > maxChars) && fullWords !== true) {
            // A single word is longer than allowed symbol count
            // Break it up
            if (rtl) {
                word = reverseString(word);
            }
            var parts = word.match(new RegExp(".{1," + maxChars + "}", "g"));
            // TODO is this correct ?
            if (parts) {
                if (rtl) {
                    for (var x = 0; x < parts.length; x++) {
                        parts[x] = reverseString(parts[x]);
                    }
                    //parts.reverse();
                }
                res = res.concat(parts);
            }
        }
        else {
            // Init current line
            if (currentIndex === -1) {
                res.push("");
                currentIndex = 0;
            }
            // Check if we need to break into another line
            if (((res[currentIndex].length + wordLength + 1) > maxChars) && res[currentIndex] !== "") {
                res.push("");
                currentIndex++;
            }
            // Add word
            res[currentIndex] += word;
        }
        // Update index
        currentIndex = res.length - 1;
    }
    // Do we have only one word that does not fit?
    // Since fullWords is set and we can't split the word, we end up with empty
    // set.
    if (res.length == 1 && fullWords && (res[0].length > maxChars)) {
        res = [];
    }
    return res;
}
/**
 * Truncates the text to certain character count.
 *
 * Will add ellipsis if the string is truncated. Optionally, can truncate on
 * full words only.
 *
 * For RTL support, pass in the fifth parameter as `true`.
 *
 * @param  {string}   text       Input text
 * @param  {number}   maxChars   Maximum character count of output
 * @param  {string}   ellipsis   Ellipsis string, i.e. "..."
 * @param  {boolean}  fullWords  If `true`, will not break mid-word, unless there's a single word and it does not with into `maxChars`
 * @param  {boolean}  rtl        Is this an RTL text?
 * @return {string}              Truncated text
 */
function truncateWithEllipsis(text, maxChars, ellipsis, fullWords, rtl) {
    if (text.length <= maxChars) {
        return text;
    }
    // Calc max chars
    maxChars -= ellipsis.length;
    if (maxChars < 1) {
        maxChars = 1;
        //ellipsis = "";
    }
    // Get lines
    var lines = splitTextByCharCount(text, maxChars, fullWords, rtl);
    // Use first line
    return (lines[0] || "") + ellipsis;
}
/**
 * Removes whitespace from beginning and end of the string.
 *
 * @param  {string}  str  Input
 * @return {string}       Output
 */
function trim(str) {
    return str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
}
;
/**
 * Removes whitespace from end of the string.
 *
 * @param  {string}  str  Input
 * @return {string}       Output
 */
function rtrim(str) {
    return str.replace(/[\s\uFEFF\xA0]+$/g, "");
}
;
/**
 * Removes whitespace from beginning of the string.
 *
 * @param  {string}  str  Input
 * @return {string}       Output
 */
function ltrim(str) {
    return str.replace(/^[\s\uFEFF\xA0]+/g, "");
}
;
/**
 * Reverses string.
 *
 * @param  {string}  str  Input
 * @return {string}       Output
 */
function reverseString(str) {
    return str.split("").reverse().join("");
}
/**
 * Removes quotes from the string.
 *
 * @param  {string}  str  Input
 * @return {string}       Output
 */
function unquote(str) {
    var res = str.trim();
    res = str.replace(/^'(.*)'$/, "$1");
    if (res == str) {
        res = str.replace(/^"(.*)"$/, "$1");
    }
    return res;
}
/**
 * Pads a string with additional characters to certain length.
 *
 * @param  {any}            value  A numeric value
 * @param  {number = 0}     len    Result string length in characters
 * @param  {string = "0"}   char   A character to use for padding
 * @return {string}                Padded value as string
 */
function padString(value, len, char) {
    if (len === void 0) { len = 0; }
    if (char === void 0) { char = "0"; }
    if (typeof value !== "string")
        value = value.toString();
    return len > value.length ? Array(len - value.length + 1).join(char) + value : value;
}
/**
 * Tries to determine format type.
 *
 * @ignore Exclude from docs
 * @param {string}   format  Format string
 * @return {string}          Format type ("string" | "number" | "date" | "duration")
 */
function getFormat(format) {
    // Undefined?
    if (typeof format === "undefined")
        return __WEBPACK_IMPORTED_MODULE_4__Strings__["m" /* STRING */];
    // Cleanup and lowercase format
    format = format.toLowerCase().replace(/^\[[^\]]*\]/, "");
    // Remove style tags
    format = format.replace(/\[[^\]]+\]/, "");
    // Trim
    format = format.trim();
    // Check for any explicit format hints (i.e. /Date)
    var hints = format.match(/\/(date|number|duration)$/);
    if (hints) {
        return hints[1];
    }
    // Check for explicit hints
    if (format === __WEBPACK_IMPORTED_MODULE_4__Strings__["c" /* NUMBER */]) {
        return __WEBPACK_IMPORTED_MODULE_4__Strings__["c" /* NUMBER */];
    }
    if (format === __WEBPACK_IMPORTED_MODULE_4__Strings__["a" /* DATE */]) {
        return __WEBPACK_IMPORTED_MODULE_4__Strings__["a" /* DATE */];
    }
    if (format === __WEBPACK_IMPORTED_MODULE_4__Strings__["b" /* DURATION */]) {
        return __WEBPACK_IMPORTED_MODULE_4__Strings__["b" /* DURATION */];
    }
    // Detect number formatting symbols
    if (format.match(/[#0]/)) {
        return __WEBPACK_IMPORTED_MODULE_4__Strings__["c" /* NUMBER */];
    }
    // Detect date formatting symbols
    if (format.match(/[ymwdhnsqaxkzgtei]/)) {
        return __WEBPACK_IMPORTED_MODULE_4__Strings__["a" /* DATE */];
    }
    // Nothing? Let's display as string
    return __WEBPACK_IMPORTED_MODULE_4__Strings__["m" /* STRING */];
}
/**
 * Cleans up format:
 * * Strips out formatter hints
 *
 * @ignore Exclude from docs
 * @param  {string}  format  Format
 * @return {string}          Cleaned format
 */
function cleanFormat(format) {
    return format.replace(/\/(date|number|duration)$/i, "");
}
/**
 * Strips all tags from the string.
 *
 * @param  {string}  text  Source string
 * @return {string}        String without tags
 */
function stripTags(text) {
    return text ? text.replace(/<[^>]*>/g, "") : text;
}
/**
 * Removes new lines and tags from a string.
 *
 * @param  {string}  text  String to conver
 * @return {string}        Converted string
 */
function plainText(text) {
    return text ? stripTags(text.replace(/[\n\r]+/g, ". ")) : text;
}
/**
 * ============================================================================
 * TYPE CONVERSION FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Converts numeric value into string. Deals with large or small numbers that
 * would otherwise use exponents.
 *
 * @param  {number}  value  Numeric value
 * @return {string}         Numeric value as string
 */
function numberToString(value) {
    // TODO handle Infinity and -Infinity
    if (__WEBPACK_IMPORTED_MODULE_2__utils_Type__["isNaN"](value)) {
        return "NaN";
    }
    if (value === Infinity) {
        return "Infinity";
    }
    if (value === -Infinity) {
        return "-Infinity";
    }
    // Negative 0
    if ((value === 0) && (1 / value === -Infinity)) {
        return "-0";
    }
    // Preserve negative and deal with absoute values
    var negative = value < 0;
    value = Math.abs(value);
    // TODO test this
    var parsed = __WEBPACK_IMPORTED_MODULE_2__utils_Type__["getValue"](/^([0-9]+)(?:\.([0-9]+))?(?:e[\+\-]([0-9]+))?$/.exec("" + value));
    var digits = parsed[1];
    var decimals = parsed[2] || "";
    var res;
    // Leave the nummber as it is if it does not use exponents
    if (parsed[3] == null) {
        res = (decimals === "" ? digits : digits + "." + decimals);
    }
    else {
        var exponent = +parsed[3];
        // Deal with decimals
        if (value < 1) {
            var zeros = exponent - 1;
            res = "0." + __WEBPACK_IMPORTED_MODULE_3__String__["repeat"]("0", zeros) + digits + decimals;
            // Deal with integers
        }
        else {
            var zeros = exponent - decimals.length;
            if (zeros === 0) {
                res = digits + decimals;
            }
            else if (zeros < 0) {
                res = digits + decimals.slice(0, zeros) + "." + decimals.slice(zeros);
            }
            else {
                res = digits + decimals + __WEBPACK_IMPORTED_MODULE_3__String__["repeat"]("0", zeros);
            }
        }
    }
    return negative ? "-" + res : res;
}
/**
 * Converts anything to Date object.
 *
 * @param  {Date | number | string}  value  A value of any type
 * @return {Date}                           Date object representing a value
 */
function anyToDate(value) {
    if (__WEBPACK_IMPORTED_MODULE_2__utils_Type__["isDate"](value)) {
        // TODO maybe don't create a new Date ?
        return new Date(value);
    }
    else if (__WEBPACK_IMPORTED_MODULE_2__utils_Type__["isNumber"](value)) {
        return new Date(value);
    }
    else {
        // Try converting to number (assuming timestamp)
        var num = Number(value);
        if (!__WEBPACK_IMPORTED_MODULE_2__utils_Type__["isNumber"](num)) {
            return new Date(value);
        }
        else {
            return new Date(num);
        }
    }
}
/**
 * Tries converting any value to a number.
 *
 * @param  {any}     value  Source value
 * @return {number}         Number
 */
function anyToNumber(value) {
    if (__WEBPACK_IMPORTED_MODULE_2__utils_Type__["isDate"](value)) {
        return value.getTime();
    }
    else if (__WEBPACK_IMPORTED_MODULE_2__utils_Type__["isNumber"](value)) {
        return value;
    }
    else if (__WEBPACK_IMPORTED_MODULE_2__utils_Type__["isString"](value)) {
        // Try converting to number (assuming timestamp)
        var num = Number(value);
        if (!__WEBPACK_IMPORTED_MODULE_2__utils_Type__["isNumber"](num)) {
            // Failing
            return undefined;
        }
        else {
            return num;
        }
    }
}
/**
 * ============================================================================
 * DATE-RELATED FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Returns a year day.
 *
 * @param  {Date}     date  Date
 * @param  {boolean}  utc   Assume UTC dates?
 * @return {number}         Year day
 * @todo Account for UTC
 */
function getYearDay(date, utc) {
    if (utc === void 0) { utc = false; }
    var first = new Date(date.getFullYear(), 0, 1, 0, 0, 0, 0);
    return Math.floor((date.getTime() - first.getTime()) / 86400000) + 1;
}
/**
 * Returns week number for a given date.
 *
 * @param  {Date}     date  Date
 * @param  {boolean}  utc   Assume UTC dates?
 * @return {number}         Week number
 * @todo Account for UTC
 */
function getWeek(date, utc) {
    if (utc === void 0) { utc = false; }
    var day = getYearDay(date, utc) - 1;
    var week = Math.floor((day - (date.getDay() || 7) + 10) / 7);
    if (week === 0) {
        week = 53;
    }
    else if (week === 53) {
        week = 1;
    }
    return week;
}
/**
 * Returns a week number in the month.
 *
 * @param  {Date}     date  Source Date
 * @param  {boolean}  utc   Assume UTC dates?
 * @return {number}         Week number in month
 */
function getMonthWeek(date, utc) {
    if (utc === void 0) { utc = false; }
    var firstWeek = getWeek(new Date(date.getFullYear(), date.getMonth(), 1), utc);
    var currentWeek = getWeek(date, utc);
    if (currentWeek == 1) {
        currentWeek = 53;
    }
    return currentWeek - firstWeek + 1;
}
/**
 * Returns a year day out of the given week number.
 *
 * @param  {number}   week     Week
 * @param  {number}   year     Year
 * @param  {number}   weekday  Weekday
 * @param  {boolean}  utc      Assume UTC dates
 * @return {number}            Day in a year
 */
function getDayFromWeek(week, year, weekday, utc) {
    if (weekday === void 0) { weekday = 1; }
    if (utc === void 0) { utc = false; }
    var date = new Date(year, 0, 4, 0, 0, 0, 0);
    if (utc) {
        date.setUTCFullYear(year);
    }
    var day = week * 7 + weekday - ((date.getDay() || 7) + 3);
    return day;
}
/**
 * Returns 12-hour representation out of the 24-hour hours.
 *
 * @param  {number}  hours  24-hour number
 * @return {number}         12-hour number
 */
function get12Hours(hours, base) {
    if (hours > 12) {
        hours -= 12;
    }
    else if (hours === 0) {
        hours = 12;
    }
    return __WEBPACK_IMPORTED_MODULE_2__utils_Type__["hasValue"](base) ? hours + (base - 1) : hours;
}
/**
 * Returns a string name of the tome zone.
 *
 * @param  {Date}     date     Date object
 * @param  {boolean}  long     Should return long ("Pacific Standard Time") or short abbreviation ("PST")
 * @param  {boolean}  savings  Include information if it's in daylight savings mode
 * @param  {boolean}  utc      Assume UTC dates
 * @return {string}            Time zone name
 */
function getTimeZone(date, long, savings, utc) {
    if (long === void 0) { long = false; }
    if (savings === void 0) { savings = false; }
    if (utc === void 0) { utc = false; }
    if (utc) {
        return long ? "Coordinated Universal Time" : "UTC";
    }
    var wotz = date.toLocaleString("UTC");
    var wtz = date.toLocaleString("UTC", { timeZoneName: long ? "long" : "short" }).substr(wotz.length);
    //wtz = wtz.replace(/[+-]+[0-9]+$/, "");
    if (savings === false) {
        wtz = wtz.replace(/ (standard|daylight|summer|winter) /i, " ");
    }
    return wtz;
}
/**
 * ============================================================================
 * NUMBER-RELATED FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Returns a random number between `from` and `to`.
 *
 * @param  {number}  from  From number
 * @param  {number}  to    To number
 * @return {number}        Random number
 */
function random(from, to) {
    return Math.floor(Math.random() * to) + from;
}
/**
 * Fits the number into specific `min` and `max` bounds.
 *
 * @param  {number}  value  Input value
 * @param  {number}  min    Minimum value
 * @param  {number}  max    Maximum value
 * @return {number}         Possibly adjusted value
 */
function fitNumber(value, min, max) {
    if (value > max) {
        return max;
    }
    else if (value < min) {
        return min;
    }
    return value;
}
/**
 * Fits the number into specific `min` and `max` bounds.
 *
 * If the value is does not fit withing specified range, it "wraps" around the
 * values.
 *
 * For example, if we have input value 10 with min set at 1 and max set at 8,
 * the value will not fit. The remainder that does not fit (2) will be added
 * to `min`, resulting in 3.
 *
 * The output of regular `fitNumber()` would return 8 instead.
 *
 * @param  {number}  value  Input value
 * @param  {number}  min    Minimum value
 * @param  {number}  max    Maximum value
 * @return {number}         Possibly adjusted value
 */
function fitNumberRelative(value, min, max) {
    var gap = max - min;
    if (value > max) {
        value = min + (value - gap * Math.floor(value / gap));
    }
    else if (value < min) {
        value = min + (value - gap * Math.floor(value / gap));
    }
    return value;
}
/**
 * ============================================================================
 * SPRITE-RELATED FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Converts SVG element coordinates to coordinates within specific [[Sprite]].
 *
 * @param  {IPoint}  point   SVG coordinates
 * @param  {Sprite}  sprite  Sprite
 * @return {IPoint}         Sprite coordinates
 */
function svgPointToSprite(point, sprite) {
    var x = point.x;
    var y = point.y;
    var sprites = [];
    while (__WEBPACK_IMPORTED_MODULE_2__utils_Type__["hasValue"](sprite.parent)) {
        sprites.push(sprite);
        sprite = sprite.parent;
    }
    sprites.reverse();
    for (var i = 0; i < sprites.length; i++) {
        var sprite_1 = sprites[i];
        var angle = sprite_1.rotation;
        var relativeX = x - sprite_1.pixelX;
        var relativeY = y - sprite_1.pixelY;
        if (sprite_1.dx) {
            x -= sprite_1.dx;
        }
        if (sprite_1.dy) {
            y -= sprite_1.dy;
        }
        x = (__WEBPACK_IMPORTED_MODULE_1__utils_Math__["cos"](-angle) * relativeX - __WEBPACK_IMPORTED_MODULE_1__utils_Math__["sin"](-angle) * relativeY) / sprite_1.scale - sprite_1.pixelPaddingLeft;
        y = (__WEBPACK_IMPORTED_MODULE_1__utils_Math__["cos"](-angle) * relativeY + __WEBPACK_IMPORTED_MODULE_1__utils_Math__["sin"](-angle) * relativeX) / sprite_1.scale - sprite_1.pixelPaddingTop;
    }
    return { x: x, y: y };
}
/**
 * Converts coordinates within [[Sprite]] to coordinates relative to the whole
 * SVG element.
 *
 * @param  {IPoint}  point   Sprite coordinates
 * @param  {Sprite}  sprite  Sprite
 * @return {IPoint}          SVG coordinates
 */
function spritePointToSvg(point, sprite) {
    var x = point.x;
    var y = point.y;
    while (__WEBPACK_IMPORTED_MODULE_2__utils_Type__["hasValue"](sprite.parent)) {
        var angle = sprite.rotation;
        x += sprite.pixelPaddingLeft;
        y += sprite.pixelPaddingTop;
        if (sprite.dx) {
            x += sprite.dx;
        }
        if (sprite.dy) {
            y += sprite.dy;
        }
        var relativeX = sprite.pixelX + ((x * __WEBPACK_IMPORTED_MODULE_1__utils_Math__["cos"](angle) - y * __WEBPACK_IMPORTED_MODULE_1__utils_Math__["sin"](angle))) * sprite.scale;
        var relativeY = sprite.pixelY + ((x * __WEBPACK_IMPORTED_MODULE_1__utils_Math__["sin"](angle) + y * __WEBPACK_IMPORTED_MODULE_1__utils_Math__["cos"](angle))) * sprite.scale;
        x = relativeX;
        y = relativeY;
        sprite = sprite.parent;
    }
    return { x: x, y: y };
}
/**
 * Converts coordinates of one sprite to another.
 *
 * @param  {IPoint}  point   Sprite coordinates
 * @param  {Sprite}  sprite  Sprite
 * @param  {Sprite}  toSprite  Sprite
 * @return {IPoint}  converted coordinates
 */
function spritePointToSprite(point, sprite, toSprite) {
    return svgPointToSprite(spritePointToSvg(point, sprite), toSprite);
}
/**
 * Converts a rectangle expressed in SVG element coordinates to coordinates
 * within specific [[Sprite]].
 *
 * @param  {IRectangle}  rect    SVG rectangle
 * @param  {Sprite}      sprite  Sprite
 * @return {IRectangle}          Sprite rectangle
 */
function svgRectToSprite(rect, sprite) {
    var p1 = svgPointToSprite(rect, sprite);
    var p2 = svgPointToSprite({ x: rect.x + rect.width, y: rect.y + rect.height }, sprite);
    return { x: p1.x, y: p1.y, width: p2.x - p1.x, height: p2.y - p1.y };
}
/**
 * Converts a rectangle expressed in [[Sprite]] coordinates to SVG coordinates.
 *
 * @param  {IRectangle}  rect    Sprite rectangle
 * @param  {Sprite}      sprite  Sprite
 * @return {IRectangle}          SVG rectangle
 */
function spriteRectToSvg(rect, sprite) {
    var p1 = spritePointToSvg(rect, sprite);
    var p2 = spritePointToSvg({ x: rect.x + rect.width, y: rect.y + rect.height }, sprite);
    return { x: p1.x, y: p1.y, width: p2.x - p1.x, height: p2.y - p1.y };
}
/**
 * Converts global document-wide coordinates to coordinates within SVG element.
 *
 * @param  {IPoint}       point         Global coordinates
 * @param  {HTMLElement}  svgContainer  SVG element
 * @return {IPoint}                     SVG coordinates
 */
function documentPointToSvg(point, svgContainer) {
    var bbox = svgContainer.getBoundingClientRect();
    return {
        "x": point.x - bbox.left,
        "y": point.y - bbox.top
    };
}
/**
 * Converts SVG coordinates to global document-wide coordinates.
 *
 * @param  {IPoint}       point         SVG coordinates
 * @param  {HTMLElement}  svgContainer  SVG element
 * @return {IPoint}                     Global coordinates
 */
function svgPointToDocument(point, svgContainer) {
    var bbox = svgContainer.getBoundingClientRect();
    return {
        "x": point.x + bbox.left,
        "y": point.y + bbox.top
    };
}
/**
 * Converts document-wide global coordinates to coordinates within specific
 * [[Sprite]].
 *
 * @param  {IPoint}  point   Global coordinates
 * @param  {Sprite}  sprite  Sprite
 * @return {IPoint}          Sprite coordinates
 */
function documentPointToSprite(point, sprite) {
    var svgPoint = documentPointToSvg(point, sprite.htmlContainer);
    return svgPointToSprite(svgPoint, sprite);
}
/**
 * Converts coordinates within [[Sprite]] to global document coordinates.
 *
 * @param  {IPoint}  point   Sprite coordinates
 * @param  {Sprite}  sprite  Sprite
 * @return {IPoint}          Global coordinates
 */
function spritePointToDocument(point, sprite) {
    var svgPoint = spritePointToSvg(point, sprite);
    return svgPointToDocument(svgPoint, sprite.htmlContainer);
}
/**
 * ============================================================================
 * DEPRECATED FUNCTIONS
 * @todo Review and remove
 * ============================================================================
 * @hidden
 */
/**
 * Returns element's width.
 *
 * @ignore Exclude from docs
 * @param  {HTMLElement}  element  Element
 * @return {number}                Width (px)
 * @deprecated Not used anywhere
 */
function width(element) {
    return element.clientWidth;
}
/**
 * Returns element's height.
 *
 * @ignore Exclude from docs
 * @param  {HTMLElement}  element  Element
 * @return {number}                Height (px)
 * @deprecated Not used anywhere
 */
function height(element) {
    return element.clientHeight;
}
/**
 * Returns number of decimals
 *
 * @ignore Exclude from docs
 * @param  {number}  number  Input number
 * @return {number}          Number of decimals
 */
function decimalPlaces(number) {
    var match = ('' + number).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
    if (!match) {
        return 0;
    }
    return Math.max(0, (match[1] ? match[1].length : 0) - (match[2] ? +match[2] : 0));
}
//# sourceMappingURL=Utils.js.map

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Percent; });
/* harmony export (immutable) */ __webpack_exports__["c"] = percent;
/* harmony export (immutable) */ __webpack_exports__["b"] = isPercent;
/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Represents a relative value. (percent)
 */
var Percent = /** @class */ (function () {
    /**
     * Constructor.
     *
     * @param {number}  percent  Percent value
     */
    function Percent(percent) {
        this._value = percent;
    }
    Object.defineProperty(Percent.prototype, "value", {
        /**
         * Relative value.
         *
         * E.g. 100% is 1, 50% is 0.5, etc.
         *
         * This is useful to apply transformations to other values. E.g.:
         *
         * ```TypeScript
         * let value = 256;
         * let percent = new am4core.Percent(50);
         * console.log(value * percent.value); // outputs 128
         * ```
         * ```JavaScript
         * var value = 256;
         * var percent = new am4core.Percent(50);
         * console.log(value * percent.value); // outputs 128
         * ```
         *
         * @readonly
         * @return {number} Relative value
         */
        get: function () {
            return this._value / 100;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Percent.prototype, "percent", {
        /**
         * Value in percent.
         *
         * @return {number} Percent
         */
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    return Percent;
}());

/**
 * Converts numeric percent value to a proper [[Percent]] object.
 *
 * ```TypeScript
 * pieSeries.radius = am4core.percent(80);
 * ```
 * ```JavaScript
 * pieSeries.radius = am4core.percent(80);
 * ```
 *
 * @param  {number}   value  Percent
 * @return {Percent}         Percent object
 */
function percent(value) {
    return new Percent(value);
}
/**
 * Checks if value is a [[Percent]] object.
 *
 * @ignore Exclude from docs
 * @param  {any}      value  Input value
 * @return {boolean}         Is percent?
 */
function isPercent(value) {
    return value instanceof Percent;
}
//# sourceMappingURL=Percent.js.map

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["polyline"] = polyline;
/* harmony export (immutable) */ __webpack_exports__["moveTo"] = moveTo;
/* harmony export (immutable) */ __webpack_exports__["lineTo"] = lineTo;
/* harmony export (immutable) */ __webpack_exports__["quadraticCurveTo"] = quadraticCurveTo;
/* harmony export (immutable) */ __webpack_exports__["cubicCurveTo"] = cubicCurveTo;
/* harmony export (immutable) */ __webpack_exports__["closePath"] = closePath;
/* harmony export (immutable) */ __webpack_exports__["arcTo"] = arcTo;
/* harmony export (immutable) */ __webpack_exports__["arc"] = arc;
/* harmony export (immutable) */ __webpack_exports__["arcToPoint"] = arcToPoint;
/* harmony export (immutable) */ __webpack_exports__["rectangle"] = rectangle;
/* harmony export (immutable) */ __webpack_exports__["rectToPath"] = rectToPath;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Type__ = __webpack_require__(1);
/**
 * A collection of functions that deals with path calculations.
 */


/**
 * ============================================================================
 * PATH FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Returns an SVG path from a number of points.
 *
 * @ignore Exclude from docs
 * @param  {IPoint[]}  points  An array of line elbow points
 * @return {string}            SVG path
 */
function polyline(points) {
    var path = lineTo(points[0]);
    for (var i = 0; i < points.length; i++) {
        path += lineTo(points[i]);
    }
    return path;
}
/**
 * Returns a starting point of an SVG path.
 *
 * @ignore Exclude from docs
 * @param  {IPoint}  point  Starting point
 * @return {string}         SVG path
 */
function moveTo(point) {
    return " M" + __WEBPACK_IMPORTED_MODULE_0__utils_Math__["round"](point.x, 4) + "," + __WEBPACK_IMPORTED_MODULE_0__utils_Math__["round"](point.y, 4) + " ";
}
/**
 * Returns a line part of SVG path.
 *
 * @ignore Exclude from docs
 * @param  {IPoint}  point  SVG path
 * @return {string}         SVG path
 */
function lineTo(point) {
    return " L" + __WEBPACK_IMPORTED_MODULE_0__utils_Math__["round"](point.x, 4) + "," + __WEBPACK_IMPORTED_MODULE_0__utils_Math__["round"](point.y, 4) + " ";
}
/**
 * Returns a quadratic curve part of an SVG path.
 *
 * @ignore Exclude from docs
 * @param  {IPoint}  point         End point of the curve
 * @param  {IPoint}  controlPoint  Control point
 * @return {string}                SVG path
 */
function quadraticCurveTo(point, controlPoint) {
    return " Q" + __WEBPACK_IMPORTED_MODULE_0__utils_Math__["round"](controlPoint.x, 4)
        + "," + __WEBPACK_IMPORTED_MODULE_0__utils_Math__["round"](controlPoint.y, 4) + " " + __WEBPACK_IMPORTED_MODULE_0__utils_Math__["round"](point.x, 4)
        + "," + __WEBPACK_IMPORTED_MODULE_0__utils_Math__["round"](point.y, 4);
}
/**
 * Returns a cubic curve part of an SVG path.
 *
 * @ignore Exclude from docs
 * @param  {IPoint}  point          End point of the curve
 * @param  {IPoint}  controlPointA  Control point A
 * @param  {IPoint}  controlPointB  Control point B
 * @return {string}                 SVG path
 */
function cubicCurveTo(point, controlPointA, controlPointB) {
    return " C" + __WEBPACK_IMPORTED_MODULE_0__utils_Math__["round"](controlPointA.x, 4)
        + "," + __WEBPACK_IMPORTED_MODULE_0__utils_Math__["round"](controlPointA.y, 4) + " " + __WEBPACK_IMPORTED_MODULE_0__utils_Math__["round"](controlPointB.x, 4)
        + "," + __WEBPACK_IMPORTED_MODULE_0__utils_Math__["round"](controlPointB.y, 4) + " " + __WEBPACK_IMPORTED_MODULE_0__utils_Math__["round"](point.x, 4)
        + "," + __WEBPACK_IMPORTED_MODULE_0__utils_Math__["round"](point.y, 4);
}
/**
 * Returns a terminator for an SVG path.
 *
 * @ignore Exclude from docs
 * @return {string} SVG path
 */
function closePath() {
    return " Z";
}
/**
 * Returns an arc part of an SVG path.
 *
 * @ignore Exclude from docs
 * @todo Better parameter descriptions
 * @param  {number}  startAngle  Starting angle
 * @param  {number}  arc         Arc
 * @param  {number}  radius      Radius
 * @param  {number}  radiusY     Vertical radius
 * @return {string}              SVG path
 */
function arcTo(startAngle, arc, radius, radiusY) {
    if (arc == 0) {
        return "";
    }
    if (!__WEBPACK_IMPORTED_MODULE_1__utils_Type__["isNumber"](radiusY)) {
        radiusY = radius;
    }
    var path = "";
    var c = ",";
    var segments = Math.ceil(Math.abs(arc) / 180);
    var l = 1;
    if (arc < 0) {
        l = 0;
    }
    // center
    var cx = -__WEBPACK_IMPORTED_MODULE_0__utils_Math__["cos"](startAngle) * radius;
    var cy = -__WEBPACK_IMPORTED_MODULE_0__utils_Math__["sin"](startAngle) * radiusY;
    // previous, as we use a not A
    var pax = 0;
    var pay = 0;
    for (var i = 0; i < segments; i++) {
        var endAngle = startAngle + arc / segments * (i + 1);
        var ax = __WEBPACK_IMPORTED_MODULE_0__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_0__utils_Math__["cos"](endAngle) * radius + cx - pax, 4);
        var ay = __WEBPACK_IMPORTED_MODULE_0__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_0__utils_Math__["sin"](endAngle) * radiusY + cy - pay, 4);
        path += " a" + radius + c + radiusY + c + 0 + c + 0 + c + l + c + ax + c + ay;
        pax = ax;
        pay = ay;
    }
    return path;
}
/**
 * Creates an arc path.
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {number}  startAngle         [description]
 * @param  {number}  arc                [description]
 * @param  {number}  radius             [description]
 * @param  {number}  innerRadius        [description]
 * @param  {number}  radiusY            [description]
 * @param  {number}  cornerRadius       [description]
 * @param  {number}  innerCornerRadius  [description]
 * @return {string}                     SVG path
 */
function arc(startAngle, arc, radius, innerRadius, radiusY, cornerRadius, innerCornerRadius) {
    if (arc == 0 || radius <= 0) {
        return "";
    }
    if (radius < innerRadius) {
        var temp = radius;
        radius = innerRadius;
        innerRadius = temp;
        radiusY = radiusY / innerRadius * radius;
    }
    arc = __WEBPACK_IMPORTED_MODULE_0__utils_Math__["min"](arc, 360);
    if (arc == 360) {
        cornerRadius = 0;
        innerCornerRadius = 0;
    }
    var endAngle = startAngle + arc;
    var crSin = __WEBPACK_IMPORTED_MODULE_0__utils_Math__["sin"](__WEBPACK_IMPORTED_MODULE_0__utils_Math__["min"](arc, 45) / 2);
    innerRadius = innerRadius || 0;
    radiusY = __WEBPACK_IMPORTED_MODULE_1__utils_Type__["isNumber"](radiusY) ? radiusY : radius;
    cornerRadius = cornerRadius || 0;
    innerCornerRadius = __WEBPACK_IMPORTED_MODULE_1__utils_Type__["isNumber"](innerCornerRadius) ? innerCornerRadius : cornerRadius;
    var innerRadiusY = (radiusY / radius) * innerRadius;
    var cornerRadiusY = (radiusY / radius) * cornerRadius;
    var innerCornerRadiusY = (radiusY / radius) * innerCornerRadius;
    cornerRadius = __WEBPACK_IMPORTED_MODULE_0__utils_Math__["fitToRange"](cornerRadius, 0, (radius - innerRadius) / 2);
    cornerRadiusY = __WEBPACK_IMPORTED_MODULE_0__utils_Math__["fitToRange"](cornerRadiusY, 0, (radiusY - innerRadiusY) / 2);
    innerCornerRadius = __WEBPACK_IMPORTED_MODULE_0__utils_Math__["fitToRange"](innerCornerRadius, 0, (radius - innerRadius) / 2);
    innerCornerRadiusY = __WEBPACK_IMPORTED_MODULE_0__utils_Math__["fitToRange"](innerCornerRadiusY, 0, (radiusY - innerRadiusY) / 2);
    cornerRadius = __WEBPACK_IMPORTED_MODULE_0__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_0__utils_Math__["fitToRange"](cornerRadius, 0, radius * crSin), 4);
    cornerRadiusY = __WEBPACK_IMPORTED_MODULE_0__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_0__utils_Math__["fitToRange"](cornerRadiusY, 0, radiusY * crSin), 4);
    innerCornerRadius = __WEBPACK_IMPORTED_MODULE_0__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_0__utils_Math__["fitToRange"](innerCornerRadius, 0, innerRadius * crSin), 4);
    innerCornerRadiusY = __WEBPACK_IMPORTED_MODULE_0__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_0__utils_Math__["fitToRange"](innerCornerRadiusY, 0, innerRadiusY * crSin), 4);
    var crAngle = Math.asin(cornerRadius / radius / 2) * __WEBPACK_IMPORTED_MODULE_0__utils_Math__["DEGREES"] * 2;
    var crAngleY = Math.asin(cornerRadiusY / radiusY / 2) * __WEBPACK_IMPORTED_MODULE_0__utils_Math__["DEGREES"] * 2;
    if (innerRadius < innerCornerRadius) {
        innerRadius = innerCornerRadius;
    }
    if (innerRadiusY < innerCornerRadiusY) {
        innerRadiusY = innerCornerRadiusY;
    }
    var crInnerAngle = Math.asin(innerCornerRadius / innerRadius / 2) * __WEBPACK_IMPORTED_MODULE_0__utils_Math__["DEGREES"] * 2;
    var crInnerAngleY = Math.asin(innerCornerRadiusY / innerRadiusY / 2) * __WEBPACK_IMPORTED_MODULE_0__utils_Math__["DEGREES"] * 2;
    if (!__WEBPACK_IMPORTED_MODULE_1__utils_Type__["isNumber"](crInnerAngle)) {
        crInnerAngle = 0;
    }
    if (!__WEBPACK_IMPORTED_MODULE_1__utils_Type__["isNumber"](crInnerAngleY)) {
        crInnerAngleY = 0;
    }
    var middleAngle = startAngle + arc / 2;
    var mPoint = { x: __WEBPACK_IMPORTED_MODULE_0__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_0__utils_Math__["cos"](middleAngle) * innerRadius, 4), y: __WEBPACK_IMPORTED_MODULE_0__utils_Math__["sin"](middleAngle) * innerRadiusY };
    var a0 = { x: __WEBPACK_IMPORTED_MODULE_0__utils_Math__["cos"](startAngle) * (innerRadius + innerCornerRadius), y: __WEBPACK_IMPORTED_MODULE_0__utils_Math__["sin"](startAngle) * (innerRadiusY + innerCornerRadiusY) };
    var b0 = { x: __WEBPACK_IMPORTED_MODULE_0__utils_Math__["cos"](startAngle) * (radius - cornerRadius), y: __WEBPACK_IMPORTED_MODULE_0__utils_Math__["sin"](startAngle) * (radiusY - cornerRadiusY) };
    var c0 = { x: __WEBPACK_IMPORTED_MODULE_0__utils_Math__["cos"](endAngle) * (radius - cornerRadius), y: __WEBPACK_IMPORTED_MODULE_0__utils_Math__["sin"](endAngle) * (radiusY - cornerRadiusY) };
    var d0 = { x: __WEBPACK_IMPORTED_MODULE_0__utils_Math__["cos"](endAngle) * (innerRadius + innerCornerRadius), y: __WEBPACK_IMPORTED_MODULE_0__utils_Math__["sin"](endAngle) * (innerRadiusY + innerCornerRadiusY) };
    var b1 = { x: __WEBPACK_IMPORTED_MODULE_0__utils_Math__["cos"](startAngle + crAngle) * radius, y: __WEBPACK_IMPORTED_MODULE_0__utils_Math__["sin"](startAngle + crAngleY) * radiusY };
    var d1 = { x: __WEBPACK_IMPORTED_MODULE_0__utils_Math__["cos"](endAngle - crInnerAngle) * innerRadius, y: __WEBPACK_IMPORTED_MODULE_0__utils_Math__["sin"](endAngle - crInnerAngleY) * innerRadiusY };
    // some magic math
    innerCornerRadius += innerCornerRadius * __WEBPACK_IMPORTED_MODULE_0__utils_Math__["sin"](crInnerAngle / 2);
    innerCornerRadiusY += innerCornerRadiusY * __WEBPACK_IMPORTED_MODULE_0__utils_Math__["sin"](crInnerAngleY / 2);
    if (crInnerAngle > (endAngle - startAngle) / 2) {
        d1 = mPoint;
    }
    var path = "";
    // start from b if this is full circle
    if (arc == 360) {
        path = moveTo(b0);
    }
    // otherwise start from a
    else {
        path = moveTo(a0);
        path += lineTo(b0);
        path += arcToPoint(b1, cornerRadius, cornerRadiusY, true);
    }
    // draw arc
    path += arcTo(startAngle + crAngle, arc - 2 * crAngle, radius, radiusY);
    // draw inner arc
    if (__WEBPACK_IMPORTED_MODULE_1__utils_Type__["isNumber"](innerRadius) && innerRadius != 0) {
        // move to B if this is full circle
        if (arc == 360 && cornerRadius == 0) {
            path += moveTo(d0);
        }
        // draw line otherwise
        else {
            path += arcToPoint(c0, cornerRadius, cornerRadiusY, true);
            path += lineTo(d0);
            path += arcToPoint(d1, innerCornerRadius, innerCornerRadiusY, true);
        }
        path += arcTo(endAngle - crInnerAngle, -(arc - 2 * crInnerAngle), innerRadius, innerRadiusY);
        if (arc < 360 || cornerRadius > 0) {
            path += arcToPoint(a0, innerCornerRadius, innerCornerRadiusY, true);
        }
        path += lineTo(a0);
    }
    else {
        path += arcToPoint(c0, cornerRadius, cornerRadiusY, true);
        if (arc < 360) {
            path += lineTo(a0);
        }
    }
    return path;
}
/**
 * Creates a path for an arc to specific coordinate.
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {IPoint}  point         Reference point
 * @param  {number}  radius        Radius
 * @param  {number}  radiusY       Vertical radius (for skewed arcs)
 * @param  {boolean} sweepFlag     [description]
 * @param  {boolean} largeArcFlag  [description]
 * @param  {number}  xAxisRotation [description]
 * @return {string}                Arc path
 */
function arcToPoint(point, radius, radiusY, sweepFlag, largeArcFlag, xAxisRotation) {
    if (radius == 0) {
        return "";
    }
    xAxisRotation = xAxisRotation || 0;
    largeArcFlag = Boolean(largeArcFlag);
    sweepFlag = Boolean(sweepFlag);
    var c = ",";
    var sweepFlagValue = +sweepFlag; // converts to 1 or 0
    var largeArcFlagValue = +largeArcFlag; // converts to 1 or 0
    return " A" + radius + c + radiusY + c + xAxisRotation + c + largeArcFlagValue + c + sweepFlagValue + c + __WEBPACK_IMPORTED_MODULE_0__utils_Math__["round"](point.x, 4) + c + __WEBPACK_IMPORTED_MODULE_0__utils_Math__["round"](point.y, 4);
}
/**
 * Creates a new rectangle.
 *
 * @ignore Exclude from docs
 * @param  {number}  width   Width (px)
 * @param  {number}  height  Height (px)
 * @param  {number}  x       X position
 * @param  {number}  y       Y position
 * @return {string}          Rectangle
 */
function rectangle(width, height, x, y) {
    if (!__WEBPACK_IMPORTED_MODULE_1__utils_Type__["isNumber"](x)) {
        x = 0;
    }
    if (!__WEBPACK_IMPORTED_MODULE_1__utils_Type__["isNumber"](y)) {
        y = 0;
    }
    return moveTo({ x: x, y: y }) + lineTo({ x: x + width, y: y }) + lineTo({ x: x + width, y: y + height }) + lineTo({ x: x, y: y + height }) + closePath();
}
/**
 * Converts a rectangle to an SVG path.
 *
 * @ignore Exclude from docs
 * @param  {IRectangle}  rect  Rectangle
 * @param  {boolean}     ccw   Counter-clockwise?
 * @return {string}            SVG path
 */
function rectToPath(rect, ccw) {
    var c = ",";
    var L = " L";
    if (ccw) {
        return "M" + rect.x
            + c + rect.y + L + rect.x
            + c + (rect.y + rect.height) + L + (rect.x + rect.width)
            + c + (rect.y + rect.height) + L + (rect.x + rect.width)
            + c + rect.y + L + rect.x
            + c + rect.y;
    }
    else {
        return "M" + rect.x
            + c + rect.y + L + (rect.x + rect.width)
            + c + rect.y + L + (rect.x + rect.width)
            + c + (rect.y + rect.height) + L + rect.x
            + c + (rect.y + rect.height) + L + rect.x
            + c + rect.y;
    }
}
//# sourceMappingURL=Path.js.map

/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return InterfaceColorSet; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Color__ = __webpack_require__(15);
/**
 * This module contains a version of ColorSet that can (and should) be used for
 * coloring UI elements.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * This module contains a version of ColorSet that can (and should) be used for
 * coloring UI elements.
 *
 * The main difference from the basic [[ColorSet]] is that instead of sequenced
 * colors, it uses a concept of named colors.
 *
 * This way, every element in the UI can extract an exact color theme author
 * meant for the specific purpose, like strokes, backgrounds, etc.
 */
var InterfaceColorSet = /** @class */ (function (_super) {
    __extends(InterfaceColorSet, _super);
    /**
     * Constructor
     */
    function InterfaceColorSet() {
        var _this = _super.call(this) || this;
        /**
         * Maps the list of purposes (like "stroke") to an index of color of the
         * color set.
         */
        _this._purposes = {
            stroke: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#e5e5e5"),
            fill: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#f3f3f3"),
            primaryButton: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#6794dc"),
            primaryButtonHover: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#6771dc"),
            primaryButtonDown: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#68dc75"),
            primaryButtonActive: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#68dc75"),
            primaryButtonText: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#FFFFFF"),
            primaryButtonStroke: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#FFFFFF"),
            secondaryButton: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#d9d9d9"),
            secondaryButtonHover: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#d9d9d9").brighten(-0.25),
            secondaryButtonDown: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#d9d9d9").brighten(-0.35),
            secondaryButtonActive: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#d9d9d9").brighten(0.35),
            secondaryButtonText: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#000000"),
            secondaryButtonStroke: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#FFFFFF"),
            grid: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#000000"),
            background: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#ffffff"),
            alternativeBackground: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#000000"),
            text: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#000000"),
            alternativeText: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#FFFFFF"),
            disabledBackground: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#999999"),
            positive: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#67dc75"),
            negative: Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])("#dc6788")
        };
        _this.className = "InterfaceColorSet";
        _this.applyTheme();
        return _this;
    }
    /**
     * Returns a color to be used for the specific purpose.
     *
     * ```TypeScript
     * let uicolors = new am4core.InterfaceColorSet();
     * console.log(uicolors.getFor("stroke"));
     * ```
     * ```JavaScript
     * var uicolors = new am4core.InterfaceColorSet();
     * console.log(uicolors.getFor("stroke"));
     * ```
     *
     * @param  {keyof ColorPurpose}  purpose  Color use purpuse
     * @return {Color}                        Color
     */
    InterfaceColorSet.prototype.getFor = function (purpose) {
        return this._purposes[purpose];
    };
    /**
     * Sets color to be used for the specific purpose.
     *
     * @param {keyof ColorPurpose}  purpose  Color use purpose
     * @param {Color}               color    Color
     */
    InterfaceColorSet.prototype.setFor = function (purpose, color) {
        this._purposes[purpose] = color;
    };
    return InterfaceColorSet;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["a" /* BaseObject */]));

//# sourceMappingURL=InterfaceColorSet.js.map

/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return visualProperties; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Sprite; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__SpriteState__ = __webpack_require__(70);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__SpriteEvents__ = __webpack_require__(119);
/* unused harmony reexport SpriteEventDispatcher */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Base__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Adapter__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Dictionary__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_Animation__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__rendering_fills_Pattern__ = __webpack_require__(73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__rendering_fills_LinearGradient__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__rendering_fills_RadialGradient__ = __webpack_require__(120);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__elements_Popup__ = __webpack_require__(91);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__elements_Modal__ = __webpack_require__(92);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__utils_Color__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__rendering_filters_Filter__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__interaction_Interaction__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__interaction_Mouse__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__System__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__Options__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__formatters_NumberFormatter__ = __webpack_require__(125);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__formatters_DateFormatter__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__formatters_DurationFormatter__ = __webpack_require__(126);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__utils_Language__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__export_Export__ = __webpack_require__(127);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__utils_Utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__utils_Strings__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__utils_Array__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__utils_Object__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__utils_Type__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_33__utils_Percent__ = __webpack_require__(7);
/**
 * This is the main class that encapsulates every object on the chart.
 *
 * If it's an element that is to be displayed on the screen at some point, its
 * class must extend [[Sprite]] class.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



































/**
 * Defines list ofvisual properties
 */
var visualProperties = ["fill", "fillOpacity", "stroke", "strokeOpacity", "strokeWidth", "strokeDasharray"]; // do not add opacity here, as it is used for showing/hiding
;
/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Sprite represents any displayable element.
 *
 * This is the main class that encapsulates every object on the chart.
 *
 * If it's an element that is to be displayed on the screen at some point, its
 * class must extend [[Sprite]] class.
 *
 * [[Sprite]] class represents the a hierarchical structure. Every object that
 * extends [[Sprite]] can have children, that would inherit their properties,
 * such as language, formatters, etc.
 *
 * @see {@link SpriteState}
 * @see {@link ISpriteEvents} for a list of available events
 * @see {@link ISpriteAdapters} for a list of available Adapters
 *
 * @todo Review child elements that need to go into `_disposers`
 * @important
 */
var Sprite = /** @class */ (function (_super) {
    __extends(Sprite, _super);
    /**
     * Constructor:
     * * Creates initial node
     * * Sets default properties
     * * Creates required default states
     * * Inits accessibility
     */
    function Sprite() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * Holds values for Sprite's properties.
         */
        _this.properties = {};
        /**
         * Event dispacther.
         *
         * @see {@link https://www.amcharts.com/docs/v4/concepts/event-listeners/} for more info about Events
         * @type {SpriteEventDispatcher<AMEvent<Sprite, ISpriteEvents>>} Event dispatcher instance
         */
        _this.events = new __WEBPACK_IMPORTED_MODULE_1__SpriteEvents__["a" /* SpriteEventDispatcher */](_this);
        /**
         * Holds Adapter.
         *
         * @see {@link https://www.amcharts.com/docs/v4/concepts/adapters/} for more info about Adapters
         * @type {Adapter<Sprite, ISpriteAdapters>}
         */
        _this.adapter = new __WEBPACK_IMPORTED_MODULE_3__utils_Adapter__["a" /* Adapter */](_this);
        /**
         * @ignore Exclude from docs
         * @todo Description
         */
        _this._bindings = {};
        /**
         * Holds indicator whether this sprite was already initialized.
         *
         * @ignore Exclude from docs
         * @type {boolean}
         */
        _this._inited = false;
        /**
         * If `sprite.hide()` is called and we have "hidden" state and
         * `transitionDuration > 0`, we set `isHiding` flag to `true` in order to
         * avoid restarting animations in case `hide()` method is called multiple
         * times.
         *
         * @type {boolean}
         */
        _this.isHiding = false;
        /**
         * If `sprite.hide()` is called, we set isHidden to true when sprite is hidden.
         * This was added becaus hidden state might have visibility set to true and so
         * there would not be possible to find out if a sprite is technically hidden or not.
         *
         * @type {boolean}
         */
        _this.isHidden = false;
        /**
         * This property indicates if Sprite is currently being revealed from hidden
         * state. This is used to prevent multiple calls to `sprite.show()` to
         * restart reveal animation. (if enabled)
         *
         * @type {boolean}
         */
        _this.isShowing = false;
        /**
         * Indicates if this element is a standalone instance. A "standalone
         * instance" means this is a autonomous object which maintains its own
         * set of controls like Preloader, Export, etc.
         *
         * @ignore Exclude from docs
         * @type {boolean}
         */
        _this.isStandaloneInstance = false;
        /**
         * Indicates if togglable Sprite is currently active (toggled on).
         *
         * @ignore Exclude from docs
         * @type {boolean}
         */
        _this._isActive = false;
        /**
         * A Sprite element to use as a mask for this Sprite.
         *
         * @ignore Exclude from docs
         * @type {MutableValueDisposer}
         */
        _this._mask = new __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__["d" /* MutableValueDisposer */]();
        /**
         * @ignore Exclude from docs
         * @todo Description
         * @type {number}
         */
        _this._positionPrecision = 3;
        /**
         * An instance of [[Language]].
         *
         * @ignore Exclude from docs
         * @type {Language}
         */
        _this._language = new __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__["d" /* MutableValueDisposer */]();
        /**
         * An URL to go to when user clicks on a this Sprite.
         *
         * @ignore Exclude from docs
         * @type {string}
         */
        _this._url = new __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__["d" /* MutableValueDisposer */]();
        /**
         * URL target to use.
         *
         * @ignore Exclude from docs
         * @type {string}
         */
        _this._urlTarget = "_self";
        /**
         * Indicates if the chart should follow righ-to-left rules.
         *
         * @ignore Exclude from docs
         * @type {boolean}
         */
        _this._rtl = false;
        /**
         * Holds [[Export]] object.
         *
         * @ignore Exclude from docs
         * @type {Export}
         */
        _this._exporting = new __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__["d" /* MutableValueDisposer */]();
        /**
         * Parent container.
         *
         * @ignore Exclude from docs
         * @type {MutableValueDisposer}
         */
        _this._parent = new __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__["d" /* MutableValueDisposer */]();
        /**
         * Defines bounding box (square) for this element.
         *
         * @ignore Exclude from docs
         * @type {IRectangle}
         */
        _this.bbox = { x: 0, y: 0, width: 0, height: 0 };
        /**
         * Indicates if this element is invalid and should be re-validated (redrawn).
         *
         * @ignore Exclude from docs
         * @type {boolean}
         */
        _this.invalid = false;
        /**
         * Indicates if this elements position is invalid and should be repositioned
         *
         * @ignore Exclude from docs
         * @type {boolean}
         */
        _this.positionInvalid = false;
        /**
         * A collection of key/value pairs that can be used to bind specific Sprite
         * properties to [[DataItem]].
         *
         * For example: `fill` property can be bound to `myCustomColor` field in
         * DataItem. The Sprite will automatically get the value for `fill` from its
         * DataItem.
         *
         * Can be set for each [[SpriteState]] individually to override default
         * bindings.
         *
         * @see {@link SpriteState}
         * @type {Object}
         */
        _this.propertyFields = {};
        /**
         * Specifies if a property changes on this object should be propaged to the
         * objects cloned from this object.
         *
         * This setting affects property chanegs *after* cloning, since at the moment
         * of cloning all of properties from source object are copied to the clone
         * anyway.
         *
         * @default false
         */
        _this.applyOnClones = false;
        // read only, sprite extreme coordinates
        /**
         * @ignore
         */
        _this.maxLeft = 0;
        /**
         * @ignore
         */
        _this.maxRight = 0;
        /**
         * @ignore
         */
        _this.maxTop = 0;
        /**
         * @ignore
         */
        _this.maxBottom = 0;
        _this._isDragged = false;
        /**
         * @deprecated Moved to [[SpriteProperties]]
         * @type {boolean}
         */
        _this._disabled = false;
        _this._internalDisabled = false;
        _this._internalDefaultsApplied = false;
        /**
         * Sets frequency at which this element should be rendered. Used to save CPU,
         * mostly for text elements.
         *
         * Higher number means this element will render more sluggishly by skipping
         * frames, but in doing so will use less resources.
         *
         * E.g. setting to 2 will make this element's renderer skip one frame, so any
         * changes to the element will be rendered 1/60 second later than it would
         * at default setting of 1.
         *
         * @type {number}
         */
        _this.renderingFrequency = 1;
        /**
         * Used to track frame number when `renderingFrequency` is > 2.
         * When `renderingFrame == 1`, Sprite renders.
         *
         * @ignore Exclude from docs
         */
        _this.renderingFrame = 1;
        /**
         * Time in milliseconds after which rollout event happens when user rolls-out of the sprite. This helps to avoid flickering in some cases.
         * @type {number}
         */
        _this.rollOutDelay = 0;
        /**
         * @ignore
         * this flag is set to true for the initial sprite you create and place to the div so that we could clear all additional sprites/containers when this sprite is disposed
         */
        _this.isBaseSprite = false;
        /**
         * Whether this sprite should be cloned when clonning it's parent container. We set this to falsse in those cases when a sprite is created by the class, so that when clonning
         * a duplicate sprite would not appear.
         *
         * @type {boolean}
         */
        _this.shouldClone = true;
        _this.className = "Sprite";
        // Generate a unique ID
        _this.uid;
        // Create SVG group to hold everything in
        _this.group = _this.paper.addGroup("g");
        // Set defaults
        _this.scale = 1;
        _this.rotation = 0;
        _this.align = "none";
        _this.valign = "none";
        _this.pixelPerfect = false;
        _this.marginTop = 0;
        _this.marginBottom = 0;
        _this.marginLeft = 0;
        _this.marginRight = 0;
        _this.paddingTop = 0;
        _this.paddingBottom = 0;
        _this.paddingRight = 0;
        _this.paddingLeft = 0;
        _this._prevMeasuredWidth = 0;
        _this._prevMeasuredHeight = 0;
        _this._measuredWidth = 0;
        _this._measuredHeight = 0;
        _this.verticalCenter = "none";
        _this.horizontalCenter = "none";
        // never do this!
        //this.verticalCenter = "top";		
        //this.horizontalCenter = "left";
        _this.isMeasured = true;
        // Invalidate the Sprite so that renderer knows it needs to be drawn
        _this.invalidate();
        // Create default and hidden states as they are two states that are used
        // extensively
        var hiddenState = _this.states.create("hidden");
        hiddenState.properties.opacity = 0;
        hiddenState.properties.visible = false;
        _this.states.create("default").properties.opacity = 1;
        // Apply the theme
        _this.applyTheme();
        //this._disposers.push(this._clickable);
        // Decorate adapter with events so that we can apply its settings whenever
        // it is modified
        // @todo Think what to do here. We can't just apply the adapter value to
        // property since not all of those are for properties. Commented out for
        // now.
        /*this.adapter.events.on("insert", (ev: any) => {
            (<any>this)[ev.newValue.key] = (<any>this)[ev.newValue.key];
        });
        this.adapter.events.on("remove", (ev: any) => {
            (<any>this)[ev.newValue.key] = (<any>this)[ev.newValue.key];
        });*/
        // Add disposable dependencies to `_disposers` so they are automatically
        // disposed of when this object is disposed
        _this._disposers.push(_this.events);
        _this._disposers.push(_this.group);
        _this._disposers.push(_this._url);
        _this._disposers.push(_this._mask);
        _this._disposers.push(_this._language);
        _this._disposers.push(_this._exporting);
        _this._disposers.push(_this._parent);
        //this._disposers.push(this._modal);
        _this._disposers.push(new __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__["b" /* Disposer */](function () {
            __WEBPACK_IMPORTED_MODULE_30__utils_Object__["each"](_this._bindings, function (key, value) {
                value.dispose();
            });
        }));
        return _this;
    }
    /**
     * ==========================================================================
     * ELEMENT VALIDATION, INIT, AND DRAWING STUFF
     * ==========================================================================
     * @hidden
     */
    /**
     * Applies properties from all assigned themes.
     *
     * We do this here so that we can apply class names as well.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.applyTheme = function () {
        _super.prototype.applyTheme.call(this);
        if (__WEBPACK_IMPORTED_MODULE_19__Options__["a" /* options */].autoSetClassName) {
            this.setClassName();
        }
    };
    /**
     * Returns theme(s) used by this object either set explicitly on this
     * element, inherited from parent, or inherited from [[System]].
     *
     * @return {ITheme} An array of theme references
     */
    Sprite.prototype.getCurrentThemes = function () {
        var themes = this._themes;
        if (themes) {
            return themes;
        }
        else {
            var parent_1 = this.parent;
            if (parent_1) {
                return parent_1.getCurrentThemes();
            }
            else {
                return __WEBPACK_IMPORTED_MODULE_20__Registry__["b" /* registry */].themes;
            }
        }
    };
    /**
     * Called just before element's validation, this function allows setting
     * defaults.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.applyInternalDefaults = function () {
        // Nothing here, but extending classes might override this function
        // so that they can set their defaults
        this._internalDefaultsApplied = true;
    };
    /**
     * Invalidates element.
     *
     * Object will be redrawn during the next update cycle.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.invalidate = function () {
        if (this.disabled || this.isTemplate) {
            return;
        }
        // We no longer reset this on each invalidate, so that they are applied
        // only once, and do not overwrite user-defined settings
        //this._internalDefaultsApplied = false;
        if (!this.invalid) {
            this.invalid = true;
            __WEBPACK_IMPORTED_MODULE_29__utils_Array__["a" /* add */](__WEBPACK_IMPORTED_MODULE_20__Registry__["b" /* registry */].invalidSprites, this);
        }
    };
    /**
     * Validates element:
     * * Triggers events
     * * Redraws the element
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.validate = function () {
        this.dispatchImmediately("beforevalidated");
        this.renderingFrame = this.renderingFrequency;
        // Set internal defaults
        if (!this._internalDefaultsApplied) {
            this.applyInternalDefaults();
        }
        this.beforeDraw();
        this.draw();
        this.invalid = false;
        __WEBPACK_IMPORTED_MODULE_29__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_20__Registry__["b" /* registry */].invalidSprites, this);
        this.afterDraw();
    };
    /**
     * Invalidates element's position.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.invalidatePosition = function () {
        if (this.disabled || this.isTemplate) {
            return;
        }
        if (!this.positionInvalid) {
            this.positionInvalid = true;
            __WEBPACK_IMPORTED_MODULE_29__utils_Array__["j" /* move */](__WEBPACK_IMPORTED_MODULE_20__Registry__["b" /* registry */].invalidPositions, this);
        }
    };
    /**
     * Transforms the element.
     *
     * @todo Description (review)
     * @ignore Exclude from docs
     */
    Sprite.prototype.validatePosition = function () {
        var x = this.pixelX + this.dx;
        var y = this.pixelY + this.dy;
        if (!this.invalid) {
            var elementTransformChanged = false;
            if (this.element) {
                var prevElementTransform = this.element.transformString;
                this.updateCenter();
                if (prevElementTransform != this.element.transformString) {
                    elementTransformChanged = true;
                }
            }
            var prevGroupTransform = this.group.transformString;
            this.group.moveTo({ x: x, y: y });
            this.group.rotation = this.rotation;
            if (this.nonScaling) {
                this.group.scale = this.scale / this.globalScale;
            }
            else {
                this.group.scale = this.scale;
            }
            var sizeChanged = this.measure();
            if (prevGroupTransform != this.group.transformString || elementTransformChanged || sizeChanged) {
                this.dispatchImmediately("transformed");
                // TODO clear existing positionchanged dispatches ?
                this.dispatch("positionchanged");
            }
        }
        else {
            this.updateCenter();
        }
        // it might happen that x and y changed again, so we only remove if they didn't
        if (this.pixelX + this.dx == x && this.pixelY + this.dy == y) {
            __WEBPACK_IMPORTED_MODULE_29__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_20__Registry__["b" /* registry */].invalidPositions, this);
            this.positionInvalid = false;
        }
        var maskRectangle = this._maskRectangle;
        // todo: verify this
        if (maskRectangle) {
            this._clipElement.moveTo({ x: maskRectangle.x - this.pixelX, y: maskRectangle.y - this.pixelY });
        }
    };
    /**
     * A placeholder method that is called **before** element begins to be drawn.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.beforeDraw = function () {
    };
    /**
     * A placeholder method that draws the element.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.draw = function () {
    };
    /**
     * A placeholder method that is called **after** element finishes drawing
     * itself.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.afterDraw = function () {
        if (this.isMeasured || this.horizontalCenter !== "none" || this.verticalCenter !== "none") {
            this.measureElement();
        }
        this.setSVGAttributes();
        this.dispatchImmediately("validated");
        if (!this._inited) {
            this.applyFilters();
            this.visible = this.visible;
            this.interactionsEnabled = this.interactionsEnabled;
            this._inited = true;
            this.dispatchImmediately("inited");
        }
        this.validatePosition();
        this.applyMask();
    };
    /**
     * Triggers a re-initialization of this element.
     *
     * Will result in complete redrawing of the element.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.reinit = function () {
        this._inited = false;
        this.setState(this.defaultState);
        this.invalidate();
    };
    /**
     * Handles the situation where parent element is resized.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.handleGlobalScale = function () {
        this.dispatch("globalscalechanged");
        if (this.nonScalingStroke) {
            this.strokeWidth = this.strokeWidth;
        }
        if (this.nonScaling) {
            this.invalidatePosition();
        }
        this.updateFilterScale();
    };
    /**
     * Updates filter properties which might depend on scale
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.updateFilterScale = function () {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_32__utils_Iterator__["each"](this.filters.iterator(), function (filter) {
            filter.scale = _this.globalScale;
        });
    };
    /**
     * Removes itself from system's invalid lists.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.removeFromInvalids = function () {
        __WEBPACK_IMPORTED_MODULE_29__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_20__Registry__["b" /* registry */].invalidSprites, this);
        __WEBPACK_IMPORTED_MODULE_29__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_20__Registry__["b" /* registry */].invalidPositions, this);
    };
    /**
     * Copies all parameters from another [[Sprite]].
     *
     * @param {Sprite} source Source Sprite
     */
    Sprite.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        this.events.copyFrom(source.events);
        this.isMeasured = source.isMeasured;
        this.states.copyFrom(source.states);
        this.filters.copyFrom(source.filters);
        this.adapter.copyFrom(source.adapter);
        this.interactions.copyFrom(source.interactions);
        this.configField = source.configField;
        this.applyOnClones = source.applyOnClones;
        this.renderingFrequency = source.renderingFrequency;
        // this.numberFormatter = source.numberFormatter; // todo: this creates loose number formatter and copies it to all clones. somehow we need to know if source had numberFormatter explicitly created and not just because a getter was called.
        //this.mask = source.mask; need to think about this, generally this causes a lot of problems
        this.disabled = source.disabled;
        //@todo: create tooltip if it's on source but not on this?
        var tooltip = this._tooltip;
        if (tooltip) {
            tooltip.copyFrom(source.tooltip);
        }
        this._showSystemTooltip = source.showSystemTooltip;
        __WEBPACK_IMPORTED_MODULE_26__utils_Utils__["copyProperties"](source.propertyFields, this.propertyFields);
        __WEBPACK_IMPORTED_MODULE_26__utils_Utils__["copyProperties"](source.properties, this);
        if (source.fillModifier) {
            this.fillModifier = source.fillModifier.clone();
        }
        if (source.strokeModifier) {
            this.strokeModifier = source.strokeModifier.clone();
        }
    };
    Sprite.prototype.dispose = function () {
        if (this.isBaseSprite) {
            if (this.htmlContainer) {
                while (this.htmlContainer.children.length > 0) {
                    this.htmlContainer.removeChild(this.htmlContainer.children[0]);
                }
            }
            this.isBaseSprite = false;
            var parent_2 = this.parent.parent;
            if (parent_2) {
                parent_2.dispose();
            }
        }
        _super.prototype.dispose.call(this);
        if (this._svgContainer) {
            this._svgContainer.dispose();
        }
        if (this._interactionDisposer) {
            this._interactionDisposer.dispose();
        }
        this.removeFromInvalids();
        if (this.element) {
            this.element.dispose();
        }
        if (this.group) {
            this.group.dispose();
        }
        this.parent = undefined;
        while (this.filters.length > 0) {
            var filter = this.filters.getIndex(0);
            filter.dispose();
            this.filters.removeValue(filter);
        }
        // remove from map
        if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](this.id)) {
            this.map.removeKey(this.id);
        }
    };
    Object.defineProperty(Sprite.prototype, "isTemplate", {
        /**
         * Returns if the the Sprite is template.
         *
         * @ignore Exclude from docs
         * @return {boolean} Is template?
         */
        get: function () {
            return this._isTemplate;
        },
        /**
         * Sets if this element is a "template".
         *
         * Template Sprites act only as a holders for config for other "real"
         * elements to be cloned from.
         *
         * Templates are treated differently, as they are not validated, redrawn, or
         * otherwise are processed.
         *
         * @param {boolean} value Is template?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toBoolean"](value);
            if (this._isTemplate != value) {
                this._isTemplate = value;
                if (this instanceof __WEBPACK_IMPORTED_MODULE_8__Container__["a" /* Container */]) {
                    __WEBPACK_IMPORTED_MODULE_32__utils_Iterator__["each"](this.children.iterator(), function (child) {
                        child.isTemplate = true;
                    });
                }
                if (value) {
                    this.parent = this.parent;
                    this.removeFromInvalids();
                }
                else {
                    this.invalidate();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "showSystemTooltip", {
        /**
         * Returns whether the element should attempt to construct itself in a way so
         * that system tooltip is shown if its `readerTitle` is set.
         *
         * @return {boolean} Show system tooltip?
         */
        get: function () {
            if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](this._showSystemTooltip)) {
                if (this.parent) {
                    return this.parent.showSystemTooltip;
                }
                else {
                    return false;
                }
            }
            return this._showSystemTooltip;
        },
        /**
         * Sets whether the element should attempt to construct itself in a way so
         * that system tooltip is shown if its `readerTitle` is set.
         *
         * @param {boolean} value Show system tooltip?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toBoolean"](value);
            this._showSystemTooltip = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "topParent", {
        /**
         * ==========================================================================
         * HIERARCHY AND STRUCTURE RELATED STUFF
         * ==========================================================================
         * @hidden
         */
        /**
         * Returns elements's top-level [[Container]].
         *
         * In most cases that will be a Chart.
         *
         * @return {Optional<Container>} Top-level ascendant
         */
        get: function () {
            if (this.parent) {
                if (this.parent.parent) {
                    return this.parent.topParent;
                }
                else {
                    return this.parent;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "parent", {
        /**
         * @return {Optional<Container>} Parent container
         */
        get: function () {
            return this._parent ? this._parent.get() : undefined;
        },
        /**
         * Elements' parent [[Container]].
         *
         * @param {Optional<Container>}  parent  Parent container
         */
        set: function (parent) {
            if (this.disabled || this.isTemplate) {
                return;
            }
            var currentPaper = this.paper;
            var oldParent = this._parent.get();
            if (oldParent != parent) {
                if (oldParent) {
                    oldParent.children.removeValue(this);
                }
                if (parent) {
                    if (parent.isTemplate) {
                        this.isTemplate = true;
                    }
                    this.paper = parent.paper;
                    parent.children.moveValue(this);
                    if (this._tooltip && !this._tooltipContainer) {
                        this._tooltip.parent = parent.tooltipContainer;
                    }
                    this._parent.set(parent, parent.events.on("globalscalechanged", this.handleGlobalScale, this));
                    if (!this._dataItem) {
                        this.dataItem = parent.dataItem;
                    }
                    if (currentPaper != parent.paper) {
                        this.appendDefs();
                    }
                }
                else {
                    this._parent.reset();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Moves `<defs>` to correct place in DOM.
     *
     * Some elements are initially created in "ghost" container. When moving
     * those into proper place in DOM, their respective `<defs>` need to be moved
     * as well.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.appendDefs = function () {
        if (this.filterElement) {
            this.paper.appendDef(this.filterElement);
        }
        var fill = this.fill;
        if (fill && fill.element) {
            this.paper.appendDef(fill.element);
        }
        var stroke = this.stroke;
        if (stroke && stroke.element) {
            this.paper.appendDef(stroke.element);
        }
        if (this.fillModifier && this.fill instanceof __WEBPACK_IMPORTED_MODULE_14__utils_Color__["a" /* Color */]) {
            var fill_1 = this.fillModifier.modify(this.fill);
            if (fill_1 && fill_1.element) {
                this.paper.appendDef(fill_1.element);
            }
        }
        if (this.strokeModifier && this.stroke instanceof __WEBPACK_IMPORTED_MODULE_14__utils_Color__["a" /* Color */]) {
            var stroke_1 = this.fillModifier.modify(this.stroke);
            if (stroke_1 && stroke_1.element) {
                this.paper.appendDef(stroke_1.element);
            }
        }
        if (this._clipPath) {
            this.paper.appendDef(this._clipPath);
        }
    };
    Object.defineProperty(Sprite.prototype, "map", {
        /**
         * Returns a [[Dictionary]] which maps object ids with their respective
         * objects.
         *
         * Can be used to retrieve any object by id, e.g.:
         *
         * ```TypeScript
         * console.log(mySprite.map.getKey("myid"));
         * ```
         * ```JavaScript
         * console.log(mySprite.map.getKey("myid"));
         * ```
         *
         * @ignore Exclude from docs
         * @return {Dictionary<string, any>} Map collection
         */
        get: function () {
            var top = this.topParent;
            if (top) {
                return top.map;
            }
            else if (!this._map) {
                this._map = new __WEBPACK_IMPORTED_MODULE_4__utils_Dictionary__["a" /* Dictionary */]();
            }
            return this._map;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "id", {
        /**
         * @return {string} ID
         */
        get: function () {
            return this._id;
        },
        /**
         * Element's user-defined ID.
         *
         * Will throw an Error if there already is an object with the same ID.
         *
         * Please note that above check will be performed withing the scope of the
         * current chart instance. It will not do checks across other chart instances
         * or in globally in DOM.
         *
         * Make sure the IDs are unique.
         *
         * @param {string} value ID
         */
        set: function (value) {
            if (this._id != value) {
                this._id = value;
                if (this.map.hasKey(value)) {
                    throw Error("Duplicate id (" + value + ") used on multiple objects.");
                }
                else {
                    this.map.setKey(value, this);
                }
                if (__WEBPACK_IMPORTED_MODULE_19__Options__["a" /* options */].autoSetClassName) {
                    this.setClassName();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "dom", {
        /**
         * ==========================================================================
         * ELEMENT AND DOM TREE MANIPULATION AND MEASURING
         * ==========================================================================
         * @hidden
         */
        /**
         * Returns DOM element reference associated with this element.
         *
         * @readonly
         * @return {SVGSVGElement} DOM element
         */
        get: function () {
            return this.group.node;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "paper", {
        /**
         * @ignore Exclude from docs
         * @return {Paper} Paper
         */
        get: function () {
            if (this._paper) {
                return this._paper;
            }
            else {
                if (this.parent) {
                    return this.parent.paper;
                }
            }
            return Object(__WEBPACK_IMPORTED_MODULE_18__System__["b" /* getSystem */])().ghostPaper;
        },
        /**
         * A [[Paper]] instance to place elements on.
         *
         * If there's no Paper set for this element, it goes up the ascendant tree
         * until it finds one.
         *
         * This method is used by important `addChild()` method, so it's essential
         * to have a [[Paper]] instance.
         *
         * If this element has a separate `htmlContainer` set, it will have a
         * [[Paper]] instance itself.
         *
         * @ignore Exclude from docs
         * @param {Paper}  paper  Paper
         */
        set: function (paper) {
            this.setPaper(paper);
        },
        enumerable: true,
        configurable: true
    });
    Sprite.prototype.setPaper = function (paper) {
        var oldPaper = this.paper;
        if (oldPaper != paper) {
            this._paper = paper;
            paper.append(this.group);
        }
    };
    Object.defineProperty(Sprite.prototype, "htmlContainer", {
        /**
         * @return {Optional<HTMLElement>} HTML element
         */
        get: function () {
            if (this._htmlContainer) {
                return this._htmlContainer;
            }
            else {
                if (this.parent) {
                    return this.parent.htmlContainer;
                }
            }
        },
        /**
         * An HTML element to be used when placing wrapper element (`<div>`)
         * for the whole chart.
         *
         * This is the same for **all** elements within the same chart.
         *
         * @param {Optional<HTMLElement>} htmlContainer HTML element
         */
        set: function (htmlContainer) {
            this._htmlContainer = htmlContainer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "titleElement", {
        /**
         * Creates (if not yet created) and returns element's `<title>` element.
         *
         * @ignore Exclude from docs
         * @return {AMElement} Title element
         */
        get: function () {
            if (!this._titleElement) {
                this._titleElement = this.paper.add("title");
                this.group.add(this._titleElement);
            }
            return this._titleElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "descriptionElement", {
        /**
         * Creates (if not yet created) and returns element's `<desc>` element.
         *
         * @ignore Exclude from docs
         * @return {AMElement} Desc element
         */
        get: function () {
            if (!this._descriptionElement) {
                this._descriptionElement = this.paper.add("desc");
                this.group.add(this._descriptionElement);
            }
            return this._descriptionElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "filters", {
        /**
         * Returns list of SVG filters (effects) applied to element. If the filter
         * list is not yet initilized, creates and returns an empty one.
         * Note, not all filters combine well with one another. We recommend using one filter per sprite.
         *
         * @return {ListTemplate<Filter>} List of filters
         */
        get: function () {
            if (!this._filters) {
                this._filters = new __WEBPACK_IMPORTED_MODULE_5__utils_List__["e" /* ListTemplate */](new __WEBPACK_IMPORTED_MODULE_15__rendering_filters_Filter__["a" /* Filter */]());
                // TODO only add certain events ?
                this._disposers.push(this._filters.events.onAll(this.applyFilters, this));
                this._disposers.push(new __WEBPACK_IMPORTED_MODULE_5__utils_List__["c" /* ListDisposer */](this._filters));
            }
            return this._filters;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets required SVG attributes. Must be called every time an element is
     * redrawn so that attributes are (re)applied.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.setSVGAttributes = function () {
        this.fill = this.fill;
        this.opacity = this.opacity;
        this.fillOpacity = this.fillOpacity;
        this.stroke = this.stroke;
        this.strokeOpacity = this.strokeOpacity;
        this.shapeRendering = this.shapeRendering;
        this.strokeDasharray = this.strokeDasharray;
        this.focusable = this.focusable;
        this.tabindex = this.tabindex;
        this.role = this.role;
    };
    /**
     * Sets an attribute directly on an SVG element.
     *
     * @ignore Exclude from docs
     * @param {ISVGAttribute} attribute Attribute object
     */
    Sprite.prototype.setSVGAttribute = function (attribute) {
        this.group.attr(attribute);
    };
    /**
     * Removes an attribute directly from SVG element.
     *
     * @param {string} attribute Attribute key to remove
     */
    Sprite.prototype.removeSVGAttribute = function (attribute) {
        this.group.removeAttr(attribute);
    };
    /**
     * Sets `class` attribute of the elements SVG node.
     *
     * Uses `am4core.options.classNamePrefix`.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.setClassName = function () {
        var className = this.className;
        var classNamePrefix = __WEBPACK_IMPORTED_MODULE_19__Options__["a" /* options */].classNamePrefix;
        if (this.element) {
            this.element.addClass(classNamePrefix + className);
        }
        this.group.addClass(classNamePrefix + className + "-group");
        if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](this.id)) {
            this.group.addClass(classNamePrefix + this.id);
        }
    };
    /**
     * Adds an `id` attribute the the element and returns the id.
     *
     * @ignore Exclude from docs
     * @return {string} Element's ID
     */
    Sprite.prototype.uidAttr = function () {
        this.element.attr({ "id": this.uid });
        return this.uid;
    };
    /**
     * [updateClipPath description]
     *
     * @todo Description
     */
    Sprite.prototype.updateClipPath = function () {
        var element = this._clipElement;
        if (element) {
            element.moveTo({ x: this.mask.pixelX, y: this.mask.pixelY });
        }
    };
    /**
     * Applies the mask Sprite.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.applyMask = function () {
        this.removeClipPath();
        var mask = this.mask;
        var maskRectangle = this._maskRectangle;
        if (mask || maskRectangle) {
            if (!this._clipPath) {
                this._clipPath = this.paper.addGroup("clipPath");
                this._disposers.push(this._clipPath);
            }
            if (this._maskRectangle) {
                this._clipElement = this.paper.add("rect");
                this._clipElement.attr({ "width": maskRectangle.width, "height": maskRectangle.height });
            }
            if (mask) {
                // Container
                if (mask instanceof __WEBPACK_IMPORTED_MODULE_8__Container__["a" /* Container */]) {
                    // create clip path
                    this._clipElement = this.paper.add("rect");
                    this._clipElement.attr({ "width": mask.pixelWidth, "height": mask.pixelHeight });
                }
                // Sprite
                else {
                    if (mask.element) {
                        this._clipElement = mask.element;
                    }
                }
            }
            if (this._clipElement) {
                this._clipPath.add(this._clipElement);
            }
            var id = __WEBPACK_IMPORTED_MODULE_20__Registry__["b" /* registry */].getUniqueId();
            this._clipPath.attr({ "id": id });
            this.group.attr({ "clip-path": "url(#" + id + ")" });
            this.paper.appendDef(this._clipPath);
        }
    };
    /**
     * Applies filters to the element.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.applyFilters = function () {
        var _this = this;
        // we create a separate filter for each sprite as otherwise it would be impossible to animate filter.
        // svg doesn't support multiple filters applied to one element, so we put all the primitives to one filterElement of a sprite.
        if (this.filters.length > 0) {
            var width_1 = 100;
            var height_1 = 100;
            if (!this.filterElement) {
                this.filterElement = this.paper.addGroup("filter");
                this._disposers.push(this.filterElement);
            }
            else {
                this.filterElement.removeChildNodes();
            }
            this.paper.appendDef(this.filterElement);
            var id = "filter-" + this.uid;
            this.filterElement.attr({ "id": id });
            __WEBPACK_IMPORTED_MODULE_32__utils_Iterator__["each"](this.filters.iterator(), function (filter) {
                filter.sprite = _this;
                filter.paper = _this.paper;
                filter.appendPrimitives(_this.filterElement);
                if (filter.width > width_1) {
                    width_1 = filter.width;
                }
                if (filter.height > height_1) {
                    height_1 = filter.height;
                }
                filter.scale = _this.globalScale;
            });
            this.filterElement.attr({ "width": width_1 + "%", "height": height_1 + "%", "x": -(width_1 - 100) / 2 + "%", "y": -(height_1 - 100) / 2 + "%" });
            this.group.attr({ "filter": "url(#" + id + ")" });
        }
        else if (this.filterElement) {
            this.group.removeAttr("filter");
            this.filterElement.removeChildNodes();
        }
    };
    /**
     * [removeClipPath description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    Sprite.prototype.removeClipPath = function () {
        if (this._clipPath) {
            //this._clipPath.dispose();
            this.removeDispose(this._clipPath);
            this._clipPath = undefined;
        }
    };
    Object.defineProperty(Sprite.prototype, "element", {
        /**
         * @return {AMElement} Element
         */
        get: function () {
            return this._element;
        },
        /**
         * The main element for this Sprite, usually an SVG `<g>`.
         *
         * All other sub-elements are created in it.
         *
         * @param {Optional<AMElement>}  element  Element
         */
        set: function (element) {
            // Destroy previous element if there was one before
            this.removeElement();
            // Set new element
            this._element = element;
            // Add element to group
            // Since we are adding Element to group, which is already in the
            // `.disposers` it will be removed automatically when Sprite is disposed
            // of
            this.group.add(element);
            // This is needed if someone is setting element not in draw method but
            // from outside
            if (!this.invalid) {
                this.validate();
            }
            if (__WEBPACK_IMPORTED_MODULE_19__Options__["a" /* options */].autoSetClassName) {
                this.setClassName();
            }
            this.setSVGAttributes();
            this.applyAccessibility();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "svgContainer", {
        /**
         * HTML container (`<div>`) which is used to place chart's `<svg>` element
         * in.
         *
         * @return {Optional<SVGContainer>} Container for chart elements
         */
        get: function () {
            if (this._svgContainer) {
                return this._svgContainer;
            }
            else {
                if (this.parent) {
                    return this.parent.svgContainer;
                }
            }
        },
        /**
         * Sets HTML container to add SVG and other chart elements to.
         *
         * @param {Optional<SVGContainer>} svgContainer Container for chart elements
         */
        set: function (svgContainer) {
            this._svgContainer = svgContainer;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Measures main element.
     *
     * Saves measurements into private `_bbox` property.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.measureElement = function () {
        if (this.element) {
            var svgBBox = this.element.getBBox();
            if (this.definedBBox) {
                this.bbox = this.definedBBox;
            }
            else {
                this.bbox = { x: svgBBox.x, y: svgBBox.y, width: svgBBox.width, height: svgBBox.height };
            }
        }
    };
    /**
     * Positions element according its center settings.
     *
     * @todo Description (review)
     * @ignore Exclude from docs
     */
    Sprite.prototype.updateCenter = function () {
        if (this.element) {
            var bbox = this.bbox;
            var ex = 0;
            var ey = 0;
            var elementX = bbox.x;
            var elementY = bbox.y;
            var elementWidth = bbox.width;
            var elementHeigth = bbox.height;
            var pixelPaddingLeft = this.pixelPaddingLeft;
            var pixelPaddingRight = this.pixelPaddingRight;
            var pixelPaddingTop = this.pixelPaddingTop;
            var pixelPaddingBottom = this.pixelPaddingBottom;
            // add padding to the measured size
            var measuredWidth = bbox.width + this.pixelPaddingLeft + this.pixelPaddingRight;
            var measuredHeight = bbox.height + this.pixelPaddingTop + this.pixelPaddingBottom;
            // extremes
            var left = bbox.x;
            var right = bbox.x + measuredWidth;
            var top_1 = bbox.y;
            var bottom = bbox.y + measuredHeight;
            switch (this.horizontalCenter) {
                case "none":
                    ex = elementX + pixelPaddingLeft;
                    break;
                case "left":
                    ex = pixelPaddingLeft;
                    break;
                case "middle":
                    ex = pixelPaddingLeft - (elementWidth + pixelPaddingRight + pixelPaddingLeft) / 2;
                    break;
                case "right":
                    ex = -pixelPaddingRight - elementWidth;
                    break;
            }
            switch (this.verticalCenter) {
                case "none":
                    ey = elementY + pixelPaddingTop;
                    break;
                case "top":
                    ey = pixelPaddingTop;
                    break;
                case "middle":
                    ey = pixelPaddingTop - (elementHeigth + pixelPaddingBottom + pixelPaddingTop) / 2;
                    break;
                case "bottom":
                    ey = -pixelPaddingBottom - elementHeigth;
                    break;
            }
            this._measuredHeight = measuredHeight;
            this._measuredWidth = measuredWidth;
            var x = __WEBPACK_IMPORTED_MODULE_27__utils_Math__["round"](ex - elementX, this._positionPrecision);
            var y = __WEBPACK_IMPORTED_MODULE_27__utils_Math__["round"](ey - elementY, this._positionPrecision);
            this.maxLeft = left + x - pixelPaddingLeft;
            this.maxRight = right + x - pixelPaddingLeft;
            this.maxTop = top_1 + y - pixelPaddingTop;
            this.maxBottom = bottom + y - pixelPaddingTop;
            if (this.pixelPerfect) {
                x -= 0.5;
                y -= 0.5;
            }
            this.element.moveTo({ x: x, y: y });
        }
    };
    /**
     * Measures the whole element.
     *
     * Returns `true` if the size has changed from the last measurement.
     *
     * @ignore Exclude from docs
     * @return {boolean} Did the size chance from the last measurement?
     */
    Sprite.prototype.measure = function () {
        this.updateCenter();
        var bbox = this.bbox;
        if (bbox) {
            var measuredWidth = this._measuredWidth;
            var measuredHeight = this._measuredHeight;
            // extremes
            var left = this.maxLeft;
            var right = this.maxRight;
            var top_2 = this.maxTop;
            var bottom = this.maxBottom;
            // non-parent wise size
            this._measuredWidthSelf = measuredWidth;
            this._measuredHeightSelf = measuredHeight;
            // if a sprite is rotated or scaled, calculate measured size after transformations
            if (this.rotation !== 0 || this.scale !== 1) {
                var svg = this.paper.svg;
                var matrix = svg.createSVGMatrix();
                var rotation = this.rotation;
                matrix.a = __WEBPACK_IMPORTED_MODULE_27__utils_Math__["cos"](rotation) * this.scale;
                matrix.c = -__WEBPACK_IMPORTED_MODULE_27__utils_Math__["sin"](rotation) * this.scale;
                matrix.e = 0;
                matrix.b = __WEBPACK_IMPORTED_MODULE_27__utils_Math__["sin"](rotation) * this.scale;
                matrix.d = __WEBPACK_IMPORTED_MODULE_27__utils_Math__["cos"](rotation) * this.scale;
                matrix.f = 0;
                var p1 = svg.createSVGPoint();
                p1.x = left;
                p1.y = top_2;
                var p2 = svg.createSVGPoint();
                p2.x = right;
                p2.y = top_2;
                var p3 = svg.createSVGPoint();
                p3.x = right;
                p3.y = bottom;
                var p4 = svg.createSVGPoint();
                p4.x = left;
                p4.y = bottom;
                var pt1 = p1.matrixTransform(matrix);
                var pt2 = p2.matrixTransform(matrix);
                var pt3 = p3.matrixTransform(matrix);
                var pt4 = p4.matrixTransform(matrix);
                left = Math.min(pt1.x, pt2.x, pt3.x, pt4.x);
                right = Math.max(pt1.x, pt2.x, pt3.x, pt4.x);
                top_2 = Math.min(pt1.y, pt2.y, pt3.y, pt4.y);
                bottom = Math.max(pt1.y, pt2.y, pt3.y, pt4.y);
                measuredWidth = right - left;
                measuredHeight = bottom - top_2;
            }
            var positionPrecision = this._positionPrecision;
            this.maxLeft = __WEBPACK_IMPORTED_MODULE_27__utils_Math__["round"](left, positionPrecision);
            this.maxRight = __WEBPACK_IMPORTED_MODULE_27__utils_Math__["round"](right, positionPrecision);
            this.maxTop = __WEBPACK_IMPORTED_MODULE_27__utils_Math__["round"](top_2, positionPrecision);
            this.maxBottom = __WEBPACK_IMPORTED_MODULE_27__utils_Math__["round"](bottom, positionPrecision);
            this._measuredWidth = __WEBPACK_IMPORTED_MODULE_27__utils_Math__["round"](measuredWidth, positionPrecision);
            this._measuredHeight = __WEBPACK_IMPORTED_MODULE_27__utils_Math__["round"](measuredHeight, positionPrecision);
        }
        // dispatch event
        if (this._measuredWidth != this._prevMeasuredWidth || this._measuredHeight != this._prevMeasuredHeight) {
            this._prevMeasuredHeight = this._measuredHeight;
            this._prevMeasuredWidth = this._measuredWidth;
            // TODO clear existing sizechanged dispatches ?
            this.dispatch("sizechanged");
            return true;
        }
        return false;
    };
    /**
     * Insert this element before sibling element.
     *
     * @param  {Sprite}  sprite  Target element
     * @return {Sprite}          This element
     */
    Sprite.prototype.insertBefore = function (sprite) {
        var parent = this._parent.get();
        if (parent) {
            var index = parent.children.indexOf(sprite);
            if (index !== -1) {
                parent.children.moveValue(this, index);
                parent.sortChildren();
            }
        }
        return this;
    };
    /**
     * Insert this element after sibling element.
     *
     * @param  {Sprite}  sprite  Target element
     * @return {Sprite}          This element
     */
    Sprite.prototype.insertAfter = function (sprite) {
        var parent = this._parent.get();
        if (parent) {
            var index = parent.children.indexOf(sprite);
            if (index !== -1) {
                parent.children.moveValue(this, index + 1);
                parent.sortChildren();
            }
        }
        return this;
    };
    /**
     * Removes the main SVG element.
     *
     * This does not destroy the whole Sprite element. To do that use
     * `dispose()` instead.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.removeElement = function () {
        // remove visual element
        if (this._element) {
            this.removeDispose(this._element);
            this._element = undefined;
        }
    };
    /**
     * Returns relative (percent) value of the X coorindate within this element.
     *
     * A relative value is a hundrieth of a percent. So 100% would result in a 1
     * as relative value.
     *
     * @param  {number | Percent}  value  Absolute or relative X coordinate
     * @return {number}                   Relative value
     */
    Sprite.prototype.getRelativeX = function (value) {
        if (value instanceof __WEBPACK_IMPORTED_MODULE_33__utils_Percent__["a" /* Percent */]) {
            return value.value;
        }
        else if (this.parent) {
            return value / this.parent.innerWidth;
        }
        return 0;
    };
    /**
     * Returns relative (percent) value of the Y coorindate within this element.
     *
     * A relative value is a hundrieth of a percent. So 100% would result in a 1
     * as relative value.
     *
     * @param  {number | Percent}  value  Absolute or relative Y coordinate
     * @return {number}                   Relative value
     */
    Sprite.prototype.getRelativeY = function (value) {
        if (value instanceof __WEBPACK_IMPORTED_MODULE_33__utils_Percent__["a" /* Percent */]) {
            return value.value;
        }
        else if (this.parent) {
            return value / this.parent.innerHeight;
        }
        return 0;
    };
    /**
     * Returns an X coordinate in pixel within the element.
     *
     * If number is passed in as parameter, the same number will be returned
     * back.
     *
     * If [[Percent]] is passed in, it will be recalculated to pixels.
     *
     * @param  {number | Percent}  value  Absolute or relative X coordinate
     * @return {number}                   X coordinate in pixels
     */
    Sprite.prototype.getPixelX = function (value) {
        // we don't use $utils.valueToRelative as this would mean that we should access parent.innerWidth
        // all the time and this would result chain of the same actions and will slow down the system a lot
        var pixel = 0;
        if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](value)) {
            pixel = value;
        }
        else if (value instanceof __WEBPACK_IMPORTED_MODULE_33__utils_Percent__["a" /* Percent */]) {
            var relative = value.value;
            if (this.parent) {
                pixel = this.parent.innerWidth * relative;
            }
        }
        return __WEBPACK_IMPORTED_MODULE_27__utils_Math__["round"](pixel, this._positionPrecision);
    };
    /**
     * Returns an Y coordinate in pixel within the element.
     *
     * If number is passed in as parameter, the same number will be returned
     * back.
     *
     * If [[Percent]] is passed in, it will be recalculated to pixels.
     *
     * @param  {number | Percent}  value  Absolute or relative Y coordinate
     * @return {number}                   Y coordinate in pixels
     */
    Sprite.prototype.getPixelY = function (value) {
        // we don't use $utils.valueToRelative as this would mean that we should access parent.innerWidth
        // all the time and this would result chain of the same actions and will slow down the system a lot
        var pixel = 0;
        if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](value)) {
            pixel = value;
        }
        else if (value instanceof __WEBPACK_IMPORTED_MODULE_33__utils_Percent__["a" /* Percent */]) {
            var relative = value.value;
            if (this.parent) {
                pixel = this.parent.innerHeight * relative;
            }
        }
        return __WEBPACK_IMPORTED_MODULE_27__utils_Math__["round"](pixel, this._positionPrecision);
    };
    /**
     * Moves the element to a specified coordinates.
     *
     * Using this method is preferred method of moving element, as it saves some
     * CPU processing power over setting `x` and `y` properties separately.
     *
     * The method respects element's center settings. The element will be
     * positioned so that `point` coordinates come in whatever "center" of the
     * element is, as set in `horizontalCenter` and `verticalCenter`.
     *
     * Besides moving the element, you can also at the same time scale and
     * rotate the element.
     *
     * @param {IPoint}  point     New coordinates
     * @param {number}  rotation  New rotation
     * @param {number}  scale     New Scale
     */
    Sprite.prototype.moveTo = function (point, rotation, scale, isDragged) {
        if (this.isDragged && !isDragged) {
            return;
        }
        if (point) {
            if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](point.x)) {
                this.setPropertyValue("x", point.x);
            }
            if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](point.y)) {
                this.setPropertyValue("y", point.y);
            }
        }
        if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](rotation)) {
            this.setPropertyValue("rotation", rotation);
        }
        if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](scale)) {
            this.setPropertyValue("scale", scale);
        }
        this.invalidatePosition();
    };
    Object.defineProperty(Sprite.prototype, "mask", {
        /**
         * Returns [[Sprite]] element currently used as mask for this element.
         *
         * @ignore Exclude from docs
         * @return {Optional<Sprite>} A [[Sprite]] to use as mask
         */
        get: function () {
            return this.adapter.apply("mask", this._mask.get());
        },
        /**
         * Sets another [[Sprite]] element as this elements mask.
         *
         * @ignore Exclude from docs
         * @param {Optional<Sprite>} mask A [[Sprite]] to use as mask
         */
        set: function (mask) {
            if (this._mask.get() !== mask) {
                // this is good
                if (mask) {
                    if (!(mask instanceof __WEBPACK_IMPORTED_MODULE_8__Container__["a" /* Container */])) {
                        mask.isMeasured = false;
                    }
                    this._mask.set(mask, new __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__["c" /* MultiDisposer */]([
                        //mask.addEventListener(SpriteEvent.TRANSFORMED, this.applyMask, false, this);
                        mask.events.on("maxsizechanged", this.applyMask, this),
                        mask.events.on("validated", this.applyMask, this)
                    ]));
                    this.applyMask();
                }
                else {
                    this._mask.reset();
                    this.group.removeAttr("clip-path");
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "maskRectangle", {
        /**
         * Returns [[Rectangle]] element currently used as elements mask.
         *
         * @ignore Exclude from docs
         * @return {IRectangle} Mask Rectangle
         */
        get: function () {
            return this._maskRectangle;
        },
        // you can set IRectangle as a mask instead o a sprite. Note, the changes of the object won't be monitored
        /**
         * Instead of creating a [[Sprite]] for mask, you can just use a
         * [[Rectangle]] by setting this accessor.
         *
         * Please note that the element will not monitor any changes to the mask
         * rectangle.
         *
         * @ignore Exclude from docs
         * @param {IRectangle} rect Mask Rectangle
         */
        set: function (rect) {
            this._maskRectangle = rect;
            this.applyMask();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "isMeasured", {
        /**
         * Returns if element was already measured.
         *
         * @ignore Exclude from docs
         * @return {boolean} Was element already measured?
         */
        get: function () {
            return this._isMeasured;
        },
        /**
         * Sets if this element was already measured.
         *
         * @ignore Exclude from docs
         * @param {boolean} value Was element already measured?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toBoolean"](value);
            if (!value) {
                this._measuredWidth = 0;
                this._measuredHeight = 0;
                //this._pixelHeight = 0;
                //this._pixelWidth = 0;
            }
            if (this._isMeasured != value) {
                this._isMeasured = value;
                this.invalidatePosition();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Checks if the this elemen has any of its parts overlapping with another
     * element.
     *
     * @todo Description (review)
     * @param  {Sprite}   sprite  Second element to test again
     * @return {boolean}          Overlapping?
     */
    Sprite.prototype.hitTest = function (sprite) {
        // validate, otherwise we will not know measuredWidth and measuredHeight
        if (this.invalid) {
            this.validate();
        }
        if (sprite.invalid) {
            sprite.validate();
        }
        var ax1 = this.pixelX;
        var ay1 = this.pixelY;
        var ax2 = ax1 + this.measuredWidth;
        var ay2 = ay1 + this.measuredHeight;
        var bx1 = sprite.pixelX;
        var by1 = sprite.pixelY;
        var bx2 = bx1 + sprite.measuredWidth;
        var by2 = by1 + sprite.measuredHeight;
        return !(bx1 > ax2 || bx2 < ax1 || by1 > ay2 || by2 < ay1);
    };
    Object.defineProperty(Sprite.prototype, "inited", {
        /**
         * ==========================================================================
         * STATE-RELATED
         * ==========================================================================
         * @hidden
         */
        /**
         * Returns `true` if Sprite has already finished initializing.
         *
         * @return {boolean} Initialized?
         */
        get: function () {
            return this._inited;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "states", {
        /**
         * Returns a collection of element's available [[SpriteState]] entries.
         *
         * @see {@link SpriteState}
         * @return {DictionaryTemplate<string, SpriteState>} States
         */
        get: function () {
            if (!this._states) {
                // works
                this._states = new __WEBPACK_IMPORTED_MODULE_4__utils_Dictionary__["c" /* DictionaryTemplate */](new __WEBPACK_IMPORTED_MODULE_0__SpriteState__["a" /* SpriteState */]());
                // TODO what about removeKey ?
                this._disposers.push(this._states.events.on("insertKey", this.processState, this));
                this._disposers.push(this._states.events.on("setKey", this.processState, this));
                this._disposers.push(new __WEBPACK_IMPORTED_MODULE_4__utils_Dictionary__["b" /* DictionaryDisposer */](this._states));
            }
            return this._states;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "hiddenState", {
        /**
         * Returns a [[SpriteState]] object for "hidden" state.
         *
         * This is a shortcut to `this.states.getKey("hidden")`.
         *
         * @return {SpriteState} Hidden state
         */
        get: function () {
            return this.states.getKey("hidden");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "defaultState", {
        /**
         * Returns a [[SpriteState]] object for "default" state.
         *
         * This is a shortcut to `this.states.getKey("default")`.
         *
         * @return {SpriteState} Hidden state
         */
        get: function () {
            return this.states.getKey("default");
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Checks if some key states are defined and updates Sprite properties
     * accordingly.
     *
     * For example if there's a state "down" defined for Sprite, we automatically
     * make it "clickable".
     *
     * @ignore Exclude from docs
     * @param {IDictionaryEvents<string, SpriteState>["insertKey" | "setKey"]} event An event which caused state list update
     */
    Sprite.prototype.processState = function (event) {
        var state = event.newValue;
        state.sprite = this;
        state.name = event.key;
        if (this.states.hasKey("hover") || __WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](this.tooltipHTML) || __WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](this.tooltipText)) {
            this.hoverable = true;
        }
        if (this.states.hasKey("down")) {
            this.clickable = true;
        }
        if (this.states.hasKey("focus")) {
            this.focusable = true;
        }
    };
    Object.defineProperty(Sprite.prototype, "animations", {
        /**
         * Returns a list elements's animations currently being played.
         *
         * If the list has not been initialized it is created.
         *
         * @return {Array<Animation>} List of animations
         */
        get: function () {
            if (!this._animations) {
                this._animations = [];
                this._disposers.push(new __WEBPACK_IMPORTED_MODULE_7__utils_Animation__["b" /* AnimationDisposer */](this._animations));
            }
            return this._animations;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Converts element's local coordinates to the coordinates within the main
     * chart container.
     *
     * @param  {IPoint}  point  Local point
     * @return {IPoint}         Global point
     */
    Sprite.prototype.getSvgPoint = function (point) {
        // Calculate SVG point
        var bbox = this.htmlContainer.getBoundingClientRect();
        return {
            "x": point.x - bbox.left,
            "y": point.y - bbox.top
        };
    };
    /**
     * Creates and starts an [[Animation]] with given `animationOptions`.
     *
     * @see {@link Animation} for additional information about available options
     * @param  {ISpriteAnimationOptions[] | ISpriteAnimationOptions}  animationOptions  Animation options
     * @param  {number}                                               duration          Duration in milliseconds
     * @param  {(number) => number}                                   easing            Easing function
     * @return {Animation}                                                              Animation instance
     */
    Sprite.prototype.animate = function (animationOptions, duration, easing) {
        return new __WEBPACK_IMPORTED_MODULE_7__utils_Animation__["a" /* Animation */](this, animationOptions, duration, easing).start();
    };
    /**
     * Applies a [[SpriteState]] on this element.
     *
     * The first parameter can either be a name state or a [[SpriteState]]
     * instance.
     *
     * When run, this method will apply SVG properties defined in a
     * [[SpriteState]], but only those that are relevant to this particular
     * element, i.e. are in the `properties` array.
     *
     * @see {@link SpriteState}
     * @param {string | SpriteState} value               A state - name key or instance
     * @param {number}               transitionDuration  Duration of the transition between current and new state
     * @param {number) => number}    easing              An easing function
     */
    Sprite.prototype.setState = function (value, transitionDuration, easing) {
        var state;
        if (value instanceof __WEBPACK_IMPORTED_MODULE_0__SpriteState__["a" /* SpriteState */]) {
            this.states.setKey(value.name, value);
            state = value;
        }
        else {
            state = this.states.getKey(value);
            if (!state) {
                return;
                //throw Error("no such state");
            }
        }
        // stop previous transition
        // not good - foe expample, we are animating to some "active" state and in them middle "hover" state happens. then "active" stat won't be applied
        //if (this._transition) {
        //this._transition.stop();
        //}
        if (state.name == "hover") {
            this.isHover = true;
        }
        if (state.name == "hidden") {
            this.isHiding = true;
        }
        if (state.name == "active") {
            this.isActive = true;
        }
        if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](transitionDuration)) {
            transitionDuration = state.transitionDuration;
        }
        if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](easing)) {
            easing = state.transitionEasing;
        }
        return this.transitTo(state, transitionDuration, easing);
    };
    /**
     * Applies proper state based on the condition of the element. A condition is
     * deducted in this order:
     * * "hover" if Sprite has currently any pointers over it
     * * "down" if Sprite has any pointers (touch or mouse) currently pressed over it
     * * "focus" if Sprite has currently got focus (accessibility)
     * * "hidden" if Sprite is currently hidden
     *
     * Returns an [[Animation]] object, which is handling gradual transition from
     * current values of properties, to the new target state(s).
     *
     * @param  {number}     duration  Duration for the animation (ms)
     * @return {Optional<Animation>}  [[Animation]] object which is handling the transition
     */
    Sprite.prototype.applyCurrentState = function (duration) {
        var animation = this.setState(this.defaultState, duration);
        if (this.isHover) {
            animation = this.setState("hover", duration);
        }
        if (this.isDown && this.interactions.downPointers.length) {
            animation = this.setState("down", duration);
        }
        this.isFocused = this.isFocused;
        if (this.isActive) {
            animation = this.setState("active", duration);
        }
        return animation;
    };
    /**
     * Starts an [[Animation]] of the properties to specific values as they are
     * set in `state`.
     *
     * @ignore Exclude from docs
     * @param  {SpriteState}         state     Target State
     * @param  {number}              duration  Duration in milliseconds
     * @param  {(number) => number}  easing    Easing function
     * @return {Animation}                     Transition Animation
     */
    Sprite.prototype.transitTo = function (state, duration, easing) {
        var _this = this;
        // Init
        var options = [], propValues = state.allValues, transition;
        // todo: do this for numeric/color properties only?
        // @todo use state.getPropertyValue instead
        __WEBPACK_IMPORTED_MODULE_30__utils_Object__["each"](propValues, function (propertyName, finalValue) {
            var currentValue = _this[propertyName];
            // save current value to default state. this solves a big problem where values must be set both on sprite and default state
            if (finalValue != currentValue && _this.defaultState.properties[propertyName] == undefined) {
                _this.defaultState.properties[propertyName] = currentValue;
            }
            //if (finalValue != currentValue && $type.hasValue(finalValue)) {
            if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](finalValue)) {
                var option = { from: currentValue, to: finalValue, property: propertyName };
                options.push(option);
            }
        });
        if (options.length > 0) {
            transition = this.animate(options, duration, easing);
            // TODO should this use events.once ?
            // TODO push onto _disposers array ?
            this._disposers.push(transition.events.on("animationended", function () {
                _this.dispatchImmediately("transitionended");
            }));
        }
        // apply filters if set
        if (state.filters.length > 0) {
            var newFilters_1 = [];
            // check for the same filters
            __WEBPACK_IMPORTED_MODULE_32__utils_Iterator__["each"](state.filters.iterator(), function (stateFilter) {
                var newFilter = stateFilter.clone();
                newFilters_1.push(newFilter);
                var animationOptions = [];
                __WEBPACK_IMPORTED_MODULE_32__utils_Iterator__["each"](_this.filters.iterator(), function (currentFilter) {
                    // if we have the same filters
                    if (currentFilter.className == newFilter.className) {
                        if (!__WEBPACK_IMPORTED_MODULE_32__utils_Iterator__["contains"](_this.defaultState.filters.iterator(), function (x) { return x.className === newFilter.className; })) {
                            _this.defaultState.filters.push(currentFilter);
                        }
                        __WEBPACK_IMPORTED_MODULE_30__utils_Object__["each"](newFilter.properties, function (propertyName, newValue) {
                            var currentValue = currentFilter.properties[propertyName];
                            // if values are not the same, push to animation options array
                            if (currentValue != newValue) {
                                animationOptions.push({ property: propertyName, from: currentValue, to: newValue });
                            }
                        });
                    }
                });
                // animate to new value
                newFilter.animate(animationOptions, duration, easing);
            });
            this.filters.clear();
            this.filters.pushAll(newFilters_1);
        }
        return transition;
    };
    /**
     * Returns `true` if Sprite is currently transiting from one state/value to
     * another.
     *
     * @return {boolean} Is in transition?
     */
    Sprite.prototype.isInTransition = function () {
        return this.animations.length > 0;
    };
    Object.defineProperty(Sprite.prototype, "isHover", {
        /**
         * Retruns indicator if this element has a mouse pointer currently hovering
         * over it, or if it has any touch pointers pressed on it.
         *
         * @return {boolean} Is hovered?
         */
        get: function () {
            return this.interactions.isHover;
        },
        /**
         * Sets indicator if this element has a mouse pointer currently hovering
         * over it, or if it has any touch pointers pressed on it.
         *
         * @param {boolean} value Is hovered?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toBoolean"](value);
            if (value !== this.isHover) {
                this.interactions.isHover = value;
                if (value) {
                    this.handleOver();
                }
                else {
                    this.handleOut();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "isDragged", {
        /**
         * Returns indicator if this element is being dragged at the moment
         *
         * @return {boolean} Is dragged?
         */
        get: function () {
            return this._isDragged;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "isDown", {
        /**
         * Returns indicator if this element has any pointers (mouse or touch)
         * pressing down on it.
         *
         * @return {boolean} Is down?
         */
        get: function () {
            return this.interactions.isDown;
        },
        /**
         * Sets indicator if this element has any pointers (mouse or touch) pressing
         * down on it.
         *
         * @param {boolean} value Is down?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toBoolean"](value);
            if (this.isDown != value) {
                this.interactions.isDown = value;
                if (value) {
                    this.handleDown();
                }
                else {
                    this.handleUp();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "isFocused", {
        /**
         * Returns if this element is focused.
         *
         * @return {boolean} Is focused?
         */
        get: function () {
            return this.interactions.isFocused;
        },
        /**
         * Sets if this element is focused (possibly by tab navigation).
         *
         * @param {boolean} value Is focused?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toBoolean"](value);
            if (this.focusable && this.isFocused != value) {
                this.interactions.isFocused = value;
                if (value === true) {
                    this.handleFocus();
                }
                else {
                    this.handleBlur();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "isActive", {
        /**
         * Returns if this element is currently active.
         *
         * @return {boolean} Is active?
         */
        get: function () {
            return this._isActive;
        },
        /**
         * Sets if this element is currently active (toggled on) or not
         * (toggled off).
         *
         * @param {boolean} value Is active?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toBoolean"](value);
            if (this._isActive !== value) {
                this._isActive = value;
                if (value && this.states.hasKey("active")) {
                    this.setState("active");
                }
                else {
                    this.applyCurrentState();
                }
                this.dispatchImmediately("toggled");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "disabled", {
        /**
         * @return {boolean} Disabled?
         */
        get: function () {
            //if(this._internalDisabled){
            //	return true;
            //}
            var current = this.getPropertyValue("disabled");
            if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](current)) {
                return current;
            }
            else {
                if (this.parent) {
                    return this.parent.disabled;
                }
            }
            return false;
        },
        /**
         * Controls if element is disabled.
         *
         * A disabled element is hidden, and is removed from any processing, layout
         * calculations, and generally treated like if it does not existed.
         *
         * The element itself is not destroyed, though. Setting this back to `false`,
         * will "resurrect" the element.
         *
         * @param {boolean}  value  Disabled?
         */
        set: function (value) {
            this.setDisabled(value);
        },
        enumerable: true,
        configurable: true
    });
    Sprite.prototype.setDisabled = function (value) {
        value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toBoolean"](value);
        var current = this.getPropertyValue("disabled");
        if (current != value) {
            this.setPropertyValue("disabled", value, true);
            if (value) {
                this.parent = this.parent;
                this.removeFromInvalids();
                this.group.attr({ "display": "none" });
            }
            else {
                if (this instanceof __WEBPACK_IMPORTED_MODULE_8__Container__["a" /* Container */]) {
                    this.deepInvalidate();
                }
                else {
                    this.invalidate();
                }
                if (!this.__disabled) {
                    this.removeSVGAttribute("display");
                }
            }
            this.dispatch("transformed");
        }
    };
    Object.defineProperty(Sprite.prototype, "__disabled", {
        /**
         * Internal disable method.
         *
         * Do not use it for disabling elements. Use `disabled` accessor instead.
         *
         * @ignore Exclude from docs
         * @param {boolean} value Disabled?
         */
        set: function (value) {
            if (this._internalDisabled != value) {
                this._internalDisabled = value;
                if (value) {
                    this.group.attr({ "display": "none" });
                }
                else {
                    if (!this.disabled) {
                        this.removeSVGAttribute("display");
                    }
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "numberFormatter", {
        /**
         * @return {NumberFormatter} A [[NumberFormatter]] instance to be used
         */
        get: function () {
            if (this._numberFormatter) {
                return this._numberFormatter;
            }
            else if (this.parent) {
                return this.parent.numberFormatter;
            }
            this._numberFormatter = new __WEBPACK_IMPORTED_MODULE_21__formatters_NumberFormatter__["a" /* NumberFormatter */]();
            this._numberFormatter.language = this.language;
            return this.numberFormatter;
        },
        /**
         * ==========================================================================
         * FORMATTERS AND OTHER EXTERNAL HELPERS
         * ==========================================================================
         * @hidden
         */
        /**
         * A [[NumberFormatter]] instance.
         *
         * This is used to format numbers.
         *
         * ```TypeScript
         * chart.numberFormatter.numberFormat = "#,###.#####";
         * ```
         * ```JavaScript
         * chart.numberFormatter.numberFormat = "#,###.#####";
         * ```
         * ```JSON
         * {
         *   // ...
         *   "numberFormatter": {
         *     "numberFormat": "#,###.#####"
         *   }
         * }
         * ```
         *
         * You can set a separate instance of formatter for each
         * individual element. However that would be unnecessary overhead as
         * all elements would automatically inherit formatter from their parents,
         * all the way up to the chart itself.
         *
         *
         * @see {@link NumberFormatter} for more info on formatting numbers
         * @param {NumberFormatter}  value  An instance of NumberFormatter
         */
        set: function (value) {
            this._numberFormatter = value;
            this._numberFormatter.language = this.language;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "dateFormatter", {
        /**
         * @return {DateFormatter} An instance of DateFormatter
         */
        get: function () {
            if (this._dateFormatter) {
                return this._dateFormatter;
            }
            else if (this.parent) {
                return this.parent.dateFormatter;
            }
            this._dateFormatter = new __WEBPACK_IMPORTED_MODULE_22__formatters_DateFormatter__["a" /* DateFormatter */]();
            this._dateFormatter.language = this.language;
            return this.dateFormatter;
        },
        /**
         * A [[DateFormatter]] instance.
         *
         * This is used to format dates, e.g. on a date axes, balloons, etc.
         *
         * ```TypeScript
         * chart.dateFormatter.dateFormat = "yyyy-MM-dd";
         * ```
         * ```JavaScript
         * chart.dateFormatter.dateFormat = "yyyy-MM-dd";
         * ```
         * ```JSON
         * {
         *   // ...
         *   "dateFormatter": {
         *     "dateFormat": "yyyy-MM-dd"
         *   }
         * }
         * ```
         *
         * You can set a separate instance of formatter for each
         * individual element. However that would be unnecessary overhead as
         * all elements would automatically inherit formatter from their parents,
         * all the way up to the chart itself.
         *
         * @see {@link DateFormatter} for more info on dates formatting
         * @param {DateFormatter}  value  An instance of DateFormatter
         */
        set: function (value) {
            this._dateFormatter = value;
            this._dateFormatter.language = this.language;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "durationFormatter", {
        /**
         * @return {DurationFormatter} An instance of DurationFormatter
         */
        get: function () {
            if (this._durationFormatter) {
                return this._durationFormatter;
            }
            else if (this.parent) {
                return this.parent.durationFormatter;
            }
            this._durationFormatter = new __WEBPACK_IMPORTED_MODULE_23__formatters_DurationFormatter__["a" /* DurationFormatter */]();
            this._durationFormatter.language = this.language;
            return this.durationFormatter;
        },
        /**
         * A [[DurationFormatter]] instance.
         *
         * This is used to format numbers as durations, e.g. on a value axes.
         *
         * You can set a separate instance of formatter for each
         * individual element. However that would be unnecessary overhead as
         * all elements would automatically inherit formatter from their parents,
         * all the way up to the chart itself.
         *
         * @see {@link DurationFormatter} for more info on durations
         * @param {DurationFormatter}  value  An instance of DurationFormatter
         */
        set: function (value) {
            this._durationFormatter = value;
            this._durationFormatter.language = this.language;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "language", {
        /**
         * @return {Language} An instance of Language
         */
        get: function () {
            var language = this._language.get();
            if (language) {
                return language;
            }
            else if (this.parent) {
                return this.parent.language;
            }
            language = new __WEBPACK_IMPORTED_MODULE_24__utils_Language__["a" /* Language */]();
            this.language = language;
            return language;
        },
        /**
         * A [[Language]] instance to use for translations.
         *
         * Normally it is enough to set language for the top-most element - chart.
         *
         * All other element child elements will automatically re-use that language
         * object.
         *
         * @param {Language}  value  An instance of Language
         */
        set: function (value) {
            var _this = this;
            if (this._language.get() !== value) {
                this._language.set(value, value.events.on("localechanged", function (ev) {
                    if (_this instanceof __WEBPACK_IMPORTED_MODULE_8__Container__["a" /* Container */]) {
                        _this.deepInvalidate();
                    }
                }));
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * ==========================================================================
     * DATA-RELATED STUFF
     * ==========================================================================
     * @hidden
     */
    /**
     * Parses the string for meta tags `{tag}` and replaces them with a real
     * value. Supports straight up tags referring to the field in data, i.e.
     * `{value}` or tags with additional formatting info. E.g.:
     *
     * ```Text
     * {myfield.formatDate("yyyy-MM-dd")}
     * {myfield.formatDate()}
     * {myfield.formatNumber("#,####.00")}
     * {myfield.formatNumber()}
     * {myField.formatDuration("mm:ss")}
     * ```
     *
     * Etc.
     *
     * This method Will automatically detect and use proper formatter for the
     * value.
     *
     * The source value will be looked up in various places: (in order)
     * * Sprite's own `dataItem`
     * * Sprite's properties
     * * Parent's `dataItem`
     * * Parent's properties
     *
     * @ignore Exclude from docs
     * @param  {string}    string            A string to format
     * @param  {DataItem}  dataItem          DataItem
     * @return {string}                      Formatted string
     */
    Sprite.prototype.populateString = function (string, dataItem) {
        if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](string)) {
            string = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["castString"](string);
            var tags = string.match(/\{([^}]+)\}/g);
            var i = void 0;
            if (tags) {
                for (i = 0; i < tags.length; i++) {
                    var tag = tags[i].replace(/\{([^}]+)\}/, "$1");
                    var value = this.getTagValue(tag, "", dataItem);
                    if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](value)) {
                        value = "";
                    }
                    string = string.split(tags[i]).join(value);
                }
            }
        }
        else {
            string = "";
        }
        return string;
    };
    /**
     * Gets the value from data item and formats it according to specified format.
     *
     * If `format` is specified, it will use its contents to choose formatter for
     * the value. Otherwise it will select formatter accordingly to actual value
     * type.
     *
     * @ignore Exclude from docs
     * @todo Ability to force certain formatter on known numeric and date values
     * @see {@link NumberFormatter}
     * @see {@link DateFormatter}
     * @see {@link DurationFormatter}
     * @param  {string}    tagName           Tag name to replace
     * @param  {string}    format            Format to use
     * @param  {DataItem}  dataItem          DataItem
     * @return {string}                      Formatted value
     */
    Sprite.prototype.getTagValue = function (tagName, format, dataItem) {
        var value;
        if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](dataItem)) {
            dataItem = this.dataItem;
        }
        // Parse parts
        var parts = [];
        var reg = /([^.]+)\(([^)]*)\)|([^.]+)/g;
        ;
        var matches;
        while ((matches = reg.exec(tagName)) !== null) {
            if (matches[3]) {
                // Simple property
                parts.push({
                    prop: matches[3]
                });
            }
            else {
                // Method
                // Parse parameters
                var params = [];
                if (__WEBPACK_IMPORTED_MODULE_26__utils_Utils__["trim"](matches[2]) != "") {
                    var reg2 = /'([^']*)'|"([^"]*)"|([0-9\-]+)/g;
                    var matches2 = void 0;
                    while ((matches2 = reg2.exec(matches[2])) !== null) {
                        params.push(matches2[1] || matches2[2] || matches2[3]);
                    }
                }
                parts.push({
                    method: matches[1],
                    params: params
                });
            }
        }
        // Check if we can retrieve the value from data item
        if (dataItem) {
            // Check values
            value = this.getTagValueFromObject(parts, dataItem.values);
            // Check properties
            if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](value) || __WEBPACK_IMPORTED_MODULE_31__utils_Type__["isObject"](value)) { // isObject helps to solve problem with date axis, as for example dateX will get dateX from values object and wont't get to the dateX date.
                value = this.getTagValueFromObject(parts, dataItem);
            }
            // Check data context
            var dataContext = dataItem.dataContext;
            if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](value) && dataContext) {
                value = this.getTagValueFromObject(parts, dataItem.dataContext);
                // scond data context level sometimes exist (tree map)
                if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](value) && dataContext.dataContext) {
                    value = this.getTagValueFromObject(parts, dataContext.dataContext);
                }
            }
            // Check component's data item
            if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](value) && dataItem.component && dataItem.component.dataItem !== dataItem) {
                value = dataItem.component.getTagValue(tagName, format);
            }
        }
        // Check sprite's properties
        if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](value)) {
            value = this.getTagValueFromObject(parts, this);
        }
        // Finally, check the parent
        if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](value) && this.parent) {
            value = this.parent.getTagValue(tagName, format);
        }
        return value;
    };
    /**
     * Tries to retrieve values from properties of any object, then applies
     * proper formatting to it.
     *
     * @ignore Exclude from docs
     * @todo Description (improve)
     * @param  {any[]}   parts   Properties ant methods to access
     * @param  {any}     object  Source object
     * @param  {string}  format  A specific format to apply
     * @return {any}             Formatted value
     */
    Sprite.prototype.getTagValueFromObject = function (parts, object, format) {
        var current = object;
        var formatApplied = false;
        for (var i = 0, len = parts.length; i < len; i++) {
            var part = parts[i];
            if (part.prop) {
                // Regular property
                current = current[part.prop];
                if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](current)) {
                    // Not set, return undefined
                    return;
                }
            }
            else {
                // Method
                switch (part.method) {
                    case "formatNumber":
                        current = this.numberFormatter.format(__WEBPACK_IMPORTED_MODULE_26__utils_Utils__["anyToNumber"](current), format || part.params[0] || undefined);
                        formatApplied = true;
                        break;
                    case "formatDate":
                        current = this.dateFormatter.format(__WEBPACK_IMPORTED_MODULE_26__utils_Utils__["anyToDate"](current), format || part.params[0] || undefined);
                        formatApplied = true;
                        break;
                    case "formatDuration":
                        current = this.durationFormatter.format(__WEBPACK_IMPORTED_MODULE_26__utils_Utils__["anyToNumber"](current), format || part.params[0] || undefined, part.params[1] || undefined);
                        formatApplied = true;
                        break;
                    default:
                        if (current[part.method]) {
                            current[part.method].apply(this, part.params);
                        }
                        break;
                }
            }
        }
        // Apply default format if it wasn't applied explicitly
        if (!formatApplied) {
            var formatParts = [{
                    method: "",
                    params: format
                }];
            if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](format)) {
                // Format is not set
                // Determine from the type of the value
                if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](current)) {
                    formatParts[0].method = "formatNumber";
                    formatParts[0].params = "";
                }
                else if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isDate"](current)) {
                    formatParts[0].method = "formatDate";
                    formatParts[0].params = "";
                }
            }
            else {
                // Format set
                // Try to determine formatter based on the format
                var formatterType = __WEBPACK_IMPORTED_MODULE_26__utils_Utils__["getFormat"](format);
                // format
                if (formatterType === __WEBPACK_IMPORTED_MODULE_28__utils_Strings__["c" /* NUMBER */]) {
                    formatParts[0].method = "formatNumber";
                }
                else if (formatterType === __WEBPACK_IMPORTED_MODULE_28__utils_Strings__["a" /* DATE */]) {
                    formatParts[0].method = "formatDate";
                }
                else if (formatterType === __WEBPACK_IMPORTED_MODULE_28__utils_Strings__["b" /* DURATION */]) {
                    formatParts[0].method = "formatDuration";
                }
            }
            // Apply format
            if (formatParts[0].method) {
                current = this.getTagValueFromObject(formatParts, current);
            }
        }
        return current;
    };
    Object.defineProperty(Sprite.prototype, "dataItem", {
        /**
         * @return {this} [[DataItem]]
         */
        get: function () {
            if (!this._dataItem) {
                if (this.parent) {
                    return this.parent.dataItem;
                }
            }
            return this._dataItem;
        },
        /**
         * A [[DataItem]] to use as element's data source.
         *
         * @todo Review type
         * @param {this["_dataItem"]}  dataItem  DataItem
         */
        set: function (dataItem) {
            //an not use this["_dataItem"] here, as we return parent data item if this sprite doesn't have one.
            // @todo:think about it
            this.setDataItem(dataItem);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets currently used [[DataItem]].
     *
     * If the element has also `configField` set, it will also look for any
     * config in DataItem's data context to apply to this element.
     *
     * @param {DataItem} dataItem DataItem
     */
    Sprite.prototype.setDataItem = function (dataItem) {
        if (this._dataItem != dataItem) {
            this._dataItem = dataItem;
            if (this.configField) {
                if (dataItem.dataContext) {
                    this.config = dataItem.dataContext[this.configField];
                }
            }
            var dataContext = dataItem.dataContext;
            if (dataContext) {
                for (var propertyName in this.propertyFields) {
                    var fieldValue = this.propertyFields[propertyName];
                    if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](dataContext[fieldValue])) {
                        var anyThis = this;
                        anyThis[propertyName] = dataContext[fieldValue];
                    }
                }
            }
            this.invalidate();
        }
    };
    /**
     * ==========================================================================
     * PROPERTY UTILITIES
     * ==========================================================================
     * @hidden
     */
    /**
     * Returns element's property value.
     *
     * Will check if there are any bindings with [[DataItem]].
     *
     * Will also apply any adapters bound to `propertyName`.
     *
     * @param  {ISpriteProperties}  propertyName  Property name
     * @return {any}                              Property value
     */
    Sprite.prototype.getPropertyValue = function (propertyName) {
        var propValue = this.properties[propertyName];
        // Apply adapter
        // @todo get rid of <any>
        if (!this.isTemplate) {
            propValue = this.adapter.apply(propertyName, propValue);
        }
        return propValue;
    };
    /**
     * Sets elements's property value. Will also propagate the same property value
     * on all element's clones.
     *
     * @param  {this["_properties"]}  property    Property
     * @param  {any}                  value       Value
     * @param  {boolean}              invalidate  Should the sprite be invalidated, cause it's re-rendering
     * @param  {boolean}              transform   Re-apply positioning of the element
     * @return {boolean}                          Did the value change? It will return `true` if the new value and the old value of the property are not the same
     * @todo Review propagation to clones. Right now we simply check if clone is disposed before setting the same property on it. It's better to remove from clone list altogether.
     */
    Sprite.prototype.setPropertyValue = function (property, value, invalidate, transform) {
        var currentValue = this.properties[property];
        if (this.properties[property] !== value) {
            //@todo: create some method like setPercentPropertyValue to save some cpu
            if (value instanceof __WEBPACK_IMPORTED_MODULE_33__utils_Percent__["a" /* Percent */] && currentValue instanceof __WEBPACK_IMPORTED_MODULE_33__utils_Percent__["a" /* Percent */] && value.value == currentValue.value) {
                return false;
            }
            this.properties[property] = value;
            if (this.events.isEnabled("propertychanged")) {
                var event_1 = {
                    type: "propertychanged",
                    target: this,
                    property: property
                };
                this.events.dispatchImmediately("propertychanged", event_1);
            }
            if (invalidate) {
                this.invalidate();
            }
            // else, as both applySVGAttr and transform is done after invalidation.
            else {
                if (transform) {
                    this.invalidatePosition();
                }
            }
            if (this.applyOnClones) {
                var clones = this.clones.values;
                var length_1 = clones.length;
                for (var i = 0; i < length_1; ++i) {
                    var clone = clones[i];
                    if (!clone.isDisposed()) {
                        //(<Sprite>clone).setPropertyValue(<any>property, value, invalidate, transform);
                        clone[property] = value;
                    }
                }
            }
            return true;
        }
        return false;
    };
    Sprite.prototype.bind = function (property, source, bindToProperty, modifier) {
        var _this = this;
        if (bindToProperty === void 0) { bindToProperty = property; }
        if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](this._bindings[property])) {
            this._bindings[property].dispose();
        }
        // set current value
        this[property] = source[bindToProperty];
        //source.addEventListener(AMEvent.PROPERTY_CHANGED, this.handleBindings, false, this);
        this._bindings[property] = source.events.on("propertychanged", function (event) {
            if (event.property === bindToProperty) {
                var value = source[bindToProperty];
                if (modifier) {
                    value = modifier(value);
                }
                // TODO clonesById
                _this[property] = value;
            }
        });
    };
    /**
     * Sets up and obeserver function to monitor changes in particular property
     * or properties.
     *
     * @ignore Exclude from docs
     * @param   {string | string[]}  property  Element's property name
     * @param   {function}           listener  Handler function
     * @param   {C}                  context   Context for handler function
     * @returns {IDisposer}                    Event Disposer
     */
    Sprite.prototype.observe = function (property, listener, context) {
        var _this = this;
        return new __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__["c" /* MultiDisposer */](__WEBPACK_IMPORTED_MODULE_29__utils_Array__["i" /* map */](__WEBPACK_IMPORTED_MODULE_29__utils_Array__["n" /* toArray */](property), function (prop) {
            return _this.events.on("propertychanged", function (e) {
                if (e.property === prop) {
                    listener.call(context, e);
                }
            });
        }));
    };
    /**
     * ==========================================================================
     * ACCESSIBILITY-RELATED PROPERTIES
     * ==========================================================================
     * @hidden
     */
    /**
     * Applies accessibility to the SVG element.
     *
     * Adds `<title>` and `<description>` elements as well as `aria-labelledby`
     * and `role` properties.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.applyAccessibility = function () {
        // Check if we need to add label and description
        var title = this.readerTitle, description = this.readerDescription, role = this.role, hidden = this.readerHidden, checked = this.readerChecked, controls = this.readerControls, live = this.readerLive;
        // Init label/describe ids
        var labelledByIds = [], describedByIds = [];
        var labelledBy = this.readerLabelledBy;
        if (labelledBy) {
            labelledByIds.push(labelledBy);
        }
        var describedBy = this.readerDescribedBy;
        if (describedBy) {
            describedByIds.push(describedBy);
        }
        // If we have only label, we use `aria-label` attribute.
        // If there are both label and description, we'll go with separate tags and
        // use `aria-labelledby`
        if (title && !description && !this.showSystemTooltip) {
            // Only label is set, use attribute
            this.setSVGAttribute({
                "aria-label": title
            });
            // Remove previous elements
            this.removeSVGAttribute("aria-description");
            if (this._titleElement) {
                this.group.removeElement(this._titleElement);
                this._titleElement = undefined;
            }
            if (this._descriptionElement) {
                this.group.removeElement(this._descriptionElement);
                this._descriptionElement = undefined;
            }
        }
        else {
            if (title) {
                var titleElement = this.titleElement;
                var titleId = this.uid + "-title";
                if (titleElement.node.textContent != title) {
                    titleElement.node.textContent = title;
                    titleElement.attr({ id: titleId });
                }
                labelledByIds.push(titleId);
            }
            else if (this._titleElement) {
                this.group.removeElement(this._titleElement);
                this._titleElement = undefined;
            }
            if (description) {
                var descriptionElement = this.descriptionElement;
                var descriptionId = this.uid + "-description";
                if (descriptionElement.node.textContent != description) {
                    descriptionElement.node.textContent = description;
                    descriptionElement.attr({ id: descriptionId });
                }
                labelledByIds.push(descriptionId);
            }
            else if (this._descriptionElement) {
                this.group.removeElement(this._descriptionElement);
                this._descriptionElement = undefined;
            }
        }
        // Add label and described properties
        if (labelledByIds.length) {
            this.setSVGAttribute({ "aria-labelledby": labelledByIds.join(" ") });
        }
        if (describedByIds.length) {
            this.setSVGAttribute({ "aria-describedby": describedByIds.join(" ") });
        }
        // Apply role
        if (role) {
            this.setSVGAttribute({ "role": role });
        }
        else {
            this.removeSVGAttribute("role");
        }
        // Apply aria-hidden
        if (hidden) {
            this.setSVGAttribute({ "aria-hidden": "true" });
        }
        else {
            this.removeSVGAttribute("aria-hidden");
        }
        // Apply aria-checked
        if (checked) {
            this.setSVGAttribute({ "aria-checked": "true" });
        }
        else if (checked === false) {
            this.setSVGAttribute({ "aria-checked": "false" });
        }
        else {
            this.removeSVGAttribute("aria-checked");
        }
        // Apply aria-controls
        if (controls) {
            this.setSVGAttribute({ "aria-controls": controls });
        }
        else {
            this.removeSVGAttribute("aria-controls");
        }
        // Apply aria-live
        if (live) {
            this.setSVGAttribute({ "aria-live": live });
        }
        else {
            this.removeSVGAttribute("aria-live");
        }
    };
    Object.defineProperty(Sprite.prototype, "readerTitle", {
        /**
         * @return {string} Title
         */
        get: function () {
            return this.getPropertyValue("readerTitle");
        },
        /**
         * Screen reader title of the element.
         *
         * @param {string} value Title
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toText"](value);
            if (this.setPropertyValue("readerTitle", value)) {
                this.applyAccessibility();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "readerDescription", {
        /**
         * @return {string} Description
         */
        get: function () {
            return this.getPropertyValue("readerDescription");
        },
        /**
         * Screen reader description of the element.
         *
         * @param {string} value Description
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toText"](value);
            if (this.setPropertyValue("readerDescription", value)) {
                this.applyAccessibility();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "role", {
        /**
         * @return {Roles} Role
         */
        get: function () {
            return this.getPropertyValue("role");
        },
        /**
         * A WAI-ARIA role for the element.
         *
         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#role_definitions} for more information on WAI-ARIA roles
         * @param {Roles}  value  Role
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toText"](value);
            if (this.setPropertyValue("role", value)) {
                this.applyAccessibility();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "readerHidden", {
        /**
         * @return {boolean} Hidden?
         */
        get: function () {
            return this.getPropertyValue("readerHidden");
        },
        /**
         * Controls if element should be hidden from screen readers.
         *
         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-hidden} for more information
         * @param {boolean}  value  Hidden?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toBoolean"](value);
            if (this.setPropertyValue("readerHidden", value)) {
                this.applyAccessibility();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "readerChecked", {
        /**
         * @ignore Exclude from docs
         * @return {boolean} Checked?
         */
        get: function () {
            return this.getPropertyValue("readerChecked");
        },
        /**
         * Controls if element is currently marked as "checked".
         *
         * @ignore Exclude from docs
         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-checked} for more information
         * @param {boolean} value Checked?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toBoolean"](value);
            if (this.setPropertyValue("readerChecked", value)) {
                this.applyAccessibility();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "readerControls", {
        /**
         * @ignore Exclude from docs
         * @return {string} Setting value
         */
        get: function () {
            return this.getPropertyValue("readerControls");
        },
        /**
         * A `uid` of an element this element controls.
         *
         * @ignore Exclude from docs
         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-controls} for more information
         * @param {string} value Setting value
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toText"](value);
            if (this.setPropertyValue("readerControls", value)) {
                this.applyAccessibility();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "readerLive", {
        /**
         * @ignore Exclude from docs
         * @return {AriaLive} Setting value
         */
        get: function () {
            return this.getPropertyValue("readerLive");
        },
        /**
         * Controls accessibility setting "aria-live" for the element.
         *
         * @ignore Exclude from docs
         * @see {@link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions} for more information
         * @param {AriaLive} value Setting value
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toText"](value);
            if (this.setPropertyValue("readerLive", value)) {
                this.applyAccessibility();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "readerLabelledBy", {
        /**
         * @ignore Exclude from docs
         * @return {Sprite} Target element
         */
        get: function () {
            return this.getPropertyValue("readerLabelledBy");
        },
        /**
         * A `uid` of an element that describes this element.
         *
         * @ignore Exclude from docs
         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-labelledby} for more information
         * @param {Sprite} value Target element
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toText"](value);
            if (this.setPropertyValue("readerLabelledBy", value)) {
                this.applyAccessibility();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "readerDescribedBy", {
        /**
         * @ignore Exclude from docs
         * @return {Sprite} Target element
         */
        get: function () {
            return this.getPropertyValue("readerDescribedBy");
        },
        /**
         * A `uid` of an element that describes this element.
         *
         * @ignore Exclude from docs
         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-describedby} for more information
         * @param {Sprite} value Target element
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toText"](value);
            if (this.setPropertyValue("readerDescribedBy", value)) {
                this.applyAccessibility();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "keyboardOptions", {
        /**
         * ==========================================================================
         * USER INTERACTIONS
         * ==========================================================================
         * @hidden
         */
        /**
         * Returns elements keyboard options.
         *
         * @return {IKeyboardOptions} Keyboard options
         */
        get: function () {
            if (!this.interactions.keyboardOptions) {
                if (this.parent) {
                    return this.parent.keyboardOptions;
                }
            }
            return this.interactions.keyboardOptions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "interactions", {
        /**
         * Returns (creates if necessary) an [[InteractionObject]] associated with
         * this element.
         *
         * [[InteractionObject]] is used to attach all kinds of user-interactions to
         * the element, e.g. click/touch, dragging, hovering, and similar events.
         *
         * @return {InteractionObject} Interaction object
         */
        get: function () {
            if (!this._interaction) {
                this._interaction = Object(__WEBPACK_IMPORTED_MODULE_16__interaction_Interaction__["b" /* getInteraction */])().getInteraction(this.dom);
                this._interaction.clickable = this.clickable;
                this._interaction.hoverable = this.hoverable;
                this._interaction.trackable = this.trackable;
                this._interaction.draggable = this.draggable;
                this._interaction.swipeable = this.swipeable;
                this._interaction.resizable = this.resizable;
                this._interaction.rotatable = this.resizable;
                this._interaction.wheelable = this.wheelable;
                this._interaction.inert = this.inert;
                this._disposers.push(this._interaction);
            }
            return this._interaction;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "focusable", {
        /**
         * @return {Optional<boolean>} Can element be focused?
         */
        get: function () {
            return this.getPropertyValue("focusable");
        },
        /**
         * ==========================================================================
         * ELEMENT FOCUS-RELATED STUFF
         * ==========================================================================
         * @hidden
         */
        /**
         * Controls if the element can gain focus.
         *
         * Focusable element will be selectable via TAB key.
         *
         * Please note, clicking it with a mouse or touching will not add focus to
         * it.
         *
         * Focused element will show a system-specific highlight, which might ruin
         * the overal look. This is why we don't focus element on click/touch.
         *
         * A default setting varies for different elements. By default all elements
         * are not focusable, except certain items like buttons, legend items, etc.
         *
         * @default undefined (auto)
         * @param {Optional<boolean>}  value  Can element be focused?
         */
        set: function (value) {
            var _this = this;
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toBoolean"](value);
            if (value !== this.focusable) {
                this.setPropertyValue("focusable", value);
                if (value) {
                    this.setSVGAttribute({ "focusable": value });
                }
                else {
                    this.removeSVGAttribute("focusable");
                }
                this.interactions.focusable = value;
                // Set focus events that would apply "focus" state
                this.interactions.setEventDisposer("sprite-focusable", value, function () { return new __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__["c" /* MultiDisposer */]([
                    _this.events.on("blur", _this.handleBlur, _this),
                    _this.events.on("focus", _this.handleFocus, _this)
                ]); });
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Applies filters (if set) when element gains focus.
     *
     * @ignore Exclude from docs
     * @param {AMEvent<Sprite, ISpriteEvents>["focus"]} ev Original event
     */
    Sprite.prototype.handleFocus = function (ev) {
        if (this.focusable) {
            if (this.topParent) {
                this.topParent.hasFocused = true;
            }
            if (this.focusFilter) {
                // Any `filters` manipulation will trigger `applyFilters()` so we don't
                // need to call it here
                this.filters.push(this.focusFilter);
            }
            if (this.hoverOnFocus) {
                // Trigger a hover event as well
                this.isHover = true;
                this.handleOver();
            }
        }
    };
    /**
     * Removes focus filter (if set) when elementloses focus.
     *
     * @ignore Exclude from docs
     * @param {AMEvent<Sprite, ISpriteEvents>["blur"]} ev Original event
     */
    Sprite.prototype.handleBlur = function (ev) {
        if (this.focusable) {
            if (this.topParent) {
                this.topParent.hasFocused = false;
            }
            if (this.focusFilter) {
                // Any `filters` manipulation will trigger `applyFilters()` so we don't
                // need to call it here
                this.filters.removeValue(this.focusFilter);
            }
            if (this.hoverOnFocus) {
                // Trigger a out event as well
                this.isHover = false;
                this.handleOut();
            }
        }
    };
    Object.defineProperty(Sprite.prototype, "focusFilter", {
        /**
         * A reference to a [[Filter]] to apply to element when it gains focus.
         *
         * Normally, browsers will draw a default ugly square around focused element,
         * which totally makes sense because its purpose is to help identify active
         * element for visually impaired people.
         *
         * However, if you would rather apply a filter, so you can modify how focused
         * element looks like, use `focusFilter`.
         *
         * Simply set it to an anstance of [[FocusFilter]], or any other filter
         * object.
         *
         * ```TypeScript
         * chart.focusFilter = new am4core.FocusFilter();
         * ```
         * ```JavaScript
         * chart.focusFilter = new am4core.FocusFilter();
         * ```
         * ```JSON
         * {
         *   // ...
         *   "focusFilter": {
         *     "type": "FocusFilter"
         *   },
         *   // ...
         * }
         * ```
         *
         * @see {@link Filter}
         * @ignore Exclude from docs
         * @return {Optional<Filter>} Focused element filter
         * @todo This is still experimental, use at your own risk.
         */
        get: function () {
            /*if (!this._focusFilter) {
                this._focusFilter = new FocusFilter();
                this._disposers.push(this._focusFilter);
            }*/
            //return this._focusFilter;
            var focusFilter = this._focusFilter;
            if (focusFilter) {
                return focusFilter;
            }
            else if (this.parent) {
                return this.parent.focusFilter;
            }
            //this._focusFilter = new FocusFilter();
            //this._disposers.push(this._focusFilter);
        },
        /**
         * @see {@link Filter}
         * @ignore Exclude from docs
         * @todo This is still experimental, don't use it
         */
        set: function (value) {
            this._focusFilter = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "hoverOnFocus", {
        /**
         * @return {boolean} Trigger hover on focus?
         */
        get: function () {
            return this.getPropertyValue("hoverOnFocus");
        },
        /**
         * If set to `true`, this element will also trigger `"over"` event with all
         * the related consequences, like "hover" state being applied and tooltip
         * being shown.
         *
         * Useful as an accessibility feature to display rollover tooltips on items
         * selected via keyboard.
         *
         * @param {boolean}  value  Trigger hover on focus?
         * @default false
         */
        set: function (value) {
            if (value !== this.hoverOnFocus) {
                this.setPropertyValue("hoverOnFocus", value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "tabindex", {
        /**
         * Returns current TAB index for focusable item.
         *
         * @return {number} TAB index
         */
        get: function () {
            var index = this._tabindex;
            if (index != null) {
                return index;
            }
            else if (this.parent) {
                return this.parent.tabindex;
            }
        },
        /**
         * Sets TAB index.
         *
         * Tab index maintains the order in which focusable elements gain focus when
         * TAB key is pressed.
         *
         * Please note, tab index is not local to the chart. It affects the whole
         * of the page, including non-SVG elements. Maintain extreme causion when
         * setting tab indexes, as it affects the user experience for the whole
         * web page.
         *
         * @param {number} value TAB index
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toNumber"](value);
            if (value !== this.tabindex) {
                if (this.setPropertyValue("tabindex", value)) {
                    this.interactions.tabindex = value;
                    this.setSVGAttribute({ "tabindex": value });
                    if (value > -1) {
                        this.focusable = true;
                    }
                    else {
                        this.focusable = undefined;
                    }
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "inertiaOptions", {
        /**
         * ==========================================================================
         * DRAGGING AND RELATED STUFF
         * ==========================================================================
         * @hidden
         */
        /**
         * Returns element's options to be used for inertia. This setting is
         * inheritable, meaning that if not set directly, it will search in all its
         * ascendants until very top.
         *
         * Inertia is used only if element's `inert` is set to `true`.
         *
         * "Inert" element, when dragged and released, will carry the momentum of the
         * movement, and will continue moving in the same drag direction, gradually
         * reducing in speed until finally stops.
         *
         * Check [[IInertiaOptions]] for how you tweak inertia animations.
         *
         * @return {Dictionary<InertiaTypes, IInertiaOptions>} Inertia options
         */
        get: function () {
            if (!this.interactions.inertiaOptions) {
                if (this.parent) {
                    return this.parent.inertiaOptions;
                }
            }
            return this.interactions.inertiaOptions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "draggable", {
        /**
         * @return {boolean} `true` if element can be dragged
         */
        get: function () {
            return this.getPropertyValue("draggable");
        },
        /**
         * Controls if the element is draggable.
         *
         * @param {boolean}  value  `true` if element can be dragged
         */
        set: function (value) {
            var _this = this;
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toBoolean"](value);
            if (value !== this.draggable) {
                this.setPropertyValue("draggable", value);
                this.applyCursorStyle();
                this.interactions.draggable = value;
                //interaction.processDraggable(this);
                // Add events
                // @todo Maybe attach to InteractionObject's multidisposer so that
                // sprites events get disposed together with them?
                // this.interactions.disposers.getItem("movable")
                this.interactions.setEventDisposer("sprite-draggable", value, function () { return new __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__["c" /* MultiDisposer */]([
                    _this.events.on("down", _this.handleDown, _this),
                    _this.events.on("dragstart", _this.handleDragStart, _this),
                    _this.events.on("drag", _this.handleDragMove, _this),
                    _this.events.on("dragstop", _this.handleDragStop, _this)
                ]); });
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Executes when dragged element is being started to drag.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.handleDragStart = function () {
        this._isDragged = true;
        this.hideTooltip(0);
    };
    /**
     * Tell this element to start being dragged. This is useful if you want to
     * drag items by interactions performed not directly on the target element.
     *
     * Parameter `pointer` is highly recommended. By passing in the Pointer you
     * will ensure that movement is tracked for the pointer that you want. If not
     * supplied, the system will try to determine the most logical pointer.
     *
     * However this may fail if you have more than one pointer active, which
     * might happen if you have several objects being dragged on a touch device.
     *
     * @ignore Exclude from docs
     * @param {IPointer} pointer Pointer to use for movement
     */
    Sprite.prototype.dragStart = function (pointer) {
        //this.dragStop(pointer);
        //this.draggable = true;
        this._isDragged = true;
        Object(__WEBPACK_IMPORTED_MODULE_16__interaction_Interaction__["b" /* getInteraction */])().dragStart(this.interactions, pointer);
    };
    /**
     * Executes when dragged element is being dropped.
     *
     * @ignore Exclude from docs
     */
    Sprite.prototype.handleDragStop = function () {
        this._isDragged = false;
        this.showTooltip();
        this.interactions.originalPosition = undefined;
    };
    /**
     * Stops manually initiated dragging of the element.
     *
     * @ignore Exclude from docs
     * @param {IPointer} pointer Pointer to use as a reference
     */
    Sprite.prototype.dragStop = function (pointer) {
        //this.draggable = false;
        this._isDragged = false;
        Object(__WEBPACK_IMPORTED_MODULE_16__interaction_Interaction__["b" /* getInteraction */])().dragStop(this.interactions, pointer);
        //this.handleDragStop();
    };
    /**
     * Executes when {Sprite} is being dragged.
     *
     * @ignore Exclude from docs
     * @param {InteractionEvent} ev Event object
     * @todo Implement parent position offset calculation
     */
    Sprite.prototype.handleDragMove = function (ev) {
        var point = this.interactions.originalPosition;
        if (point) {
            var globalScale = this.parent.globalScale;
            this.moveTo({ x: point.x + ev.shift.x / globalScale, y: point.y + ev.shift.y / globalScale }, undefined, undefined, true);
            //this.dispatchImmediately("drag", ev);
        }
    };
    Object.defineProperty(Sprite.prototype, "inert", {
        /**
         * @return {boolean} `true` if element should use inertia when animated
         */
        get: function () {
            return this.getPropertyValue("inert");
        },
        /**
         * Controls if the element should use inertia when interacted with.
         *
         * "Inert" element, when dragged and released, will carry the momentum of the
         * movement, and will continue moving in the same drag direction, gradually
         * reducing in speed until finally stops.
         *
         * @default false
         * @param {boolean} value `true` if element should use inertia when animated
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toBoolean"](value);
            if (value !== this.inert) {
                this.setPropertyValue("inert", value);
                this.interactions.inert = true;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "hoverOptions", {
        /**
         * ==========================================================================
         * HOVERING
         * ==========================================================================
         * @hidden
         */
        /**
         * Returns Sprite's hover options.
         *
         * @see {@link IHoverOptions} for available options.
         * @return {IHoverOptions} Options
         */
        get: function () {
            if (!this.interactions.hoverOptions) {
                if (this.parent) {
                    return this.parent.hoverOptions;
                }
            }
            return this.interactions.hoverOptions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "hoverable", {
        /**
         * @return {boolean} `true` if element is hoverable
         */
        get: function () {
            return this.getPropertyValue("hoverable");
        },
        /**
         * Controls if the element is hoverable (hover events are registered).
         *
         * Use `over` and `out` events, to watch for those respective actions.
         *
         * @default false
         * @param {boolean} value `true` if element can be hovered
         */
        set: function (value) {
            var _this = this;
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toBoolean"](value);
            if (value !== this.hoverable) {
                this.setPropertyValue("hoverable", value);
                this.applyCursorStyle();
                this.interactions.hoverable = value;
                //interaction.processHoverable(this);
                this.interactions.setEventDisposer("sprite-hoverable", value, function () { return new __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__["c" /* MultiDisposer */]([
                    _this.events.on("over", _this.handleOver, _this),
                    _this.events.on("out", _this.handleOut, _this),
                ]); });
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Handles tasks when element becomes hovered:
     * * Shows [[Tooltip]] if applicable
     * * Applies "hover" state
     *
     * @ignore Exclude from docs
     * @param {AMEvent<Sprite, ISpriteEvents>["over"]} ev Event object
     */
    Sprite.prototype.handleOver = function (ev) {
        if (this._outTimeout) {
            this._outTimeout.dispose();
        }
        if (this.isHover) {
            if (this.states.hasKey("hover")) {
                //this.setState("hover");
                // This will check `isHover` and will set "hover" state
                this.applyCurrentState();
            }
            this.showTooltip();
        }
        else {
            this.hideTooltip();
            if (this.states.hasKey("hover")) {
                this.applyCurrentState();
            }
        }
    };
    /**
     * Handles tasks when element loses hover:
     * * Hides [[Tooltip]]
     * * Applys default state
     *
     * @ignore Exclude from docs
     * @param {AMEvent<Sprite, ISpriteEvents>["out"]} ev [description]
     */
    Sprite.prototype.handleOut = function (ev) {
        this.hideTooltip();
        this._outTimeout = this.setTimeout(this.handleOutReal.bind(this), this.rollOutDelay);
    };
    Sprite.prototype.handleOutReal = function () {
        if (this.states.hasKey("hover")) {
            this.applyCurrentState();
        }
    };
    Object.defineProperty(Sprite.prototype, "hitOptions", {
        /**
         * ==========================================================================
         * CLICKING/TAPPING AND TOGGLING STUFF
         * ==========================================================================
         * @hidden
         */
        /**
         * Returns Sprite's click (hit) options.
         *
         * Click (hit) options control things like double-click, timeouts, etc.
         *
         * @see {@link IHitOptions} for available options.
         * @return {IHitOptions} Options
         */
        get: function () {
            if (!this.interactions.hitOptions) {
                if (this.parent) {
                    return this.parent.hitOptions;
                }
            }
            return this.interactions.hitOptions;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Prepares element's after `down` event.
     *
     * @ignore Exclude from docs
     * @param {AMEvent<Sprite, ISpriteEvents>["rotate"]} ev Event
     */
    Sprite.prototype.handleDown = function (ev) {
        if (this.interactions.downPointers.length === 1) {
            this.interactions.originalPosition = {
                x: this.pixelX,
                y: this.pixelY
            };
            this.interactions.originalAngle = this.rotation;
            this.interactions.originalScale = this.scale;
            if (this.states.hasKey("down")) {
                this.setState("down");
            }
        }
    };
    /**
     * Prepares element's after `up` event.
     *
     * @ignore Exclude from docs
     * @param {AMEvent<Sprite, ISpriteEvents>["rotate"]} ev Event
     */
    Sprite.prototype.handleUp = function (ev) {
        /*if (!this.isDown) {
            this.interactions.originalPosition = null;
            this.interactions.originalAngle = null;
            this.interactions.originalScale = null;
        }*/
        if (this.states.hasKey("down")) {
            this.applyCurrentState();
        }
    };
    Object.defineProperty(Sprite.prototype, "clickable", {
        /**
         * Returns `true` if the element is currently set as draggable.
         *
         * @return {boolean}
         */
        get: function () {
            return this.getPropertyValue("clickable");
        },
        /**
         * Sets if the element is clickable.
         *
         * Some times of the elements, like buttons are clickable by default.
         *
         * Most of the elements are not clickable by default.
         *
         * Use `hit`, `doublehit`, `up`, `down`, `toggled` events to watch for
         * respective click/touch actions.
         *
         * @param {boolean} value `true` if element can be clicked
         */
        set: function (value) {
            var _this = this;
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toBoolean"](value);
            if (value !== this.clickable) {
                this.setPropertyValue("clickable", value);
                this.applyCursorStyle();
                this.interactions.clickable = value;
                //interaction.processClickable(this);
                this.interactions.setEventDisposer("sprite-clickable", value, function () { return new __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__["c" /* MultiDisposer */]([
                    _this.events.on("down", _this.handleDown, _this),
                    _this.events.on("up", _this.handleUp, _this)
                ]); });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "togglable", {
        /**
         * Returns if element is currently set as togglable.
         *
         * @return {boolean} Is togglable?
         */
        get: function () {
            return this.getPropertyValue("togglable");
        },
        /**
         * Sets if element can be toggled on and off by subsequent clicks/taps.
         *
         * Togglable element will alternate its `isActive` property between `true`
         * and `false` with each click.
         *
         * @param {boolean} value Is togglable?
         */
        set: function (value) {
            var _this = this;
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toBoolean"](value);
            if (value !== this.togglable) {
                this.setPropertyValue("togglable", value);
                this.interactions.setEventDisposer("sprite-togglable", value, function () { return _this.events.on("hit", _this.handleToggle, _this); });
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Handles toggling of the element.
     *
     * @ignore Exclude from docs
     * @param {AMEvent<Sprite, ISpriteEvents>["hit"]} ev Event
     */
    Sprite.prototype.handleToggle = function (ev) {
        this.isActive = !this.isActive;
    };
    Object.defineProperty(Sprite.prototype, "url", {
        /**
         * Returns current setting for URL.
         *
         * @return {Optional<string>} URL
         */
        get: function () {
            return this._url.get();
        },
        /**
         * Sets click-through URL for this element.
         *
         * If set, clicking/tapping this element will open the new URL in a target
         * window/tab as set by `urlTarget`.
         *
         * @param {Optional<string>} value URL
         */
        set: function (value) {
            // If URL is not empty, set up events
            if (__WEBPACK_IMPORTED_MODULE_26__utils_Utils__["isNotEmpty"](value)) {
                var urlEvent = this.events.on("hit", this.urlHandler, this);
                this._disposers.push(urlEvent);
                this._url.set(value, urlEvent);
                // Set other required parameters
                this.clickable = true;
                this.cursorOverStyle = __WEBPACK_IMPORTED_MODULE_17__interaction_Mouse__["a" /* MouseCursorStyle */].pointer;
            }
            else {
                // TODO is this correct ? maybe it should set to "" instead
                this._url.set(value, undefined);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "urlTarget", {
        /**
         * Returns current URL target.
         *
         * @return {string} URL target
         */
        get: function () {
            return this._urlTarget;
        },
        /**
         * Target to use for URL clicks:
         * * _blank
         * * _self (default)
         * * _parent
         * * _top
         * * Name of the window/frame
         *
         * Ignored if `url` is not set.
         *
         * @param {string} value URL target
         */
        set: function (value) {
            this._urlTarget = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Handles URL transition on element click.
     *
     * @ignore Exclude from docs
     * @param {InteractionEvent} ev An event object
     */
    Sprite.prototype.urlHandler = function (ev) {
        // Is URL set?
        if (__WEBPACK_IMPORTED_MODULE_26__utils_Utils__["isNotEmpty"](this.url)) {
            // Proceed to the URL
            if (this.urlTarget === "_self") {
                window.location.href = this.url;
            }
            else {
                window.open(this.url, this.urlTarget);
            }
        }
    };
    Object.defineProperty(Sprite.prototype, "swipeOptions", {
        /**
         * ==========================================================================
         * SWIPING GESTURE TRACKING
         * ==========================================================================
         * @hidden
         */
        /**
         * Returns element's swipe gesture options.
         *
         * @return {ISwipeOptions} Swipe gesture options
         */
        get: function () {
            if (!this.interactions.swipeOptions) {
                if (this.parent) {
                    return this.parent.swipeOptions;
                }
            }
            return this.interactions.swipeOptions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "swipeable", {
        /**
         * @return {boolean} Element swipable?
         */
        get: function () {
            return this.getPropertyValue("swipeable");
        },
        /**
         * Controls if element is swipeable.
         *
         * Swipable element will invoke `swipe`, `swipeleft` and `swiperight` events,
         * when quick horizontal drag action is performed with either mouse or touch.
         *
         * Please note that combining swipe and drag is possible, however will incur
         * a slight but noticeable delay in drag start.
         *
         * @param {boolean}  value  Element swipable?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toBoolean"](value);
            if (value !== this.swipeable) {
                this.setPropertyValue("swipeable", value);
                this.applyCursorStyle();
                this.interactions.swipeable = value;
                //interaction.processSwipeable(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "trackable", {
        /**
         * Returns current trackable setting.
         *
         * @return {boolean} Track cursor movement over element?
         */
        get: function () {
            return this.getPropertyValue("trackable");
        },
        /**
         * ==========================================================================
         * POINTER TRACKING
         * ==========================================================================
         * @hidden
         */
        /**
         * Sets if the element is trackable (mouse position over it is reported to
         * event listeners).
         *
         * Will invoke `track` events whenever pointer (cursor) changes position
         * while over element.
         *
         * Please note, touch devices will also invoke `track` events when touch
         * point is moved while holding down on a trackable element.
         *
         * @param {boolean} value Track cursor movement over element?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toBoolean"](value);
            if (value !== this.trackable) {
                this.setPropertyValue("trackable", value);
                this.applyCursorStyle();
                this.interactions.trackable = value;
                //interaction.processTrackable(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "wheelable", {
        /**
         * Returns current setting for mouse wheel.
         *
         * @return {boolean} Mouse wheel events enabled?
         */
        get: function () {
            return this.getPropertyValue("wheelable");
        },
        /**
         * ==========================================================================
         * MOUSE-WHEEL RELATED
         * ==========================================================================
         * @hidden
         */
        /**
         * Sets if the element can be interacted with mouse wheel.
         *
         * Will invoke `wheel`, `wheelup`, `wheeldown`, `wheelleft`, and `wheelright`
         * events when using mouse wheel over the element.
         *
         * @param {boolean} value Mouse wheel events enabled?
         */
        set: function (value) {
            if (value !== this.wheelable) {
                this.setPropertyValue("wheelable", value);
                this.applyCursorStyle();
                this.interactions.wheelable = value;
                //interaction.processWheelable(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "resizable", {
        /**
         * Returns current `resizable` value.
         *
         * @return {boolean} Element resizable?
         */
        get: function () {
            return this.getPropertyValue("resizable");
        },
        /**
         * ==========================================================================
         * RESIZE
         * ==========================================================================
         * @hidden
         */
        /**
         * Set if this element is resizable.
         *
         * Enabling resize will turn on various interactions on the element. Their
         * actual functionality will depend on other properties.
         *
         * If the element also `draggable`, resize will only happen with two points
         * of contact on a touch device.
         *
         * If the element is not draggable, resize can be performed with just one
         * point of contact, touch or mouse.
         *
         * Will invoke `resize` event every time the size of the element changes.
         *
         * @param {boolean}  value  Element resizable?
         */
        set: function (value) {
            var _this = this;
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toBoolean"](value);
            if (value !== this.resizable) {
                this.setPropertyValue("resizable", value);
                this.applyCursorStyle();
                this.interactions.resizable = value;
                //interaction.processResizable(this);
                this.interactions.setEventDisposer("sprite-resizable", value, function () { return new __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__["c" /* MultiDisposer */]([
                    _this.events.on("down", _this.handleDown, _this),
                    _this.events.on("resize", _this.handleResize, _this)
                ]); });
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Handles resize intermediate step.
     *
     * By default this method resizes actual element. Each element, can override
     * this method to implement their own resize logic.
     *
     * @ignore Exclude from docs
     * @param {InteractionEvent} ev Event object
     */
    Sprite.prototype.handleResize = function (ev) {
        this.scale = this.interactions.originalScale * ev.scale;
        this.validatePosition();
        /*center: (io.draggable
        ? $math.getMidPoint(point1, point2)
        : {
            "x": io.originalPosition.x,
            "y": io.originalPosition.y
        })*/
        //this.moveTo(this.originalPosition.x + ev.shift.x, this.originalPosition.y + ev.shift.y);
        if (this.draggable) {
            var svgPoint1 = __WEBPACK_IMPORTED_MODULE_26__utils_Utils__["documentPointToSvg"](ev.point1, this.htmlContainer);
            var svgPoint2 = __WEBPACK_IMPORTED_MODULE_26__utils_Utils__["documentPointToSvg"](ev.point2, this.htmlContainer);
            var svgMidPoint = __WEBPACK_IMPORTED_MODULE_27__utils_Math__["getMidPoint"](svgPoint1, svgPoint2);
            var parentPoint1 = __WEBPACK_IMPORTED_MODULE_26__utils_Utils__["documentPointToSprite"](ev.startPoint1, this.parent);
            var parentPoint2 = __WEBPACK_IMPORTED_MODULE_26__utils_Utils__["documentPointToSprite"](ev.startPoint2, this.parent);
            var originalPosition = this.interactions.originalPosition;
            var originalScale = this.interactions.originalScale;
            if (originalPosition) {
                var spritePoint1 = { x: (parentPoint1.x - originalPosition.x) / originalScale, y: (parentPoint1.y - originalPosition.y) / originalScale };
                var spritePoint2 = { x: (parentPoint2.x - originalPosition.x) / originalScale, y: (parentPoint2.y - originalPosition.y) / originalScale };
                var spriteMidPoint = __WEBPACK_IMPORTED_MODULE_27__utils_Math__["getMidPoint"](spritePoint1, spritePoint2);
                var parentPoint = __WEBPACK_IMPORTED_MODULE_26__utils_Utils__["svgPointToSprite"](svgMidPoint, this.parent);
                this.moveTo({ x: parentPoint.x - spriteMidPoint.x * this.scale, y: parentPoint.y - spriteMidPoint.y * this.scale });
            }
        }
    };
    Object.defineProperty(Sprite.prototype, "rotatable", {
        /**
         * @return {boolean} Can be rotated?
         */
        get: function () {
            return this.getPropertyValue("rotatable");
        },
        /**
         * ==========================================================================
         * ROTATION
         * ==========================================================================
         * @hidden
         */
        /**
         * Controls if the element can be rotated.
         *
         * If enabled, the element can be rotated using various interactions.
         *
         * If the element also `draggable`, rotation can be performed using two
         * points of contact, i.e. on touch devices only.
         *
         * If the element is not `draggable`, rotation can be performed using one
         * point of contact, e.g. mouse or touch.
         *
         * Rotation will happen around configured center of the element, as set in
         * `horizontalCenter` and `verticalCenter`.
         *
         * Invokes `rotate` event when rotation angle changes.
         *
         * @param {boolean}  value  Can be rotated?
         */
        set: function (value) {
            var _this = this;
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toBoolean"](value);
            if (value !== this.rotatable) {
                this.setPropertyValue("rotatable", value);
                this.interactions.rotatable = value;
                //interaction.processRotatable(this);
                this.interactions.setEventDisposer("sprite-rotatable", value, function () { return new __WEBPACK_IMPORTED_MODULE_6__utils_Disposer__["c" /* MultiDisposer */]([
                    _this.events.on("down", _this.handleDown, _this),
                    _this.events.on("rotate", _this.handleRotate, _this)
                ]); });
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Handles rotate intermediate step.
     *
     * By default this method will rotate the actual element.
     *
     * Extending classes might override this method to implement their own
     * rotation logic.
     *
     * @ignore Exclude from docs
     * @param {InteractionEvent} ev Event object
     */
    Sprite.prototype.handleRotate = function (ev) {
        this.rotate(ev.angle + this.interactions.originalAngle);
    };
    Object.defineProperty(Sprite.prototype, "cursorOptions", {
        /**
         * ==========================================================================
         * MOUSE-RELATED
         * ==========================================================================
         * @hidden
         */
        /**
         * Returns element's cursor options.
         *
         * Cursor options usually define cursor style for various states of the
         * hovered element.
         *
         * Elements inherit `cursorOptions` from their parents if they don't have
         * them set explicitly.
         *
         * @see {@link ICursorOptions} for a list of available options
         * @return {ICursorOptions} Cursor options
         */
        get: function () {
            if (!this.interactions.cursorOptions) {
                if (this.parent) {
                    return this.parent.cursorOptions;
                }
            }
            return this.interactions.cursorOptions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "cursorOverStyle", {
        /**
         * A shortcut to setting mouse cursor on hover.
         *
         * @param {Array<IStyleProperty>} style An array of styles to apply onhover
         */
        set: function (style) {
            this.cursorOptions.overStyle = style;
            Object(__WEBPACK_IMPORTED_MODULE_16__interaction_Interaction__["b" /* getInteraction */])().applyCursorOverStyle(this.interactions);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "cursorDownStyle", {
        /**
         * A shortcut to setting mouse cursor when button is pressed down.
         *
         * @param {Array<IStyleProperty>} style An array of styles to apply onhover
         */
        set: function (style) {
            this.cursorOptions.downStyle = style;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Applies default cursor styles for interactable elements.
     *
     * @ignore Exclude from docs
     * @todo Determine if this is necessary. Maybe let's not apply any cursor styles by default
     */
    Sprite.prototype.applyCursorStyle = function () {
        // Draggable styles
        /*if (this.draggable) {

            if (!$type.hasValue(this.cursorOptions.overStyle)) {
                this.cursorOptions.overStyle = MouseCursorStyle.grab;
            }

            if (!$type.hasValue(this.cursorOptions.downStyle)) {
                this.cursorOptions.downStyle = MouseCursorStyle.grabbing;
            }
        }*/
    };
    Object.defineProperty(Sprite.prototype, "interactionsEnabled", {
        /**
         * @return {boolean} Is interaction enabled for this element?
         */
        get: function () {
            var value = this.getPropertyValue("interactionsEnabled");
            if (value === false) {
                return false;
            }
            if (this.parent) {
                return this.parent.interactionsEnabled;
            }
            return true;
        },
        /**
         * Setting this to `false` will efectively disable all interactivity on the
         * element.
         *
         * @param {boolean}  value  Is interaction enabled for this element?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toBoolean"](value);
            this.setInteractionsEnabled(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets up the element to either ignore all interactivity, or not.
     *
     * @ignore Exclude from docs
     * @param  {boolean}  value  Interactivity enabled?
     * @return {string}          Current event handlers for the element
     */
    Sprite.prototype.setInteractionsEnabled = function (value) {
        this.setPropertyValue("interactionsEnabled", value);
        var pointerEvents = null; // must be null, not "null"!
        if (!value) {
            pointerEvents = "none";
        }
        this.group.node.style.pointerEvents = pointerEvents;
        return pointerEvents;
    };
    Object.defineProperty(Sprite.prototype, "exporting", {
        /**
         * @return {Export} Export instance
         */
        get: function () {
            return this.getExporting();
        },
        /**
         * ==========================================================================
         * EXPORT-RELATED STUFF
         * ==========================================================================
         * @hidden
         */
        /**
         * An [[Export]] instance.
         *
         * Used to access API of the chart export functionality.
         *
         * If `exporting` is not set, the element inherits [[Export]] instance from
         * its parents.
         *
         * Upon request, if no parent has such instance, a new one is created, using
         * default settings, what in most cases is just enough.
         *
         * @see {@link https://www.amcharts.com/docs/v4/concepts/exporting/} for more info about exporting
         * @param {Export}  exp  Export
         */
        set: function (exp) {
            this._exporting.set(exp, exp);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * This is here as a method so that inheriting classes could override it.
     *
     * @return {Export} Export instance
     */
    Sprite.prototype.getExporting = function () {
        var _export = this._exporting.get();
        if (_export) {
            return _export;
        }
        else {
            if (this.isStandaloneInstance || !this.parent) {
                _export = new __WEBPACK_IMPORTED_MODULE_25__export_Export__["a" /* Export */]();
                _export.container = this.svgContainer.SVGContainer;
                _export.sprite = this;
                _export.language = this.language;
                _export.dateFormatter = this.dateFormatter;
                this._exporting.set(_export, _export);
            }
            else {
                return this.parent.exporting;
            }
        }
        return _export;
    };
    Object.defineProperty(Sprite.prototype, "modal", {
        /**
         * ==========================================================================
         * MODAL/POPUP RELATED STUFF
         * ==========================================================================
         * @hidden
         */
        /**
         * Returns a [[Modal]] instance, associated with this chart.
         * (elements top parent)
         *
         * Accessing modal does not make it appear. To make a modal appear, use
         * `showModal()` method.
         *
         * @see {@link Modal} for more information about using Modal windows
         * @return {Modal} Modal instance
         */
        get: function () {
            var topParent = this.topParent;
            if (topParent) {
                // We always use top parent's modal
                return topParent.modal;
            }
            else {
                // We are a top parent, let's check if we have a modal
                if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](this._modal)) {
                    // Create new modal
                    this._modal = new __WEBPACK_IMPORTED_MODULE_13__elements_Modal__["a" /* Modal */]();
                    this._modal.container = this.svgContainer.SVGContainer;
                    // Prefix with Sprite's class name
                    this._modal.adapter.add("classPrefix", function (value) {
                        value = __WEBPACK_IMPORTED_MODULE_19__Options__["a" /* options */].classNamePrefix + value;
                        return value;
                    });
                    // Add to disposers
                    this._disposers.push(this._modal);
                }
                return this._modal;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Opens a modal window with specific content (`text` parameter) and,
     * optionally, `title`.
     *
     * The `text` parameter can contain HTML content.
     *
     * @see {@link Modal} for more information about using Modal windows
     * @param {string}  text   Modal contents
     * @param {string}  title  Title for the modal window
     */
    Sprite.prototype.showModal = function (text, title) {
        // Hide previous modal
        this.hideModal();
        // Create modal
        var modal = this.modal;
        modal.content = text;
        modal.readerTitle = title;
        modal.show();
    };
    /**
     * Hides modal window if there is one currently open.
     */
    Sprite.prototype.hideModal = function () {
        if (this._modal) {
            this.modal.hide();
        }
    };
    Object.defineProperty(Sprite.prototype, "popups", {
        /**
         * A list of popups for this chart.
         *
         * @return {ListTemplate<Popup>} Popups
         */
        get: function () {
            var topParent = this.topParent;
            if (topParent != null) {
                // We always use top parent's popups
                return topParent.popups;
            }
            else {
                // We are a top parent, let's check if we have a modal
                if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](this._popups)) {
                    // Create popup template
                    var popupTemplate = new __WEBPACK_IMPORTED_MODULE_12__elements_Popup__["a" /* Popup */]();
                    popupTemplate.container = this.svgContainer.SVGContainer;
                    popupTemplate.sprite = this;
                    // Prefix with Sprite's class name
                    popupTemplate.adapter.add("classPrefix", function (value) {
                        value = __WEBPACK_IMPORTED_MODULE_19__Options__["a" /* options */].classNamePrefix + value;
                        return value;
                    });
                    // Create the list
                    this._popups = new __WEBPACK_IMPORTED_MODULE_5__utils_List__["e" /* ListTemplate */](popupTemplate);
                    // Add to disposers
                    this._disposers.push(new __WEBPACK_IMPORTED_MODULE_5__utils_List__["c" /* ListDisposer */](this._popups));
                }
                return this._popups;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates, opens, and returns a new [[Popup]] window.
     *
     * `text` can be any valid HTML.
     *
     * `title` is currently not supported.
     *
     * @param  {string}  text   Popup contents
     * @param  {string}  title  Popup title
     * @return {Popup}          Popup instance
     */
    Sprite.prototype.openPopup = function (text, title) {
        var popup = this.popups.create();
        popup.content = text;
        if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](title)) {
            popup.title = title;
        }
        popup.show();
        return popup;
    };
    /**
     * Closes all currently open popup windows
     */
    Sprite.prototype.closeAllPopups = function () {
        __WEBPACK_IMPORTED_MODULE_32__utils_Iterator__["each"](this.popups.iterator(), function (popup) {
            popup.hide();
        });
    };
    Object.defineProperty(Sprite.prototype, "x", {
        /**
         * @return {number | Percent} X coordinate
         */
        get: function () {
            return this.getPropertyValue("x");
        },
        /**
         * ==========================================================================
         * POSITIONAL PROPERTIES AND RELATED STUFF
         * ==========================================================================
         * @hidden
         */
        /**
         * Element's absolute or relative X coordinate.
         *
         * If setting both X and Y, please consider using `moveTo()` method instead,
         * as it will be faster to set both coordinates at once.
         *
         * @param {number | Percent} value X coordinate
         */
        set: function (value) {
            if (!this.isDragged) {
                value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toNumberOrPercent"](value);
                this.setPropertyValue("x", value, false, true);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "pixelX", {
        /**
         * Returns element's current absolute X coordinate in pixels.
         *
         * @readonly
         * @return {number} X coordinate (px)
         */
        get: function () {
            return this.adapter.apply("pixelX", __WEBPACK_IMPORTED_MODULE_27__utils_Math__["fitToRange"](this.getPixelX(this.x), this.minX, this.maxX));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "relativeX", {
        /**
         * Returns element's current relative X coordinate in [[Percent]].
         *
         * @return {number} X coordinate ([[Percent]])
         */
        get: function () {
            return this.adapter.apply("relativeX", this.getRelativeX(this.x));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "minX", {
        /**
         * @ignore Exclude from docs
         * @return {number} Min X (px)
         */
        get: function () {
            return this.getPropertyValue("minX");
        },
        /**
         * The smallest allowable absolute X coordinate for this element.
         *
         * This is used to contain element movement within certain boundaries.
         *
         * @ignore Exclude from docs
         * @param {number} value Min X (px)
         */
        set: function (value) {
            if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](value)) {
                value = __WEBPACK_IMPORTED_MODULE_27__utils_Math__["round"](value, this._positionPrecision);
                this.setPropertyValue("minX", value, false, true);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "maxX", {
        /**
         * @ignore Exclude from docs
         * @return {number} Max X (px)
         */
        get: function () {
            return this.getPropertyValue("maxX");
        },
        /**
         * The biggest allowable absolute X coordinate for this element.
         *
         * This is used to contain element movement within certain boundaries.
         *
         * @ignore Exclude from docs
         * @param {number} value Max X (px)
         */
        set: function (value) {
            if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](value)) {
                value = __WEBPACK_IMPORTED_MODULE_27__utils_Math__["round"](value, this._positionPrecision);
                this.setPropertyValue("maxX", value, false, true);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "y", {
        /**
         * @return {number | Percent} Y coordinate
         */
        get: function () {
            return this.getPropertyValue("y");
        },
        /**
         * Element's absolute or relative Y coordinate.
         *
         * If setting both X and Y, please consider using `moveTo()` method instead,
         * as it will be faster to set both coordinates at once.
         *
         * @param {number | Percent}  value  Y coordinate
         */
        set: function (value) {
            if (!this.isDragged) {
                value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toNumberOrPercent"](value);
                this.setPropertyValue("y", value, false, true);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "pixelY", {
        /**
         * Returns element's current absolute Y coordinate in pixels.
         *
         * @readonly
         * @return {number} Y coordinate (px)
         */
        get: function () {
            return this.adapter.apply("pixelY", __WEBPACK_IMPORTED_MODULE_27__utils_Math__["fitToRange"](this.getPixelY(this.y), this.minY, this.maxY));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "relativeY", {
        /**
         * Returns element's current relative Y coordinate in [[Percent]].
         *
         * @readonly
         * @return {number} Y coordinate ([[Percent]])
         */
        get: function () {
            return this.adapter.apply("relativeY", this.getRelativeX(this.y));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "minY", {
        /**
         * @ignore Exclude from docs
         * @return {number} Min Y (px)
         */
        get: function () {
            return this.getPropertyValue("minY");
        },
        /**
         * The smallest allowable absolute Y coordinate for this element.
         *
         * This is used to contain element movement within certain boundaries.
         *
         * @ignore Exclude from docs
         * @param {number} value Min Y (px)
         */
        set: function (value) {
            if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](value)) {
                value = __WEBPACK_IMPORTED_MODULE_27__utils_Math__["round"](value, this._positionPrecision);
                this.setPropertyValue("minY", value, false, true);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "maxY", {
        /**
         * @ignore Exclude from docs
         * @return {number} Max Y (px)
         */
        get: function () {
            return this.getPropertyValue("maxY");
        },
        /**
         * The biggest allowable absolute Y coordinate for this element.
         *
         * This is used to contain element movement within certain boundaries.
         *
         * @ignore Exclude from docs
         * @param {number}  value  Max Y (px)
         */
        set: function (value) {
            if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](value)) {
                value = __WEBPACK_IMPORTED_MODULE_27__utils_Math__["round"](value, this._positionPrecision);
                this.setPropertyValue("maxY", value, false, true);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "dx", {
        /**
         * @return {number} Horizontal offset (px)
         */
        get: function () {
            var value = this.getPropertyValue("dx");
            if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](value)) {
                value = 0;
            }
            return value;
        },
        /**
         * A horizontal offset for the element in pixels.
         *
         * Can be negative value for offset to the left.
         *
         * @param {number}  value  Horizontal offset (px)
         */
        set: function (value) {
            if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](value)) {
                value = __WEBPACK_IMPORTED_MODULE_27__utils_Math__["round"](value, this._positionPrecision);
                this.setPropertyValue("dx", value, false, true);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "dy", {
        /**
         * @return {number} Vertical offset (px)
         */
        get: function () {
            var value = this.getPropertyValue("dy");
            if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](value)) {
                value = 0;
            }
            return value;
        },
        /**
         * A vertical offset for the element in pixels.
         *
         * Can be negative value for offset upwards.
         *
         * @param {number}  value  Vertical offset (px)
         */
        set: function (value) {
            if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](value)) {
                value = __WEBPACK_IMPORTED_MODULE_27__utils_Math__["round"](value, this._positionPrecision);
                this.setPropertyValue("dy", value, false, true);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "rotation", {
        /**
         * @return {number} Rotation (0-360)
         */
        get: function () {
            return this.getPropertyValue("rotation");
        },
        /**
         * Rotation of the element in degrees. (0-360)
         *
         * @param {number}  value  Rotation (0-360)
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toNumber"](value);
            if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](value)) {
                value = 0;
            }
            this.setPropertyValue("rotation", value, false, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Rotates the element to certain `angle`.
     *
     * Set `rotation` property instead.
     *
     * @ignore Exclude from docs
     * @param {number} angle Rotation angle (0-360)
     */
    Sprite.prototype.rotate = function (angle) {
        this.rotation = angle;
    };
    Object.defineProperty(Sprite.prototype, "align", {
        /**
         * @return {Align} Horizontal align
         */
        get: function () {
            return this.getPropertyValue("align");
        },
        /**
         * Controls horizontal alignement of the element.
         *
         * This is used by parent [[Container]] when layouting its children.
         *
         * @param {Align}  value  Horizontal align
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toText"](value);
            this.setPropertyValue("align", value, false, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "valign", {
        /**
         * @return {VerticalAlign} Vertical align
         */
        get: function () {
            return this.getPropertyValue("valign");
        },
        /**
         * Controls vertical alignement of the element.
         *
         * This is used by parent [[Container]] when layouting its children.
         *
         * @param {VerticalAlign}  value  Vertical align
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toText"](value);
            this.setPropertyValue("valign", value, false, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "horizontalCenter", {
        /**
         * @return {HorizontalCenter} Horizontal center
         */
        get: function () {
            return this.getPropertyValue("horizontalCenter");
        },
        /**
         * Controls which part of the element to treat as a horizontal center.
         *
         * The setting will be used when positioning, resizing and rotating the
         * element.
         *
         * @param {HorizontalCenter}  value  Horizontal center
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toText"](value);
            this.setPropertyValue("horizontalCenter", value, false, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "verticalCenter", {
        /**
         * @return {VerticalCenter} Vertical center
         */
        get: function () {
            return this.getPropertyValue("verticalCenter");
        },
        /**
         * Controls which part of the element to treat as a vertical center.
         *
         * The setting will be used when positioning, resizing and rotating the
         * element.
         *
         * @param {VerticalCenter}  value  Vertical center
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toText"](value);
            this.setPropertyValue("verticalCenter", value, false, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "maxWidth", {
        /**
         * @return {number} Maximum width (px)
         */
        get: function () {
            var maxWidth = this.getPropertyValue("maxWidth");
            if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](maxWidth)) {
                if (this.parent) {
                    return this.parent.maxWidth;
                }
            }
            return maxWidth;
        },
        /**
         * ==========================================================================
         * DIMENSIONAL PROPERTIES AND RELATED STUFF
         * ==========================================================================
         * @hidden
         */
        /**
         * Maximum allowed width for the element in pixels.
         *
         * @param {number}  value  Maximum width (px)
         */
        set: function (value) {
            if (this.setPropertyValue("maxWidth", value)) {
                if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](this.relativeWidth)) {
                    this.invalidate();
                }
                this.dispatchImmediately("maxsizechanged");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "maxHeight", {
        /**
         * @return {number} Maximum height (px)
         */
        get: function () {
            var maxHeight = this.getPropertyValue("maxHeight");
            if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](maxHeight)) {
                if (this.parent) {
                    return this.parent.maxHeight;
                }
            }
            return maxHeight;
        },
        /**
         * Maximum allowed height for the element in pixels.
         *
         * @param {number}  value  Maximum height (px)
         */
        set: function (value) {
            if (this.setPropertyValue("maxHeight", value)) {
                if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](this.relativeHeight)) {
                    this.invalidate();
                }
                this.dispatchImmediately("maxsizechanged");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "minWidth", {
        /**
         * @return {Optional<number>} Minimum width (px)
         */
        get: function () {
            return this.getPropertyValue("minWidth");
        },
        /**
         * Minimum width of the element in pixels.
         *
         * Set to `undefined` to remove the limit.
         *
         * @param {Optional<number>}  value  Minimum width (px)
         */
        set: function (value) {
            this.setPropertyValue("minWidth", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "minHeight", {
        /**
         * @return {Optional<number>} Minimum height (px)
         */
        get: function () {
            return this.getPropertyValue("minHeight");
        },
        /**
         * Minimum height for the element in pixels.
         *
         * Set to `undefined` to remove the limit.
         *
         * @param {Optional<number>}  value  Minimum height (px)
         */
        set: function (value) {
            this.setPropertyValue("minHeight", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "width", {
        /**
         * @return {number | Percent} Width (absolute or relative)
         */
        get: function () {
            return this.getPropertyValue("width");
        },
        /**
         * Element's absolute or relative width.
         *
         * The width can either be absolute, set in numer pixels, or relative, set
         * in [[Percent]].
         *
         * Relative width will be calculated using closest measured ancestor
         * [[Container]].
         *
         * @param {number | Percent}  value  Width (numeric in pixels or relative)
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toNumberOrPercent"](value);
            //let maxWidth = this.maxWidth;
            //if ($type.isNumber(value) && $type.isNumber(maxWidth) && value > maxWidth) {
            //	value = maxWidth;
            //}
            var changed = this.setPropertyValue("width", value, true);
            if (changed) {
                this.percentWidth = undefined;
                this.relativeWidth = undefined;
                if (value instanceof __WEBPACK_IMPORTED_MODULE_33__utils_Percent__["a" /* Percent */]) {
                    this.percentWidth = value.percent;
                    this._pixelWidth = undefined;
                }
                else {
                    this._pixelWidth = Number(value);
                    this.maxWidth = this._pixelWidth;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "height", {
        /**
         * @return {number | Percent} height (absolute or relative)
         */
        get: function () {
            return this.getPropertyValue("height");
        },
        /**
         * Element's absolute or relative height.
         *
         * The height can either be absolute, set in numer pixels, or relative, set
         * in [[Percent]].
         *
         * Relative height will be calculated using closest measured ancestor
         * [[Container]].
         *
         * @param {number | Percent}  value  Height (numeric in pixels or relative)
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toNumberOrPercent"](value);
            // this approach didn't work well. the legend positioned to right/left expands through all the container
            //let maxHeight = this.maxHeight;
            //if (value > maxHeight) {
            //	value = maxHeight;
            //}
            var changed = this.setPropertyValue("height", value, true);
            if (changed) {
                this.percentHeight = undefined;
                this._relativeHeight = undefined;
                if (value instanceof __WEBPACK_IMPORTED_MODULE_33__utils_Percent__["a" /* Percent */]) {
                    this.percentHeight = value.percent;
                    this._pixelHeight = undefined;
                }
                else {
                    this._pixelHeight = Number(value);
                    this.maxHeight = this._pixelHeight; // yes, we reset maxWidth
                }
                this.invalidate();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "pixelWidth", {
        /**
         * Returns element's width in pixels, if width was set. For actual width use measuredWidth property.
         *
         * @readonly
         * @return {number} Width (px)
         */
        get: function () {
            var width;
            if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](this.percentWidth)) {
                width = this.maxWidth;
            }
            else if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](this._pixelWidth)) {
                width = this._pixelWidth;
            }
            else {
                width = 0;
            }
            var minWidth = this.minWidth;
            if (minWidth != null && width < minWidth) {
                width = minWidth;
            }
            return this.adapter.apply("pixelWidth", __WEBPACK_IMPORTED_MODULE_27__utils_Math__["round"](width, this._positionPrecision));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "pixelHeight", {
        /**
         * Returns element's height in pixels. For actual height use measuredHeight property.
         *
         * @readonly
         * @return {number} Height (px)
         */
        get: function () {
            var height;
            if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](this.percentHeight)) {
                height = this.maxHeight;
            }
            else if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](this._pixelHeight)) {
                height = this._pixelHeight;
            }
            else {
                height = 0; //this._measuredHeightSelf;
            }
            var minHeight = this.minHeight;
            if (minHeight != null && height < minHeight) {
                height = minHeight;
            }
            return this.adapter.apply("pixelHeight", __WEBPACK_IMPORTED_MODULE_27__utils_Math__["round"](height, this._positionPrecision));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "relativeWidth", {
        /**
         * @return {$type.Optional<number>} Relative width
         * @ignore
         */
        get: function () {
            var relativeWidth = this._relativeWidth;
            if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](relativeWidth)) {
                return this.adapter.apply("relativeWidth", relativeWidth);
            }
        },
        /**
         * Element's relative width in [[Percent]].
         * @ignore
         *
         * @param {$type.Optional<number>}  value  Relative width
         */
        set: function (value) {
            if (this._relativeWidth != value) {
                this._relativeWidth = value;
                //			this.invalidate();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "relativeHeight", {
        /**
         * @return {$type.Optional<number>} Relative height
         * @ignore
         */
        get: function () {
            var relativeHeight = this._relativeHeight;
            if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](relativeHeight)) {
                return this.adapter.apply("relativeHeight", relativeHeight);
            }
        },
        /**
         * Element's relative height in [[Percent]].
         *
         * @param {$type.Optional<number>}  value  Relative height
         * @ignore
         */
        set: function (value) {
            if (this._relativeHeight != value) {
                this._relativeHeight = value;
                //			this.invalidate();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "measuredWidth", {
        /**
         * Returns element's measured width in pixels.
         *
         * A measured width is actual width of contents plus `paddingRight` and* `paddingLeft`, relative to sprite parent, meaning that
         * rotation and scale is taken into account.
         *
         * @readonly
         * @return {number} Width (px)
         */
        get: function () {
            if (this.disabled || this.__disabled) {
                return 0;
            }
            return this.adapter.apply("measuredWidth", this._measuredWidth);
            // it's not good to fit to min/max range as then rotations and scale won't be taken into account
            //return this.adapter.apply("measuredWidth", $math.fitToRange(this._measuredWidth, this.minWidth, this.maxWidth));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "measuredHeight", {
        /**
         * Returns elements's measured height in pixels.
         *
         * A measured height is actual height of contents plus `paddingTop` and `paddingBottom`, relative to sprite parent, meaning that
         * rotation and scale taken into account.
         *
         * @readonly
         * @return {number} Height (px)
         */
        get: function () {
            if (this.disabled || this.__disabled) {
                return 0;
            }
            // it's not good to fit to min/max range as then rotations and scale won't be taken into account
            //return this.adapter.apply("measuredHeight", $math.fitToRange(this._measuredHeight, this.minHeight, this.maxHeight));
            return this.adapter.apply("measuredHeight", this._measuredHeight);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "outerWidth", {
        /**
         * Returns element's measured width plus its left and right margins in
         * pixels.
         *
         * @readonly
         * @return {number} Outer width (px)
         */
        get: function () {
            return this.adapter.apply("outerWidth", this.pixelWidth + this.pixelMarginRight + this.pixelMarginLeft);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "outerHeight", {
        /**
         * Returns element's measured height plus its top and bottom margins in
         * pixels.
         *
         * @readonly
         * @return {number} Outer height (px)
         */
        get: function () {
            return this.adapter.apply("outerHeight", this.pixelHeight + this.pixelMarginTop + this.pixelMarginBottom);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "innerWidth", {
        /**
         * Returns element's measured inner width in pixels.
         *
         * Inner width is actual available space for content, e.g. element's width
         * minus horizontal padding.
         *
         * @readonly
         * @return {number} Inner width (px)
         */
        get: function () {
            return this.adapter.apply("innerWidth", Math.max(0, this.pixelWidth - this.pixelPaddingRight - this.pixelPaddingLeft));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "innerHeight", {
        /**
         * Returns element's measured inner height in pixels.
         *
         * Inner height is actual available space for content, e.g. element's height
         * minus vertical padding.
         *
         * @readonly
         * @return {number} Inner height (px)
         */
        get: function () {
            return this.adapter.apply("innerHeight", Math.max(0, this.pixelHeight - this.pixelPaddingTop - this.pixelPaddingBottom));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "globalScale", {
        /**
         * Returns element's current "global" scale.
         *
         * Scale values accumulate over hierarchy of elements.
         *
         * E.g. if a [[Container]] has `scale = 2` and it's child has a `scale = 2`,
         * the child's `globalScale` will be 4. (a multitude of `2 x 2`)
         *
         * @readonly
         * @return {number} Global scale
         */
        get: function () {
            var scale = this.scale;
            if (this.parent) {
                scale = scale * this.parent.globalScale;
            }
            return this.adapter.apply("globalScale", scale);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "scale", {
        /**
         * @return {number} Scale (0-1)
         */
        get: function () {
            return this.getPropertyValue("scale");
        },
        /**
         * Scale of the element.
         *
         * The scale is set from 0 (element reduced to nothing) to 1 (default size).
         * * 2 will mean element is increased twice.
         * * 0.5 - reduced by 50%.
         *
         * Etc.
         *
         * @param {number}  value  Scale (0-1)
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toNumber"](value);
            if (value < 0) {
                value = 0;
            }
            if (value != this.getPropertyValue("scale")) {
                this.dispatch("globalscalechanged");
            }
            this.setPropertyValue("scale", value, false, true);
            this.strokeWidth = this.strokeWidth; // to handle nonScalingStroke
            this.updateFilterScale();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets all four margins for the element at once.
     *
     * Margins are set in pixels.
     *
     * @param  {number}  top     Top margin
     * @param  {number}  right   Right margin
     * @param  {number}  bottom  Bottom margin
     * @param  {number}  left    Left margin
     * @return {Sprite}          Current element
     */
    Sprite.prototype.margin = function (top, right, bottom, left) {
        this.marginTop = top;
        this.marginRight = right;
        this.marginBottom = bottom;
        this.marginLeft = left;
        return this;
    };
    Object.defineProperty(Sprite.prototype, "marginLeft", {
        /**
         * @return {number | Percent} Margin value
         */
        get: function () {
            return this.getPropertyValue("marginLeft");
        },
        /**
         * Left margin - absolute (px) or relative ([[Percent]]).
         *
         * @param {number | Percent}  value  Margin value
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toNumberOrPercent"](value);
            this.setPropertyValue("marginLeft", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "marginRight", {
        /**
         * @return {number | Percent} Margin value
         */
        get: function () {
            return this.getPropertyValue("marginRight");
        },
        /**
         * Right margin - absolute (px) or relative ([[Percent]]).
         *
         * @param {number | Percent}  value  Margin value
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toNumberOrPercent"](value);
            this.setPropertyValue("marginRight", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "marginTop", {
        /**
         * @return {number | Percent} Margin value
         */
        get: function () {
            return this.getPropertyValue("marginTop");
        },
        /**
         * Top margin - absolute (px) or relative ([[Percent]]).
         *
         * @param {number | Percent}  value  Margin value
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toNumberOrPercent"](value);
            this.setPropertyValue("marginTop", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "marginBottom", {
        /**
         * @return {number | Percent} Margin value
         */
        get: function () {
            return this.getPropertyValue("marginBottom");
        },
        /**
         * Bottom margin - absolute (px) or relative ([[Percent]]).
         *
         * @param {number | Percent}  value  Margin value
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toNumberOrPercent"](value);
            this.setPropertyValue("marginBottom", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "pixelMarginRight", {
        /**
         * Returns current right margin in pixels.
         *
         * @readonly
         * @return {number} Right margin (px)
         */
        get: function () {
            return this.adapter.apply("pixelMarginRight", this.getPixelX(this.marginRight));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "relativeMarginRight", {
        /**
         * Returns current relative right margin.
         *
         * @readonly
         * @return {number} Relative right margin
         */
        get: function () {
            // @todo Maybe use [[Percent]]?
            return this.adapter.apply("relativeMarginRight", this.getRelativeX(this.marginRight));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "pixelMarginLeft", {
        /**
         * Returns current left margin in pixels.
         *
         * @readonly
         * @return {number} Left margin (px)
         */
        get: function () {
            return this.adapter.apply("pixelMarginLeft", this.getPixelX(this.marginLeft));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "relativeMarginLeft", {
        /**
         * Returns current relative left margin.
         *
         * @readonly
         * @return {number} Relative left margin
         */
        get: function () {
            //@todo Maybe use [[Percent]]?
            return this.adapter.apply("relativeMarginLeft", this.getRelativeX(this.marginLeft));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "pixelMarginTop", {
        /**
         * Returns current top margin in pixels.
         *
         * @readonly
         * @return {number} Top margin (px)
         */
        get: function () {
            return this.adapter.apply("pixelMarginTop", this.getPixelY(this.marginTop));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "relativeMarginTop", {
        /**
         * Returns current relative top margin.
         *
         * @readonly
         * @return {number} Relative top margin
         */
        get: function () {
            // @todo Maybe use [[Percent]]?
            return this.adapter.apply("relativeMarginTop", this.getRelativeY(this.marginTop));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "pixelMarginBottom", {
        /**
         * Returns current bottom margin in pixels.
         *
         * @readonly
         * @return {number} Bottom margin (px)
         */
        get: function () {
            return this.adapter.apply("pixelMarginBottom", this.getPixelY(this.marginBottom));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "relativeMarginBottom", {
        /**
         * Returns current relative bottom margin.
         *
         * @readonly
         * @return {number} Relative bottom margin
         */
        get: function () {
            // @todo Maybe use [[Percent]]?
            return this.adapter.apply("relativeMarginBottom", this.getRelativeY(this.marginBottom));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets padding for the element in pixels.
     *
     * @param  {number}  top     Top padding (px)
     * @param  {number}  right   Right padding (px)
     * @param  {number}  bottom  Bottom padding (px)
     * @param  {number}  left    Left padding (px)
     * @return {Sprite}          Element
     */
    Sprite.prototype.padding = function (top, right, bottom, left) {
        this.paddingTop = top;
        this.paddingRight = right;
        this.paddingBottom = bottom;
        this.paddingLeft = left;
        return this;
    };
    Object.defineProperty(Sprite.prototype, "paddingLeft", {
        /**
         * @return {number | Percent} Padding value
         */
        get: function () {
            return this.getPropertyValue("paddingLeft");
        },
        /**
         * Left padding - absolute (px) or relative ([[Percent]]).
         *
         * @param {number | Percent}  value  Padding value
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toNumberOrPercent"](value);
            this.setPropertyValue("paddingLeft", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "paddingRight", {
        /**
         * @return {number | Percent} Padding value
         */
        get: function () {
            return this.getPropertyValue("paddingRight");
        },
        /**
         * Right padding - absolute (px) or relative ([[Percent]]).
         *
         * @param {number | Percent}  value  Padding value
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toNumberOrPercent"](value);
            this.setPropertyValue("paddingRight", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "paddingTop", {
        /**
         * @return {number | Percent} Padding value
         */
        get: function () {
            return this.getPropertyValue("paddingTop");
        },
        /**
         * Top padding - absolute (px) or relative ([[Percent]]).
         *
         * @param {number | Percent}  value  Padding value
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toNumberOrPercent"](value);
            this.setPropertyValue("paddingTop", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "paddingBottom", {
        /**
         * @return {number | Percent} Padding value
         */
        get: function () {
            return this.getPropertyValue("paddingBottom");
        },
        /**
         * Bottom padding - absolute (px) or relative ([[Percent]]).
         *
         * @param {number | Percent}  value  Padding value
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toNumberOrPercent"](value);
            this.setPropertyValue("paddingBottom", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "pixelPaddingRight", {
        /**
         * Returns current right padding in pixels.
         *
         * @readonly
         * @return {number} Right padding (px)
         */
        get: function () {
            return this.getPixelX(this.paddingRight);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "relativePaddingRight", {
        /**
         * Returns current relative right padding.
         *
         * @readonly
         * @return {number} Relative right padding
         */
        get: function () {
            // @todo Maybe use [[Percent]]?
            return this.getRelativeX(this.paddingRight);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "pixelPaddingLeft", {
        /**
         * Returns current left padding in pixels.
         *
         * @readonly
         * @return {number} Left padding (px)
         */
        get: function () {
            return this.getPixelX(this.paddingLeft);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "relativePaddingLeft", {
        /**
         * Returns current relative left padding.
         *
         * @readonly
         * @return {number} Relative left padding
         */
        get: function () {
            // @todo Maybe use [[Percent]]?
            return this.getRelativeX(this.paddingLeft);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "pixelPaddingTop", {
        /**
         * Returns current top padding in pixels.
         *
         * @readonly
         * @return {number} Top padding (px)
         */
        get: function () {
            return this.getPixelY(this.paddingTop);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "relativePaddingTop", {
        /**
         * Returns current relative top padding.
         *
         * @readonly
         * @return {number} Relative top padding
         */
        get: function () {
            // @todo Maybe use [[Percent]]?
            return this.getRelativeY(this.paddingTop);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "pixelPaddingBottom", {
        /**
         * Returns current bottom padding in pixels.
         *
         * @readonly
         * @return {number} Bottom padding (px)
         */
        get: function () {
            return this.getPixelY(this.paddingBottom);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "relativePaddingBottom", {
        /**
         * Returns current relative bottom padding.
         *
         * @readonly
         * @return {number} Relative bottom padding
         */
        get: function () {
            // @todo Maybe use [[Percent]]?
            return this.getRelativeY(this.paddingBottom);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "fillModifier", {
        /**
         * @return {ColorModifier} Fill color modifier
         */
        get: function () {
            return this.getPropertyValue("fillModifier");
        },
        /**
         * ==========================================================================
         * APPEARANCE-RELATED PROPERTIES AND RELATED STUFF
         * ==========================================================================
         * @hidden
         */
        /**
         * [[ColorModifier]] that can be used to modify color and pattern of the
         * element's fill, e.g. create gradients.
         *
         * @param {ColorModifier}  value  Fill color modifiier
         */
        set: function (value) {
            this.setPropertyValue("fillModifier", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "strokeModifier", {
        /**
         * @return {ColorModifier} Stroke color modifier
         */
        get: function () {
            return this.getPropertyValue("strokeModifier");
        },
        /**
         * [[ColorModifier]] that can be used to modify color and pattern of the
         * element's stroke (outline), e.g. create gradients.
         *
         * @param {ColorModifier}  value  Stroke color modifier
         */
        set: function (value) {
            this.setPropertyValue("strokeModifier", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "fillOpacity", {
        /**
         * @return {number} Opacity (0-9)
         */
        get: function () {
            return this.getPropertyValue("fillOpacity");
        },
        /**
         * Element's fill opacity.
         *
         * Opacity ranges from 0 (fully transparent) to 1 (fully opaque).
         *
         * @param {number}  value  Opacity (0-1)
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_27__utils_Math__["toNumberRange"](value, 0, 1);
            if (this.setPropertyValue("fillOpacity", value)) {
                this.setSVGAttribute({ "fill-opacity": value });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "fill", {
        /**
         * @return {Color} Fill
         */
        get: function () {
            return this.getPropertyValue("fill");
        },
        /**
         * Element's fill color or pattern.
         *
         * @param {Color | Pattern | LinearGradient | RadialGradient}  value  Fill
         */
        set: function (value) {
            this.setFill(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets actual `fill` property on the SVG element, including applicable color
     * modifiers.
     *
     * @ignore Exclude from docs
     * @param {Color | Pattern | LinearGradient | RadialGradient}  value  Fill
     */
    Sprite.prototype.setFill = function (value) {
        if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isObject"](value)) {
            value = Object(__WEBPACK_IMPORTED_MODULE_14__utils_Color__["e" /* toColor */])(value);
        }
        if (this.setPropertyValue("fill", value) || this.fillModifier) {
            // this can not go into next if, as value is turned to Gradient
            if (value instanceof __WEBPACK_IMPORTED_MODULE_14__utils_Color__["a" /* Color */]) {
                if (this.fillModifier) {
                    value = this.fillModifier.modify(value);
                }
            }
            // todo: review this place when some Color type will be added
            if (value instanceof __WEBPACK_IMPORTED_MODULE_14__utils_Color__["a" /* Color */]) {
                this.setSVGAttribute({ "fill": value.toString() });
            }
            else if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](value)) {
                this.removeSVGAttribute("fill");
            }
            else if (value instanceof __WEBPACK_IMPORTED_MODULE_9__rendering_fills_Pattern__["a" /* Pattern */] || value instanceof __WEBPACK_IMPORTED_MODULE_10__rendering_fills_LinearGradient__["a" /* LinearGradient */] || value instanceof __WEBPACK_IMPORTED_MODULE_11__rendering_fills_RadialGradient__["a" /* RadialGradient */]) {
                var fill = value;
                fill.paper = this.paper;
                this.setSVGAttribute({ "fill": "url(#" + fill.id + ")" });
            }
        }
    };
    Object.defineProperty(Sprite.prototype, "opacity", {
        /**
         * @return {number} Opacity (0-1)
         */
        get: function () {
            return this.getPropertyValue("opacity");
        },
        /**
         * Element's opacity.
         *
         * Opacity setting can range from 0 (fully transparent) to 1 (fully opaque).
         *
         * ATTENTION: It is highly not recommended to use `opacity` directly on the
         * element. The charts use `opacity` to hide/show elements, so your setting
         * might be lost if element is hidden and then later shown.
         *
         * Instead use methods `hide()` and `show()` to completely toggle off and on
         * the element.
         *
         * Or, use properties `fillOpacity` and `strokeOpacity`, if you need to make
         * the element semi-transparent.
         *
         * @param {number} value Opacity (0-1)
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_27__utils_Math__["toNumberRange"](value, 0, 1);
            if (this.setPropertyValue("opacity", value)) {
                this.setSVGAttribute({ "opacity": value });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "stroke", {
        /**
         * @return {Color} Stroke setting
         */
        get: function () {
            return this.getPropertyValue("stroke");
        },
        /**
         * Element's stroke (outline) color or pattern.
         *
         * @param {Color | Pattern | LinearGradient | RadialGradient}  value  Stroke setting
         */
        set: function (value) {
            this.setStroke(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets actual `stroke` property on the SVG element, including applicable
     * color modifiers.
     *
     * @ignore Exclude from docs
     * @param {Color | Pattern | LinearGradient | RadialGradient} value Stroke setting
     */
    Sprite.prototype.setStroke = function (value) {
        if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isObject"](value)) {
            value = Object(__WEBPACK_IMPORTED_MODULE_14__utils_Color__["e" /* toColor */])(value);
        }
        if (this.setPropertyValue("stroke", value) || this.strokeModifier) {
            // this can not go into next if, as value is turned to Gradient
            if (value instanceof __WEBPACK_IMPORTED_MODULE_14__utils_Color__["a" /* Color */]) {
                if (this.strokeModifier) {
                    value = this.strokeModifier.modify(value);
                }
            }
            if (value instanceof __WEBPACK_IMPORTED_MODULE_14__utils_Color__["a" /* Color */]) {
                if (value.hex == "none") {
                    this.removeSVGAttribute("stroke");
                }
                else {
                    this.setSVGAttribute({ "stroke": value.toString() });
                }
            }
            else if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](value)) {
                this.removeSVGAttribute("stroke");
            }
            else if (value instanceof __WEBPACK_IMPORTED_MODULE_9__rendering_fills_Pattern__["a" /* Pattern */] || value instanceof __WEBPACK_IMPORTED_MODULE_10__rendering_fills_LinearGradient__["a" /* LinearGradient */] || value instanceof __WEBPACK_IMPORTED_MODULE_11__rendering_fills_RadialGradient__["a" /* RadialGradient */]) {
                var stroke = value;
                stroke.paper = this.paper;
                this.setSVGAttribute({ "stroke": "url(#" + stroke.id + ")" });
            }
        }
    };
    Object.defineProperty(Sprite.prototype, "strokeOpacity", {
        /**
         * @return {number} Opacity (0-1)
         */
        get: function () {
            return this.getPropertyValue("strokeOpacity");
        },
        /**
         * Stroke (outline) opacity.
         *
         * The values may range from 0 (fully transparent) to 1 (fully opaque).
         *
         * @param {number}  value  Opacity (0-1)
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_27__utils_Math__["toNumberRange"](value, 0, 1);
            if (this.setPropertyValue("strokeOpacity", value)) {
                this.setSVGAttribute({ "stroke-opacity": value });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "nonScalingStroke", {
        /**
         * @return {boolean} Do not scale stroke (outline)
         */
        get: function () {
            return this.getPropertyValue("nonScalingStroke");
        },
        /**
         * Controls if the element's stroke (outline) should remain keep constant
         * thicnkess and do not scale when the whole element is resized.
         *
         * @param {boolean}  value  Do not scale stroke (outline)
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toBoolean"](value);
            this.setPropertyValue("nonScalingStroke", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "nonScaling", {
        /**
         * @return {boolean} Is element scaleable?
         */
        get: function () {
            return this.getPropertyValue("nonScaling");
        },
        /**
         * Controls if element should keep constant size and not scale even if there is
         * space available, or it does not fit.
         *
         * @param {boolean}  value  Is element scaleable?
         */
        set: function (value) {
            // @todo Description (review)
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toBoolean"](value);
            this.setPropertyValue("nonScaling", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "strokeWidth", {
        /**
         * @return {number} Thickness (px)
         */
        get: function () {
            return this.getPropertyValue("strokeWidth");
        },
        /**
         * Stroke (outline) thickness in pixels.
         *
         * @param {number}  value  Thickness (px)
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toNumber"](value);
            this.setPropertyValue("strokeWidth", value, true);
            if (this.nonScalingStroke) {
                if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](value)) {
                    value = 1;
                }
                value = value / this.globalScale;
            }
            this.setSVGAttribute({ "stroke-width": value });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "strokeDasharray", {
        /**
         * @return {string} `stroke-dasharray`
         */
        get: function () {
            return this.getPropertyValue("strokeDasharray");
        },
        /**
         * A `stroke-dasharray` for the stroke (outline).
         *
         * "Dasharray" allows setting rules to make lines dashed, dotted, etc.
         *
         * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray} for more info on `stroke-dasharray`
         * @param {string}  value  `stroke-dasharray`
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toText"](value);
            if (this.setPropertyValue("strokeDasharray", value)) {
                this.setSVGAttribute({ "stroke-dasharray": value });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "shapeRendering", {
        /**
         * @return {ShapeRendering} 'shape-rendering' value
         */
        get: function () {
            return this.getPropertyValue("shapeRendering");
        },
        /**
         * An SVG-specific `shape-rendering` value.
         *
         * `shape-rendering` controls how vector graphics are drawn and rendered.
         *
         * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering} for more information about `shape-rendering`
         * @default "auto"
         * @param {ShapeRendering}  value  'shape-rendering' value
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toText"](value);
            if (this.setPropertyValue("shapeRendering", value)) {
                this.setSVGAttribute({ "shape-rendering": value });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "pixelPerfect", {
        /**
         * @return {boolean} Use pixel perfect?
         */
        get: function () {
            return this.getPropertyValue("pixelPerfect");
        },
        /**
         * Controls if SVG vectors should be drawn with "pixel" precision, producing
         * perfectly crisp lines on retina displays.
         *
         * Setting this to `true` might improve visual quality, but may have a
         * negative effect on performance.
         *
         * Different elements use different default setting for `pixelPerfect`.
         *
         * We recomment leaving this at their default settings, unless there's a
         * specific need.
         *
         * @param {boolean}  value  Use pixel perfect?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toBoolean"](value);
            if (value) {
                this._positionPrecision = 0;
            }
            else {
                this._positionPrecision = 8;
            }
            this.setPropertyValue("pixelPerfect", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "rtl", {
        /**
         * @return {boolean} RTL?
         */
        get: function () {
            if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](this._rtl)) {
                return this._rtl;
            }
            else if (this.parent) {
                return this.parent.rtl;
            }
            this.rtl = false;
            return this.rtl;
        },
        /**
         * An RTL (righ-to-left) setting.
         *
         * RTL may affect alignement, text, and other visual properties.
         *
         * @param {DateFormatter}  value  `true` for to use RTL
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toBoolean"](value);
            this._rtl = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * ==========================================================================
     * VISIBILITY AND ORDER PROPERTIES AND RELATED STUFF
     * ==========================================================================
     * @hidden
     */
    /**
     * Reveals (fades in) hidden element.
     *
     * Has no effect if element is already visible.
     *
     * If `duration` is not specified, it will use default.
     *
     * @param  {number}  duration  Fade in duration (ms)
     * @return {Optional<Animation>} Animation object if such object was created
     */
    Sprite.prototype.show = function (duration) {
        return this.showReal(duration);
    };
    /**
     * Performs actual operations to reveal this element.
     *
     * @ignore Exclude from docs
     * @param  {number} duration Fade in duration (ms)
     * @return {number}          Fade in duration (ms)
     */
    Sprite.prototype.showReal = function (duration) {
        var _this = this;
        var transition;
        var properties = this.defaultState.properties;
        if (!this.disabled && (this.isHidden || !this.visible || this.isHiding || (properties.opacity != null && this.opacity < properties.opacity && !this.isShowing))) {
            if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](duration)) {
                duration = this.defaultState.transitionDuration;
            }
            this.isHidden = false;
            this.isHiding = false;
            this.isShowing = true;
            if (this._hideAnimation) {
                this._hideAnimation.dispose();
                this._hideAnimation = null;
            }
            // Cancel hide handler just in case it was there
            if (this._showHideDisposer) {
                this.removeDispose(this._showHideDisposer);
            }
            // Apply current state
            transition = this.applyCurrentState(duration);
            if (transition) {
                this._showHideDisposer = transition.events.on("animationended", function () {
                    _this.isShowing = false;
                });
                this._disposers.push(this._showHideDisposer);
            }
            // Make it visible
            var visible = this.defaultState.properties.visible;
            if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](visible)) {
                visible = true;
            }
            this.visible = visible;
            // Dispatch "show" event
            this.dispatchImmediately("shown");
        }
        return transition;
    };
    /**
     * Initiates hiding of Sprite.
     * When called it will fade out the the Sprite to transparency, then make it
     * invisible.
     * @param {number} duration Duration in millisecons
     */
    /**
     * Hides (fades out) the element, and applies `hidden` state.
     *
     * Has no effect if element is already hidden.
     *
     * If `duration` is not specified, it will use default.
     *
     * While element is fading out, its `isHiding` property will resolve to
     * `true`.
     *
     * When element is hidden, its `visible` property will resolve to `false`.
     *
     * @param  {number}  duration  Fade out duration (ms)
     * @return {Optional<Animation>} hide Animation object if such object was created
     */
    Sprite.prototype.hide = function (duration) {
        return this.hideReal(duration);
    };
    /**
     * Hides actual SVG elements and handles hiding animations.
     *
     * @param  {number}  duration  Fade out duration (ms)
     * @return {Animation}            Fade out duration (ms)
     * @ignore
     */
    Sprite.prototype.hideReal = function (duration) {
        var _this = this;
        var transition;
        if (!this.isHiding && this.visible) {
            this.hideTooltip(0);
            this.isShowing = false;
            if (this._hideAnimation != null) {
                this._hideAnimation.dispose();
                this._hideAnimation = null;
            }
            // Cancel hide handler just in case it was there
            if (this._showHideDisposer) {
                this.removeDispose(this._showHideDisposer);
            }
            // Get state
            var hiddenState = this.states.getKey("hidden");
            // Transition to "hidden" state, provided Sprite has one set
            if (hiddenState) {
                // Yes, we have a "hidden" state
                // `setState` will return an `Animation` object which we can set
                // events on
                transition = this.setState(hiddenState, duration, undefined);
                if (transition) {
                    this._hideAnimation = transition;
                    this._showHideDisposer = transition.events.on("animationended", function () {
                        _this.isHiding = false;
                        _this.isHidden = true;
                    }, this);
                    this._disposers.push(this._showHideDisposer);
                    // Thrown everything into `_disposers` just in case Sprite gets
                    // destroyed in the meantime
                    this._disposers.push(transition);
                }
            }
            else {
                // No hidden state, let's just set `visibile` and call it a day
                this.visible = false;
                this.isHiding = false;
                this.isHidden = true;
            }
            // Dispach "hidden" event
            this.dispatchImmediately("hidden");
            this.invalidate(); // hide it at once to avoid flickers // validate() causes SO
        }
        if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](duration)) {
            duration = this.hiddenState.transitionDuration;
        }
        return transition;
    };
    Object.defineProperty(Sprite.prototype, "visible", {
        /**
         * Returns current visibility of the element.
         *
         * @return {boolean} Visible?
         */
        get: function () {
            var value = this.getPropertyValue("visible");
            if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](value)) {
                value = true;
            }
            return value;
        },
        /**
         * Sets visibility of the element.
         *
         * @param {boolean} value Visible?
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toBoolean"](value);
            this.setVisibility(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets `visibility` property:
     *
     * * `true` - visible
     * * `false` - hidden
     *
     * @param  {boolean}  value  `true` - visible, `false` - hidden
     * @return {string}          Current visibility
     */
    Sprite.prototype.setVisibility = function (value) {
        if (this.setPropertyValue("visible", value)) {
            if (value) {
                this.group.removeAttr("visibility");
            }
            else {
                this.group.attr({ "visibility": "hidden" });
            }
            this.invalidatePosition();
            this.dispatchImmediately("visibilitychanged");
        }
    };
    Object.defineProperty(Sprite.prototype, "zIndex", {
        /**
         * @return {number} zIndex
         */
        get: function () {
            return this.getPropertyValue("zIndex");
        },
        /**
         * A "zIndex" of the element.
         *
         * "zIndex" determines the order of how elements are placed over each other.
         *
         * Higher "zIndex" will mean the element will be draw on top of elements
         * with lower "zIndexes".
         *
         * @param {number}  value  zIndex
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toNumber"](value);
            if (this.setPropertyValue("zIndex", value)) {
                var parent_3 = this._parent.get();
                if (parent_3) {
                    parent_3.addChildren();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Moves the element to the very top in element order, so that it appears
     * in front of other elements.
     */
    Sprite.prototype.toFront = function () {
        var parent = this.parent;
        if (parent && parent.children.indexOf(this) != parent.children.length - 1) {
            parent.children.moveValue(this, parent.children.length - 1);
            parent.addChildren();
        }
    };
    /**
     * Moves the element to the very bottom in the element order, so that it
     * appears behind other elements.
     */
    Sprite.prototype.toBack = function () {
        var parent = this.parent;
        if (parent && parent.children.indexOf(this) != 0) {
            parent.children.moveValue(this, 0);
            parent.addChildren();
        }
    };
    Object.defineProperty(Sprite.prototype, "tooltip", {
        /**
         * @return {Optional<Tooltip>} Tooltip
         */
        get: function () {
            if (this._tooltip) {
                return this._tooltip;
            }
            else if (this.parent) {
                return this.parent.tooltip;
            }
        },
        /**
         * ==========================================================================
         * TOOLTIP-RELATED PROPERTIES STUFF
         * ==========================================================================
         * @hidden
         */
        /**
         * A [[Tooltip]] object to be used when displayed rollover information for
         * the element.
         *
         * @param {Tooltip}  tooltip  Tooltip
         */
        set: function (tooltip) {
            if (this._tooltip) {
                //this._tooltip.dispose();
                this.removeDispose(this._tooltip);
            }
            this._tooltip = tooltip;
            if (tooltip) {
                tooltip.parent = this.tooltipContainer;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "tooltipDataItem", {
        /**
         * @return {DataItem} Tooltip data item
         */
        get: function () {
            var tooltipDataItem = this._tooltipDataItem;
            if (tooltipDataItem) {
                return tooltipDataItem;
            }
            else {
                return this.dataItem;
            }
        },
        /**
         * A [[DataItem]] to use when populating content for the element's
         * [[Tooltip]].
         *
         * @see {@link Tooltip}
         * @see {@link DataItem}
         * @param {DataItem}  value  Tooltip data item
         */
        set: function (value) {
            // important: do not dispose tooltip dataItem, as it is some actual data item from data!
            this._tooltipDataItem = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "tooltipColorSource", {
        /**
         * @return {Optional<Sprite>} Tooltip color source
         */
        get: function () {
            return this._tooltipColorSource;
        },
        /**
         * A [[Sprite]] or sprite template to use when getting colors for tooltip. If a template is set,
         * tooltip will look for a clone in tooltipDataItem.sprites. If no clone is found, then template colors will be used.
         *
         * @see {@link Tooltip}
         * @see {@link Sprite}
         * @param {Optional<Sprite>}  sprite Sprite
         */
        set: function (sprite) {
            this._tooltipColorSource = sprite;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Shows the element's [[Tooltip]].
     *
     * A tooltip will be populated using text templates in either `tooltipHTML`
     * or `tooltipText` as well as data in `tooltipDataItem`.
     *
     * @see {@link Tooltip}
     * @return {boolean} returns true if the tooltip was shown and false if it wasn't (no text was found)
     */
    Sprite.prototype.showTooltip = function () {
        var _this = this;
        if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](this.tooltipText) || __WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](this.tooltipHTML)) {
            var tooltip = this.tooltip;
            var tooltipDataItem = this.tooltipDataItem;
            if (tooltip) {
                var colorSource_1 = this;
                var tooltipColorSource_1 = this.tooltipColorSource;
                if ((tooltip.getStrokeFromObject || tooltip.getFillFromObject) && tooltipColorSource_1) {
                    if (tooltipColorSource_1.isTemplate) {
                        if (tooltipDataItem) {
                            __WEBPACK_IMPORTED_MODULE_29__utils_Array__["d" /* eachContinue */](tooltipDataItem.sprites, function (sprite) {
                                if (sprite.clonedFrom == tooltipColorSource_1) {
                                    colorSource_1 = sprite;
                                    return false;
                                }
                                return true;
                            });
                        }
                    }
                    else {
                        colorSource_1 = tooltipColorSource_1;
                    }
                }
                if (tooltip.getStrokeFromObject) {
                    var stroke = this.stroke;
                    var source = colorSource_1;
                    while (source.parent != undefined) {
                        stroke = source.stroke;
                        if (stroke == undefined) {
                            source = source.parent;
                        }
                        if (stroke != undefined) {
                            break;
                        }
                    }
                    if (stroke instanceof __WEBPACK_IMPORTED_MODULE_14__utils_Color__["a" /* Color */]) {
                        tooltip.background.animate({ property: "stroke", to: stroke }, tooltip.animationDuration);
                    }
                    else {
                        tooltip.background.stroke = stroke;
                    }
                }
                // Set data item
                tooltip.dataItem = tooltipDataItem;
                if (tooltip.getFillFromObject) {
                    var fill = this.fill;
                    var source = colorSource_1;
                    while (source.parent != undefined) {
                        fill = source.fill;
                        if (fill == undefined || (fill instanceof __WEBPACK_IMPORTED_MODULE_14__utils_Color__["a" /* Color */] && fill.rgb == undefined)) {
                            source = source.parent;
                        }
                        else if (fill != undefined) {
                            break;
                        }
                    }
                    if (fill == undefined) {
                        fill = Object(__WEBPACK_IMPORTED_MODULE_14__utils_Color__["c" /* color */])("#000000");
                    }
                    if (fill instanceof __WEBPACK_IMPORTED_MODULE_14__utils_Color__["a" /* Color */]) {
                        if (!tooltip.visible) {
                            tooltip.background.fill = fill;
                        }
                        else {
                            tooltip.background.animate({ property: "fill", to: fill }, tooltip.animationDuration);
                        }
                    }
                    else {
                        tooltip.background.fill = fill;
                    }
                    if (tooltip.autoTextColor && fill instanceof __WEBPACK_IMPORTED_MODULE_14__utils_Color__["a" /* Color */]) {
                        tooltip.label.fill = fill.alternative;
                    }
                }
                // Apply tooltip text
                var text = "";
                if (this.tooltipHTML) {
                    tooltip.html = this.tooltipHTML;
                    text = this.tooltipHTML;
                }
                if (this.tooltipText) {
                    tooltip.text = this.tooltipText;
                    text = this.tooltipText;
                }
                if (this.tooltipPosition == "pointer") {
                    this._interactionDisposer = Object(__WEBPACK_IMPORTED_MODULE_16__interaction_Interaction__["b" /* getInteraction */])().body.events.on("track", function (ev) {
                        _this.pointTooltipTo(__WEBPACK_IMPORTED_MODULE_26__utils_Utils__["documentPointToSvg"](ev.point, _this.svgContainer.SVGContainer), true);
                    });
                }
                else {
                    // Point to the X/Y of this Sprite
                    var globalPoint = __WEBPACK_IMPORTED_MODULE_26__utils_Utils__["spritePointToSvg"]({
                        "x": this.tooltipX,
                        "y": this.tooltipY
                    }, this);
                    this.pointTooltipTo(globalPoint);
                }
                // Set accessibility option
                tooltip.readerDescribedBy = this.uidAttr();
                if (text != undefined && text != "") {
                    //@todo: think of how to solve this better
                    if (tooltip && !tooltip.parent) {
                        tooltip.parent = this.tooltipContainer;
                    }
                    // Reveal tooltip					
                    tooltip.show();
                    return true;
                }
            }
        }
        return false;
    };
    /**
     * Sets the point the [[Tooltip]] should point to.
     *
     * @param {IPoint}   point      Coordinates to point to
     * @param {boolean}  instantly  Move instantly without animation
     */
    Sprite.prototype.pointTooltipTo = function (point, instantly) {
        var tooltip = this.tooltip;
        if (tooltip) {
            tooltip.pointTo(point, instantly);
        }
    };
    /**
     * Hides element's [[Tooltip]].
     *
     * @see {@link Tooltip}
     */
    Sprite.prototype.hideTooltip = function (duration) {
        var tooltip = this.tooltip;
        if (tooltip) {
            tooltip.hide(duration);
            if (this._interactionDisposer) {
                this._interactionDisposer.dispose();
            }
        }
    };
    Object.defineProperty(Sprite.prototype, "tooltipHTML", {
        /**
         * @return {string} Tooltip HTML content template
         */
        get: function () {
            return this.getPropertyValue("tooltipHTML");
        },
        /**
         * An HTML template to be used to populate [[Tooltip]] contents.
         *
         * If element has `tooltipDataItem` or `dataItem` set, this will be parsed
         * for any data values to be replaced with the values from respective data
         * items.
         *
         * @param {string} value Tooltip HTML content template
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toText"](value);
            this.hoverable = true;
            this.setPropertyValue("tooltipHTML", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "tooltipText", {
        /**
         * @return {string} Tooltip content template
         */
        get: function () {
            return this.getPropertyValue("tooltipText");
        },
        /**
         * A text template to be used to populate Tooltip's contents.
         *
         * If element has `tooltipDataItem` or `dataItem` set, this will be parsed
         * for any data values to be replaced with the values from respective data
         * items.
         *
         * This template will also be parsed for any special formatting tags.
         *
         * @param {string} value Tooltip content template
         * @see {@link TextFormatter}
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toText"](value);
            if (value) {
                this.hoverable = true;
            }
            this.setPropertyValue("tooltipText", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "tooltipContainer", {
        /**
         * @ignore Exclude from docs
         * @return {Optional<Container>} Container
         */
        get: function () {
            if (this._tooltipContainer) {
                return this._tooltipContainer;
            }
            else if (this.parent) {
                return this.parent.tooltipContainer;
            }
        },
        /**
         * A container reference that should be used to place element's
         * [[Tooltip]] in.
         *
         * Will use parent's container if does not have one set.
         *
         * @ignore Exclude from docs
         * @param {Container} value Container
         * @todo Dispose of the old _tooltipContainer ?
         */
        set: function (value) {
            this._tooltipContainer = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "tooltipX", {
        /**
         * @ignore Exclude from docs
         * @return {number} Tooltip X (px)
         */
        get: function () {
            return this.getTooltipX();
        },
        /**
         * X coordinate the [[Tooltip]] should be shown at.
         *
         * @ignore Exclude from docs
         * @param {number}  value  Tooltip X (px)
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toNumber"](value);
            if (this.setPropertyValue("tooltipX", value) && this.tooltip) {
                this.tooltip.invalidate();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "tooltipPosition", {
        /**
         * @type {"fixed" | "pointer"} Position
         */
        get: function () {
            return this.getPropertyValue("tooltipPosition");
        },
        /**
         * Specifies if [[Tooltip]] should follow the mouse or touch pointer or stay
         * at the fixed position.
         *
         * @param { "fixed" | "pointer" }  value  Position
         */
        set: function (value) {
            this.setPropertyValue("tooltipPosition", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "tooltipY", {
        /**
         * @ignore Exclude from docs
         * @return {number} Tooltip Y (px)
         */
        get: function () {
            return this.getTooltipY();
        },
        /**
         * Y coordinate the [[Tooltip]] should be shown at.
         *
         * @ignore Exclude from docs
         * @param {number}  value  Tooltip Y (px)
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_31__utils_Type__["toNumber"](value);
            if (this.setPropertyValue("tooltipY", value) && this.tooltip) {
                this.tooltip.invalidate();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns Tooltip X coordinate if it's set, or middle of the element.
     *
     * @ignore Exclude from docs
     * @return {number} X (px)
     */
    Sprite.prototype.getTooltipX = function () {
        var x = this.getPropertyValue("tooltipX");
        if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](x)) {
            x = this.maxLeft + this.measuredWidth / 2 - this.pixelPaddingLeft; // overflow is know only for measured items, so this is not always good
        }
        return x;
    };
    /**
     * Returns Tooltip Y coordinate if it's set, or middle of the element.
     *
     * @ignore Exclude from docs
     * @return {number} Y (px)
     */
    Sprite.prototype.getTooltipY = function () {
        var y = this.getPropertyValue("tooltipY");
        if (!__WEBPACK_IMPORTED_MODULE_31__utils_Type__["isNumber"](y)) {
            y = this.maxTop + this.measuredHeight / 2 - this.pixelPaddingTop; // overflow is know only for measured items, so this is not always good
        }
        return y;
    };
    /**
     * Displays a modal or console message with error, and halts any further
     * processing of this item.
     *
     * @ignore Exclude from docs
     * @param {Error} e Error
     * @todo Implement from applying further actions to this item
     */
    Sprite.prototype.raiseCriticalError = function (e) {
        if (this.svgContainer) {
            this.modal.content = e.message;
            this.modal.closable = false;
            this.modal.show();
            this.disabled = true;
        }
        if (__WEBPACK_IMPORTED_MODULE_19__Options__["a" /* options */].verbose) {
            console.log(e);
        }
    };
    /**
 * Processes JSON-based config before it is applied to the object.
 *
 * @ignore Exclude from docs
 * @param {object}  config  Config
 */
    Sprite.prototype.processConfig = function (config) {
        if (config) {
            if (__WEBPACK_IMPORTED_MODULE_31__utils_Type__["hasValue"](config.tooltipColorSource) && __WEBPACK_IMPORTED_MODULE_31__utils_Type__["isString"](config.tooltipColorSource) && this.map.hasKey(config.tooltipColorSource)) {
                config.tooltipColorSource = this.map.getKey(config.tooltipColorSource);
            }
        }
        _super.prototype.processConfig.call(this, config);
    };
    /**
     * This function is used to sort element's JSON config properties, so that
     * some properties that absolutely need to be processed last, can be put at
     * the end.
     *
     * @ignore Exclude from docs
     * @param  {string}  a  Element 1
     * @param  {string}  b  Element 2
     * @return {Ordering}   Sorting number
     */
    Sprite.prototype.configOrder = function (a, b) {
        if (a == b) {
            return 0;
        }
        // Must come last
        else if (a == "tooltipColorSource") {
            return 1;
        }
        else if (b == "tooltipColorSource") {
            return -1;
        }
        else {
            return _super.prototype.configOrder.call(this, a, b);
        }
    };
    return Sprite;
}(__WEBPACK_IMPORTED_MODULE_2__Base__["b" /* BaseObjectEvents */]));

//# sourceMappingURL=Sprite.js.map

/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return Disposer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return MultiDisposer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return MutableValueDisposer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CounterDisposer; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Array__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Type__ = __webpack_require__(1);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * A base class for disposable objects.
 *
 * @ignore Exclude from docs
 */
var Disposer = /** @class */ (function () {
    /**
     * Constructor.
     *
     * @param {function}  dispose  Function that disposes object
     */
    function Disposer(dispose) {
        this._disposed = false;
        this._dispose = dispose;
    }
    /**
     * Checks if object is disposed.
     *
     * @return {boolean} Disposed?
     */
    Disposer.prototype.isDisposed = function () {
        return this._disposed;
    };
    /**
     * Disposes the object.
     */
    Disposer.prototype.dispose = function () {
        if (!this._disposed) {
            this._disposed = true;
            this._dispose();
        }
    };
    return Disposer;
}());

/**
 * A collection of related disposers that can be disposed in one go.
 *
 * @ignore Exclude from docs
 */
var MultiDisposer = /** @class */ (function (_super) {
    __extends(MultiDisposer, _super);
    function MultiDisposer(disposers) {
        return _super.call(this, function () {
            __WEBPACK_IMPORTED_MODULE_0__Array__["c" /* each */](disposers, function (x) {
                x.dispose();
            });
        }) || this;
    }
    return MultiDisposer;
}(Disposer));

/**
 * A special kind of Disposer that has attached value set.
 *
 * If a new value is set using `set()` method, the old disposer value is
 * disposed.
 *
 * @ignore Exclude from docs
 * @todo Description
 */
var MutableValueDisposer = /** @class */ (function (_super) {
    __extends(MutableValueDisposer, _super);
    /**
     * Constructor.
     */
    function MutableValueDisposer() {
        var _this = _super.call(this, function () {
            if (__WEBPACK_IMPORTED_MODULE_1__Type__["hasValue"](_this._disposer)) {
                _this._disposer.dispose();
                _this._disposer = undefined;
            }
        }) || this;
        _this._disposer = undefined;
        return _this;
    }
    /**
     * Returns current value.
     *
     * @return {Optional<T>} Value
     */
    MutableValueDisposer.prototype.get = function () {
        return this._value;
    };
    /**
     * Sets value and disposes previous value if it was set.
     *
     * @param {Optional<T>}          value     New value
     * @param {Optional<IDisposer>}  disposer  Disposer
     */
    MutableValueDisposer.prototype.set = function (value, disposer) {
        if (__WEBPACK_IMPORTED_MODULE_1__Type__["hasValue"](this._disposer)) {
            this._disposer.dispose();
        }
        this._disposer = disposer;
        this._value = value;
    };
    /**
     * Resets the disposer value.
     */
    MutableValueDisposer.prototype.reset = function () {
        this.set(undefined, undefined);
    };
    return MutableValueDisposer;
}(Disposer));

/**
 * @ignore Exclude from docs
 * @todo Description
 */
var CounterDisposer = /** @class */ (function (_super) {
    __extends(CounterDisposer, _super);
    function CounterDisposer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * [_counter description]
         *
         * @todo Description
         * @type {number}
         */
        _this._counter = 0;
        return _this;
    }
    /**
     * [increment description]
     *
     * @todo Description
     */
    CounterDisposer.prototype.increment = function () {
        var _this = this;
        // TODO throw an error if it is disposed
        ++this._counter;
        // TODO make this more efficient
        return new Disposer(function () {
            --_this._counter;
            if (_this._counter === 0) {
                _this.dispose();
            }
        });
    };
    return CounterDisposer;
}(Disposer));

//# sourceMappingURL=Disposer.js.map

/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["g"] = indexOf;
/* harmony export (immutable) */ __webpack_exports__["i"] = map;
/* harmony export (immutable) */ __webpack_exports__["c"] = each;
/* unused harmony export eachReverse */
/* harmony export (immutable) */ __webpack_exports__["d"] = eachContinue;
/* harmony export (immutable) */ __webpack_exports__["m"] = shiftLeft;
/* unused harmony export last */
/* unused harmony export first */
/* unused harmony export insert */
/* unused harmony export setIndex */
/* harmony export (immutable) */ __webpack_exports__["k"] = remove;
/* harmony export (immutable) */ __webpack_exports__["j"] = move;
/* harmony export (immutable) */ __webpack_exports__["a"] = add;
/* unused harmony export replace */
/* harmony export (immutable) */ __webpack_exports__["n"] = toArray;
/* unused harmony export has */
/* harmony export (immutable) */ __webpack_exports__["b"] = copy;
/* unused harmony export slice */
/* harmony export (immutable) */ __webpack_exports__["h"] = insertIndex;
/* harmony export (immutable) */ __webpack_exports__["l"] = removeIndex;
/* harmony export (immutable) */ __webpack_exports__["f"] = getSortedIndex;
/* harmony export (immutable) */ __webpack_exports__["e"] = findIndex;
/* unused harmony export find */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Type__ = __webpack_require__(1);


/**
 * ============================================================================
 * UTILITY FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Searches `array` for `value`.
 *
 * Returns -1 if not found.
 *
 * @param   {ArrayLike<A>}  array  Source array
 * @param   {A}             value  Value to search
 * @returns {number}               Index
 */
function indexOf(array, value) {
    var length = array.length;
    for (var i = 0; i < length; ++i) {
        // TODO handle NaN
        if (array[i] === value) {
            return i;
        }
    }
    return -1;
}
/**
 * Calls `fn` function for every member of array and returns a new array out
 * of all outputs.
 *
 * @param   {ArrayLike<A>}  array  Source array
 * @param   {function}      fn     Callback function
 * @returns {number}               New array
 */
function map(array, fn) {
    var length = array.length;
    var output = new Array(length);
    for (var i = 0; i < length; ++i) {
        output[i] = fn(array[i], i);
    }
    return output;
}
/**
 * Iterates thorugh all items in array and calls `fn` function for each of
 * them.
 *
 * @param   {ArrayLike<A>}  array  Source array
 * @param   {function}      fn     Callback function
 */
function each(array, fn) {
    var length = array.length;
    for (var i = 0; i < length; ++i) {
        fn(array[i], i);
    }
}
/**
 * Iterates thorugh all items in array in reverse order and calls `fn` function for each of
 * them.
 *
 * @param   {ArrayLike<A>}  array  Source array
 * @param   {function}      fn     Callback function
 */
function eachReverse(array, fn) {
    var i = array.length;
    while (i--) {
        fn(array[i], i);
    }
}
/**
 * Iterates thorugh all items in array and calls `fn` function for each of
 * them.
 *
 * If `fn` call evaluates to `false`, further iteration is cancelled.
 *
 * @param   {ArrayLike<A>}  array  Source array
 * @param   {function}      fn     Callback function
 */
function eachContinue(array, fn) {
    var length = array.length;
    for (var i = 0; i < length; ++i) {
        if (!fn(array[i], i)) {
            break;
        }
    }
}
/**
 * Shifts an item at `index` towards beginning of the array.
 *
 * @param {ArrayLike<A>}  array  Source array
 * @param {number}        index  Target element index
 */
function shiftLeft(array, index) {
    var length = array.length;
    for (var i = index; i < length; ++i) {
        array[i - index] = array[i];
    }
    array.length = length - index;
}
/**
 * Returns the last item of the array.
 *
 * @param   {ArrayLike<A>}  array  Source array
 * @returns {A}                    Last item
 */
function last(array) {
    var length = array.length;
    return length ? array[length - 1] : undefined;
}
/**
 * Returns the first item of the array.
 *
 * @param   {ArrayLike<A>}  array  Source array
 * @returns {A}                    Last item
 */
function first(array) {
    return array[0];
}
/**
 * Inserts `element` into `array` at `index`.
 *
 * Caps `index` to be between `0` and `array.length`
 *
 * @param {ArrayLike<A>}  array    Source array
 * @param {ArrayLike<A>}  element  Item to insert
 * @param {ArrayLike<A>}  array    Index to insert item at
 */
function insert(array, element, index) {
    //if (array) {
    index = __WEBPACK_IMPORTED_MODULE_0__Math__["fitToRange"](index, 0, array.length);
    array.splice(index, 0, element);
    //}
}
/**
 * Removes all copies of `element` from `array` (if they exist) and then
 * inserts `element` at `index`.
 *
 * @param {ArrayLike<A>}  array    Source array
 * @param {ArrayLike<A>}  element  Item
 * @param {ArrayLike<A>}  array    Index to move item to
 */
function setIndex(array, element, index) {
    remove(array, element);
    insert(array, element, index);
}
/**
 * Removes `element` from `array`.
 *
 * If there are multiple copies of `element`, they are all removed.
 *
 * @param {ArrayLike<A>}  array    Source array
 * @param {ArrayLike<A>}  element  Item to remove
 */
function remove(array, element) {
    var found = false;
    if (array) {
        var index = void 0;
        while ((index = array.indexOf(element)) !== -1) {
            array.splice(index, 1);
            found = true;
        }
    }
    return found;
}
/**
 * Adds an `element` to `array`.
 *
 * If array already contains and item like this, it is removed before adding
 * it again.
 *
 * Optionally `toIndex` can be specified to add element at specific index.
 *
 * @param {ArrayLike<A>}  array    Source array
 * @param {ArrayLike<A>}  element  Item to add
 * @param {ArrayLike<A>}  array    Index to move item to
 */
function move(array, element, toIndex) {
    // @todo this implementation must be the same as the List.moveValue method
    // @todo don't do anything if the desired index is the same as the current index
    var index = indexOf(array, element);
    // @todo remove all old values rather than only the first ?
    if (index !== -1) {
        removeIndex(array, index);
    }
    if (toIndex == null) {
        array.push(element);
    }
    else {
        insertIndex(array, toIndex, element);
    }
}
/**
 * Inserts `element` into `array` at `index`.
 *
 * If `index` is not provided, it will insert `element` at the end of `array`.
 *
 * @param {ArrayLike<A>}  array    Source array
 * @param {ArrayLike<A>}  element  Item to add
 * @param {ArrayLike<A>}  array    Index to add item at
 */
function add(array, element, index) {
    // Append to the end if index is not set
    if (!__WEBPACK_IMPORTED_MODULE_1__Type__["isNumber"](index)) {
        array.push(element);
    }
    // Add to the beginning of array if index is 0
    else if (index === 0) {
        array.unshift(element);
    }
    // Add to indicated place if index is set
    else {
        array.splice(index, 0, element);
    }
}
/**
 * Removes `element` from `array` (if it exists) and then inserts `element` at
 * `index`.
 *
 * If `index` is not provided, it will insert `element` at the end of `array`.
 *
 * @param {ArrayLike<A>}  array    Source array
 * @param {ArrayLike<A>}  element  Item to remove
 * @param {ArrayLike<A>}  array    Index to move item to
 */
function replace(array, element, index) {
    // check if exists
    var ind = array.indexOf(element);
    // remove if exists
    if (ind !== -1) {
        array.splice(ind, 1);
    }
    // add to end if index is not set
    if (!__WEBPACK_IMPORTED_MODULE_1__Type__["isNumber"](index)) {
        array.push(element);
    }
    // add to indicated place if index is set
    else {
        array.splice(index, 0, element);
    }
}
/**
 * Wraps `input` in an array, if it isn't already an array.
 *
 * @param {Array<A> | A}  input  Source value
 * @return {Array<A>} An array
 */
function toArray(input) {
    if (Array.isArray(input)) {
        return input;
    }
    else {
        return [input];
    }
}
/**
 * Returns `true` if `element` exists in `array`.
 *
 * @param   {ArrayLike<A>}  array    Source array
 * @param   {ArrayLike<A>}  element  Item to search for
 * @returns {boolean}                Item in array?
 */
function has(array, element) {
    return indexOf(array, element) !== -1;
}
/**
 * Returns a shallow copy of `array`.
 *
 * @param   {ArrayLike<A>}  array  Source array
 * @returns {boolean}              Copy of the array
 */
function copy(array) {
    var length = array.length;
    // It's faster to create the array with a pre-defined length
    var output = new Array(length);
    for (var i = 0; i < length; ++i) {
        // Because the array has a pre-defined length, we have to assign rather than push
        // This is also faster than pushing
        output[i] = array[i];
    }
    return output;
}
/**
 * Returns a copy of `array` which contains all the elements between `start`
 * and `end`. (including `start` and excluding `end`)
 *
 * If `end` is not provided, it defaults to `array.length`.
 *
 * @param   {ArrayLike<A>}  array  Source array
 * @param   {number}        start  Start index
 * @param   {number}        end    End index
 * @returns {Array<A>}             Part of the array
 */
function slice(array, start, end) {
    if (end === void 0) { end = array.length; }
    var output = new Array(end - start);
    for (var i = start; i < end; ++i) {
        output[i - start] = array[i];
    }
    return output;
}
/**
 * Inserts a value into array at specific index.
 *
 * @param {Array<A>}  array  Source array
 * @param {number}    index  Index
 * @param {A}         value  Value to insert
 */
function insertIndex(array, index, value) {
    array.splice(index, 0, value);
}
/**
 * Removes a value from array at specific index.
 *
 * @param {Array<A>}  array  Source array
 * @param {number}    index  Index
 */
function removeIndex(array, index) {
    array.splice(index, 1);
}
/**
 * Orders an array using specific `ordering` function and returns index of
 * the `value`.
 *
 * @ignore Exclude from docs
 * @param   {ArrayLike<A>}  array     Source array
 * @param   {function}      ordering  An ordering function
 * @param   {ArrayLike<A>}  value     Value to search for
 * @returns {SortResult}              Result of the search
 */
function getSortedIndex(array, ordering, value) {
    var start = 0;
    var end = array.length;
    var found = false;
    while (start < end) {
        // TODO is this faster/slower than using Math.floor ?
        var pivot = (start + end) >> 1;
        var order = ordering(value, array[pivot]);
        // less
        if (order < 0) {
            end = pivot;
            // equal
        }
        else if (order === 0) {
            found = true;
            start = pivot + 1;
            // more
        }
        else {
            start = pivot + 1;
        }
    }
    return {
        found: found,
        index: (found ? start - 1 : start)
    };
}
/**
 * Searches the array using custom function and returns index of the item if
 * found.
 *
 * Will call `matches` function on all items of the array. If return value
 * evaluates to `true`, index is returned.
 *
 * Otherwise returns -1.
 *
 * @param   {ArrayLike<A>}  array    Source array
 * @param   {function}      matches  Search function
 * @returns {number}                 Index of the item if found
 */
function findIndex(array, matches) {
    var length = array.length;
    for (var i = 0; i < length; ++i) {
        if (matches(array[i], i)) {
            return i;
        }
    }
    return -1;
}
/**
 * Searches the array using custom function and returns item if found.
 *
 * Will call `matches` function on all items of the array. If return value
 * evaluates to `true`, index is returned.
 *
 * Otherwise returns `undefined`.
 *
 * @param   {ArrayLike<A>}  array    Source array
 * @param   {function}      matches  Search function
 * @returns {number}                 Item if found
 */
function find(array, matches) {
    var index = findIndex(array, matches);
    if (index !== -1) {
        return array[index];
    }
}
//# sourceMappingURL=Array.js.map

/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["entries"] = entries;
/* harmony export (immutable) */ __webpack_exports__["keys"] = keys;
/* harmony export (immutable) */ __webpack_exports__["keysOrdered"] = keysOrdered;
/* harmony export (immutable) */ __webpack_exports__["hasKey"] = hasKey;
/* harmony export (immutable) */ __webpack_exports__["getKey"] = getKey;
/* harmony export (immutable) */ __webpack_exports__["eachContinue"] = eachContinue;
/* harmony export (immutable) */ __webpack_exports__["each"] = each;
/* harmony export (immutable) */ __webpack_exports__["eachOrdered"] = eachOrdered;
/* harmony export (immutable) */ __webpack_exports__["copy"] = copy;
/* harmony export (immutable) */ __webpack_exports__["merge"] = merge;
/* harmony export (immutable) */ __webpack_exports__["copyProperties"] = copyProperties;
/* harmony export (immutable) */ __webpack_exports__["forceCopyProperties"] = forceCopyProperties;
/* harmony export (immutable) */ __webpack_exports__["copyAllProperties"] = copyAllProperties;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Array__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Type__ = __webpack_require__(1);
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * ============================================================================
 * UTILITY FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Returns an iterator for all entries in object.
 *
 * Can be used to safely iterate through all properties of the object.
 *
 * @param   {object}    object  Source object
 * @returns {Iterator}          Iterator
 */
function entries(object) {
    return function (push) {
        // TODO make this more efficient ?
        for (var key in object) {
            if (hasKey(object, key)) {
                if (!push([key, object[key]])) {
                    break;
                }
            }
        }
    };
}
/**
 * Returns an array of object's property names.
 *
 * @param   {object}        object  Source object
 * @returns {Array<string}          Object property names
 */
function keys(object) {
    return Object.keys(object);
}
/**
 * Returns an array of object's property names ordered using specific ordering
 * function.
 *
 * @param   {object}        object  Source object
 * @param   {function}      order   Ordering function
 * @returns {Array<string}          Object property names
 */
function keysOrdered(object, order) {
    return Object.keys(object).sort(order);
}
/**
 * Checks if `object` has a specific `key`.
 *
 * @param   {object}   object  Source object
 * @param   {string}   key     Property name
 * @returns {boolean}          Has key?
 */
function hasKey(object, key) {
    return {}.hasOwnProperty.call(object, key);
}
/**
 * Returns value of the specific `key`.
 *
 * @param   {object}   object  Source object
 * @param   {string}   key     Property name
 * @returns {any}              Key value
 */
function getKey(object, key) {
    return object[key];
}
/**
 * Iterates through all properties of the object calling `fn` for each of them.
 *
 * If return value of the function evaluates to `false` further iteration is
 * cancelled.
 *
 * @param {object}   object  Source object
 * @param {function} fn      Callback function
 */
function eachContinue(object, fn) {
    for (var key in object) {
        if (hasKey(object, key)) {
            if (!fn(key, object[key])) {
                break;
            }
        }
    }
}
/**
 * Iterates through all properties of the object calling `fn` for each of them.
 *
 * @param {object}   object  Source object
 * @param {function} fn      Callback function
 */
function each(object, fn) {
    eachContinue(object, function (key, value) {
        fn(key, value);
        return true;
    });
}
/**
 * Orders object properties using custom `ord` function and iterates through
 * them calling `fn` for each of them.
 *
 * @param {object}    object  Source object
 * @param {function}  fn      Callback function
 * @param {function}  order   Ordering function
 */
function eachOrdered(object, fn, ord) {
    __WEBPACK_IMPORTED_MODULE_0__Array__["c" /* each */](keysOrdered(object, ord), function (key) {
        fn(key, object[key]);
    });
}
/**
 * Returns a copy of the object.
 *
 * @param   {object} object  Source object
 * @returns {object}         Copy of the object
 */
function copy(object) {
    return Object.assign({}, object);
}
/**
 * Merges two objects and returns a new object that contains properties from
 * both source objects.
 *
 * @param   {object} object1  Source object #1
 * @param   {object} object2  Source object #2
 * @returns {object}          Combined object
 */
function merge(object1, object2) {
    return Object.assign({}, object1, object2);
}
/**
 * Copies a list of properties from one object to another.
 *
 * Will not copy empty properties.
 *
 * @param {object}         from  Source object
 * @param {object}         to    Target object
 * @param {Array<string>}  keys  List of keys to copy
 */
function copyProperties(from, to, keys) {
    __WEBPACK_IMPORTED_MODULE_0__Array__["c" /* each */](keys, function (key) {
        if (__WEBPACK_IMPORTED_MODULE_1__Type__["hasValue"](from[key])) {
            to[key] = from[key];
        }
    });
}
/**
 * Copies a list of properties from one object to another.
 *
 * Will copy empty properties.
 *
 * @param {object}         from  Source object
 * @param {object}         to    Target object
 * @param {Array<string>}  keys  List of keys to copy
 */
function forceCopyProperties(from, to, keys) {
    __WEBPACK_IMPORTED_MODULE_0__Array__["c" /* each */](keys, function (key) {
        to[key] = from[key];
    });
}
/**
 * Copies all properties from one object to another.
 *
 * @param {object}  from  Source object
 * @param {object}  to    Target object
 */
function copyAllProperties(from, to) {
    copyProperties(from, to, keys(from));
}
//# sourceMappingURL=Object.js.map

/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BaseObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return BaseObjectEvents; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Dictionary__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Disposer__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_EventDispatcher__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Adapter__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Color__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_Cache__ = __webpack_require__(90);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils_Array__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__utils_Object__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__utils_Type__ = __webpack_require__(1);
/**
 * Base functionality
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();












/**
 * Provides base functionality for all derivative objects, like generating ids,
 * handling cache, etc.
 */
var BaseObject = /** @class */ (function () {
    //protected _classes: { [index: string]: any } = {};
    /**
     * Constructor
     * * Sets class name
     */
    function BaseObject() {
        /**
         * Indicates if this object has already been deleted. Any
         * destruction/disposal code should take this into account when deciding
         * wheter to run potentially costly disposal operations if they already have
         * been run.
         *
         * @type {boolean}
         * @ignore Exclude from docs
         */
        this._disposed = false;
        /**
         * List of IDisposer which will be disposed when the BaseObject is disposed.
         *
         * @ignore Exclude from docs
         */
        this._disposers = [];
        this.className = "BaseObject";
    }
    Object.defineProperty(BaseObject.prototype, "uid", {
        /**
         * Returns object's internal unique ID.
         *
         * @return {string} Unique ID
         */
        get: function () {
            if (!this._uid) {
                this._uid = __WEBPACK_IMPORTED_MODULE_7__Registry__["b" /* registry */].getUniqueId();
                __WEBPACK_IMPORTED_MODULE_7__Registry__["b" /* registry */].map.setKey(this._uid, this);
            }
            return this._uid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseObject.prototype, "id", {
        /**
         * @return {Optional<string>} Id
         */
        get: function () {
            return this._id;
        },
        /**
         * Sets the user-defined id of the element.
         *
         * @param {Optional<string>} value Id
         */
        set: function (value) {
            //registry.map.setKey(value, this); // registry.map only stores by uid
            this._id = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseObject.prototype, "map", {
        /**
         * Returns a universal collection for mapping ids with objects.
         *
         * @ignore Exclude from docs
         * @return {Dictionary<string, any>} Map collection
         */
        get: function () {
            if (!this._map) {
                this._map = new __WEBPACK_IMPORTED_MODULE_1__utils_Dictionary__["a" /* Dictionary */]();
            }
            return this._map;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Applies properties from all assigned themes.
     *
     * @ignore Exclude from docs
     */
    BaseObject.prototype.applyTheme = function () {
        var _this = this;
        // TODO is this needed ?
        if (__WEBPACK_IMPORTED_MODULE_7__Registry__["b" /* registry */]) {
            var themes = this.getCurrentThemes();
            // TODO is this needed ?
            if (themes) {
                __WEBPACK_IMPORTED_MODULE_9__utils_Array__["c" /* each */](themes, function (theme, index) {
                    theme(_this);
                });
            }
        }
    };
    Object.defineProperty(BaseObject.prototype, "themes", {
        /**
         * @ignore Exclude from docs
         * @return {Optional<ITheme[]>} An array of themes
         */
        get: function () {
            return this._themes;
        },
        /**
         * A list of themes to be used for this element.
         *
         * @ignore Exclude from docs
         * @param {Optional<ITheme[]>} value An array of themes
         */
        set: function (value) {
            this._themes = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns a list of themes that should be applied to this element. It could
     * either be a list of themes set explicitly on this element, or system-wide.
     *
     * @return {ITheme[]} List of themes
     */
    BaseObject.prototype.getCurrentThemes = function () {
        return this.themes || __WEBPACK_IMPORTED_MODULE_7__Registry__["b" /* registry */].themes;
    };
    /**
     * Returns if this object has been already been disposed.
     *
     * @return {boolean} Is disposed?
     */
    BaseObject.prototype.isDisposed = function () {
        return this._disposed;
    };
    /**
     * Destroys this object and all related data.
     */
    BaseObject.prototype.dispose = function () {
        if (!this._disposed) {
            this._disposed = true;
            var a = this._disposers;
            this._disposers = null;
            __WEBPACK_IMPORTED_MODULE_9__utils_Array__["c" /* each */](a, function (x) {
                x.dispose();
            });
            // Clear cache
            this.clearCache();
            // remove from clones list
            if (this.clonedFrom) {
                this.clonedFrom.clones.removeValue(this);
            }
            var uid = this._uid;
            if (uid != null) {
                __WEBPACK_IMPORTED_MODULE_7__Registry__["b" /* registry */].map.removeKey(uid);
            }
        }
    };
    /**
     * Disposes disposable object and removes it from `_disposers`.
     *
     * @param {IDisposer} target Object to dispose
     * @ignore Exclude from docs
     */
    BaseObject.prototype.removeDispose = function (target) {
        //if(target){
        if (!this._disposed) {
            var index = __WEBPACK_IMPORTED_MODULE_9__utils_Array__["g" /* indexOf */](this._disposers, target);
            if (index > -1) {
                this._disposers.splice(index, 1);
            }
        }
        target.dispose();
        //}
    };
    /**
     * Makes a copy of this object and returns the clone. Try to avoid clonning complex objects like chart, create new instances if you need them.
     *
     * @param   {string}  cloneId  An id to use for clone (if not set a unique id will be generated)
     * @returns {Object}           Clone
     */
    BaseObject.prototype.clone = function (cloneId) {
        if (!cloneId) {
            cloneId = "clone-" + __WEBPACK_IMPORTED_MODULE_7__Registry__["b" /* registry */].getUniqueId();
        }
        var newObject = new this.constructor();
        newObject.cloneId = cloneId;
        newObject.copyFrom(this);
        // add to clones list
        // this.clones.push(newObject); // moved this to copyFrom
        return newObject;
    };
    Object.defineProperty(BaseObject.prototype, "clones", {
        /**
         * Returns a collection of object's clones.
         *
         * @ignore Exclude from docs
         * @return {Dictionary<string, this>} Clones
         */
        get: function () {
            if (!this._clones) {
                this._clones = new __WEBPACK_IMPORTED_MODULE_0__utils_List__["b" /* List */]();
            }
            return this._clones;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Copies all properties and related data from different element.
     *
     * @param {this} object Source element
     */
    BaseObject.prototype.copyFrom = function (object) {
        object.clones.moveValue(this);
        this.clonedFrom = object;
    };
    Object.defineProperty(BaseObject.prototype, "className", {
        /**
         * @ignore Exclude from docs
         * @return {string} Class name
         */
        get: function () {
            return this._className;
        },
        /**
         * Element's class name. (a class that was used to instantiate the element)
         *
         * @ignore Exclude from docs
         * @param {string}  value  Class name
         */
        set: function (value) {
            this._className = value;
            /*if (registry) {
                registry.registeredClasses[value] = typeof this;
            }*/
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Caches value in object's cache.
     *
     * @ignore Exclude from docs
     * @param {string}  key    Key
     * @param {any}     value  Value
     */
    BaseObject.prototype.setCache = function (key, value) {
        __WEBPACK_IMPORTED_MODULE_8__utils_Cache__["b" /* cache */].set(this.uid, key, value);
    };
    /**
     * Retrieves cached value.
     *
     * @ignore Exclude from docs
     * @param  {string}  key  Key
     * @return {any}          Value
     */
    BaseObject.prototype.getCache = function (key) {
        return __WEBPACK_IMPORTED_MODULE_8__utils_Cache__["b" /* cache */].get(this.uid, key);
    };
    /**
     * Clears object's local cache.
     *
     * @ignore Exclude from docs
     */
    BaseObject.prototype.clearCache = function () {
        __WEBPACK_IMPORTED_MODULE_8__utils_Cache__["b" /* cache */].clear(this.uid);
    };
    /**
     * Creates [[Disposer]] for `setTimeout` function call. This ensures that all
     * timeouts created by the object will be cleared when object itself is
     * disposed.
     *
     * @ignore Exclude from docs
     * @param  {() => void}  fn     Callback function
     * @param  {number}      delay  Timeout (ms)
     * @return {IDisposer}          Disposer for timeout
     */
    BaseObject.prototype.setTimeout = function (fn, delay) {
        var _this = this;
        var id = setTimeout(function () {
            _this.removeDispose(disposer);
            fn();
        }, delay);
        var disposer = new __WEBPACK_IMPORTED_MODULE_2__utils_Disposer__["b" /* Disposer */](function () {
            clearTimeout(id);
        });
        this._disposers.push(disposer);
        return disposer;
    };
    Object.defineProperty(BaseObject.prototype, "config", {
        /**
         * ==========================================================================
         * JSON-BASED CONFIG PROCESSING
         * ==========================================================================
         * @hidden
         */
        /**
         * Use this property to set JSON-based config. When set, triggers processing
         * routine, which will go thorugh all properties, and try to apply values,
         * create instances, etc.
         *
         * Use this with caution, as it is a time-consuming process. It's used for
         * initialchart setup only, not routine operations.
         *
         * @param {object} json JSON config
         */
        set: function (config) {
            try {
                this.processConfig(config);
            }
            catch (e) {
                /*if (this instanceof Sprite) {
                    this.raiseCriticalError(e);
                }*/
                this.raiseCriticalError(e);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Processes the JSON config.
     *
     * @param {object}  json  JSON config
     * @ignore Exclude from docs
     */
    BaseObject.prototype.processConfig = function (config) {
        var _this = this;
        if (!config) {
            return;
        }
        // Get target
        var target = this;
        // Iterate through all of the items
        __WEBPACK_IMPORTED_MODULE_10__utils_Object__["eachOrdered"](config, function (configKey, value) {
            var configValue = value;
            // Check if there's a property in target
            if (_this.hasProperty(configKey)) {
                var item_1;
                // Do we have instructions to create an object?
                if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["isObject"](configValue) && __WEBPACK_IMPORTED_MODULE_11__utils_Type__["hasValue"](configValue["type"])) {
                    // Create new instance
                    if (item_1 = _this.createClassInstance(configValue["type"])) {
                        target[configKey] = item_1;
                    }
                    else {
                        item_1 = target[configKey];
                    }
                }
                else {
                    // Get item from the object
                    item_1 = target[configKey];
                }
                /**
                 * It is...
                 * --------------------------------------------------------------------
                 */
                if (item_1 instanceof __WEBPACK_IMPORTED_MODULE_4__utils_Adapter__["a" /* Adapter */]) {
                    // ... an Adapter, try to add handlers to it
                    // ------------------------------------------------------------------
                    _this.processAdapters(item_1, configValue);
                }
                else if (item_1 instanceof __WEBPACK_IMPORTED_MODULE_3__utils_EventDispatcher__["a" /* EventDispatcher */]) {
                    // ... an EventDispatcher, try to add handlers to it
                    // ------------------------------------------------------------------
                    _this.processEvents(item_1, configValue);
                }
                else if (_this.asIs(configKey)) {
                    // ... a special field, just set it to new value
                    // ------------------------------------------------------------------
                    // (no need to add each indvidual item)
                    target[configKey] = configValue;
                }
                else if (configValue instanceof BaseObject) {
                    // ... a BaseObject object, we just going to use it as it is
                    // ------------------------------------------------------------------
                    target[configKey] = configValue;
                }
                else if (item_1 instanceof BaseObject) {
                    // ... another child BaseObject
                    // ------------------------------------------------------------------
                    // Let's just pass in config part in and let itself deal with it
                    item_1.config = configValue;
                }
                else if (item_1 instanceof __WEBPACK_IMPORTED_MODULE_0__utils_List__["e" /* ListTemplate */]) {
                    // ... a list with template
                    // ------------------------------------------------------------------
                    // Let's see what we can do with it
                    if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["isArray"](configValue)) {
                        // It's an array.
                        // Create a list item for entry, or try to apply properties to an
                        // existing entry if possible and it is present.
                        __WEBPACK_IMPORTED_MODULE_9__utils_Array__["c" /* each */](configValue, function (entry, index) {
                            var type = _this.getConfigEntryType(entry);
                            var listItem;
                            if (item_1.hasIndex(index)) {
                                listItem = item_1.getIndex(index);
                            }
                            else if (entry instanceof BaseObject) {
                                // Item is already a BaseObject, no need to process it further
                                item_1.push(entry);
                                return;
                            }
                            else if (type) {
                                listItem = item_1.create(type);
                            }
                            else {
                                listItem = item_1.create();
                            }
                            if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["isObject"](entry)) {
                                // If the list item is BaseObject, we just need to let it
                                // deal if its own config
                                if (listItem instanceof BaseObject) {
                                    listItem.config = entry;
                                }
                                else if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["isObject"](listItem) && __WEBPACK_IMPORTED_MODULE_11__utils_Type__["isObject"](entry)) {
                                    __WEBPACK_IMPORTED_MODULE_10__utils_Object__["copyAllProperties"](entry, listItem);
                                }
                                else {
                                    item_1.setIndex(item_1.indexOf(listItem), entry);
                                }
                            }
                        });
                        // Truncate the list if it contains less items than the config
                        // array
                        while (configValue.length > item_1.length) {
                            item_1.pop();
                        }
                    }
                    else if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["isObject"](configValue)) {
                        // It's a single oject.
                        // Treat it as a template.
                        if (configValue instanceof BaseObject) {
                            // Item is already a BaseObject, no need to process it further
                            item_1.template = configValue;
                        }
                        else {
                            __WEBPACK_IMPORTED_MODULE_10__utils_Object__["each"](configValue, function (entryKey, entryValue) {
                                var listItem = item_1.template[entryKey];
                                if (listItem instanceof __WEBPACK_IMPORTED_MODULE_4__utils_Adapter__["a" /* Adapter */]) {
                                    _this.processAdapters(listItem, entryValue);
                                }
                                else if (listItem instanceof __WEBPACK_IMPORTED_MODULE_3__utils_EventDispatcher__["a" /* EventDispatcher */]) {
                                    _this.processEvents(listItem, entryValue);
                                }
                                else if (listItem instanceof __WEBPACK_IMPORTED_MODULE_1__utils_Dictionary__["c" /* DictionaryTemplate */]) {
                                    _this.processDictionaryTemplate(listItem, entryValue);
                                }
                                else if (item_1.template[entryKey] instanceof BaseObject) {
                                    // Template is a BaseObject. Let it deal with its own config.
                                    item_1.template[entryKey].config = entryValue;
                                }
                                else {
                                    // Aything else. Just assing and be done with it.
                                    item_1.template[entryKey] = entryValue;
                                }
                            });
                        }
                    }
                    else {
                        // Something else?
                        // Not sure what to do with it on a list - ignore
                    }
                }
                else if (item_1 instanceof __WEBPACK_IMPORTED_MODULE_0__utils_List__["b" /* List */]) {
                    // ... a list
                    // ------------------------------------------------------------------
                    // Convert to array if necessary
                    if (!__WEBPACK_IMPORTED_MODULE_11__utils_Type__["isArray"](configValue)) {
                        configValue = [configValue];
                    }
                    // It's an array
                    // Create a list item for entry
                    __WEBPACK_IMPORTED_MODULE_9__utils_Array__["c" /* each */](configValue, function (entry, index) {
                        if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["isObject"](entry)) {
                            // An object.
                            //
                            // Let's see if we can instantiate a class out of it, or we need
                            // to push it into list as it is.
                            //
                            // If there are items already at the specified index in the list,
                            // apply properties rather than create a new one.
                            var listItem = void 0;
                            if (item_1.hasIndex(index)) {
                                listItem = item_1.getIndex(index);
                            }
                            else if (entry instanceof BaseObject) {
                                // Item is already a BaseObject, no need to process it further
                                item_1.push(entry);
                                return;
                            }
                            else {
                                listItem = _this.createEntryInstance(entry);
                                item_1.push(listItem);
                            }
                            // If the list item is BaseObject, we just need to let it
                            // deal if its own config
                            if (listItem instanceof BaseObject) {
                                listItem.config = entry;
                            }
                        }
                        else {
                            // Basic value.
                            // Just push it into list, or override existing value
                            if (item_1.hasIndex(index)) {
                                item_1.setIndex(index, entry);
                            }
                            else {
                                item_1.push(entry);
                            }
                        }
                    });
                    // Truncate the list if it contains less items than the config
                    // array
                    while (configValue.length > item_1.length) {
                        item_1.pop();
                    }
                }
                else if (item_1 instanceof __WEBPACK_IMPORTED_MODULE_1__utils_Dictionary__["c" /* DictionaryTemplate */]) {
                    // ... a dictionary with template
                    // ------------------------------------------------------------------
                    _this.processDictionaryTemplate(item_1, configValue);
                }
                else if (item_1 instanceof __WEBPACK_IMPORTED_MODULE_1__utils_Dictionary__["a" /* Dictionary */]) {
                    // ... a dictionary
                    // ------------------------------------------------------------------
                    // @todo
                }
                else if (item_1 instanceof __WEBPACK_IMPORTED_MODULE_5__utils_Color__["a" /* Color */] || item_1 instanceof __WEBPACK_IMPORTED_MODULE_6__utils_Percent__["a" /* Percent */]) {
                    // ... it's a Color or Percent
                    // ------------------------------------------------------------------
                    target[configKey] = configValue;
                }
                else if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["isObject"](item_1) && __WEBPACK_IMPORTED_MODULE_11__utils_Type__["isObject"](configValue)) {
                    // ... a regular object
                    // ------------------------------------------------------------------
                    __WEBPACK_IMPORTED_MODULE_10__utils_Object__["copyAllProperties"](configValue, item_1);
                }
                else {
                    // ... something else - probably a simple property or object
                    // ------------------------------------------------------------------
                    // Maybe convert to `Percent` or `Color`?
                    configValue = _this.maybeColorOrPercent(configValue);
                    // Assign
                    target[configKey] = configValue;
                }
            }
        }, this.configOrder);
    };
    /**
     * Tries to detect if value is color or percent and converts to proper object
     * if necessary.
     *
     * Returns the same source value if no color/percent detected
     *
     * @param  {any}  value  Source value
     * @return {any}         Converted value
     */
    BaseObject.prototype.maybeColorOrPercent = function (value) {
        if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["isString"](value)) {
            if (value.match(/^[0-9.\-]+\%$/)) {
                return Object(__WEBPACK_IMPORTED_MODULE_6__utils_Percent__["c" /* percent */])(__WEBPACK_IMPORTED_MODULE_11__utils_Type__["toNumber"](value));
            }
            else if (value.match(/^\#[0-9abcdef]{3,}$/i)) {
                return Object(__WEBPACK_IMPORTED_MODULE_5__utils_Color__["c" /* color */])(value);
            }
        }
        return value;
    };
    BaseObject.prototype.processAdapters = function (item, config) {
        var _this = this;
        if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["isObject"](config)) {
            __WEBPACK_IMPORTED_MODULE_10__utils_Object__["each"](config, function (key, entry) {
                if (!item.has(key, entry)) {
                    item.add(key, entry);
                }
            });
        }
        else if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["isArray"](config)) {
            __WEBPACK_IMPORTED_MODULE_9__utils_Array__["c" /* each */](config, function (entry, index) {
                item.add(entry.type, entry.callback, entry.priority || 0, _this);
            });
        }
    };
    BaseObject.prototype.processEvents = function (item, config) {
        var _this = this;
        if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["isObject"](config)) {
            __WEBPACK_IMPORTED_MODULE_10__utils_Object__["each"](config, function (key, entry) {
                if (!item.has(key, entry)) {
                    item.on(key, entry);
                }
            });
        }
        else if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["isArray"](config)) {
            __WEBPACK_IMPORTED_MODULE_9__utils_Array__["c" /* each */](config, function (entry, index) {
                item.on(entry.type, entry.callback, _this);
            });
        }
    };
    /**
     * Processes JSON config for a [[DictionaryTemplate]] item.
     *
     * @todo Description
     * @param {DictionaryTemplate<any, any>}  item    Item
     * @param {any}                           config  Config
     */
    BaseObject.prototype.processDictionaryTemplate = function (item, config) {
        // We can only process object
        // Not sure what to do with other types - ignore
        if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["isObject"](config)) {
            // Create an entry for each item, or override properties for
            // existing one.
            __WEBPACK_IMPORTED_MODULE_10__utils_Object__["each"](config, function (entryKey, entryValue) {
                var listItem;
                // Get existing one, or create a new one
                if (entryKey == "template") {
                    listItem = item.template;
                }
                else if (item.hasKey(entryKey)) {
                    listItem = item.getKey(entryKey);
                }
                else {
                    listItem = item.create(entryKey);
                }
                // Set data
                if (listItem instanceof BaseObject) {
                    listItem.config = entryValue;
                }
                else if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["isObject"](listItem) && __WEBPACK_IMPORTED_MODULE_11__utils_Type__["isObject"](entryValue)) {
                    __WEBPACK_IMPORTED_MODULE_10__utils_Object__["copyAllProperties"](entryValue, listItem);
                }
                else {
                    listItem.setKey(entryKey, entryValue);
                }
            });
        }
    };
    /**
     * This function is used to sort element's JSON config properties, so that
     * some properties that absolutely need to be processed last, can be put at
     * the end.
     *
     * @ignore Exclude from docs
     * @param  {string}  a  Element 1
     * @param  {string}  b  Element 2
     * @return {Ordering}   Sorting number
     */
    BaseObject.prototype.configOrder = function (a, b) {
        if (a == b) {
            return 0;
        }
        // Language must come first, so it's all set up when the rest of the
        // elements are being instantiated
        else if (a == "language") {
            return -1;
        }
        else if (b == "language") {
            return 1;
        }
        else {
            return 0;
        }
    };
    /**
     * Checks if field should be just assigned as is, without any checking when
     * processing JSON config.
     *
     * Extending functions can override this function to do their own checks.
     *
     * @param  {string}   field  Field name
     * @return {boolean}         Assign as is?
     */
    BaseObject.prototype.asIs = function (field) {
        return __WEBPACK_IMPORTED_MODULE_9__utils_Array__["g" /* indexOf */](["locale"], field) != -1;
    };
    /**
     * Creates a relevant class instance if such class definition exists.
     *
     * @ignore Exclude from docs
     * @param  {string}  className  Class name
     * @return {Object}             Instance
     */
    BaseObject.prototype.createClassInstance = function (className) {
        if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["hasValue"](__WEBPACK_IMPORTED_MODULE_7__Registry__["b" /* registry */].registeredClasses[className])) {
            return new __WEBPACK_IMPORTED_MODULE_7__Registry__["b" /* registry */].registeredClasses[className]();
        }
        return;
    };
    /**
     * Creates a class instance for a config entry using it's type. (as set in
     * `type` property)
     *
     * @ignore Exclude from docs
     * @param  {any}  config  Config part
     * @return {any}          Instance
     */
    BaseObject.prototype.createEntryInstance = function (config) {
        var res;
        if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["hasValue"](config["type"])) {
            res = this.createClassInstance(config["type"]);
        }
        if (!res) {
            return config;
        }
        return res;
    };
    /**
     * Determines config object type.
     *
     * @ignore Exclude from docs
     * @param  {any}  config  Config part
     * @return {any}          Type
     */
    BaseObject.prototype.getConfigEntryType = function (config) {
        if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["hasValue"](config["type"])) {
            if (__WEBPACK_IMPORTED_MODULE_11__utils_Type__["hasValue"](__WEBPACK_IMPORTED_MODULE_7__Registry__["b" /* registry */].registeredClasses[config["type"]])) {
                return __WEBPACK_IMPORTED_MODULE_7__Registry__["b" /* registry */].registeredClasses[config["type"]];
            }
            else {
                throw Error("Invalid type: \"" + config["type"] + "\".");
            }
        }
        return;
    };
    /**
     * Checks if this element has a property.
     *
     * @ignore Exclude from docs
     * @param  {string}   prop  Property name
     * @return {boolean}        Has property?
     */
    BaseObject.prototype.hasProperty = function (prop) {
        return prop in this ? true : false;
    };
    return BaseObject;
}());

;
/**
 * A version of [[BaseObject]] with events properties and methods.
 * Classes that use [[EventDispatcher]] should extend this instead of
 * [[BaseObject]] directly.
 */
var BaseObjectEvents = /** @class */ (function (_super) {
    __extends(BaseObjectEvents, _super);
    /**
     * Constructor
     */
    function BaseObjectEvents() {
        var _this = _super.call(this) || this;
        /**
         * An [[EventDispatcher]] instance
         */
        _this.events = new __WEBPACK_IMPORTED_MODULE_3__utils_EventDispatcher__["a" /* EventDispatcher */]();
        _this.className = "BaseObjectEvents";
        _this._disposers.push(_this.events);
        return _this;
    }
    /**
     * Dispatches an event using own event dispatcher. Will automatically
     * populate event data object with event type and target (this element).
     * It also checks if there are any handlers registered for this sepecific
     * event.
     *
     * @param {Key} eventType Event type (name)
     * @param {any}    data      Data to pass into event handler(s)
     */
    BaseObjectEvents.prototype.dispatch = function (eventType, data) {
        // @todo Implement proper type check
        if (this.events.isEnabled(eventType)) {
            if (data) {
                data.type = eventType;
                data.target = data.target || this;
                this.events.dispatch(eventType, {
                    type: eventType,
                    target: this
                });
            }
            else {
                this.events.dispatch(eventType, {
                    type: eventType,
                    target: this
                });
            }
        }
    };
    /**
     * Works like `dispatch`, except event is triggered immediately, without
     * waiting for the next frame cycle.
     *
     * @param {Key} eventType Event type (name)
     * @param {any}    data      Data to pass into event handler(s)
     */
    BaseObjectEvents.prototype.dispatchImmediately = function (eventType, data) {
        // @todo Implement proper type check
        if (this.events.isEnabled(eventType)) {
            if (data) {
                data.type = eventType;
                data.target = data.target || this;
                this.events.dispatchImmediately(eventType, data);
            }
            else {
                this.events.dispatchImmediately(eventType, {
                    type: eventType,
                    target: this
                });
            }
        }
    };
    return BaseObjectEvents;
}(BaseObject));

//# sourceMappingURL=Base.js.map

/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Color; });
/* harmony export (immutable) */ __webpack_exports__["c"] = color;
/* harmony export (immutable) */ __webpack_exports__["d"] = isColor;
/* harmony export (immutable) */ __webpack_exports__["b"] = castColor;
/* harmony export (immutable) */ __webpack_exports__["e"] = toColor;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Colors__ = __webpack_require__(42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Type__ = __webpack_require__(1);
/**
 * This module contains Color object definition
 */


/**
 * Represents a color.
 *
 * `Color` accepts value only in [[iRGB]] object format. To create `Color`
 * object by parsing it from any supported string-based formats, use helper
 * [[color]] function:
 *
 * ```TypeScript
 * am4core.color("#ff0000");
 * am4core.color("#f00");
 * am4core.color("rgb(255, 0, 0)");
 * am4core.color("rgba(255, 0, 0, 0.5)");
 * am4core.color({ r: 255, g: 0, b: 0 });
 * am4core.color("red");
 * ```
 * ```JavaScript
 * am4core.color("#ff0000");
 * am4core.color("#f00");
 * am4core.color("rgb(255, 0, 0)");
 * am4core.color("rgba(255, 0, 0, 0.5)");
 * am4core.color({ r: 255, g: 0, b: 0 });
 * am4core.color("red");
 * ```
 */
var Color = /** @class */ (function () {
    /**
     * Constructor
     *
     * @param {iRGB} color Source color
     */
    function Color(color) {
        this._value = color;
    }
    Object.defineProperty(Color.prototype, "rgb", {
        /**
         * Returns [[iRGB]] representation of the color.
         *
         * @return {iRGB} RGB object
         */
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "hex", {
        /**
         * Returns color hex value string, e.g. "#FF0000".
         *
         * @return {string} Hex color code
         */
        get: function () {
            return this._value ? __WEBPACK_IMPORTED_MODULE_0__Colors__["rgbToHex"](this._value) : "none";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "rgba", {
        /**
         * Returns an `rgba()` representation of the color, e.g.:
         * `rgba(255, 0, 0, 0.5)`.
         *
         * @return {string} rgba color string
         */
        get: function () {
            return this._value ? __WEBPACK_IMPORTED_MODULE_0__Colors__["rgbToRGBA"](this._value) : "none";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "alpha", {
        /**
         * Returns current transparency.
         *
         * @return {number} Alpha (0-1)
         */
        get: function () {
            if (this._value != null && this._value.a != null) {
                return this._value.a;
            }
            else {
                return 1;
            }
        },
        /**
         * Set alpha (transparency) of the color.
         *
         * @param {number} value Alpha (0-1)
         */
        set: function (value) {
            if (this._value) {
                this._value.a = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "lightColor", {
        /**
         * Returns current light color setting.
         *
         * @return {Color} Color
         */
        get: function () {
            if (!this._lightColor) {
                this._lightColor = new Color({ r: 255, g: 255, b: 255 });
            }
            return this._lightColor;
        },
        /**
         * Sets "light" color. Used when determining contrasting color.
         *
         * @param {Color} color Color
         */
        set: function (color) {
            this._lightColor = color;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "darkColor", {
        /**
         * Returns current dark color setting.
         *
         * @return {Color} Color
         */
        get: function () {
            if (!this._darkColor) {
                this._darkColor = new Color({ r: 0, g: 0, b: 0 });
            }
            return this._darkColor;
        },
        /**
         * Sets "dark" color. Used when determining contrasting color.
         *
         * @param {Color} color Color
         */
        set: function (color) {
            this._darkColor = color;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Overrides `toString` method so that [[Color]] object can be used as
     * string.
     *
     * @ignore Exclude from docs
     * @return {string} String represantion of color (usable in CSS)
     */
    Color.prototype.toString = function () {
        return this.alpha < 1 ? this.rgba : this.hex;
    };
    /**
     * Retruns a new [[Color]] which is percent lighter (positivive value),
     * or darker (negative value).
     *
     * Parameter is in the scale of -1 to 1.
     *
     * @param  {number}  percent  Increase/decrease lightness by X
     * @return {Color}            New Color
     */
    Color.prototype.lighten = function (percent) {
        return new Color(__WEBPACK_IMPORTED_MODULE_0__Colors__["lighten"](this.rgb, percent));
    };
    /**
     * Retruns a new [[Color]] which is percent brighter (positivive value),
     * or darker (negative value).
     *
     * Parameter is in the scale of -1 to 1.
     *
     * @param  {number}  percent  Increase/decrease brightness by X
     * @return {Color}            New Color
     */
    Color.prototype.brighten = function (percent) {
        return new Color(__WEBPACK_IMPORTED_MODULE_0__Colors__["brighten"](this.rgb, percent));
    };
    /**
     * Returns a new [[Color]] based on current color with specific saturation
     * applied.
     *
     * `saturation` can be in the range of 0 (fully desaturated) to 1 (fully
     * saturated).
     *
     * @param  {number}  saturation  Saturation (0-1)
     * @return {Color}               New (saturated) color
     */
    Color.prototype.saturate = function (saturation) {
        return new Color(__WEBPACK_IMPORTED_MODULE_0__Colors__["saturate"](this.rgb, saturation));
    };
    Object.defineProperty(Color.prototype, "alternative", {
        /**
         * Returns a either light or dark color that contrasts specifically with
         * this color.
         *
         * Uses properties `darkColor` (default black) and `lightColor` (default
         * white).
         *
         * Useful when determining which color label should be on a colored
         * background, so that it stands out.
         *
         * @return {Color} Contrasting color
         */
        get: function () {
            if (this.rgb != null) {
                return __WEBPACK_IMPORTED_MODULE_0__Colors__["isLight"](this.rgb) ? this.darkColor : this.lightColor;
            }
            else {
                throw new Error("Color does not exist");
            }
        },
        enumerable: true,
        configurable: true
    });
    return Color;
}());

/**
 * Resolves an input variable to a normal [[iRGB]] color and creates [[Color]]
 * object for it.
 *
 * @param  {string | iRGB | Color}  value  Input value
 * @param  {number}                 alpha  Alpha (0-1)
 * @return {Color}                         Color object
 */
function color(value, alpha) {
    if (!__WEBPACK_IMPORTED_MODULE_1__Type__["hasValue"](value)) {
        return new Color(undefined);
    }
    if (typeof value == "string") {
        return new Color(__WEBPACK_IMPORTED_MODULE_0__Colors__["rgb"](value, alpha));
    }
    // Check if it's already a Color object
    if (value instanceof Color) {
        if (__WEBPACK_IMPORTED_MODULE_1__Type__["hasValue"](alpha)) {
            value.alpha = alpha;
        }
        return value;
    }
    // Not a string or Color instance, it's the iRGB object then
    return new Color(value);
}
/**
 * Checks if supplied argument is instance of [[Color]].
 *
 * @param  {any}      value  Input value
 * @return {boolean}         Is Color?
 */
function isColor(value) {
    return value instanceof Color;
}
/**
 * Converts any value to [[Color]].
 *
 * @param  {any}    value  Input value
 * @return {Color}         Color
 */
function castColor(value) {
    return color(value);
}
/**
 * Converts any value into a [[Color]].
 *
 * @param  {any}    value  Source value
 * @return {Color}         Color object
 */
function toColor(value) {
    if (__WEBPACK_IMPORTED_MODULE_1__Type__["hasValue"](value) && !isColor(value)) {
        return castColor(value);
    }
    return value;
}
//# sourceMappingURL=Color.js.map

/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return DictionaryDisposer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Dictionary; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return DictionaryTemplate; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Disposer__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__EventDispatcher__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Object__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__String__ = __webpack_require__(69);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





/**
 * A disposable dictionary, which when disposed itself will call `dispose()`
 * method on all its items.
 */
var DictionaryDisposer = /** @class */ (function (_super) {
    __extends(DictionaryDisposer, _super);
    function DictionaryDisposer(dict) {
        var _this = this;
        var disposer = dict.events.on("remove", function (x) {
            x.oldValue.dispose();
        });
        _this = _super.call(this, function () {
            disposer.dispose();
            // TODO clear the dictionary ?
            __WEBPACK_IMPORTED_MODULE_3__Iterator__["each"](dict.iterator(), function (a) {
                var v = a[1];
                v.dispose();
            });
        }) || this;
        return _this;
    }
    return DictionaryDisposer;
}(__WEBPACK_IMPORTED_MODULE_0__Disposer__["b" /* Disposer */]));

/**
 * A Dictionary is collection where values of some type can be mapped to
 * string keys.
 *
 * You might call it an "associative list" or "associative array".
 */
var Dictionary = /** @class */ (function () {
    /**
     * Constructor
     */
    function Dictionary() {
        /**
         * Event dispatcher.
         *
         * @type {EventDispatcher<AMEvent<Dictionary<Key, T>, IDictionaryEvents<Key, T>>>}
         */
        this.events = new __WEBPACK_IMPORTED_MODULE_1__EventDispatcher__["a" /* EventDispatcher */]();
        this._dictionary = {};
    }
    /**
     * Returns `true` if key exists in Dictionary.
     *
     * @param  {Key}      key  The key to search for
     * @return {boolean}       `true` if key exists, `false` if it doesn't
     */
    Dictionary.prototype.hasKey = function (key) {
        return __WEBPACK_IMPORTED_MODULE_2__Object__["hasKey"](this._dictionary, key);
    };
    /**
     * Returns the value for a specific key.
     *
     * @param  {Key}          key  The key to search for
     * @return {Optional<T>}       Value for the key, or `undefined` if it doesn't exist
     */
    Dictionary.prototype.getKey = function (key) {
        return this._dictionary[key];
    };
    /**
     * Inserts value at specific key.
     *
     * Will thrown an exception if the key already exists in the dictionary.
     *
     * @param {Key}  key    Key
     * @param {T}    value  Value
     */
    Dictionary.prototype.insertKey = function (key, value) {
        if (__WEBPACK_IMPORTED_MODULE_2__Object__["hasKey"](this._dictionary, key)) {
            throw new Error("Key " + key + " already exists in dictionary");
        }
        else {
            this._dictionary[key] = value;
            if (this.events.isEnabled("insertKey")) {
                this.events.dispatchImmediately("insertKey", {
                    type: "insertKey",
                    target: this,
                    key: key,
                    newValue: value
                });
            }
        }
    };
    /**
     * Adds or updates key/value into dictionary.
     *
     * If the key already exists, the old value will be overwritten.
     *
     * @param  {Key}  key    Key
     * @param  {T}    value  Value
     */
    Dictionary.prototype.setKey = function (key, value) {
        if (__WEBPACK_IMPORTED_MODULE_2__Object__["hasKey"](this._dictionary, key)) {
            var oldValue = this._dictionary[key];
            this._dictionary[key] = value;
            if (this.events.isEnabled("setKey")) {
                this.events.dispatchImmediately("setKey", {
                    type: "setKey",
                    target: this,
                    key: key,
                    oldValue: oldValue,
                    newValue: value
                });
            }
            if (this.events.isEnabled("remove")) {
                this.events.dispatchImmediately("remove", {
                    type: "remove",
                    target: this,
                    oldValue: oldValue
                });
            }
        }
        else {
            this._dictionary[key] = value;
            if (this.events.isEnabled("insertKey")) {
                this.events.dispatchImmediately("insertKey", {
                    type: "insertKey",
                    target: this,
                    key: key,
                    newValue: value
                });
            }
        }
    };
    /**
     * Updates the value at specific `key` using custom function.
     *
     * Passes in current value into the function, and uses its output as a new
     * value.
     *
     * @ignore Exclude from docs
     * @param {Key}       key  Key
     * @param {function}  fn   Function to transform the value
     */
    Dictionary.prototype.updateKey = function (key, fn) {
        if (__WEBPACK_IMPORTED_MODULE_2__Object__["hasKey"](this._dictionary, key)) {
            var oldValue = this._dictionary[key];
            var newValue = fn(oldValue);
            this._dictionary[key] = newValue;
            if (this.events.isEnabled("setKey")) {
                this.events.dispatchImmediately("setKey", {
                    type: "setKey",
                    target: this,
                    key: key,
                    oldValue: oldValue,
                    newValue: newValue
                });
            }
            if (this.events.isEnabled("remove")) {
                this.events.dispatchImmediately("remove", {
                    type: "remove",
                    target: this,
                    oldValue: oldValue
                });
            }
        }
        else {
            throw new Error("Key " + key + " doesn't exist in dictionary");
        }
    };
    /**
     * Removes value at specific `key` from dictionary.
     *
     * @param {Key}  key  Key to remove
     */
    Dictionary.prototype.removeKey = function (key) {
        if (__WEBPACK_IMPORTED_MODULE_2__Object__["hasKey"](this._dictionary, key)) {
            var oldValue = this._dictionary[key];
            delete this._dictionary[key];
            if (this.events.isEnabled("removeKey")) {
                this.events.dispatchImmediately("removeKey", {
                    type: "removeKey",
                    target: this,
                    key: key,
                    oldValue: oldValue
                });
            }
            if (this.events.isEnabled("remove")) {
                this.events.dispatchImmediately("remove", {
                    type: "remove",
                    target: this,
                    oldValue: oldValue
                });
            }
        }
    };
    /**
     * [insertKeyIfEmpty description]
     *
     * @ignore Exclude from docs
     * @todo description
     * @param  {Key}       key      [description]
     * @param  {function}  ifEmpty  [description]
     * @return {T}                  [description]
     */
    Dictionary.prototype.insertKeyIfEmpty = function (key, ifEmpty) {
        if (!this.hasKey(key)) {
            this.insertKey(key, ifEmpty());
        }
        return this.getKey(key);
    };
    /**
     * Removes all items from the dictionary.
     */
    Dictionary.prototype.clear = function () {
        var _this = this;
        // TODO dispatch this after clear
        if (this.events.isEnabled("remove")) {
            __WEBPACK_IMPORTED_MODULE_2__Object__["each"](this._dictionary, function (key, value) {
                _this.events.dispatchImmediately("remove", {
                    type: "remove",
                    target: _this,
                    oldValue: value
                });
            });
        }
        this._dictionary = {};
        if (this.events.isEnabled("clear")) {
            this.events.dispatchImmediately("clear", {
                type: "clear",
                target: this
            });
        }
    };
    /**
     * Copies items from another Dictionary.
     *
     * @param {Dictionary<Key, T>}  source  A Dictionary to copy items from
     */
    Dictionary.prototype.copyFrom = function (source) {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_3__Iterator__["each"](source.iterator(), function (a) {
            // TODO fix this type cast
            _this.setKey(a[0], a[1]);
        });
    };
    /**
     * Returns an interator that can be used to iterate through all items in
     * the dictionary.
     *
     * @return {Iterator} Iterator
     */
    Dictionary.prototype.iterator = function () {
        // @todo fix this type after the Iterator bug is fixed
        // https://github.com/Microsoft/TypeScript/issues/16730
        return __WEBPACK_IMPORTED_MODULE_2__Object__["entries"](this._dictionary);
    };
    /**
     * Returns an ES6 iterator for the keys/values of the dictionary.
     */
    Dictionary.prototype[Symbol.iterator] = function () {
        var _a, _b, _i, key;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _a = [];
                    for (_b in this._dictionary)
                        _a.push(_b);
                    _i = 0;
                    _c.label = 1;
                case 1:
                    if (!(_i < _a.length)) return [3 /*break*/, 4];
                    key = _a[_i];
                    if (!__WEBPACK_IMPORTED_MODULE_2__Object__["hasKey"](this._dictionary, key)) return [3 /*break*/, 3];
                    return [4 /*yield*/, [key, this._dictionary[key]]];
                case 2:
                    _c.sent();
                    _c.label = 3;
                case 3:
                    _i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    };
    /**
     * Calls `f` for each key/value in the dictionary.
     */
    Dictionary.prototype.each = function (f) {
        __WEBPACK_IMPORTED_MODULE_3__Iterator__["each"](this.iterator(), function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            return f(key, value);
        });
    };
    /**
     * Returns an iterator that can be used to iterate through all items in
     * the dictionary, ordered by key.
     *
     * @ignore Exclude from docs
     * @return {Iterator} Iterator
     */
    Dictionary.prototype.sortedIterator = function () {
        return __WEBPACK_IMPORTED_MODULE_3__Iterator__["sort"](this.iterator(), function (x, y) { return __WEBPACK_IMPORTED_MODULE_4__String__["order"](x[0], y[0]); });
    };
    return Dictionary;
}());

/**
 * A version of a [[Dictionary]] that has a "template".
 *
 * A template is an instance of an object, that can be used to create new
 * elements in the list without actually needing to create instances for those.
 *
 * When new element is created in the list, e.g. by calling its `create()`
 * method, an exact copy of the element is created (including properties and
 * other attributes), inserted into the list and returned.
 */
var DictionaryTemplate = /** @class */ (function (_super) {
    __extends(DictionaryTemplate, _super);
    /**
     * Constructor
     *
     * @param {T} t Template object
     */
    function DictionaryTemplate(t) {
        var _this = _super.call(this) || this;
        _this.template = t;
        return _this;
    }
    Object.defineProperty(DictionaryTemplate.prototype, "template", {
        /**
         * @return {T} Template object
         */
        get: function () {
            return this._template;
        },
        /**
         * A "template" object to copy all properties from when creating new list
         * items.
         *
         * @param {T}  v  Template object
         */
        set: function (v) {
            v.isTemplate = true;
            this._template = v;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Copies all elements from other dictionary.
     *
     * @param {DictionaryTemplate}  source  Source dictionary
     */
    DictionaryTemplate.prototype.copyFrom = function (source) {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_3__Iterator__["each"](source.iterator(), function (a) {
            // TODO fix this type cast
            // TODO why does this need to clone ?
            _this.setKey(a[0], a[1].clone());
        });
    };
    /**
     * Instantiates a new object of the specified type, adds it to specified
     * `key` in the dictionary, and returns it.
     *
     * @param make  Item type to use. Will use the default type for the dictionary if not specified.
     * @return      Newly created item
     */
    DictionaryTemplate.prototype.create = function (key) {
        var _this = this;
        return this.insertKeyIfEmpty(key, function () { return _this.template.clone(); });
    };
    return DictionaryTemplate;
}(Dictionary));

//# sourceMappingURL=Dictionary.js.map

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};




	var preservedScriptAttributes = {
		type: true,
		src: true,
		noModule: true
	};

	function DOMEval( code, doc, node ) {
		doc = doc || document;

		var i,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {
				if ( node[ i ] ) {
					script[ i ] = node[ i ];
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.3.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && Array.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						disabledAncestor( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
        if ( nodeName( elem, "iframe" ) ) {
            return elem.contentDocument;
        }

        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
        // Treat the template element as a regular one in browsers that
        // don't support it.
        if ( nodeName( elem, "template" ) ) {
            elem = elem.content || elem;
        }

        return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc, node );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		div.style.position = "absolute";
		scrollboxSizeVal = div.offsetWidth === 36 || "absolute";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a property mapped along what jQuery.cssProps suggests or to
// a vendor prefixed property.
function finalPropName( name ) {
	var ret = jQuery.cssProps[ name ];
	if ( !ret ) {
		ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
	}
	return ret;
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5
		) );
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),
		val = curCSS( elem, dimension, styles ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox;

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}

	// Check for style in case a browser which returns unreliable values
	// for getComputedStyle silently falls back to the reliable elem.style
	valueIsBorderBox = valueIsBorderBox &&
		( support.boxSizingReliable() || val === elem.style[ dimension ] );

	// Fall back to offsetWidth/offsetHeight when value is "auto"
	// This happens for inline elements with no explicit setting (gh-3571)
	// Support: Android <=4.1 - 4.3 only
	// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
	if ( val === "auto" ||
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) {

		val = elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ];

		// offsetWidth/offsetHeight provide border-box values
		valueIsBorderBox = true;
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),
				isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra && boxModelAdjustment(
					elem,
					dimension,
					extra,
					isBorderBox,
					styles
				);

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && support.scrollboxSize() === styles.position ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = Date.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return jQuery;
	}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );


/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return GlobalAdapter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return globalAdapter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Adapter; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__SortedList__ = __webpack_require__(71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Number__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Order__ = __webpack_require__(72);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Array__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Type__ = __webpack_require__(1);
/**
 * An Adapter can be used to apply chained synchronous transformations to any
 * value at runtime.
 *
 * Each type class using Adapters must have `adapters` property and adapter
 * interface defined.
 *
 * Adapters can be used to allow external code to apply transformations to any
 * value at any time.
 *
 * For example we have a Weather class which has a method `now()` which returns
 * current temperature.
 *
 * ```
 * function now() {
 *   // ... calculate temperature
 *   let temp = "Temperature now is " + degrees + "F";
 *   return temp;
 * }
 * ```
 *
 * Now, supposed we want to let other classes to modify the output of the
 * `now()`? We just apply an adapter to the `temp` before it is returned:
 *
 * ```
 * temp = this.adapters.apply("now", {
 *   temp: temp,
 *   degrees: degrees
 * }).temp;
 * ```
 *
 * Some other class might tap onto it by defining an Adapter that calculates
 * the temperature in Celsius:
 *
 * weather.adapters.add("now", (arg) => {
 *   arg.temp += "(" + farenheitToCelsius(arg.degrees) + "C)";
 *   return arh;
 * });
 *
 * Furthermore some time-related class could add time:
 *
 * weather.adapters.add("now", (arg) => {
 *   arg.temp += "; the time now is " + (new Date().toLocaleString());
 *   return arh;
 * });
 *
 * So without adapters we would get output like this:
 *
 * ```
 * Temperature now is 90F
 * ```
 *
 * With adapters applied we now have:
 *
 * ```
 * Temperature now is 90F (32C); the time now is 12/11/2012, 7:00:00 PM
 * ```
 */
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */






/**
 * ============================================================================
 * GLOBAL ADAPTER
 * ============================================================================
 * @hidden
 */
/**
 * A global adapter is an adpater that is attached to a class type rather than
 * specific object instance.
 *
 * @ignore Exclude from docs
 */
var GlobalAdapter = /** @class */ (function () {
    function GlobalAdapter() {
        /**
         * Callback id iterator.
         *
         * @type {number}
         */
        this._callbackId = 0;
        /**
         * A list of if callbacks (adapters).
         *
         */
        this._callbacks = new __WEBPACK_IMPORTED_MODULE_0__SortedList__["c" /* SortedList */](function (left, right) {
            return __WEBPACK_IMPORTED_MODULE_2__Order__["a" /* or */](__WEBPACK_IMPORTED_MODULE_1__Number__["order"](left.priority, right.priority), __WEBPACK_IMPORTED_MODULE_1__Number__["order"](left.id, right.id));
        });
    }
    /**
     * Adds a global callback which is not specific to any particular object.
     * Whenever an adapter in any object of the specific class type is invoked
     * global adapters will kick in.
     *
     * @param {any}         type      Class type
     * @param {any}         key       Adapter key
     * @param {any}         callback  Callback function
     * @param {number = 0}  priority  Priority (higher priority meaning adapter will be applied later)
     * @param {any}         scope     Callback function scaope
     */
    GlobalAdapter.prototype.addAll = function (type, key, callback, priority, scope) {
        if (priority === void 0) { priority = 0; }
        this._callbacks.insert({
            id: ++this._callbackId,
            key: key,
            callback: callback,
            priority: priority,
            scope: scope,
            type: type
        });
    };
    /**
     * Returns if there are adapters for specific type available.
     *
     * @param  {Target}   type  Adapter type
     * @param  {Key}      key   Adapter key
     * @return {boolean}
     */
    GlobalAdapter.prototype.isEnabled = function (type, key) {
        // TODO check the type and key
        return this._callbacks.length > 0;
    };
    /**
     * Applies global adapters for the object of the specific type.
     *
     * @param {any}  type   Class type
     * @param {any}  key    Adapter key
     * @param {any}  value  Value
     */
    GlobalAdapter.prototype.applyAll = function (type, key, value) {
        // This is needed to improve the performance and reduce garbage collection
        var callbacks = this._callbacks.values;
        var length = callbacks.length;
        // Cycle through all callbacks and find the ones we need to use
        for (var i = 0; i < length; ++i) {
            var item = callbacks[i];
            if (item.key === key && type instanceof item.type) {
                value = item.callback.call(item.scope, value, type, key);
            }
        }
        return value;
    };
    return GlobalAdapter;
}());

/**
 * A global Adapter for plugins that want to add specific
 * functionality for any chart, not just specific instance.
 *
 * If you want to add an adapter which applies to all instances of the same
 * object type, like, for instance all slices in PieSeries, you can use
 * global adapter.
 *
 * Global adapter is a system-wide instance, accessible via `globalAdapter`.
 *
 * ```TypeScript
 * am4core.globalAdapter.addAll<am4charts.IPieSeriesAdapters, am4charts.PieSeries, "fill">(am4charts.PieSeries, "fill", (value, target, key) => {
 *   return am4core.color("#005500");
 * });
 * ```
 * ```JavaScript
 * am4core.globalAdapter.addAll(am4charts.PieSeries, "fill", (value, target, key) => {
 *   return am4core.color("#005500");
 * });
 * ```
 *
 * @todo Description (improve)
 */
var globalAdapter = new GlobalAdapter();
/**
 * ============================================================================
 * REGULAR ADAPTER
 * ============================================================================
 * @hidden
 */
/**
 * Adapter allows adding ordered callback functions and associating them with a
 * string-based key. An Adapter user can then easily invoke those callbacks to
 * apply custom functions on its input, output or intermediate values.
 *
 * Custom code and plugins can add their own callbacks to modify and enhance
 * core functionality.
 *
 * See the description of `add()` for an example.
 *
 * Almost any object in amCharts4 has own adapter, accessible with `adapter`
 * property.
 *
 * Any adapters added to it will be applied to that object only.
 *
 * ### Global Adapters
 *
 * If you want to add an adapter which applies to all instances of the same
 * object type, like, for instance all slices in PieSeries, you can use
 * global adapter.
 *
 * Global adapter is a system-wide instance, accessible via `globalAdapter`.
 *
 * ```TypeScript
 * am4core.globalAdapter.addAll<am4charts.IPieSeriesAdapters, am4charts.PieSeries, "fill">(am4charts.PieSeries. "fill", (value, target, key) => {
 *   return am4core.color("#005500");
 * });
 * ```
 * ```JavaScript
 * am4core.globalAdapter.addAll(am4charts.PieSeries. "fill", (value, target, key) => {
 *   return am4core.color("#005500");
 * });
 * ```
 *
 * {@link https://www.amcharts.com/docs/v4/reference/adapter_module/#globalAdapter_property More info}.
 *
 * @important
 */
var Adapter = /** @class */ (function () {
    /**
     * Constructor, sets the object referece this Adapter should be used for.
     *
     * @param {T} c Object
     */
    function Adapter(c) {
        /**
         * Internal counter for callback ids.
         *
         * @type {number}
         */
        this._callbackId = 0;
        /**
         * A list of adapter callbacks.
         *
         * @param {[type]} $number.order(left.priority, right.priority) [description]
         * @param {[type]} $number.order(left.id,       right.id));	}  [description]
         */
        this._callbacks = new __WEBPACK_IMPORTED_MODULE_0__SortedList__["c" /* SortedList */](function (left, right) {
            return __WEBPACK_IMPORTED_MODULE_2__Order__["a" /* or */](__WEBPACK_IMPORTED_MODULE_1__Number__["order"](left.priority, right.priority), __WEBPACK_IMPORTED_MODULE_1__Number__["order"](left.id, right.id));
        });
        this.object = c;
        // TODO this exposes the internal events
        this.events = this._callbacks.events;
    }
    /**
     * Adds a callback for a specific key.
     *
     * ```TypeScript
     * // Override fill color value and make all slices green
     * chart.series.template.adapter.add("fill", (value, target, key) => {
     *   return am4core.color("#005500");
     * });
     * ```
     * ```JavaScript
     * // Override fill color value and make all slices green
     * chart.series.template.adapter.add("fill", function(value, target, key) {
     *   return am4core.color("#005500");
     * });
     * ```
     * ```JSON
     * {
     *   // ...
     *   "series": [{
     *     // ...
     *     "adapter": {
     *     	// Override fill color value and make all slices green
     *     	"fill": function(value, target, key) {
     *     	  return am4core.color("#005500");
     *     	}
     *     }
     *   }]
     * }
     * ```
     *
     * The above will call user-defined function (adapter) whenever `fill` value
     * is requested from the Pie series, allowing it to override the default
     * using custom code and any fuzzy logic.
     *
     * There can be any number of adapters set on one property key.
     *
     * In this case adapters will be applied in daisy-chain fashion. The first
     * adapter in queue will make its transformation. The next one will have
     * the output of the first adapter as a starting value, etc.
     *
     * The order of the adapters are determined either by the order they were
     * added in, or their `priority` value.
     *
     * The heigher the `priority`, the later in the game adapter will be applied.
     *
     * @param {string}         key       Key
     * @param {any[]) => any}  callback  A callback function
     * @param {number}         priority  The higher priority, the more chance the adapter will be applied last
     * @param {any}            scope     Scope for the callback function
     */
    Adapter.prototype.add = function (key, callback, priority, scope) {
        if (priority === void 0) { priority = 0; }
        this._callbacks.insert({
            id: ++this._callbackId,
            key: key,
            callback: callback,
            priority: priority,
            scope: scope
        });
    };
    /**
     * Checks whether specific adapter is already set.
     *
     * @param   {string}         key       Key
     * @param   {any[]) => any}  callback  A callback function
     * @param   {number}         priority  The higher priority, the more chance the adapter will be applied last
     * @param   {any}            scope     Scope for the callback function
     * @returns                            Adapter set?
     */
    Adapter.prototype.has = function (key, callback, priority, scope) {
        if (priority === void 0) { priority = 0; }
        // @todo Implement actual check
        return false;
    };
    /**
     * Removes adapter callbacks for the specific `key`.
     *
     * If `priority` is specified, only callbacks for that priority are removed.
     *
     * @param {string} key      Key
     * @param {number} priority Priority
     * @todo Implement
     */
    Adapter.prototype.remove = function (key, priority) {
        var _this = this;
        // It has to make a copy because it removes the elements while iterating
        // TODO inefficient
        __WEBPACK_IMPORTED_MODULE_4__utils_Array__["c" /* each */](__WEBPACK_IMPORTED_MODULE_3__utils_Iterator__["toArray"](this._callbacks.iterator()), function (item) {
            // TODO test this
            if (item.key === key && (!__WEBPACK_IMPORTED_MODULE_5__utils_Type__["isNumber"](priority) || priority === item.priority)) {
                _this._callbacks.remove(item);
            }
        });
    };
    /**
     * Returns if there are any adapters set for the specific `key`.
     *
     * @returns {boolean} Are there any adapters for the key?
     */
    Adapter.prototype.isEnabled = function (key) {
        // TODO check the key
        return this._callbacks.length > 0 || globalAdapter.isEnabled(this.object, key);
    };
    /**
     * Passes the input value through all the callbacks for the defined `key`.
     *
     * @param  {string}  key      Key
     * @param  {any}     value    Input value
     * @param  {any[]}   ...rest  Rest of the parameters to be passed into callback
     * @return {any}              Output value
     */
    Adapter.prototype.apply = function (key, value) {
        // This is needed to improve the performance and reduce garbage collection
        var callbacks = this._callbacks.values;
        var length = callbacks.length;
        for (var i = 0; i < length; ++i) {
            var item = callbacks[i];
            if (item.key === key) {
                value = item.callback.call(item.scope, value, this.object, key);
            }
        }
        // Apply global adapters
        value = globalAdapter.applyAll(this.object, key, value);
        return value;
    };
    /**
     * Returns all adapter keys that are currently in effect.
     *
     * @return {string[]} Adapter keys
     */
    Adapter.prototype.keys = function () {
        // TODO inefficient
        return __WEBPACK_IMPORTED_MODULE_3__utils_Iterator__["toArray"](__WEBPACK_IMPORTED_MODULE_3__utils_Iterator__["map"](this._callbacks.iterator(), function (x) { return x.key; }));
    };
    /**
     * Copies all the adapter callbacks from `source`.
     *
     * @param {Adapter<Target, T>}  source  An Adapter to copy items from
     */
    Adapter.prototype.copyFrom = function (source) {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_3__utils_Iterator__["each"](source._callbacks.iterator(), function (x) {
            _this.add(x.key, x.callback, x.priority, x.scope);
        });
    };
    return Adapter;
}());

//# sourceMappingURL=Adapter.js.map

/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SVGNS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return XMLNS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return XLINK; });
/* harmony export (immutable) */ __webpack_exports__["g"] = addEventListener;
/* harmony export (immutable) */ __webpack_exports__["m"] = getElement;
/* harmony export (immutable) */ __webpack_exports__["f"] = addClass;
/* harmony export (immutable) */ __webpack_exports__["q"] = removeClass;
/* harmony export (immutable) */ __webpack_exports__["r"] = setStyle;
/* harmony export (immutable) */ __webpack_exports__["h"] = blur;
/* harmony export (immutable) */ __webpack_exports__["l"] = focus;
/* harmony export (immutable) */ __webpack_exports__["o"] = outerHTML;
/* harmony export (immutable) */ __webpack_exports__["n"] = isElement;
/* harmony export (immutable) */ __webpack_exports__["i"] = contains;
/* harmony export (immutable) */ __webpack_exports__["j"] = copyAttributes;
/* harmony export (immutable) */ __webpack_exports__["k"] = fixPixelPerfect;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return StyleRule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return StyleClass; });
/* harmony export (immutable) */ __webpack_exports__["p"] = ready;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Disposer__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AsyncPending__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Object__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Array__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Type__ = __webpack_require__(1);
/**
 * A collection of DOM-related functions.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





/**
 * SVG namespace.
 *
 * @ignore Exclude from docs
 * @type {string}
 */
var SVGNS = "http://www.w3.org/2000/svg";
/**
 * XML namespace.
 *
 * @ignore Exclude from docs
 * @type {string}
 */
var XMLNS = "http://www.w3.org/2000/xmlns/";
/**
 * XLINK namespace.
 *
 * @ignore Exclude from docs
 * @type {string}
 */
var XLINK = "http://www.w3.org/1999/xlink";
/**
 * Function that adds a disposable event listener directly to a DOM element.
 *
 * @ignore Exclude from docs
 * @param {EventTarget}   dom       A DOM element to add event to
 * @param {string}        type      Event type
 * @param {Function}      listener  Event listener
 * @returns {IDisposer}             Disposable event
 */
function addEventListener(dom, type, listener, options) {
    //@todo proper type check for options: EventListenerOptions | boolean (TS for some reason gives error on passive parameter)
    //console.log(type, dom);
    dom.addEventListener(type, listener, options || false);
    return new __WEBPACK_IMPORTED_MODULE_0__Disposer__["b" /* Disposer */](function () {
        dom.removeEventListener(type, listener, options || false);
    });
}
/**
 * Finds and returns an element reference using following logic:
 * * If we pass in an element instance, we just return it back.
 * * If we pass in a string, the function looks for an element with such id.
 * * If no element with such id is found, we grab the first element with a tag name like this.
 *
 * @ignore Exclude from docs
 * @param  {Optional<HTMLElement | string>}  el  Element definition (reference, or id, or tag name)
 * @return {Optional<HTMLElement>}               Element reference
 * @todo Review this function as it seems pretty fuzzy and hacky
 */
function getElement(el) {
    if (__WEBPACK_IMPORTED_MODULE_4__Type__["isString"](el)) {
        var e = document.getElementById(el);
        if (e == null) {
            e = document.getElementsByClassName(el)[0];
        }
        if (e instanceof HTMLElement) {
            return e;
        }
    }
    else if (el instanceof HTMLElement) {
        return el;
    }
}
/**
 * Adds a class name to an HTML or SVG element.
 *
 * @ignore Exclude from docs
 * @param {HTMLElement | SVGSVGElement}  element    Element
 * @param {string}                       className  Class name to add
 */
function addClass(element, className) {
    if (element.classList) {
        element.classList.add(className);
    }
    else {
        var currentClassName = element.getAttribute("class");
        if (currentClassName) {
            element.setAttribute("class", currentClassName.split(" ").filter(function (item) {
                return item !== className;
            }).join(" ") + " " + className);
        }
        else {
            element.setAttribute("class", className);
        }
        //element.className = element.className.replace(new RegExp("^" + className + "| " + className), "") + " " + className;
    }
}
/**
 * Removes a class name from an HTML or SVG element.
 *
 * @ignore Exclude from docs
 * @param {HTMLElement | SVGSVGElement}  element    Element
 * @param {string}                       className  Class name to add
 */
function removeClass(element, className) {
    if (element.classList) {
        element.classList.remove(className);
    }
    else {
        var currentClassName = element.getAttribute("class");
        if (currentClassName) {
            element.setAttribute("class", currentClassName.split(" ").filter(function (item) {
                return item !== className;
            }).join(" "));
        }
        //element.className = element.className.replace(new RegExp("^" + className + "| " + className), "");
    }
}
/**
 * Sets style property on DOM element.
 *
 * @ignore Exclude from docs
 * @todo Still needed?
 */
function setStyle(element, property, value) {
    element.style[property] = value;
}
/**
 * Removes focus from any element by shifting focus to body.
 *
 * @ignore Exclude from docs
 */
function blur() {
    var input = document.createElement("input");
    input.style.position = "fixed";
    input.style.top = "0px";
    input.style.left = "-10000px";
    document.body.appendChild(input);
    input.focus();
    input.blur();
    document.body.removeChild(input);
}
/**
 * Tries to focus the element.
 *
 * @ignore Exlude from docs
 * @param {HTMLElement | SVGSVGElement}  element  Element to focus
 */
function focus(element) {
    if (element instanceof HTMLElement) {
        element.focus();
    }
    else {
        var input = document.createElement("input");
        var fo = document.createElementNS(SVGNS, "foreignObject");
        fo.appendChild(input);
        element.appendChild(fo);
        input.focus();
        input.disabled = true;
        fo.remove();
    }
    /*if ((<any>element).focus != undefined) {
        (<any>element).focus();
    }
    else if (element instanceof SVGSVGElement) {
        // Not implemented
        // @todo implement focus fallback
    }*/
}
/**
 * Returns markup for the element including the element tag itself.
 * SVG elements do not support `outerHTML` so this functions applies of
 * a workaround which creates a new temporary wrapper, clones element and uses
 * wrapper's `innerHTML`.
 *
 * @ignore Exclude from docs
 * @param  {HTMLElement | SVGSVGElement}  element  Element to get full markup for
 * @return {string}                                Markup
 * @deprecated Not in use anywhere
 */
function outerHTML(element) {
    if (element.outerHTML) {
        return element.outerHTML;
    }
    else {
        var twrap = document.createElement("div");
        var tnode = element.cloneNode(true);
        twrap.appendChild(tnode);
        var content = twrap.innerHTML;
        return content;
    }
}
/**
 * Checks if element is a valid DOM node.
 *
 * @ignore Exclude from docs
 * @param  {HTMLElement}  el  Element
 * @return {boolean}          `true` if element is a valid DOM node
 */
function isElement(el) {
    return el instanceof Object && el && el.nodeType === 1;
}
/**
 * Checks of element `a` contains element `b`.
 *
 * @param  {HTMLElement | SVGSVGElement}  a  Aleged ascendant
 * @param  {HTMLElement | SVGSVGElement}  b  Aleged descendant
 * @return {boolean}                         Contains?
 */
function contains(a, b) {
    return a !== b && (a.contains
        ? a.contains(b)
        : a.compareDocumentPosition
            ? !!(a.compareDocumentPosition(b) & 16)
            : true);
}
/**
 * Copies attributes from one element to another.
 *
 * @ignore Exclude from docs
 * @param {Element | HTMLElement |  SVGSVGElement}  source  Element to copy attributes from
 * @param {HTMLElement | SVGSVGElement}          target  Element to copy attributes to
 */
function copyAttributes(source, target) {
    for (var attr in source.attributes) {
        var value = source.attributes[attr].nodeValue;
        // TODO what if it's null ?
        if (value != null) {
            target.setAttribute(source.attributes[attr].nodeName, value);
        }
    }
}
/**
 * [fixPixelPerfect description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param {HTMLElement}  el  Element
 */
function fixPixelPerfect(el) {
    Object(__WEBPACK_IMPORTED_MODULE_1__AsyncPending__["c" /* readFrame */])(function () {
        // sometimes IE doesn't like this
        // TODO figure out a way to remove this
        try {
            var rect = el.getBoundingClientRect();
            var left_1 = rect.left - Math.round(rect.left);
            var top_1 = rect.top - Math.round(rect.top);
            if (left_1 !== 0) {
                Object(__WEBPACK_IMPORTED_MODULE_1__AsyncPending__["f" /* writeFrame */])(function () {
                    el.style.left = left_1 + "px";
                });
            }
            if (top_1 !== 0) {
                Object(__WEBPACK_IMPORTED_MODULE_1__AsyncPending__["f" /* writeFrame */])(function () {
                    el.style.top = top_1 + "px";
                });
            }
        }
        catch (e) { }
    });
}
/**
 * [rootStylesheet description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @type {Optional<CSSStyleSheet>}
 */
var rootStylesheet;
/**
 * [getStylesheet description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @return {CSSStyleSheet} [description]
 */
function getStylesheet() {
    if (!__WEBPACK_IMPORTED_MODULE_4__Type__["hasValue"](rootStylesheet)) {
        // TODO use createElementNS ?
        var e = document.createElement("style");
        e.type = "text/css";
        document.head.appendChild(e);
        rootStylesheet = e.sheet;
    }
    return rootStylesheet;
}
/**
 * [makeStylesheet description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {string}        selector  [description]
 * @return {CSSStyleRule}            [description]
 */
function makeStylesheet(selector) {
    var root = getStylesheet();
    var index = root.cssRules.length;
    root.insertRule(selector + "{}", index);
    return root.cssRules[index];
}
/**
 * Defines a class for a CSS rule.
 *
 * Can be used to dynamically add CSS to the document.
 */
var StyleRule = /** @class */ (function (_super) {
    __extends(StyleRule, _super);
    /**
     * Constructor.
     *
     * @param {string}  selector  CSS selector
     * @param {object}  styles    An object of style attribute - value pairs
     */
    function StyleRule(selector, styles) {
        var _this = 
        // TODO test this
        _super.call(this, function () {
            var root = getStylesheet();
            // TODO a bit hacky
            var index = __WEBPACK_IMPORTED_MODULE_3__Array__["g" /* indexOf */](root.cssRules, _this._rule);
            if (index === -1) {
                throw new Error("Could not dispose StyleRule");
            }
            else {
                root.deleteRule(index);
            }
        }) || this;
        _this._rule = makeStylesheet(selector);
        __WEBPACK_IMPORTED_MODULE_2__Object__["each"](styles, function (key, value) {
            _this.setStyle(key, value);
        });
        return _this;
    }
    Object.defineProperty(StyleRule.prototype, "selector", {
        /**
         * @return {string} CSS selector
         */
        get: function () {
            return this._rule.selectorText;
        },
        /**
         * A CSS selector text.
         *
         * E.g.: `.myClass p`
         *
         * @param {string}  selector  CSS selector
         */
        set: function (selector) {
            this._rule.selectorText = selector;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets the same style properties with browser-speicifc prefixes.
     *
     * @param {string}  name   Attribute name
     * @param {string}  value  Attribute value
     */
    StyleRule.prototype._setVendorPrefixName = function (name, value) {
        var style = this._rule.style;
        style.setProperty("-webkit-" + name, value, "");
        style.setProperty("-moz-" + name, value, "");
        style.setProperty("-ms-" + name, value, "");
        style.setProperty("-o-" + name, value, "");
        style.setProperty(name, value, "");
    };
    /**
     * Sets a value for specific style attribute.
     *
     * @param {string}  name   Attribute
     * @param {string}  value  Value
     */
    StyleRule.prototype.setStyle = function (name, value) {
        if (name === "transition") {
            this._setVendorPrefixName(name, value);
        }
        else {
            this._rule.style.setProperty(name, value, "");
        }
    };
    return StyleRule;
}(__WEBPACK_IMPORTED_MODULE_0__Disposer__["b" /* Disposer */]));

/**
 * An internal counter for unique style ids.
 *
 * @ignore Exclude from docs
 * @type {number}
 */
var styleId = 0;
/**
 * @ignore Exclude from docs
 * @todo Description
 */
var StyleClass = /** @class */ (function (_super) {
    __extends(StyleClass, _super);
    /**
     * Constructor.
     *
     * @param {object}  styles  An object of style attribute - value pairs
     * @param {string}  name    Class name
     */
    function StyleClass(styles, name) {
        var _this = this;
        var className = (!__WEBPACK_IMPORTED_MODULE_4__Type__["hasValue"](name)
            // TODO generate the classname randomly
            ? "__style_" + (++styleId) + "__"
            : name);
        _this = _super.call(this, "." + className, styles) || this;
        _this._className = className;
        return _this;
    }
    Object.defineProperty(StyleClass.prototype, "className", {
        /**
         * @return {string} Class name
         */
        get: function () {
            return this._className;
        },
        /**
         * Class name.
         *
         * @param {string}  name  Class name
         */
        set: function (name) {
            this._className = name;
            this.selector = "." + name;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Converts the whole class to
     * @ignore Exclude from docs
     */
    StyleClass.prototype.toString = function () {
        return this._className;
    };
    return StyleClass;
}(StyleRule));

function ready(f) {
    if (document.readyState !== "loading") {
        f();
    }
    else {
        var listener_1 = function () {
            if (document.readyState !== "loading") {
                document.removeEventListener("readystatechange", listener_1);
                f();
            }
        };
        document.addEventListener("readystatechange", listener_1);
    }
}
//# sourceMappingURL=DOM.js.map

/***/ }),
/* 20 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getTarget = function (target) {
  return document.querySelector(target);
};

var getElement = (function (fn) {
	var memo = {};

	return function(target) {
                // If passing function in options, then use it for resolve "head" element.
                // Useful for Shadow Root style i.e
                // {
                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }
                // }
                if (typeof target === 'function') {
                        return target();
                }
                if (typeof memo[target] === "undefined") {
			var styleTarget = getTarget.call(this, target);
			// Special case to return head of iframe instead of iframe itself
			if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[target] = styleTarget;
		}
		return memo[target]
	};
})();

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(27);

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
        if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertInto + " " + options.insertAt.before);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = options.transform(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["c"] = animate;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return animations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return AnimationDisposer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Animation; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__defs_SVGDefaults__ = __webpack_require__(118);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Disposer__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Color__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_AsyncPending__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Ease__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_Colors__ = __webpack_require__(42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils_Array__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__utils_Type__ = __webpack_require__(1);
/**
 * Animation module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */











/**
 * Calls a `callback` function for the `duration` of milliseconds.
 *
 * @todo Needed?
 * @deprecated Not used anywhere
 * @ignore Exclude from docs
 * @param  {number}     duration  Duration (ms)
 * @param  {function}   callback  Callback function
 * @return {IDisposer}            Disposer
 */
function animate(duration, callback) {
    var disposed = false;
    // TODO use performance.now() ?
    var startTime = Date.now();
    function loop(now) {
        if (!disposed) {
            var diff = now - startTime;
            if (diff >= duration) {
                callback(1);
            }
            else {
                __WEBPACK_IMPORTED_MODULE_5__utils_AsyncPending__["a" /* nextFrame */](loop);
                callback(diff / duration);
            }
        }
    }
    __WEBPACK_IMPORTED_MODULE_5__utils_AsyncPending__["a" /* nextFrame */](loop);
    return new __WEBPACK_IMPORTED_MODULE_2__utils_Disposer__["b" /* Disposer */](function () {
        disposed = true;
    });
}
/**
 * Holds the list of currently playing animations.
 *
 * @ignore Exclude from docs
 * @type {Array<IAnimationObject>}
 */
var animations = [];
/**
 * Returns numeric value accoring to progress between start and end values.
 *
 * @param  {number}  progress  Progress (0-1)
 * @param  {number}  from
 * @param  {number}  to
 * @return {number}            Value according to progress
 */
function getProgressNumber(progress, from, to) {
    return from + ((to - from) * progress);
}
/**
 * Returns [[Percent]] value accoring to progress between start and end
 * values.
 *
 * @param  {number}   progress  Progress (0-1)
 * @param  {Percent}  from
 * @param  {Percent}  to
 * @return {number}             Value according to progress
 */
function getProgressPercent(progress, from, to) {
    return new __WEBPACK_IMPORTED_MODULE_4__utils_Percent__["a" /* Percent */](getProgressNumber(progress, from.percent, to.percent));
}
/**
 * Returns color value accoring to progress between start and end values.
 *
 * @param  {number}  progress  Progress (0-1)
 * @param  {Color}   from
 * @param  {Color}   to
 * @return {string}            Color according to progress
 */
function getProgressColor(progress, from, to) {
    return new __WEBPACK_IMPORTED_MODULE_3__utils_Color__["a" /* Color */](__WEBPACK_IMPORTED_MODULE_7__utils_Colors__["interpolate"](from.rgb, to.rgb, progress));
}
/**
 * [getHybridProperty description]
 *
 * @todo Description
 * @param  {string}     property [description]
 * @param  {"pixel" |        "relative"}  type [description]
 * @return {string}              [description]
 */
function getHybridProperty(property, type) {
    return type + property.charAt(0).toUpperCase() + property.substr(1);
}
function processAnimationOptions(object, animationOptions) {
    var processed = [];
    __WEBPACK_IMPORTED_MODULE_9__utils_Array__["c" /* each */](__WEBPACK_IMPORTED_MODULE_9__utils_Array__["n" /* toArray */](animationOptions), function (options) {
        var childObject = (options.childObject ? options.childObject : object);
        if (!__WEBPACK_IMPORTED_MODULE_10__utils_Type__["hasValue"](options.from)) {
            options.from = childObject[options.property];
            if (!__WEBPACK_IMPORTED_MODULE_10__utils_Type__["hasValue"](options.from)) {
                options.from = __WEBPACK_IMPORTED_MODULE_1__defs_SVGDefaults__["a" /* SVGDefaults */][options.property];
            }
            /*if (!$type.hasValue(options.from)) {
                throw Error("Could not get initial transition value.");
            }*/
        }
        if (options.from !== options.to) { // || options.to == (<any>object)[options.property]){ this is not good, as dataItem.value is set to final at once, and we animate workingValue
            // Use different update methods for different value types
            if (__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](options.to)) {
                // Check if initial value is not Percent
                if (options.from instanceof __WEBPACK_IMPORTED_MODULE_4__utils_Percent__["a" /* Percent */]) {
                    // It is. Let's convert it to pixel value
                    // @todo Check if we can do this in a less hacky way
                    var convertedFrom = childObject[getHybridProperty(options.property, "pixel")];
                    // TODO better check
                    if (!isNaN(convertedFrom)) {
                        options.from = convertedFrom;
                    }
                }
                processed.push({
                    childObject: childObject,
                    property: options.property,
                    update: function (time) {
                        childObject[options.property] = getProgressNumber(time, options.from, options.to);
                    }
                });
                // Check if maybe we have a color or percent value
            }
            else if (options.to instanceof __WEBPACK_IMPORTED_MODULE_3__utils_Color__["a" /* Color */]) {
                // Yup - set resolved named color
                //options.from = $colors.stringToColor(<string>options.from);
                if (options.from) {
                    processed.push({
                        childObject: childObject,
                        property: options.property,
                        update: function (time) {
                            childObject[options.property] = getProgressColor(time, options.from, options.to);
                        }
                    });
                }
                else {
                    processed.push({
                        childObject: childObject,
                        property: options.property,
                        update: function (time) {
                            childObject[options.property] = (time < 0.5 ? options.from : options.to);
                        }
                    });
                }
            }
            else if (options.to instanceof __WEBPACK_IMPORTED_MODULE_4__utils_Percent__["a" /* Percent */]) {
                // Check if the initial value is maybe in pixels
                // TODO better check
                if (!isNaN(options.from)) {
                    // It is. Let's convert it
                    // @todo Check if we can do this in a less hacky way
                    var convertedFrom = childObject[getHybridProperty(options.property, "relative")];
                    // TODO better check
                    if (!isNaN(convertedFrom)) {
                        options.from = Object(__WEBPACK_IMPORTED_MODULE_4__utils_Percent__["c" /* percent */])(convertedFrom * 100);
                    }
                }
                processed.push({
                    childObject: childObject,
                    property: options.property,
                    update: function (time) {
                        childObject[options.property] = getProgressPercent(time, options.from, options.to);
                    }
                });
            }
            else {
                processed.push({
                    childObject: childObject,
                    property: options.property,
                    update: function (time) {
                        childObject[options.property] = (time < 0.5 ? options.from : options.to);
                    }
                });
            }
        }
    });
    return processed;
}
var AnimationDisposer = /** @class */ (function () {
    function AnimationDisposer(array) {
        this._disposer = new __WEBPACK_IMPORTED_MODULE_2__utils_Disposer__["b" /* Disposer */](function () {
            while (array.length !== 0) {
                array[0].dispose();
            }
        });
    }
    AnimationDisposer.prototype.isDisposed = function () {
        return this._disposer.isDisposed();
    };
    AnimationDisposer.prototype.dispose = function () {
        this._disposer.dispose();
    };
    return AnimationDisposer;
}());

/**
 * Animation can be used to transition certain properties on an object that
 * implements [[IAnimatable]] interface.
 *
 * @see {@link IAnimationEvents} for a list of available events
 */
var Animation = /** @class */ (function (_super) {
    __extends(Animation, _super);
    /**
     * Constructor
     *
     * @param {IAnimatable}                              object            An object animation should run on
     * @param {IAnimationOptions[] | IAnimationOptions}  animationOptions  One or several (array) of animation options
     * @param {number}                                   duration          Duration (ms)
     * @param {(number) => number}                       easing            Easing function
     */
    function Animation(object, animationOptions, duration, easing) {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * Duration of the animation in milliseconds.
         *
         * @type {number}
         */
        _this.duration = 0;
        /**
         * Easing function to use.
         *
         * @see {@link Ease}
         * @type {(value: number) => number}
         */
        _this.easing = __WEBPACK_IMPORTED_MODULE_6__utils_Ease__["linear"];
        /**
         * Contains progress of the current animation: 0 (start) to 1 (end).
         *
         * @type {number}
         */
        _this.progress = 0;
        /**
         * Indicated how many times animation should loop.
         *
         * @type {number}
         */
        _this._loop = 0;
        /**
         * Animation is paused.
         *
         * @type {boolean}
         */
        _this._pause = false;
        _this.className = "Animation";
        // Set parameters
        _this.object = object;
        _this.animationOptions = __WEBPACK_IMPORTED_MODULE_9__utils_Array__["n" /* toArray */](animationOptions);
        _this.duration = duration;
        if (easing) {
            _this.easing = easing;
        }
        // Run check if there are already animations playing on the same properties
        // and stop them - the last animation takes precedence
        //this.stopSameAnimations();
        /*if ($type.hasValue(callback)) {
            // TODO don't use .call
            this.events.on("animationended", callback, object);
        }*/
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Disposes this object, clears up after itself.
     */
    Animation.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.pause();
    };
    /**
     * Delays animation start by X milliseconds.
     *
     * @param  {number}     delay  Delay (ms)
     * @return {Animation}         Animation
     */
    Animation.prototype.delay = function (delay) {
        //@todo Maybe not use `bind()`
        if (delay > 0) {
            this.pause();
            this._delayTimeout = this.setTimeout(this.start.bind(this), delay);
        }
        return this;
    };
    Animation.prototype._start = function () {
        // Clear delay timeout if there was one
        if (this._delayTimeout) {
            this.removeDispose(this._delayTimeout);
            this._delayTimeout = null;
        }
        // Run check if there are already animations playing on the same properties
        // and stop them - the last animation takes precedence
        this.stopSameAnimations();
        // Reset counters
        this._pause = false;
        // Register animation
        __WEBPACK_IMPORTED_MODULE_9__utils_Array__["j" /* move */](animations, this);
        // Register this animation in object's `animations` list
        __WEBPACK_IMPORTED_MODULE_9__utils_Array__["j" /* move */](this.object.animations, this);
    };
    /**
     * Starts animation.
     *
     * @return {Animation} Animation
     */
    Animation.prototype.start = function () {
        this._start();
        this._startTime = Date.now();
        this._time = 0;
        this.staticOptions = [];
        // Process initial property values
        for (var i = this.animationOptions.length - 1; i >= 0; i--) {
            var options = this.animationOptions[i];
            if (!__WEBPACK_IMPORTED_MODULE_10__utils_Type__["hasValue"](options.from)) {
                if (options.childObject) {
                    options.from = options.childObject[options.property];
                }
                else {
                    options.from = this.object[options.property];
                    if (!__WEBPACK_IMPORTED_MODULE_10__utils_Type__["hasValue"](options.from)) {
                        options.from = __WEBPACK_IMPORTED_MODULE_1__defs_SVGDefaults__["a" /* SVGDefaults */][options.property];
                    }
                }
                /*if (!$type.hasValue(options.from)) {
                    throw Error("Could not get initial transition value.");
                }*/
            }
            if (options.from == options.to) { // || options.to == (<any>this.object)[options.property]){ this is not good, as dataItem.value is set to final at once, and we animate workingValue
                __WEBPACK_IMPORTED_MODULE_9__utils_Array__["k" /* remove */](this.animationOptions, options);
            }
            else {
                // Use different update methods for different value types
                if (__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](options.to)) {
                    // Numeric value
                    options.updateMethod = getProgressNumber;
                    // Check if initial value is not Percent
                    if (options.from instanceof __WEBPACK_IMPORTED_MODULE_4__utils_Percent__["a" /* Percent */]) {
                        // It is. Let's convert it to pixel value
                        // @todo Check if we can do this in a less hacky way
                        var convertedFrom = this.object[getHybridProperty(options.property, "pixel")];
                        if (!isNaN(convertedFrom)) {
                            options.from = convertedFrom;
                        }
                    }
                }
                else {
                    // Check if maybe we have a color or percent value
                    if (options.to instanceof __WEBPACK_IMPORTED_MODULE_3__utils_Color__["a" /* Color */]) {
                        // Yup - set resolved named color
                        //options.from = $colors.stringToColor(<string>options.from);
                        if (options.from) {
                            options.updateMethod = getProgressColor;
                        }
                        else {
                            // Static value
                            this.staticOptions.push(options);
                            __WEBPACK_IMPORTED_MODULE_9__utils_Array__["k" /* remove */](this.animationOptions, options);
                        }
                    }
                    else if (options.to instanceof __WEBPACK_IMPORTED_MODULE_4__utils_Percent__["a" /* Percent */]) {
                        // Percent
                        options.updateMethod = getProgressPercent;
                        // Check if the initial value is maybe in pixels
                        if (!isNaN(options.from)) {
                            // It is. Let's convert it
                            // @todo Check if we can do this in a less hacky way
                            var convertedFrom = this.object[getHybridProperty(options.property, "relative")];
                            if (!isNaN(convertedFrom)) {
                                options.from = Object(__WEBPACK_IMPORTED_MODULE_4__utils_Percent__["c" /* percent */])(convertedFrom * 100);
                            }
                        }
                    }
                    else {
                        // Static value
                        this.staticOptions.push(options);
                        __WEBPACK_IMPORTED_MODULE_9__utils_Array__["k" /* remove */](this.animationOptions, options);
                    }
                }
            }
        }
        // Apply static options (just in case they were reset by previous
        // animation loop)
        this.applyStaticOptions();
        if (this.events.isEnabled("animationstarted")) {
            var event_1 = {
                type: "animationstarted",
                target: this,
                progress: this.progress
            };
            this.events.dispatchImmediately("animationstarted", event_1);
        }
        this.update();
        // If duration is 0, just end animation
        if (this.duration === 0) {
            this.end();
        }
        return this;
    };
    /**
     * Sets loop count for the animation. If parameter is not a valid number the
     * animation will keep on looping indefinitely.
     *
     * @param  {number}     count  Number of times to loop animation
     * @return {Animation}         Animation
     */
    Animation.prototype.loop = function (count) {
        if (!__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](count)) {
            count = Infinity;
        }
        this._loop = count;
        return this;
    };
    /**
     * Pauses animation.
     *
     * @return {Animation} Animation
     */
    Animation.prototype.pause = function () {
        this._pause = true;
        if (this._delayTimeout) {
            this.removeDispose(this._delayTimeout);
            this._delayTimeout = null;
        }
        __WEBPACK_IMPORTED_MODULE_9__utils_Array__["k" /* remove */](animations, this);
        __WEBPACK_IMPORTED_MODULE_9__utils_Array__["k" /* remove */](this.object.animations, this);
        return this;
    };
    /**
     * Resumes paused animation.
     *
     * @return {Animation} Animation
     */
    Animation.prototype.resume = function () {
        this._start();
        this._startTime = Date.now() - this._time;
        return this;
    };
    /**
     * Jumps to animation end. If animation is set to loop, this will start
     * another round of animation from start.
     *
     * @return {Animation} Animation
     */
    Animation.prototype.end = function () {
        // Pause and complete the progress
        this.pause();
        this.setProgress(1);
        // Apply static options
        this.applyStaticOptions();
        if (this.events.isEnabled("animationended")) {
            var event_2 = {
                type: "animationended",
                target: this,
                progress: this.progress
            };
            this.events.dispatchImmediately("animationended", event_2);
        }
        // Check if we should loop
        if (this._loop > 0) {
            this._loop--;
            this.start();
        }
        else {
            this.stop();
        }
        return this;
    };
    /**
     * Applies static options that can't be animated.
     */
    Animation.prototype.applyStaticOptions = function () {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_9__utils_Array__["c" /* each */](this.staticOptions, function (options) {
            if (options.childObject) {
                options.childObject[options.property] = _this.progress == 1 ? options.to : options.from;
            }
            else {
                _this.object[options.property] = _this.progress == 1 ? options.to : options.from;
            }
        });
    };
    /**
     * Stops animation.
     *
     * When animation is stopped, the properties of the target object will remain
     * where they were at the moment when `stop()` was called.
     *
     * @param  {boolean}    skipEvent  Do not trigger `animationstopped` event
     * @return {Animation}             Animation
     */
    Animation.prototype.stop = function (skipEvent) {
        this.pause();
        if (!skipEvent) {
            if (this.events.isEnabled("animationstopped")) {
                var event_3 = {
                    type: "animationstopped",
                    target: this,
                    progress: this.progress
                };
                this.events.dispatchImmediately("animationstopped", event_3);
            }
        }
        return this;
    };
    /**
     * Sets current progress and updates object's numeric and color values.
     *
     * @param {number} progress Progress (0-1)
     */
    Animation.prototype.setProgress = function (progress) {
        var _this = this;
        this._time = this.duration * progress; // just in case we call this from outside
        __WEBPACK_IMPORTED_MODULE_9__utils_Array__["c" /* each */](this.animationOptions, function (options) {
            var value = options.updateMethod(progress, options.from, options.to);
            if (options.childObject) {
                options.childObject[options.property] = value;
            }
            else {
                _this.object[options.property] = value;
            }
        });
        this.progress = progress;
        if (this.events.isEnabled("animationprogress")) {
            var event_4 = {
                type: "animationprogress",
                target: this,
                progress: this.progress
            };
            this.events.dispatchImmediately("animationprogress", event_4);
        }
    };
    /**
     * Tracks and sets progress according to time or frames.
     *
     * @ignore Exclude from docs
     * @return {Animation} Animation
     */
    Animation.prototype.update = function () {
        if (!this._pause) {
            var progress = void 0;
            this._time = __WEBPACK_IMPORTED_MODULE_8__utils_Math__["fitToRange"](Date.now() - this._startTime, 0, this.duration);
            progress = this.easing(this._time / this.duration);
            if (this.duration == 0 || !__WEBPACK_IMPORTED_MODULE_10__utils_Type__["isNumber"](progress)) {
                progress = 1;
            }
            this.setProgress(progress);
            if (__WEBPACK_IMPORTED_MODULE_8__utils_Math__["round"](this._time / this.duration, 6) == 1) {
                this.end();
            }
        }
        return this;
    };
    Object.defineProperty(Animation.prototype, "delayed", {
        /**
         * Returns `true` if this animation is delayed.
         *
         * @readonly
         * @return {boolean} [description]
         */
        get: function () {
            return this._delayTimeout ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Checks other animations currently running on the same object and removes
     * overlapping options from those other animations that are contained in
     * this animation.
     *
     * This is needed to ensure that no two confurent animations step on each
     * other's toes by trying to animate the same property.
     */
    Animation.prototype.stopSameAnimations = function () {
        var _this = this;
        // stop animation of the same property
        // TODO make this more efficient
        // TODO don't copy the array
        __WEBPACK_IMPORTED_MODULE_9__utils_Array__["c" /* each */](__WEBPACK_IMPORTED_MODULE_9__utils_Array__["b" /* copy */](this.object.animations), function (animation) {
            if (animation !== _this && !animation.delayed) {
                var killed_1 = [];
                __WEBPACK_IMPORTED_MODULE_9__utils_Array__["c" /* each */](_this.animationOptions, function (newOptions) {
                    __WEBPACK_IMPORTED_MODULE_9__utils_Array__["c" /* each */](animation.animationOptions, function (oldOptions) {
                        if (newOptions.property == oldOptions.property && newOptions.childObject == oldOptions.childObject) {
                            killed_1.push(oldOptions);
                            if (animation.animationOptions.length == 0) {
                                animation.stop(true);
                            }
                        }
                    });
                });
                __WEBPACK_IMPORTED_MODULE_9__utils_Array__["c" /* each */](killed_1, function (oldOptions) {
                    __WEBPACK_IMPORTED_MODULE_9__utils_Array__["k" /* remove */](animation.animationOptions, oldOptions);
                });
            }
        });
    };
    return Animation;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["b" /* BaseObjectEvents */]));

//# sourceMappingURL=Animation.js.map

/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Label; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__formatters_TextFormatter__ = __webpack_require__(56);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Disposer__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_utils_InterfaceColorSet__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_Type__ = __webpack_require__(1);
/**
 * Text class deals with all text placed on chart.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();









;
/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Text is used to display highly configurable, data-enabled textual elements.
 *
 * ## Data Binding
 *
 * A Text element can dynamically parse and populate its contents with values
 * from a [[DataItem]].
 *
 * To activate such binding, set element's `dataItem` property.
 *
 * When activated, text contents will be parsed for special tags, e.g.:
 *
 * ```TypeScript
 * label.dataItem = myDataItem;
 * label.text = "The title is: {title}";
 * ```
 * ```JavaScript
 * label.dataItem = myDataItem;
 * label.text = "The title is: {title}";
 * ```
 *
 * The above will automatically replace "{title}" in the string with the
 * actual data value from `myDataItem`.
 *
 * Note, that most often dataItem is set by the Component.
 *
 *
 * @see {@link ILabelEvents} for a list of available events
 * @see {@link ILabelAdapters} for a list of available Adapters
 * @todo Vertical align
 * @todo Linkage to relative documentation (formatters, data binding)
 * @important
 */
var Label = /** @class */ (function (_super) {
    __extends(Label, _super);
    /**
     * Constructor
     */
    function Label() {
        var _this = 
        // Execute super's constructor
        _super.call(this) || this;
        /**
         * Indicates if the whole text does not fit into max dimenstions set for it.
         *
         * @type {boolean}
         */
        _this.isOversized = false;
        _this._svgLines = [];
        // Set this class name
        _this.className = "Label";
        _this.fill = new __WEBPACK_IMPORTED_MODULE_4__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]().getFor("text");
        // not good to set this, as then these will appear on each label and values set on container won't be applied.
        //this.textDecoration = "none";
        //this.fontWeight = "normal";
        // Set defaults
        _this.wrap = false;
        _this.truncate = false;
        _this.fullWords = true;
        _this.ellipsis = "...";
        _this.textAlign = "start";
        _this.textValign = "top";
        _this.layout = "absolute";
        _this.renderingFrequency = 1;
        // Set up adapters for manipulating accessibility
        _this.adapter.add("readerTitle", function (arg) {
            if (!arg) {
                arg = _this.populateString(__WEBPACK_IMPORTED_MODULE_6__utils_Utils__["plainText"](__WEBPACK_IMPORTED_MODULE_6__utils_Utils__["isNotEmpty"](_this.html)
                    ? _this.html
                    : _this.text));
            }
            return arg;
        });
        // Add events to watch for maxWidth/maxHeight changes so that we can
        // invalidate this
        _this.events.on("maxsizechanged", function (ev) {
            if ((_this.bbox.width > _this.availableWidth)
                || ((_this.bbox.width < _this.availableWidth) && _this.isOversized)
                || (_this.bbox.height > _this.availableHeight)
                || ((_this.bbox.height < _this.availableHeight) && _this.isOversized)) {
                _this.invalidate();
            }
            else {
                _this.alignSVGText();
            }
        });
        // trying to solve strange bug when text is measured as 0x0
        _this.events.once("validated", function () {
            if (_this.text && (_this.bbox.width == 0 || _this.bbox.height == 0)) {
                __WEBPACK_IMPORTED_MODULE_1__Registry__["b" /* registry */].events.once("exitframe", function () {
                    _this._prevStatus = "";
                    _this.invalidate();
                });
            }
        });
        // Aply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * [arrange description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    Label.prototype.arrange = function () {
    };
    /**
     * Updates current text according to data item and supported features.
     * Returns `true` if current text has changed.
     *
     * @return {boolean} Text changed?
     */
    Label.prototype.updateCurrentText = function () {
        // Determine output format
        var output, text;
        if (__WEBPACK_IMPORTED_MODULE_6__utils_Utils__["isNotEmpty"](this.html) && this.paper.supportsForeignObject()) {
            // We favor HTML text if it's set and browser supports `foreignObject`
            output = "html";
            text = this.html;
        }
        else {
            output = "svg";
            text = this.text;
        }
        // Need to format text all the time
        if (__WEBPACK_IMPORTED_MODULE_8__utils_Type__["hasValue"](text) && text !== "") {
            text = this.populateString(text, this.dataItem);
        }
        // Update the text
        var changed = text != this._currentText || output != this._currentFormat;
        this._currentText = text;
        this._currentFormat = output;
        return changed;
    };
    /**
     * Draws the textual label.
     *
     * @ignore Exclude from docs
     */
    Label.prototype.draw = function () {
        // Draw super
        _super.prototype.draw.call(this);
        // Calculate max width and height
        var maxWidth = __WEBPACK_IMPORTED_MODULE_5__utils_Math__["max"](this.availableWidth - this.pixelPaddingLeft - this.pixelPaddingRight, 0);
        var maxHeight = __WEBPACK_IMPORTED_MODULE_5__utils_Math__["max"](this.availableHeight - this.pixelPaddingTop - this.pixelPaddingBottom, 0);
        // save
        var status = maxHeight + "," + maxWidth + this.wrap + this.truncate + this.fullWords + this.rtl + this.ellipsis;
        // Update text
        if (!this.updateCurrentText() && this.inited && this._prevStatus == status) {
            return;
        }
        this._measuredWidth = 0;
        this._measuredHeight = 0;
        // Reset
        this.isOversized = false;
        // Determine output format
        var output = this._currentFormat;
        var text = this._currentText;
        // Empty string
        if (!__WEBPACK_IMPORTED_MODULE_8__utils_Type__["hasValue"](text) || text == "") {
            this.element.attr({ display: "none" });
            return;
        }
        // Chop up text into lines
        // We're still processing SVG and HTML in the same way for now
        var lines = text.split("\n");
        // Do we need to go through the trouble of measuring lines
        //let measure: boolean = true;// (lines.length > 1) || this.wrap;
        this._prevStatus = status;
        this.textAlign = this.textAlign;
        var display = this.group.getAttr("display");
        if (display == "none") {
            this.group.removeAttr("display");
        }
        // SVG or HTML?
        if (output === "svg") {
            /**
             * SVG
             */
            this.element.removeAttr("display");
            // Clear the element
            var group = this.element;
            this.resetBBox();
            // Init state variables
            var currentHeight = 0;
            var currentFormat = "";
            // Process each line
            for (var i = 0; i < lines.length; i++) {
                // Get line
                var line = lines[i];
                // Check if line is empty
                if (line == "") {
                    // It is, let's just update currentHeight and go to the next one
                    // If it's the first line, we'll have to use arbirary line height,
                    // since there's nothing to measure. For subsequent lines we can take
                    // previous line's height
                    var tempElement = this.getSVGLineElement("", 0);
                    tempElement.add(this.getSvgElement(".", Object(__WEBPACK_IMPORTED_MODULE_2__formatters_TextFormatter__["b" /* getTextFormatter */])().translateStyleShortcuts(currentFormat)));
                    group.add(tempElement);
                    var offset = Math.ceil(tempElement.getBBox().height);
                    if (offset > 0) {
                        currentHeight += offset;
                    }
                    group.removeElement(tempElement);
                    continue;
                }
                // Chunk up the line and process each chunk
                var chunks = Object(__WEBPACK_IMPORTED_MODULE_2__formatters_TextFormatter__["b" /* getTextFormatter */])().chunk(line);
                var currentLineHeight = 0;
                var firstChunk = true;
                var skipTextChunks = false;
                // Create line element or grab it from cache
                var lineInfo = void 0;
                if (lineInfo = this.getLineInfo(i)) {
                    // Empty line
                    lineInfo.element.textContent = "";
                }
                else {
                    // Init new line info
                    lineInfo = {
                        "element": this.getSVGLineElement("", 0),
                        "complex": false
                    };
                    // Create the line element
                    //lineInfo.element = this.getSVGLineElement("", 0);
                    //lineElement = this.getSVGLineElement("", 0);
                    group.add(lineInfo.element);
                }
                lineInfo.element.removeAttr("display");
                if (this.rtl) {
                    chunks.reverse();
                }
                // Process each chunk
                for (var x = 0; x < chunks.length; x++) {
                    // If there's more than one chunk, means the line is "complex"
                    if (x) {
                        lineInfo.complex = true;
                    }
                    // Get chunk
                    var chunk = chunks[x];
                    // Is this chunk format or text?
                    if (chunk.type === "format") {
                        // Log current format, so that we can apply it to multiple lines if
                        // necessary
                        currentFormat = chunk.text;
                    }
                    else {
                        // It's text block
                        // Need to skip?
                        // We do this when truncating. We can't just simply go ahead and
                        // abandon chunk processing as they might have formatting
                        // instructions in them that are relevant for subsequent lines
                        if (skipTextChunks) {
                            continue;
                        }
                        // Add chunk to the current element
                        //lineInfo.element.content += $utils.trim(getTextFormatter().format(currentFormat + chunk.text, output));
                        lineInfo.element.add(this.getSvgElement(chunk.text, Object(__WEBPACK_IMPORTED_MODULE_2__formatters_TextFormatter__["b" /* getTextFormatter */])().translateStyleShortcuts(currentFormat)));
                        lineInfo.bbox = lineInfo.element.getBBox();
                        lineInfo.bbox.width = Math.ceil(lineInfo.bbox.width);
                        // Updated current line height
                        if (currentLineHeight < lineInfo.bbox.height) {
                            currentLineHeight = lineInfo.bbox.height;
                        }
                        // Wrapping?
                        if ((this.wrap || this.truncate) && (lineInfo.bbox.width > maxWidth)) {
                            // Set oversized
                            this.isOversized = true;
                            // Take temporary measurements
                            var lineText = lineInfo.element.textContent;
                            var avgCharWidth = (lineInfo.bbox.width / lineText.length) * .9;
                            // Calculate average number of symbols / width
                            var excessChars = __WEBPACK_IMPORTED_MODULE_5__utils_Math__["min"](Math.ceil((lineInfo.bbox.width - maxWidth) / avgCharWidth), lineText.length);
                            // Are we truncating or auto-wrapping text?
                            if (this.truncate) {
                                /**
                                 * Processing line truncation
                                 * With the addition of each text chunk we measure if current
                                 * line does not exceed maxWidth. If it does, we will stop
                                 * addition of further chunks as well as try to truncate
                                 * current or any number of previous chunks with an added
                                 * ellipsis
                                 */
                                // Indicator whether we need to add ellipsis to the current
                                // element, even if it fits. This is needed to indicate
                                // whether we have already removed some subsequent chunks in
                                // which case we need to add ellipsis.
                                var addEllipsis = false;
                                // Process each child in the temporary line, until the whole
                                // line fits, preferably with an ellipsis
                                // TODO use iterator instead
                                for (var e = lineInfo.element.children.length - 1; e >= 0; e--) {
                                    // Get current element
                                    var element = lineInfo.element.children.getIndex(e);
                                    // Add ellipsis only if previous chunk was removed in full
                                    // and this chunk already fits
                                    //if (addEllipsis && (bbox.width <= maxWidth)) {
                                    if (addEllipsis && (lineInfo.bbox.width <= maxWidth)) {
                                        // Add ellipsis
                                        element.textContent += " " + this.ellipsis;
                                        // Measure again (we need to make sure ellipsis fits)
                                        lineInfo.bbox = lineInfo.element.getBBox();
                                        lineInfo.bbox.width = Math.floor(lineInfo.bbox.width);
                                        // If it fits, we're done here
                                        // If it doesn't we continue rolling
                                        if (lineInfo.bbox.width <= maxWidth) {
                                            break;
                                        }
                                    }
                                    addEllipsis = false;
                                    // Get element text
                                    var elementText = element.textContent;
                                    // Calculate average number of symbols / width
                                    lineText = lineInfo.element.textContent;
                                    excessChars = __WEBPACK_IMPORTED_MODULE_5__utils_Math__["min"](Math.ceil((lineInfo.bbox.width - maxWidth) / avgCharWidth), lineText.length);
                                    // Do this until we fit
                                    while ((lineInfo.bbox.width > maxWidth) && (excessChars <= lineText.length) && (excessChars > 0)) {
                                        // Calculate max available chars
                                        var maxChars = __WEBPACK_IMPORTED_MODULE_5__utils_Math__["max"](elementText.length - excessChars - this.ellipsis.length, 1);
                                        // Is there anything left?
                                        if (maxChars <= 1) {
                                            // Nope, let's jump to the previous item
                                            // Set excess characters to zero so that this loop does
                                            // not repeat when it over
                                            excessChars = 0;
                                            // Add ellipsis to previous item
                                            // Subsequent iterations will check if the ellipsis fits
                                            if (e > 0) {
                                                // Indicating to add ellipsis to previous item
                                                addEllipsis = true;
                                                // Removing this node
                                                lineInfo.element.removeElement(element);
                                            }
                                        }
                                        // If we're on first chunk of text, or we explicitly
                                        // enabled word-breaking, we can break mid-word.
                                        // Otherwise we break by words.
                                        if (e === 0 || !this.fullWords) {
                                            elementText = __WEBPACK_IMPORTED_MODULE_6__utils_Utils__["truncateWithEllipsis"](elementText, maxChars, this.ellipsis, false, this.rtl);
                                        }
                                        else {
                                            elementText = __WEBPACK_IMPORTED_MODULE_6__utils_Utils__["truncateWithEllipsis"](elementText, maxChars, this.ellipsis, true, this.rtl);
                                        }
                                        // Set truncated text
                                        element.textContent = elementText;
                                        // Measure again
                                        lineInfo.bbox = lineInfo.element.getBBox();
                                        lineInfo.bbox.width = Math.floor(lineInfo.bbox.width);
                                        // Increase excess characters count, just in case it still
                                        // doesn't fit and we have to go at it again
                                        excessChars = Math.ceil(excessChars * 1.1);
                                    }
                                    // Do not process further chunks
                                    skipTextChunks = true;
                                }
                            }
                            else {
                                /**
                                 * Processign auto-wrap
                                 * In this case we're going to be adding text chunks until
                                 * they don't fit into current line. Once that happens we will
                                 * inject the rest of the chunks to the next line
                                 */
                                // Get last node added and measure it
                                var lastElement_1 = lineInfo.element.lastChild;
                                // Init split lines
                                var splitLines = void 0;
                                while ((lineInfo.bbox.width > maxWidth) && (excessChars <= lineText.length) && (excessChars > 0)) {
                                    // Calculate max available chars
                                    var maxChars = __WEBPACK_IMPORTED_MODULE_5__utils_Math__["max"](chunk.text.length - excessChars, 1);
                                    // Don't split the words mid-word if it's not the first chunk
                                    // in the line
                                    if (firstChunk) {
                                        // Split mid-word if necessary
                                        splitLines = __WEBPACK_IMPORTED_MODULE_6__utils_Utils__["splitTextByCharCount"](chunk.text, maxChars, false, this.rtl);
                                    }
                                    else {
                                        // Don't split mid-word
                                        splitLines = __WEBPACK_IMPORTED_MODULE_6__utils_Utils__["splitTextByCharCount"](chunk.text, maxChars, true, this.rtl);
                                        // Check if the first word is too long
                                        if ((splitLines[0].length > maxChars) || maxChars === 1) {
                                            // Yes - move the whole chunk to the next line
                                            // Remove the element we just added
                                            lineInfo.element.removeElement(lastElement_1);
                                            // Break out of the while on next cycle
                                            excessChars = 0;
                                        }
                                    }
                                    // Use the first line to update last item
                                    if (excessChars > 0) {
                                        lastElement_1.textContent = Object(__WEBPACK_IMPORTED_MODULE_2__formatters_TextFormatter__["b" /* getTextFormatter */])().cleanUp(__WEBPACK_IMPORTED_MODULE_6__utils_Utils__["trim"](splitLines.shift()));
                                    }
                                    // Measure again, just in case
                                    lineInfo.bbox = lineInfo.element.getBBox();
                                    lineInfo.bbox.width = Math.floor(lineInfo.bbox.width);
                                    // Increase excess characters count, just in case it still
                                    // doesn't fit and we have to go at it again
                                    excessChars = Math.ceil(excessChars * 1.1);
                                }
                                // Construct the rest of the line
                                if (splitLines.length > 0) {
                                    var restOfLine = "";
                                    // Add leftovers from splitting the current chunk
                                    if (__WEBPACK_IMPORTED_MODULE_8__utils_Type__["hasValue"](splitLines)) {
                                        if (this.rtl) {
                                            restOfLine += splitLines.join("") + currentFormat;
                                        }
                                        else {
                                            restOfLine += currentFormat + splitLines.join("");
                                        }
                                    }
                                    // Add the rest of the chunks
                                    for (var c = x + 1; c < chunks.length; c++) {
                                        restOfLine += chunks[c].text;
                                    }
                                    // Inject the rest of the lines as chunks for subsequent
                                    lines.splice(i + 1, 0, restOfLine);
                                }
                                // Skip processing the rest of the chunks
                                skipTextChunks = true;
                            }
                        }
                        // Let's update the text's bbox with the line's one
                        if (this.bbox.width < lineInfo.bbox.width) {
                            this.bbox.width = lineInfo.bbox.width;
                        }
                        // commented to avoid bug (seen on sankey link) where text is incorrectly aligned
                        //if (this.bbox.x > lineInfo.bbox.x) {
                        //this.bbox.x = lineInfo.bbox.x; 
                        //}
                        this.bbox.height = currentHeight + currentLineHeight;
                        // Position current line
                        lineInfo.element.attr({
                            "x": "0",
                            "y": currentHeight + currentLineHeight,
                            "dy": __WEBPACK_IMPORTED_MODULE_5__utils_Math__["round"]((-0.2 * currentLineHeight), 3).toString()
                        });
                        firstChunk = false;
                    }
                }
                // Trim the last item
                var lastElement = lineInfo.element.lastChild;
                if (lastElement) {
                    lastElement.textContent = this.rtl ?
                        __WEBPACK_IMPORTED_MODULE_6__utils_Utils__["ltrim"](lastElement.textContent) :
                        __WEBPACK_IMPORTED_MODULE_6__utils_Utils__["rtrim"](lastElement.textContent);
                }
                // Increment collective height
                currentHeight += currentLineHeight;
                // Save line cache
                this.addLineInfo(lineInfo, i);
            }
            // Check if maybe we need to hide the whole label if it doesn't fit
            if (this.hideOversized && ((this.availableWidth < this.bbox.width) || (this.availableHeight < this.bbox.height))) {
                this.element.attr({ display: "none" });
                this.isOversized = true;
            }
            this._measuredWidth = __WEBPACK_IMPORTED_MODULE_5__utils_Math__["max"](this.bbox.width, this.pixelWidth - this.pixelPaddingLeft - this.pixelPaddingRight);
            this._measuredHeight = __WEBPACK_IMPORTED_MODULE_5__utils_Math__["max"](this.bbox.height, this.pixelHeight - this.pixelPaddingTop - this.pixelPaddingBottom);
            // Align the lines
            this.alignSVGText();
            this.bbox.width = this._measuredWidth;
            this.bbox.height = this._measuredHeight;
            this.hideUnused(lines.length);
        }
        else {
            /**
             * HTML
             */
            this.element.removeAttr("display");
            this.resetBBox();
            // Clear the element
            var group = this.element;
            group.disposeChildren();
            // Create a ForeignObject to use as HTML container
            var fo = this.paper.foreignObject();
            group.add(fo);
            // Set group and foreignObject dimensions
            var width = maxWidth > 0 ? (maxWidth).toString() + "px" : "100%";
            var height = maxHeight > 0 ? (maxHeight).toString() + "px" : "100%";
            /*			fo.attr({
                            width: width,
                            height: height
                        });*/
            // Create line element
            //let lineElement: HTMLElement = this.getHTMLLineElement(getTextFormatter().format(this.html, output));
            var lineElement = this.getHTMLLineElement(text);
            fo.node.appendChild(lineElement);
            // Temporarily set to inline-block so we can measure real width and height
            lineElement.style.display = "inline-block";
            var tmpBBox = lineElement.getBoundingClientRect();
            lineElement.style.display = "block";
            this.bbox = {
                x: 0,
                y: 0,
                width: tmpBBox.width,
                height: tmpBBox.height
            };
            // Set exact dimensions of foreignObject so it is sized exactly as
            // the content within
            fo.attr({
                width: tmpBBox.width,
                height: tmpBBox.height
            });
            // Set measurements and update bbox
            this._measuredWidth = __WEBPACK_IMPORTED_MODULE_5__utils_Math__["max"](this.bbox.width, this.pixelWidth - this.pixelPaddingLeft - this.pixelPaddingRight);
            this._measuredHeight = __WEBPACK_IMPORTED_MODULE_5__utils_Math__["max"](this.bbox.height, this.pixelHeight - this.pixelPaddingTop - this.pixelPaddingBottom);
            this.bbox.width = this._measuredWidth;
            this.bbox.height = this._measuredHeight;
            // Don't let labels bleed out of the alotted area
            if (this.truncate) {
                lineElement.style.overflow = "hidden";
            }
            if ((tmpBBox.width > maxWidth) || (tmpBBox.height > maxHeight)) {
                this.isOversized = true;
            }
        }
        // Set applicable styles
        this.setStyles();
        this.updateCenter();
        this.updateBackground();
        if (display == "none") {
            this.group.attr({ display: "none" });
        }
    };
    /**
     * Aligns the lines horizontally ant vertically, based on properties.
     *
     * @ignore Exclude from docs
     */
    Label.prototype.alignSVGText = function () {
        var _this = this;
        // Get Group
        var group = this.element;
        // Is there anything to align?
        if (!group.children) {
            return;
        }
        var width = this._measuredWidth;
        var height = this._measuredHeight;
        var paddingLeft = this.pixelPaddingLeft;
        var paddingRight = this.pixelPaddingRight;
        var paddingTop = this.pixelPaddingTop;
        var paddingBottom = this.pixelPaddingBottom;
        // Process each line
        __WEBPACK_IMPORTED_MODULE_7__utils_Iterator__["each"](group.children.backwards().iterator(), function (element) {
            // Align horizontally
            // Since we are using `text-anchor` for horizontal alignement, all we need
            // to do here is move the `x` position
            element.attr({ "text-anchor": _this.textAlign });
            switch (_this.textAlign) {
                case "middle":
                    element.attr({ "x": (width / 2).toString() });
                    break;
                case "end":
                    if (_this.rtl) {
                    }
                    else {
                        element.attr({ "x": width.toString() });
                    }
                    break;
                default:
                    if (_this.rtl) {
                        element.attr({ "x": width.toString() });
                    }
                    else {
                        element.removeAttr("text-anchor");
                    }
                    break;
            }
            var y = __WEBPACK_IMPORTED_MODULE_8__utils_Type__["toNumber"](element.getAttr("y"));
            switch (_this.textValign) {
                case "middle":
                    element.attr({ "y": (y + (height - _this.bbox.height) / 2).toString() });
                    break;
                case "bottom":
                    element.attr({ "y": (y + height - _this.bbox.height).toString() });
                    break;
                default:
                    element.attr({ "y": y.toString() });
                    break;
            }
        });
    };
    /**
     * Produces an SVG line element with formatted text.
     *
     * @ignore Exclude from docs
     * @param  {string}     text    Text to wrap into line
     * @param  {number}     y       Current line vertical position
     * @return {AMElement}          A DOM element
     * @todo Implement HTML support
     */
    Label.prototype.getSVGLineElement = function (text, y) {
        // Create a <text> node and set text
        var element = this.paper.addGroup("text");
        element.textContent = text;
        // Set parameters
        element.attr({
            "x": "0"
            //"alignment-baseline": "hanging",
            //"baseline-shift": "-20%",
            //"text-anchor": "center"
        });
        // Set `y` position
        if (__WEBPACK_IMPORTED_MODULE_8__utils_Type__["hasValue"](y)) {
            element.attr({
                "y": y.toString()
            });
        }
        // Don't let labels blled out of the alotted area
        if (this.truncate || this.wrap) {
            element.attr({ "overflow": "hidden" });
        }
        // Add RTL?
        if (this.rtl) {
            element.attr({
                "direction": "rtl",
                "unicode-bidi": "bidi-override"
            });
        }
        return element;
    };
    /**
     * Resets cached BBox.
     *
     * @ignore Exclude from docs
     */
    Label.prototype.resetBBox = function () {
        this.bbox = { x: 0, y: 0, width: 0, height: 0 };
    };
    /**
     * Creates and returns an HTML line element (`<div>`).
     *
     * @ignore Exclude from docs
     * @param  {string}       text  Text to add
     * @return {HTMLElement}        `<div>` element reference
     */
    Label.prototype.getHTMLLineElement = function (text) {
        // Create the <div> element
        var div = document.createElement("div");
        div.innerHTML = text;
        // Set text alignement
        switch (this.textAlign) {
            case "middle":
                div.style.textAlign = "center";
                break;
            case "end":
                div.style.textAlign = "right";
                break;
        }
        // Disable or enable wrapping
        if (this.wrap) {
            div.style.wordWrap = "break-word";
        }
        else {
            div.style.whiteSpace = "nowrap";
        }
        // Don't let labels bleed out of the alotted area
        // Moved to `draw()` because setting "hidden" kills all measuring
        /*if (this.truncate) {
            div.style.overflow = "hidden";
        }*/
        // Set RTL-related styles
        if (this.rtl) {
            div.style.direction = "rtl";
            div.style.unicodeBidi = "bidi-override";
        }
        // Translate some of the SVG styles into CSS
        if (__WEBPACK_IMPORTED_MODULE_8__utils_Type__["hasValue"](this.fill)) {
            div.style.color = this.fill.toString();
        }
        return div;
    };
    /**
     * Applies specific styles to text to make it not selectable, unless it is
     * explicitly set as `selectable`.
     *
     * @ignore Exclude from docs
     * @todo Set styles via AMElement
     */
    Label.prototype.setStyles = function () {
        var group = this.element;
        if (!this.selectable || this.draggable || this.resizable || this.swipeable) {
            group.addStyle({
                "webkitUserSelect": "none",
                "msUserSelect": "none"
            });
        }
        else if (this.selectable) {
            group.removeStyle("webkitUserSelect");
            group.removeStyle("msUserSelect");
        }
    };
    /**
     * Hides unused lines
     */
    Label.prototype.hideUnused = function (index) {
        this.initLineCache();
        var lines = this.getCache("lineInfo");
        if (lines.length >= index) {
            for (var i = index; i < lines.length; i++) {
                var line = lines[i];
                if (line && line.element) {
                    line.element.attr({ "display": "none" });
                }
            }
        }
    };
    Object.defineProperty(Label.prototype, "text", {
        /**
         * @return {string} SVG text
         */
        get: function () {
            return this.getPropertyValue("text");
        },
        /**
         * An SVG text.
         *
         * Please note that setting `html` will override this setting if browser
         * supports `foreignObject` in SGV, such as most modern browsers excluding
         * IEs.
         *
         * @param {string}  value  SVG Text
         */
        set: function (value) {
            //this.setPropertyValue("html", undefined);
            this.setPropertyValue("text", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Label.prototype, "wrap", {
        /**
         * @return {boolean} Auto-wrap enabled or not
         */
        get: function () {
            return this.getPropertyValue("wrap");
        },
        /**
         * Enables or disables autowrapping of text.
         *
         * @param {boolean}  value  Auto-wrapping enabled
         */
        set: function (value) {
            this.resetBBox();
            this.setPropertyValue("wrap", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Label.prototype, "truncate", {
        /**
         * @return {boolean} Truncate text?
         */
        get: function () {
            return this.getPropertyValue("truncate");
        },
        /**
         * Indicates if text lines need to be truncated if they do not fit, using
         * configurable `ellipsis` string.
         *
         * `truncate` overrides `wrap` if both are set to `true`.
         *
         * NOTE: For HTML text, this setting **won't** trigger a parser and actual
         * line truncation with ellipsis. It will just hide everything that goes
         * outside the label.
         *
         * @param {boolean}  value  trincate text?
         */
        set: function (value) {
            this.resetBBox();
            this.setPropertyValue("truncate", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Label.prototype, "fullWords", {
        /**
         * @return {boolean} Truncate on full words?
         */
        get: function () {
            return this.getPropertyValue("fullWords");
        },
        /**
         * If `truncate` is enabled, should Label try to break only on full words
         * (`true`), or whenever needed, including middle of the word. (`false`)
         *
         * @default true
         * @param {boolean}  value  Truncate on full words?
         */
        set: function (value) {
            this.setPropertyValue("fullWords", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Label.prototype, "ellipsis", {
        /**
         * @return {string} Ellipsis string
         */
        get: function () {
            return this.getPropertyValue("ellipsis");
        },
        /**
         * Ellipsis character to use if `truncate` is enabled.
         *
         * @param {string} value Ellipsis string
         * @default "..."
         */
        set: function (value) {
            this.setPropertyValue("ellipsis", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Label.prototype, "selectable", {
        /**
         * @return {boolean} Text selectable?
         */
        get: function () {
            return this.getPropertyValue("selectable");
        },
        /**
         * Forces the text to be selectable. This setting will be ignored if the
         * object has some kind of interaction attached to it, such as it is
         * `draggable`, `swipeable`, `resizable`.
         *
         * @param {boolean}  value  Text selectable?
         * @default false
         */
        set: function (value) {
            this.setPropertyValue("selectable", value, true);
            this.setStyles();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Label.prototype, "textAlign", {
        /**
         * @return {TextAlign} Alignement
         */
        get: function () {
            return this.getPropertyValue("textAlign");
        },
        /**
         * Horizontal text alignement.
         *
         * Available choices:
         * * "start"
         * * "middle"
         * * "end"
         *
         * @param {TextAlign}  value  Alignement
         */
        set: function (value) {
            this.setPropertyValue("textAlign", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Label.prototype, "textValign", {
        /**
         * @ignore Exclude from docs (not used)
         * @return {TextValign} Alignement
         * @deprecated
         */
        get: function () {
            return this.getPropertyValue("textValign");
        },
        /**
         * Vertical text alignement.
         *
         * @ignore Exclude from docs (not used)
         * @param {TextValign}  value  Alignement
         * @deprecated
         */
        set: function (value) {
            this.setPropertyValue("textValign", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Label.prototype, "html", {
        /**
         * @return {string} HTML content
         */
        get: function () {
            return this.getPropertyValue("html");
        },
        /**
         * Raw HTML to be used as text.
         *
         * NOTE: HTML text is subject to browser support. It relies on browsers
         * supporting SVG `foreignObject` nodes. Some browsers (read IEs) do not
         * support it. On those browsers, the text will fall back to basic SVG text,
         * striping out all HTML markup and styling that goes with it.
         *
         * For more information about `foreignObject` and its browser compatibility
         * refer to [this page](https://developer.mozilla.org/en/docs/Web/SVG/Element/foreignObject#Browser_compatibility).
         *
         * @param {string} value HTML text
         */
        set: function (value) {
            this.setPropertyValue("html", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Label.prototype, "hideOversized", {
        /**
         * @return {boolean} Hide if text does not fit?
         */
        get: function () {
            return this.getPropertyValue("hideOversized");
        },
        /**
         * Indicates whether the whole text should be hidden if it does not fit into
         * its allotted space.
         *
         * @param {boolean}  value  Hide if text does not fit?
         */
        set: function (value) {
            this.setPropertyValue("hideOversized", value, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Override `mesaureElement` so it does not get measure again, because
     * internal `_bbox` is being updated by measuring routines in Text itself.
     */
    Label.prototype.measureElement = function () { };
    /**
     * Returns information about a line element.
     *
     * @ignore Exclude from docs
     * @param  {number}         index  Line index
     * @return {ITextLineInfo}         Line info object
     */
    Label.prototype.getLineInfo = function (index) {
        this.initLineCache();
        var lines = this.getCache("lineInfo");
        return lines.length > index ? lines[index] : undefined;
    };
    /**
     * Adds a line to line info cache.
     *
     * @ignore Exclude from docs
     * @param {ITextLineInfo}  line     Line info object
     * @param {number}         index    Insert at specified index
     */
    Label.prototype.addLineInfo = function (line, index) {
        this.initLineCache();
        this.getCache("lineInfo")[index] = line;
    };
    /**
     * Checks if line cache is initialized and initializes it.
     */
    Label.prototype.initLineCache = function () {
        if (!this.getCache("lineInfo")) {
            this.setCache("lineInfo", []);
        }
    };
    /**
     * Sets a [[DataItem]] to use for populating dynamic sections of the text.
     *
     * Check the description for [[Text]] class, for data binding.
     *
     * @param {DataItem} dataItem Data item
     */
    Label.prototype.setDataItem = function (dataItem) {
        if (this._sourceDataItemEvents) {
            this._sourceDataItemEvents.dispose();
        }
        if (dataItem) {
            this._sourceDataItemEvents = new __WEBPACK_IMPORTED_MODULE_3__utils_Disposer__["c" /* MultiDisposer */]([
                dataItem.events.on("valuechanged", this.invalidate, this),
                dataItem.events.on("workingvaluechanged", this.invalidate, this),
                dataItem.events.on("calculatedvaluechanged", this.invalidate, this),
                dataItem.events.on("propertychanged", this.invalidate, this)
            ]);
        }
        _super.prototype.setDataItem.call(this, dataItem);
    };
    Object.defineProperty(Label.prototype, "availableWidth", {
        /**
         * Returns available horizontal space.
         *
         * @ignore Exclude from docs
         * @return {number} Available width (px)
         */
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_8__utils_Type__["hasValue"](this.maxWidth) ? this.maxWidth : this.pixelWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Label.prototype, "availableHeight", {
        /**
         * Returns available vertical space.
         *
         * @return {number} Available height (px)
         */
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_8__utils_Type__["hasValue"](this.maxHeight) ? this.maxHeight : this.pixelHeight;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Invalidates the whole element, causing its redraw.
     *
     * Appending `<defs>` section might influence appearance and thus its
     * dimensions.
     *
     * @ignore Exclude from docs
     */
    Label.prototype.appendDefs = function () {
        _super.prototype.appendDefs.call(this);
        this.invalidate(); // otherwise getBBOx of text element returns 0 simetimes
    };
    // temp, replacing textFormatter method
    Label.prototype.getSvgElement = function (text, style) {
        var element = this.paper.add("tspan");
        element.textContent = text;
        if (style) {
            element.node.setAttribute("style", style);
        }
        return element;
    };
    return Label;
}(__WEBPACK_IMPORTED_MODULE_0__Container__["a" /* Container */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__Registry__["b" /* registry */].registeredClasses["Label"] = Label;
//# sourceMappingURL=Label.js.map

/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Interaction; });
/* harmony export (immutable) */ __webpack_exports__["b"] = getInteraction;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Animation__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Disposer__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__InteractionObject__ = __webpack_require__(121);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__InteractionKeyboardObject__ = __webpack_require__(123);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Dictionary__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__Inertia__ = __webpack_require__(124);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_DOM__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils_Keyboard__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__utils_Ease__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__utils_Type__ = __webpack_require__(1);
/**
 * Interaction manages all aspects of user interaction - mouse move,
 * click, hover, drag events, touch gestures.
 *
 * [[InteractionObject]] elements that want to use certain events, must attach event
 * listeners to Interaction instance.
 *
 * Interaction itself will not modify [[InteractionObject]] elements, it will be up to
 * those elements to handle interaction information received via event triggers.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */















/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
* Interaction manages all aspects of user interaction - mouse move,
* click, hover, drag events, touch gestures.
*
* [[InteractionObject]] elements that want to use certain events, must attach event
* listeners to Interaction instance.
*
* Interaction itself will not modify [[InteractionObject]] elements, it will be up to
* those elements to handle interaction information received via event triggers.
*
* @see {@link IInteractionEvents} for a list of available events
* @todo Throw exceptions on errors
*/
var Interaction = /** @class */ (function (_super) {
    __extends(Interaction, _super);
    /**
     * Constructor. Sets up universal document-wide move events to handle stuff
     * outside particular chart container.
     */
    function Interaction() {
        var _this = 
        // Call super
        _super.call(this) || this;
        /**
         * An indicator of global events were already initialized.
         *
         * @type {boolean}
         */
        _this._globalEventsAdded = false;
        /**
         * Holds which mouse event listeners to use.
         *
         * @type {Object}
         */
        _this._pointerEvents = {
            "pointerdown": "mousedown",
            "pointerup": "mouseup",
            "pointermove": "mousemove",
            "wheel": "wheel"
        };
        /**
         * Indicates if Interaction should use only "pointer" type events, like
         * "pointermove", available in all modern browsers, ignoring "legacy"
         * events, like "touchmove".
         *
         * @type {boolean}
         */
        _this._usePointerEventsOnly = false;
        /**
         * Indicates if passive mode options is supported by this browser.
         *
         * @type {boolean}
         */
        _this._passiveSupported = false;
        /**
         * Holds list of delayed events
         *
         * @type {IDelayedEvent[]}
         */
        _this._delayedEvents = { out: [] };
        /**
         * List of objects that current have a pointer hovered over them.
         *
         * @type {List<InteractionObject>}
         */
        _this.overObjects = new __WEBPACK_IMPORTED_MODULE_1__utils_List__["b" /* List */]();
        /**
         * List of objects that currently has a pressed pointer.
         *
         * @type {List<InteractionObject>}
         */
        _this.downObjects = new __WEBPACK_IMPORTED_MODULE_1__utils_List__["b" /* List */]();
        /**
         * List of objects that need mouse position to be reported to them.
         *
         * @type {List<InteractionObject>}
         */
        _this.trackedObjects = new __WEBPACK_IMPORTED_MODULE_1__utils_List__["b" /* List */]();
        /**
         * List of objects that are currently being dragged.
         *
         * @type {List<InteractionObject>}
         */
        _this.transformedObjects = new __WEBPACK_IMPORTED_MODULE_1__utils_List__["b" /* List */]();
        /**
         * Holds all known pointers.
         *
         * @type {Dictionary<string, IPointer>}
         */
        _this.pointers = new __WEBPACK_IMPORTED_MODULE_6__utils_Dictionary__["a" /* Dictionary */]();
        /**
         * Inertia options that need to be applied to after element drag, if it's
         * `inert = true`.
         *
         * This is just a default, which can and probably will be overridden by
         * actual elements.
         *
         * @type {Dictionary}
         */
        _this.inertiaOptions = new __WEBPACK_IMPORTED_MODULE_6__utils_Dictionary__["a" /* Dictionary */]();
        /**
         * Default options for click events. These can be overridden in
         * [[InteractionObject]].
         *
         * @type {IHitOptions}
         */
        _this.hitOptions = {
            "holdTime": 1000,
            "doubleHitTime": 300,
            "delayFirstHit": false,
            "hitTolerance": 10,
            "noFocus": true
        };
        /**
         * Default options for hover events. These can be overridden in
         * [[InteractionObject]].
         *
         * @type {IHoverOptions}
         */
        _this.hoverOptions = {
            "touchOutBehavior": "leave",
            "touchOutDelay": 1000
        };
        /**
         * Default options for detecting a swipe gesture. These can be overridden in
         * [[InteractionObject]].
         *
         * @type {ISwipeOptions}
         */
        _this.swipeOptions = {
            "time": 500,
            "verticalThreshold": 75,
            "horizontalThreshold": 30
        };
        /**
         * Default options for keyboard operations. These can be overridden in
         * [[InteractionObject]].
         *
         * @type {IKeyboarOptions}
         */
        _this.keyboardOptions = {
            "speed": 0.1,
            "accelleration": 1.2,
            "accellerationDelay": 1000
        };
        // Set class name
        _this.className = "Interaction";
        // Create InteractionObject for <body>
        _this.body = _this.getInteraction(document.body);
        // Detect browser capabilities and determine what event listeners to use
        if (window.hasOwnProperty("PointerEvent")) {
            // IE10+/Edge without touch controls enabled
            _this._pointerEvents.pointerdown = "pointerdown";
            _this._pointerEvents.pointerup = "pointerup";
            _this._pointerEvents.pointermove = "pointermove";
            _this._usePointerEventsOnly = true;
        }
        else if (window.hasOwnProperty("MSPointerEvent")) {
            // IE9
            _this._pointerEvents.pointerdown = "MSPointerDown";
            _this._pointerEvents.pointerup = "MSPointerUp";
            _this._pointerEvents.pointermove = "MSPointerMove";
            _this._usePointerEventsOnly = true;
        }
        else {
            // uses defaults for normal browsers
        }
        // Detect proper mouse wheel events
        if ("onwheel" in document.createElement("div")) {
            // Modern browsers
            _this._pointerEvents.wheel = "wheel";
        }
        else if (__WEBPACK_IMPORTED_MODULE_13__utils_Type__["hasValue"](document.onmousewheel)) {
            // Webkit and IE support at least "mousewheel"
            _this._pointerEvents.wheel = "mousewheel";
        }
        else {
            // The rest of the legacy browsers
            _this._pointerEvents.wheel = "DOMMouseScroll";
        }
        // Set up default inertia options
        _this.inertiaOptions.setKey("move", {
            "time": 100,
            "duration": 500,
            "factor": 1,
            "easing": __WEBPACK_IMPORTED_MODULE_10__utils_Ease__["polyOut3"]
        });
        _this.inertiaOptions.setKey("resize", {
            "time": 100,
            "duration": 500,
            "factor": 1,
            "easing": __WEBPACK_IMPORTED_MODULE_10__utils_Ease__["polyOut3"]
        });
        _this.inertiaOptions.setKey("rotate", {
            "time": 100,
            "duration": 500,
            "factor": 1,
            "easing": __WEBPACK_IMPORTED_MODULE_10__utils_Ease__["polyOut3"]
        });
        // Check for passive mode support
        try {
            var target_1 = _this;
            var options = Object.defineProperty({}, "passive", {
                get: function () {
                    target_1._passiveSupported = true;
                }
            });
            window.addEventListener("test", options, options);
            window.removeEventListener("test", options, options);
        }
        catch (err) {
            _this._passiveSupported = false;
        }
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * ==========================================================================
     * Processing
     * ==========================================================================
     * @hidden
     */
    /**
     * Sets up global events.
     *
     * We need this so that we can track drag movement beyond chart's container.
     *
     * @ignore Exclude from docs
     */
    Interaction.prototype.addGlobalEvents = function () {
        var _this = this;
        if (!this._globalEventsAdded) {
            this._disposers.push(Object(__WEBPACK_IMPORTED_MODULE_8__utils_DOM__["g" /* addEventListener */])(document, this._pointerEvents.pointermove, function (ev) { _this.handleGlobalPointerMove(ev); }));
            this._disposers.push(Object(__WEBPACK_IMPORTED_MODULE_8__utils_DOM__["g" /* addEventListener */])(document, this._pointerEvents.pointerdown, function (ev) { _this.handleGlobalPointerDown(ev); }));
            this._disposers.push(Object(__WEBPACK_IMPORTED_MODULE_8__utils_DOM__["g" /* addEventListener */])(document, this._pointerEvents.pointerup, function (ev) { _this.handleGlobalPointerUp(ev); }));
            this._disposers.push(Object(__WEBPACK_IMPORTED_MODULE_8__utils_DOM__["g" /* addEventListener */])(document, "touchend", function (ev) { _this.handleGlobalTouchEnd(ev); }));
            if (!this._usePointerEventsOnly) {
                this._disposers.push(Object(__WEBPACK_IMPORTED_MODULE_8__utils_DOM__["g" /* addEventListener */])(document, "touchmove", function (ev) { _this.handleGlobalTouchMove(ev); }));
                this._disposers.push(Object(__WEBPACK_IMPORTED_MODULE_8__utils_DOM__["g" /* addEventListener */])(document, "touchstart", function (ev) { _this.handleGlobalTouchStart(ev); }));
            }
            this._disposers.push(Object(__WEBPACK_IMPORTED_MODULE_8__utils_DOM__["g" /* addEventListener */])(document, "keydown", function (ev) { _this.handleGlobalKeyDown(ev); }));
            this._disposers.push(Object(__WEBPACK_IMPORTED_MODULE_8__utils_DOM__["g" /* addEventListener */])(document, "keyup", function (ev) { _this.handleGlobalKeyUp(ev); }));
            this._globalEventsAdded = true;
        }
    };
    /**
     * Sets if [[InteractionObject]] is clickable.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject} io [[InteractionObject]] instance
     */
    Interaction.prototype.processClickable = function (io) {
        // Add or remove touch events
        this.processTouchable(io);
    };
    /**
     * Sets if [[InteractionObject]] is hoverable.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject} io [[InteractionObject]] instance
     */
    Interaction.prototype.processHoverable = function (io) {
        var _this = this;
        if (io.hoverable || io.trackable) {
            // Add global events
            this.addGlobalEvents();
            // Add hover styles
            this.applyCursorOverStyle(io);
            // Add local events
            if (!io.eventDisposers.hasKey("hoverable")) {
                io.eventDisposers.setKey("hoverable", new __WEBPACK_IMPORTED_MODULE_3__utils_Disposer__["c" /* MultiDisposer */]([
                    Object(__WEBPACK_IMPORTED_MODULE_8__utils_DOM__["g" /* addEventListener */])(io.element, "mouseover", function (e) { return _this.handleMouseOver(io, e); }),
                    Object(__WEBPACK_IMPORTED_MODULE_8__utils_DOM__["g" /* addEventListener */])(io.element, "mouseout", function (e) { return _this.handleMouseOut(io, e); })
                ]));
            }
            if (io.trackable) {
                //sprite.addEventListener("touchmove", this.handleTouchMove, false, this);
            }
        }
        else {
            if (io.eventDisposers.hasKey("hoverable")) {
                io.eventDisposers.getKey("hoverable").dispose();
                io.eventDisposers.removeKey("hoverable");
            }
        }
        // Add or remove touch events
        this.processTouchable(io);
    };
    /**
     * Sets up [[InteractionObject]] as movable. Movable can be any
     * transformation, e.g. drag, swipe, resize, track, or rotate.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io  Element
     */
    Interaction.prototype.processMovable = function (io) {
        // Add unified events
        if (io.draggable || io.swipeable || io.trackable || io.resizable || io.rotatable) {
            // Prep the element
            if (!this.isGlobalElement(io)) {
                this.prepElement(io);
            }
            // Add hover styles
            this.applyCursorOverStyle(io);
        }
        // Add or remove touch events
        this.processTouchable(io);
    };
    /**
     * Checks if [[InteractionObject]] is trackable and sets relative events.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io  Element
     */
    Interaction.prototype.processTrackable = function (io) {
        this.processHoverable(io);
        this.processMovable(io);
        this.trackedObjects.moveValue(io);
    };
    /**
     * Checks if [[InteractionObject]] is draggable.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io  Element
     */
    Interaction.prototype.processDraggable = function (io) {
        this.processMovable(io);
    };
    /**
     * Checks if [[InteractionObject]] is swipeable and sets relative events.
     *
     * A swipe event is triggered when a horizontal drag of 75px or more (and
     * less than 30px vertically) occurs within 700 milliseconds. This can be
     * overridden in sprites [[swipeOptions]].
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io  Element
     */
    Interaction.prototype.processSwipeable = function (io) {
        this.processMovable(io);
    };
    /**
     * Checks if [[InteractionObject]] is resizable and attaches required events
     * to it.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io  Element
     */
    Interaction.prototype.processResizable = function (io) {
        this.processMovable(io);
    };
    /**
     * Checks if [[InteractionObject]] is rotatable and attaches required events
     * to it.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io  Element
     */
    Interaction.prototype.processRotatable = function (io) {
        this.processMovable(io);
    };
    /**
     * Checks if [[InteractionObject]] is supposed to capture mouse wheel events
     * and prepares it to catch those events.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io  Element
     */
    Interaction.prototype.processWheelable = function (io) {
        var _this = this;
        if (io.wheelable) {
            io.hoverable = true;
            if (!io.eventDisposers.hasKey("wheelable")) {
                io.eventDisposers.setKey("wheelable", Object(__WEBPACK_IMPORTED_MODULE_8__utils_DOM__["g" /* addEventListener */])(io.element, this._pointerEvents.wheel, function (e) { return _this.handleMouseWheel(io, e); }));
            }
        }
        else {
            if (io.eventDisposers.hasKey("wheelable")) {
                io.eventDisposers.getKey("wheelable").dispose();
                io.eventDisposers.removeKey("wheelable");
            }
        }
    };
    /**
     * Checks if [[InteractionObject]] is focusable. A focusable element is an
     * element that will be highlighted when users presses TAB key. If the
     * element is focusable, this function will attach relative focus/blur
     * events to it.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io  Element
     */
    Interaction.prototype.processFocusable = function (io) {
        var _this = this;
        if (io.focusable === true && (io.tabindex > -1)) {
            if (!io.eventDisposers.hasKey("focusable")) {
                io.eventDisposers.setKey("focusable", new __WEBPACK_IMPORTED_MODULE_3__utils_Disposer__["c" /* MultiDisposer */]([
                    Object(__WEBPACK_IMPORTED_MODULE_8__utils_DOM__["g" /* addEventListener */])(io.element, "focus", function (e) { return _this.handleFocus(io, e); }),
                    Object(__WEBPACK_IMPORTED_MODULE_8__utils_DOM__["g" /* addEventListener */])(io.element, "blur", function (e) { return _this.handleBlur(io, e); })
                ]));
            }
        }
        else {
            if (io.eventDisposers.hasKey("focusable")) {
                io.eventDisposers.getKey("focusable").dispose();
                io.eventDisposers.removeKey("focusable");
            }
        }
    };
    /**
     * Checks if [[InteractionObject]] is "touchable". It means any interaction
     * whatsoever: mouse click, touch screen tap, swipe, drag, resize, etc.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io  Element
     */
    Interaction.prototype.processTouchable = function (io) {
        var _this = this;
        // Add unified events
        if (io.clickable || io.hoverable || io.trackable || io.draggable || io.swipeable || io.resizable || io.rotatable) {
            // Add global events
            this.addGlobalEvents();
            // Add local events
            if (!io.eventDisposers.hasKey("touchable")) {
                io.eventDisposers.setKey("touchable", new __WEBPACK_IMPORTED_MODULE_3__utils_Disposer__["c" /* MultiDisposer */]([
                    Object(__WEBPACK_IMPORTED_MODULE_8__utils_DOM__["g" /* addEventListener */])(io.element, this._pointerEvents.pointerdown, function (e) { return _this.handlePointerDown(io, e); }),
                    Object(__WEBPACK_IMPORTED_MODULE_8__utils_DOM__["g" /* addEventListener */])(io.element, "touchstart", function (e) { return _this.handleTouchDown(io, e); }, this._passiveSupported ? { passive: false } : false)
                ]));
            }
        }
        else {
            var disposer = io.eventDisposers.getKey("touchable");
            if (disposer != null) {
                disposer.dispose();
                io.eventDisposers.removeKey("touchable");
            }
        }
    };
    /**
     * ==========================================================================
     * Non-pointer events
     * ==========================================================================
     * @hidden
     */
    /**
     * Dispatches "focus" event when element gains focus.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io  Element
     * @param {FocusEvent}         ev  Original event
     */
    Interaction.prototype.handleFocus = function (io, ev) {
        if (!io.focusable) {
            ev.preventDefault();
            return;
        }
        io.isFocused = true;
        if (io.events.isEnabled("focus")) {
            var imev = {
                type: "focus",
                target: io,
                event: ev
            };
            io.events.dispatchImmediately("focus", imev);
        }
    };
    /**
     * Dispatches "blur" event when element loses focus.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io  Element
     * @param {FocusEvent}         ev  Original event
     */
    Interaction.prototype.handleBlur = function (io, ev) {
        if (!io.focusable) {
            ev.preventDefault();
            return;
        }
        io.isFocused = false;
        if (io.events.isEnabled("blur")) {
            var imev = {
                type: "blur",
                target: io,
                event: ev
            };
            io.events.dispatchImmediately("blur", imev);
        }
    };
    /**
     * ==========================================================================
     * Global keyboard-related even handlers
     * ==========================================================================
     * @hidden
     */
    /**
     * Checks if there is an item that has currently focus and that they key is
     * one of the directional keys. If both of the conditions are true, it
     * creates an object to simulate movement of dragable element with keyboard.
     *
     * @ignore Exclude from docs
     * @param {KeyboardEvent} ev An original keyboard event
     */
    Interaction.prototype.handleGlobalKeyDown = function (ev) {
        if (this.focusedObject) {
            if (__WEBPACK_IMPORTED_MODULE_9__utils_Keyboard__["b" /* keyboard */].isKey(ev, "esc")) {
                // ESC removes focus
                __WEBPACK_IMPORTED_MODULE_8__utils_DOM__["h" /* blur */]();
            }
            else if (this.focusedObject.draggable && __WEBPACK_IMPORTED_MODULE_9__utils_Keyboard__["b" /* keyboard */].isKey(ev, ["up", "down", "left", "right"])) {
                // Prevent scrolling of the document
                ev.preventDefault();
                // Get focused object
                var io = this.focusedObject;
                // Get particular key
                var disposerKey = "interactionKeyboardObject";
                // If such disposer already exists we know the event is going on so we
                // just move on
                if (io.eventDisposers.hasKey(disposerKey)) {
                    return;
                }
                // Create a keyboard mover
                var ko = new __WEBPACK_IMPORTED_MODULE_5__InteractionKeyboardObject__["a" /* InteractionKeyboardObject */](io);
                io.eventDisposers.setKey(disposerKey, ko);
                ko.keyboardEvent = ev;
                switch (__WEBPACK_IMPORTED_MODULE_9__utils_Keyboard__["b" /* keyboard */].getEventKey(ev)) {
                    case "up":
                        ko.directionY = -1;
                        break;
                    case "down":
                        ko.directionY = 1;
                        break;
                    case "left":
                        ko.directionX = -1;
                        break;
                    case "right":
                        ko.directionX = 1;
                        break;
                }
            }
        }
    };
    /**
     * Dispatches related events when the keyboard key is realeasd.
     *
     * @ignore Exclude from docs
     * @param {KeyboardEvent} ev An original keyboard event
     */
    Interaction.prototype.handleGlobalKeyUp = function (ev) {
        var disposerKey = "interactionKeyboardObject";
        if (this.focusedObject && this.focusedObject.eventDisposers.hasKey(disposerKey)) {
            // Prevent scrolling of the document
            ev.preventDefault();
            // Dispose stuff
            this.focusedObject.eventDisposers.getKey(disposerKey).dispose();
            this.focusedObject.eventDisposers.removeKey(disposerKey);
        }
    };
    /**
     * ==========================================================================
     * Global pointer-related even handlers
     * ==========================================================================
     * @hidden
     */
    /**
     * Handler for a global "pointermove" event.
     *
     * @ignore Exclude from docs
     * @param {MouseEvent} ev Event object
     */
    Interaction.prototype.handleGlobalPointerMove = function (ev) {
        // Get pointer
        var pointer = this.getPointer(ev);
        // Prepare and fire global event
        if (this.events.isEnabled("track")) {
            var imev = {
                type: "track",
                target: this,
                event: ev,
                pointer: pointer
            };
            this.events.dispatchImmediately("track", imev);
        }
        // Track
        this.addBreadCrumb(pointer, pointer.point);
        // Process further
        this.handleMove(pointer, ev);
    };
    /**
     * Handler for a global "pointerdown" event.
     *
     * @ignore Exclude from docs
     * @param {MouseEvent} ev Event object
     */
    Interaction.prototype.handleGlobalPointerDown = function (ev) {
        // Remove delayed hovers
        this.processDelayed();
        // Get pointer
        var pointer = this.getPointer(ev);
        // Prepare and fire global event
        if (this.events.isEnabled("down")) {
            var imev = {
                type: "down",
                target: this,
                event: ev,
                pointer: pointer
            };
            this.events.dispatchImmediately("down", imev);
        }
    };
    /**
     * Prevents touch action from firing.
     *
     * @ignore Exclude from docs
     * @param {MouseEvent} ev Event
     */
    Interaction.prototype.preventTouchAction = function (ev) {
        if (!ev.defaultPrevented) {
            ev.preventDefault();
        }
    };
    /**
     * Handler for a global "pointerup" event.
     *
     * @ignore Exclude from docs
     * @param {MouseEvent} ev Event object
     */
    Interaction.prototype.handleGlobalPointerUp = function (ev) {
        // Get pointer
        var pointer = this.getPointer(ev);
        // Prepare and fire global event
        if (this.events.isEnabled("up")) {
            var imev = {
                type: "up",
                target: this,
                event: ev,
                pointer: pointer
            };
            this.events.dispatchImmediately("up", imev);
        }
        // Process further
        this.handleUp(pointer, ev);
    };
    /**
 * ==========================================================================
 * Global touch-related even handlers
 * ==========================================================================
 */
    /**
     * Handler for a global "touchmove" event.
     *
     * @ignore Exclude from docs
     * @param {TouchEvent} ev Event object
     */
    Interaction.prototype.handleGlobalTouchMove = function (ev) {
        // Stop further propagation so we don't get multiple triggers on hybrid
        // devices (both mouse and touch capabilities)
        /*ev.stopPropagation();
        if (ev.defaultPrevented) {
            ev.preventDefault();
        }*/
        // Process each changed touch point
        for (var i = 0; i < ev.changedTouches.length; i++) {
            // Get pointer
            var pointer = this.getPointer(ev.changedTouches[i]);
            // Prepare and fire global event
            if (this.events.isEnabled("track")) {
                var imev = {
                    type: "track",
                    target: this,
                    event: ev,
                    pointer: pointer
                };
                this.events.dispatchImmediately("track", imev);
            }
            // Track
            this.addBreadCrumb(pointer, pointer.point);
            // Process further
            this.handleMove(pointer, ev);
        }
    };
    /**
     * Handler for a global "touchstart" event.
     *
     * @ignore Exclude from docs
     * @param {TouchEvent} ev Event object
     */
    Interaction.prototype.handleGlobalTouchStart = function (ev) {
        // Stop further propagation so we don't get multiple triggers on hybrid
        // devices (both mouse and touch capabilities)
        /*ev.preventDefault();
        if (ev.defaultPrevented) {
            ev.stopPropagation();
        }*/
        // Process each changed touch point
        for (var i = 0; i < ev.changedTouches.length; i++) {
            // Get pointer
            var pointer = this.getPointer(ev.changedTouches[i]);
            // Prepare and fire global event
            if (!this._usePointerEventsOnly && this.events.isEnabled("down")) {
                var imev = {
                    type: "down",
                    target: this,
                    event: ev,
                    pointer: pointer
                };
                this.events.dispatchImmediately("down", imev);
            }
        }
    };
    /**
     * Handler for a global "touchend" event.
     *
     * @ignore Exclude from docs
     * @param {TouchEvent} ev Event object
     */
    Interaction.prototype.handleGlobalTouchEnd = function (ev) {
        // Stop further propagation so we don't get multiple triggers on hybrid
        // devices (both mouse and touch capabilities)
        /*ev.stopPropagation();
        if (ev.defaultPrevented) {
            ev.preventDefault();
        }*/
        // Process each changed touch point
        for (var i = 0; i < ev.changedTouches.length; i++) {
            // Get pointer
            var pointer = this.getPointer(ev.changedTouches[i]);
            // Prepare and fire global event
            if (this.events.isEnabled("up")) {
                var imev = {
                    type: "up",
                    target: this,
                    event: ev,
                    pointer: pointer
                };
                this.events.dispatchImmediately("up", imev);
            }
            // Handle element-related events
            this.handleUp(pointer, ev);
        }
    };
    /**
     * ==========================================================================
     * Element-specific pointer-related even handlers
     * ==========================================================================
     * @hidden
     */
    /**
     * Handles event when pointer is over [[InteractionObject]] and button is
     * pressed.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}          io  Element
     * @param {MouseEvent | PointerEvent}  ev  Original event
     */
    Interaction.prototype.handlePointerDown = function (io, ev) {
        // Stop further propagation so we don't get multiple triggers on hybrid
        // devices (both mouse and touch capabilities)
        //ev.preventDefault();
        //ev.stopPropagation();
        //if (ev.defaultPrevented) {
        //}
        // Get pointer
        var pointer = this.getPointer(ev);
        // Set mouse button
        pointer.button = ev.which;
        // Reset pointer
        this.resetPointer(pointer);
        // Process down
        this.handleDown(io, pointer, ev);
    };
    /**
     * Handles event when [[InteractionObject]] is hovered by a mouse pointer.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io  Element
     * @param {MouseEvent}         ev  Original event
     */
    Interaction.prototype.handleMouseOver = function (io, ev) {
        // Get pointer
        var pointer = this.getPointer(ev);
        // Lock wheel
        if (io.wheelable) {
            this.lockWheel();
        }
        // Process down
        this.handleOver(io, pointer, ev);
    };
    /**
     * Handles event when [[InteractionObject]] loses hover from a mouse pointer.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io  Element
     * @param {MouseEvent}         ev  Original event
     */
    Interaction.prototype.handleMouseOut = function (io, ev) {
        // Get pointer
        var pointer = this.getPointer(ev);
        // Lock wheel
        if (io.wheelable) {
            this.unlockWheel();
        }
        // Process down
        this.handleOut(io, pointer, ev);
    };
    /**
     * Handles event when mouse wheel is crolled over the [[InteractionObject]].
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io  Element
     * @param {WheelEvent}         ev  Original event
     * @todo Investigate more-cross browser stuff https://developer.mozilla.org/en-US/docs/Web/Events/wheel
     */
    Interaction.prototype.handleMouseWheel = function (io, ev) {
        // Get pointer
        var pointer = this.getPointer(ev);
        // Init delta values
        var deltaX = 0, deltaY = 0;
        // Calculate deltas
        if (ev instanceof WheelEvent) {
            deltaX = Math.round(ev.deltaX);
            deltaY = Math.round(ev.deltaY);
        }
        else {
            throw new Error("Invalid event type");
        }
        // Handle the event
        this.handleWheel(io, pointer, deltaX, deltaY, ev);
    };
    /**
     * ==========================================================================
     * Element-specific touch-related even handlers
     * ==========================================================================
     * @hidden
     */
    /**
      * Handles an event when an [[InteractionObject]] is touched on a touch
      * device.
      *
      * @ignore Exclude from docs
      * @param {InteractionObject}  io  Element
      * @param {TouchEvent}         ev  Original event
      */
    Interaction.prototype.handleTouchDown = function (io, ev) {
        // Stop further propagation so we don't get multiple triggers on hybrid
        // devices (both mouse and touch capabilities)
        // We're disabling this here because it's impossible to cancel touch
        // event otherwise, and it might be needed in order to control default
        // touch gestures.
        /*if (this._usePointerEventsOnly) {
            return;
        }*/
        // Process each changed touch point
        for (var i = 0; i < ev.changedTouches.length; i++) {
            // Get pointer
            var pointer = this.getPointer(ev.changedTouches[i]);
            // Reset pointer
            this.resetPointer(pointer);
            // Process down
            this.handleDown(io, pointer, ev);
        }
    };
    /**
     * ==========================================================================
     * Universal handlers
     * ==========================================================================
     * @hidden
     */
    /**
     * Handles click/tap. Checks for doublehit.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}        io       Interaction object
     * @param {IPointer}                 pointer  Pointer
     * @param {MouseEvent | TouchEvent}  ev       Original event
     */
    Interaction.prototype.handleHit = function (io, pointer, ev) {
        // Check if this is a double-hit
        var now = new Date().getTime();
        if (io.lastHit >= (now - this.getHitOption(io, "doubleHitTime"))) {
            // Yup - it's a double-hit
            // Cancel the hit
            //clearTimeout(io.lastHitPointer.hitTimeout);
            // Clear last hit
            io.lastHit = undefined;
            io.lastHitPointer = undefined;
            // Dispatch event
            if (io.events.isEnabled("doublehit")) {
                var imev = {
                    type: "doublehit",
                    target: io,
                    point: pointer.point,
                    event: ev
                };
                io.events.dispatchImmediately("doublehit", imev);
            }
        }
        else {
            // Log last hit
            io.lastHit = now;
            io.lastHitPointer = pointer;
            if (this.getHitOption(io, "delayFirstHit")) {
                // Schedule hit report event to element
                /*io.lastHitPointer.hitTimeout = setTimeout(() => {
                    if (pointer.button === 3) {
                        if (io.events.isEnabled("rightclick")) {
                            let imev: AMEvent<InteractionObject, InteractionObjectEvents>["rightclick"] = {
                                type: "rightclick",
                                target: io,
                                event: ev
                            };
                            io.events.dispatchImmediately("rightclick", imev);
                        }

                    } else {
                        if (io.events.isEnabled("hit")) {
                            let imev: AMEvent<InteractionObject, InteractionObjectEvents>["hit"] = {
                                type: "hit",
                                target: io,
                                event: ev,
                                point: pointer.point
                            };
                            io.events.dispatchImmediately("hit", imev);
                        }
                    }
                }, this.getHitOption(io, "doubleHitTime"));*/
            }
            else {
                if (pointer.button === 3) {
                    // Execute HIT now
                    if (io.events.isEnabled("rightclick")) {
                        var imev = {
                            type: "rightclick",
                            target: io,
                            event: ev
                        };
                        io.events.dispatchImmediately("rightclick", imev);
                    }
                }
                else {
                    if (io.events.isEnabled("hit")) {
                        var imev = {
                            type: "hit",
                            target: io,
                            event: ev,
                            point: pointer.point
                        };
                        io.events.dispatchImmediately("hit", imev);
                    }
                }
            }
        }
    };
    /**
     * Handles pointer hovering over [[InteractionObject]].
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}        io       Interaction object
     * @param {IPointer}                 pointer  Pointer
     * @param {MouseEvent | TouchEvent}  ev       Original event
     */
    Interaction.prototype.handleOver = function (io, pointer, ev) {
        if (!io.hoverable) {
            return;
        }
        // We need to check if pointer already exists in the downPointers so we
        // don't end up with duplicate pointers. This could happen on hybrid
        // displays where both touch and pointer event is generated on screen
        // touch.
        if (this.pointerExists(io.overPointers, pointer)) {
            return;
        }
        // Add pointer to object
        io.overPointers.moveValue(pointer);
        // First one?
        if (io.overPointers.length === 1) {
            // Add to hovered elements (moved to InteractionObject)
            //this.overObjects.moveValue(io);
            // Report event to interaction object (but only for the first time)
            if (!io.isHover) {
                // Set element as hovered
                io.isHover = true;
                // Generate body track event. This is needed so that if element loads
                // under unmoved mouse cursor, we still need all the actions that are
                // required to happen to kick in.
                this.handleTrack(this.body, pointer, ev, true);
                // Event
                if (io.events.isEnabled("over")) {
                    var imev = {
                        type: "over",
                        target: io,
                        event: ev,
                        pointer: pointer
                    };
                    io.events.dispatchImmediately("over", imev);
                }
            }
        }
    };
    /**
     * Handles when [[InteractionObject]] is no longer hovered.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}        io       Interaction object
     * @param {IPointer}                 pointer  Pointer
     * @param {MouseEvent | TouchEvent}  ev       Original event
     */
    Interaction.prototype.handleOut = function (io, pointer, ev, ignoreBehavior) {
        var _this = this;
        if (ignoreBehavior === void 0) { ignoreBehavior = false; }
        if (!io.hoverable) {
            return;
        }
        // Remove pointer from object
        io.overPointers.removeValue(pointer);
        // If there are no over and down pointers left, report OUT event
        // We need to check downPointers here because we might be dragging an item
        // that is constrained to certain area, but the mouse is already outside
        // that area. In this case we don't want to trigger an out event, not until
        // down pointer is rised.
        if (io.overPointers.length === 0) {
            // Remove from hovered objects (moved to InteractionObject)
            //this.overObjects.removeValue(io);
            // Report event to InteractionObject (but only when the last hover leaves)
            if (io.isHover) {
                if (io.downPointers.length === 0) {
                    // Check touch behavior, but only if the pointer did not move
                    if (!ignoreBehavior && pointer.touch && !this.moved(pointer, this.getHitOption(io, "hitTolerance"))) {
                        var behavior = this.getHoverOption(io, "touchOutBehavior");
                        if (behavior == "leave") {
                            // Set to "leave", so we do not execute any "out" event.
                            // It will be handled by any other interaction that happens
                            // afterwards.
                            this._delayedEvents.out.push({
                                type: "out",
                                io: io,
                                pointer: pointer,
                                event: ev
                            });
                            return;
                        }
                        else if (behavior == "delay" && this.getHoverOption(io, "touchOutDelay")) {
                            this._delayedEvents.out.push({
                                type: "out",
                                io: io,
                                pointer: pointer,
                                event: ev,
                                timeout: setTimeout(function () {
                                    _this.handleOut(io, pointer, ev, true);
                                }, this.getHoverOption(io, "touchOutDelay"))
                            });
                            return;
                        }
                        else {
                            // Nothing for "remove" - that's how it works "out-of-the-box"
                        }
                    }
                    // Generate body track event. This is needed so that if element loads
                    // under unmoved mouse cursor, we still need all the actions that are
                    // required to happen to kick in.
                    this.handleTrack(this.body, pointer, ev, true);
                    if (io.lastOutEvent) {
                        io.lastOutEvent = undefined;
                    }
                    io.isHover = false;
                    if (io.events.isEnabled("out")) {
                        var imev = {
                            type: "out",
                            target: io,
                            event: ev,
                            pointer: pointer
                        };
                        io.events.dispatchImmediately("out", imev);
                    }
                }
                else {
                    io.lastOutEvent = ev;
                }
            }
        }
    };
    /**
     * Performs tasks on pointer down.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}        io       Element
     * @param {IPointer}                 pointer  Pointer
     * @param {MouseEvent | TouchEvent}  ev       Original event
     */
    Interaction.prototype.handleDown = function (io, pointer, ev) {
        // Remove delayed hovers
        this.processDelayed();
        // Stop inertia animations if they're currently being played out
        if (io.inert) {
            this.stopInertia(io);
        }
        // Reset hover status if it's a touch pointer
        // @todo Check if we need to keep this
        /*if (pointer.touch && io.overPointers.length) {
            while (io.overPointers.length) {
                this.handleOut(io, io.overPointers.getIndex(0), ev);
            }
            io.isHover = false;
        }*/
        // Log last down event
        pointer.lastDownEvent = ev;
        // Add Pointer in object
        // We need to check if pointer already exists in the downPointers so we
        // don't end up with duplicate pointers. This could happen on hybrid
        // displays where both touch and pointer event is generated on screen
        // touch.
        if (!this.pointerExists(io.downPointers, pointer)) {
            //return;
            io.downPointers.moveValue(pointer);
        }
        // Lose focus if needed
        if (io.focusable !== false && this.getHitOption(io, "noFocus")) {
            if (this.focusedObject) {
                __WEBPACK_IMPORTED_MODULE_8__utils_DOM__["h" /* blur */]();
            }
            if (!this.isGlobalElement(io)) {
                ev.preventDefault();
            }
        }
        io.isDown = true;
        // Report event
        if (io.events.isEnabled("down")) {
            var imev = {
                type: "down",
                target: io,
                event: ev,
                pointer: pointer
            };
            io.events.dispatchImmediately("down", imev);
        }
        // Apply styles if necessary
        this.applyCursorDownStyle(io, pointer);
        // Check if element is already hovered
        // (can't be pressed down without hovering)
        this.handleOver(io, pointer, ev);
        // First down pointer?
        if (io.downPointers.length === 1) {
            // Start hold timeout
            /*pointer.holdTimeout = setTimeout(() => {
                if (io.events.isEnabled("hold")) {
                    let imev: AMEvent<InteractionObject, InteractionObjectEvents>["hold"] = {
                        type: "hold",
                        target: io,
                        event: ev,
                        pointer: pointer
                    };
                    io.events.dispatchImmediately("hold", imev);
                }
            }, this.getHitOption(io, "holdTime"));*/
        }
        else {
            this.cancelHold(io);
        }
        // If element is draggable we prepare and postpone DRAG_START event (until
        // it is actually moved)
        if (io.draggable) {
            this.processDragStart(io, pointer, ev);
        }
        // Set up swipe timeout
        if (io.swipeable) {
            pointer.swipeCanceled = false;
            /*pointer.swipeTimeout = setTimeout(function() {
                pointer.swipeCanceled = true;
            }, this.getSwipeOption(io, "time"));*/
        }
    };
    /**
     * Handles pointer move.
     *
     * @ignore Exclude from docs
     * @param {IPointer}                 pointer  Pointer
     * @param {MouseEvent | TouchEvent}  ev       Original event
     */
    Interaction.prototype.handleMove = function (pointer, ev) {
        var _this = this;
        // Process hovered elements
        // We check if the element became unhovered without reporting the mouseout
        // event. (it happens in some cases)
        if (!pointer.touch) {
            __WEBPACK_IMPORTED_MODULE_12__utils_Iterator__["each"](this.overObjects.backwards().iterator(), function (io) {
                // Is this pointer relevant to element?
                if (io.overPointers.contains(pointer) && io.hoverable) {
                    // Check if the element is still hovered
                    var reset = false;
                    if (io.element) {
                        if (!__WEBPACK_IMPORTED_MODULE_8__utils_DOM__["i" /* contains */](io.element, pointer.lastEvent.target)) {
                            reset = true;
                        }
                    }
                    else {
                        reset = true;
                    }
                    if (reset) {
                        _this.handleOut(io, pointer, ev);
                    }
                }
            });
        }
        // Override only if we have objects currently being dragged or otherwise
        // interacted with
        if (this.transformedObjects.length) {
            ev.preventDefault();
        }
        // Process down elements
        __WEBPACK_IMPORTED_MODULE_12__utils_Iterator__["each"](this.transformedObjects.backwards().iterator(), function (io) {
            // Is this pointer relevant to element?
            if (io.downPointers.contains(pointer) &&
                // Swipe still happening?
                !(io.swipeable && _this.swiping(io, pointer)) &&
                (io.draggable || io.resizable || io.rotatable)) {
                _this.handleTransform(io, ev);
            }
        });
        // Process tracked elements
        __WEBPACK_IMPORTED_MODULE_12__utils_Iterator__["each"](this.trackedObjects.backwards().iterator(), function (io) {
            // Is this pointer relevant to element?
            // @todo check if this is check is necessary
            /*if (!io.overPointers.contains(pointer)) {
                continue;
            }*/
            _this.handleTrack(io, pointer, ev);
        });
    };
    /**
     * Handles reporting of pointer movement.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}        io        Element
     * @param {IPointer}                 pointer    Pointer
     * @param {MouseEvent | TouchEvent}  ev         Original event
     * @param {boolean}                  skipCheck  Sould we skip check if cursor actually moved
     */
    Interaction.prototype.handleTrack = function (io, pointer, ev, skipCheck) {
        if (skipCheck === void 0) { skipCheck = false; }
        // Do nothing if the cursor did not actually move
        if (!skipCheck && !this.moved(pointer, 0)) {
            return;
        }
        // Initiate TRACK event
        if (io.events.isEnabled("track")) {
            var imev = {
                type: "track",
                target: io,
                event: ev,
                point: pointer.point,
                pointer: pointer
            };
            io.events.dispatchImmediately("track", imev);
        }
    };
    /**
     * Performs tasks on pointer up.
     *
     * @ignore Exclude from docs
     * @param {IPointer}                 pointer  Pointer
     * @param {MouseEvent | TouchEvent}  ev       Original event
     */
    Interaction.prototype.handleUp = function (pointer, ev) {
        var _this = this;
        // Log last up event
        pointer.lastUpEvent = ev;
        // Process hovered elements (but only if it's a touch pointer)
        if (pointer.touch) {
            __WEBPACK_IMPORTED_MODULE_12__utils_Iterator__["each"](this.overObjects.backwards().iterator(), function (io) {
                // Is this pointer relevant to element?
                if (io.overPointers.contains(pointer)) {
                    // Remove from over pointers
                    io.overPointers.removeValue(pointer);
                    // No over pointers left?
                    if (io.overPointers.length === 0) {
                        _this.handleOut(io, pointer, ev);
                        //this.overObjects.removeValue(io);
                        //io.isHover = false;
                    }
                }
            });
        }
        // Process down objects
        __WEBPACK_IMPORTED_MODULE_12__utils_Iterator__["each"](this.downObjects.backwards().iterator(), function (io) {
            // Is this pointer relevant to element?
            if (io && io.downPointers.contains(pointer)) {
                // Clear HOLD timeout just in case
                //this.cancelHold(io);
                // Restore styles
                _this.restoreCursorDownStyle(io, pointer);
                // Remove from over pointers
                io.downPointers.removeValue(pointer);
                // Initiate UP event
                if (io.events.isEnabled("up")) {
                    var imev = {
                        type: "up",
                        target: io,
                        event: ev,
                        pointer: pointer
                    };
                    io.events.dispatchImmediately("up", imev);
                }
                // Initiate delayed OUT event
                if (io.lastOutEvent) {
                    _this.handleOut(io, pointer, io.lastOutEvent);
                }
                // Handle swiping-related stuff
                if (io.swipeable && _this.swiped(io, pointer)) {
                    // Swiped - nothing else should happen
                    _this.handleSwipe(io, pointer, ev);
                }
                else {
                    // Check if it maybe a click
                    if (io.clickable && !_this.moved(pointer, _this.getHitOption(io, "hitTolerance"))) {
                        _this.handleHit(io, pointer, ev);
                    }
                    // Remove from down objects if no more pointers pressing down
                    if (io.downPointers.length === 0) {
                        io.isDown = false;
                    }
                    // Do extra work for inert draggable objects
                    if (io.inert && _this.moved(pointer, _this.getHitOption(io, "hitTolerance"))) {
                        _this.handleInertia(io, pointer);
                    }
                    else if (io.draggable) {
                        _this.processDragStop(io, pointer, ev);
                    }
                }
            }
        });
        // No more down pointers?
        /*if (this.transformedObjects.length === 0) {
            this.unlockDocument();
        }*/
        // Reset pointer
        this.resetPointer(pointer);
    };
    /**
     * Handles swipe action.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}        io       Element
     * @param {IPointer}                 pointer  Pointer
     * @param {MouseEvent | TouchEvent}  ev       Original event
     */
    Interaction.prototype.handleSwipe = function (io, pointer, ev) {
        // We pass in InteractionEvent with shift in mouse coordinates
        // between when the drag started and ended
        if (io.events.isEnabled("swipe")) {
            var imev = {
                type: "swipe",
                target: io,
                event: ev
            };
            io.events.dispatchImmediately("swipe", imev);
        }
        if (pointer.startPoint.x < pointer.point.x) {
            if (io.events.isEnabled("swiperight")) {
                var imev = {
                    type: "swiperight",
                    target: io,
                    event: ev
                };
                io.events.dispatchImmediately("swiperight", imev);
            }
        }
        else {
            if (io.events.isEnabled("swipeleft")) {
                var imev = {
                    type: "swipeleft",
                    target: io,
                    event: ev
                };
                io.events.dispatchImmediately("swipeleft", imev);
            }
        }
    };
    /**
     * Handles event triggering for wheel rotation.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io       Element
     * @param {IPointer}           pointer  Pointer
     * @param {number}             deltaX   Horizontal shift
     * @param {number}             deltaY   Vertical shift
     * @param {WheelEvent}         ev       Original event
     */
    Interaction.prototype.handleWheel = function (io, pointer, deltaX, deltaY, ev) {
        var shift = {
            x: deltaX,
            y: deltaY
        };
        // Trigger generic WHEEL event
        if (io.events.isEnabled("swiperight")) {
            io.events.dispatchImmediately("wheel", {
                type: "wheel",
                target: io,
                event: ev,
                point: pointer.point,
                shift: shift
            });
        }
        // Trigger direction-specific events
        // Horizontal
        if (deltaX < 0) {
            if (io.events.isEnabled("wheelleft")) {
                io.events.dispatchImmediately("wheelleft", {
                    type: "wheelleft",
                    target: io,
                    event: ev,
                    point: pointer.point,
                    shift: shift
                });
            }
        }
        else if (deltaX > 0) {
            if (io.events.isEnabled("swiperight")) {
                io.events.dispatchImmediately("wheelright", {
                    type: "wheelright",
                    target: io,
                    event: ev,
                    point: pointer.point,
                    shift: shift
                });
            }
            // Vertical
        }
        else if (deltaY < 0) {
            if (io.events.isEnabled("wheelup")) {
                io.events.dispatchImmediately("wheelup", {
                    type: "wheelup",
                    target: io,
                    event: ev,
                    point: pointer.point,
                    shift: shift
                });
            }
        }
        else if (deltaY > 0) {
            if (io.events.isEnabled("wheeldown")) {
                io.events.dispatchImmediately("wheeldown", {
                    type: "wheeldown",
                    target: io,
                    event: ev,
                    point: pointer.point,
                    shift: shift
                });
            }
        }
    };
    /**
     * Initiates inertia checking sub-routines for different movement types:
     * drag, resize, rotate.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}   sprite
     * @param {IPointer}            pointer
     */
    Interaction.prototype.handleInertia = function (io, pointer) {
        if (io.draggable && io.downPointers.length === 0) {
            this.handleMoveInertia(io, pointer);
        }
        if (io.rotatable && io.downPointers.length === 1) {
            this.handleRotateInertia(io, pointer);
        }
        if (io.resizable && io.downPointers.length > 1) {
            this.handleResizeInertia(io, pointer);
        }
    };
    /**
     * Continues moving the element to simulate the effect of inertia. Happens
     * when `inert` and `draggable` object is dragged and then released.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io       Element
     * @param {IPointer}           pointer  Pointer
     */
    Interaction.prototype.handleMoveInertia = function (io, pointer) {
        // Init inertia object
        var inertia = new __WEBPACK_IMPORTED_MODULE_7__Inertia__["a" /* Inertia */]();
        inertia.interaction = io;
        inertia.type = "move";
        inertia.point = {
            "x": pointer.point.x,
            "y": pointer.point.y
        };
        inertia.startPoint = {
            "x": pointer.startPoint.x,
            "y": pointer.startPoint.y
        };
        // Get inertia data
        var ref = this.getTrailPoint(pointer, new Date().getTime() - this.getInertiaOption(io, "move", "time"));
        if (typeof ref === "undefined") {
            this.processDragStop(io, pointer, pointer.lastUpEvent);
            return;
        }
        // Init animation options
        var factor = this.getInertiaOption(io, "move", "factor");
        var animationOptions = [{
                "to": pointer.point.x + (pointer.point.x - ref.point.x) * factor,
                "property": "x"
            }, {
                "to": pointer.point.y + (pointer.point.y - ref.point.y) * factor,
                "property": "y"
            }];
        // Start animation
        var animation = new __WEBPACK_IMPORTED_MODULE_2__utils_Animation__["a" /* Animation */](inertia, animationOptions, this.getInertiaOption(io, "move", "duration"), this.getInertiaOption(io, "move", "easing")).start();
        this._disposers.push(animation.events.on("animationended", function (ev) {
            inertia.done();
        }));
        // Add inertia object
        io.inertias.setKey("move", inertia);
    };
    /**
     * Continues rotation of a `rotatable` element after it is rotated and
     * released.
     *
     * **NOTE:** this is is just a placeholder function. No actual functionality
     * is implemented, yet.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io       Element
     * @param {IPointer}           pointer  Pointer
     * @todo Implement functionality
     */
    Interaction.prototype.handleRotateInertia = function (io, pointer) {
        // Some day, folks. Some day...
    };
    /**
     * Continues resizing of a `resizable` element after it is resized and
     * released.
     *
     * **NOTE:** this is is just a placeholder function. No actual fucntionality
     * is implemented, yet.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io       Element
     * @param {IPointer}           pointer  Pointer
     */
    Interaction.prototype.handleResizeInertia = function (io, pointer) {
        // Some day, folks. Some day...
    };
    /**
     * Recalculates element's position, size and rotation based on position of
     * all its related pointers.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}        io  Element
     * @param {MouseEvent | TouchEvent}  ev  Original event
     */
    Interaction.prototype.handleTransform = function (io, ev) {
        // Get primary pointer and its respective points
        var pointer1 = io.downPointers.getIndex(0);
        var point1 = pointer1.point;
        var startPoint1 = pointer1.startPoint;
        // Init secondary pointer
        var pointer2 = io.downPointers.getIndex(1);
        var point2;
        var startPoint2;
        // Determine if it's a sinngle pointer or multi
        var singlePoint = true;
        if (io.downPointers.length > 1) {
            // Several pointers down
            singlePoint = false;
            // Get second pointer
            point2 = pointer2.point;
            startPoint2 = pointer2.startPoint;
        }
        else {
            // Just one pointer down
            singlePoint = true;
            // Use center of the sprite to simulate "second" point of touch
            point2 = {
                "x": io.originalPosition.x,
                "y": io.originalPosition.y
            };
            startPoint2 = point2;
        }
        // Primary touch point moved?
        var pointer1Moved = this.moved(pointer1, 0);
        // Report DRAG_START if necessary
        if (io.draggable && pointer1.dragStartEvents.length && pointer1Moved) {
            if (io.events.isEnabled("dragstart")) {
                io.events.dispatchImmediately("dragstart", pointer1.dragStartEvents.shift());
            }
            //delete pointer1.dragStartEvents;
        }
        // Determine what we do in order of superiority
        if (singlePoint && io.draggable) {
            // We have only one pointer and the Sprite is draggable
            // There's nothing else to be done - just move it
            this.handleTransformMove(io, point1, startPoint1, ev, pointer1Moved);
        }
        else {
            // Check if second touch point moved
            var pointer2Moved = this.moved(pointer2, 0);
            if (io.draggable && io.resizable && io.rotatable) {
                //this.handleTransformAll(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved);
                this.handleTransformMove(io, point1, startPoint1, ev, pointer1Moved && pointer2Moved);
                this.handleTransformResize(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved);
                this.handleTransformRotate(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved);
            }
            else {
                if (io.draggable) {
                    this.handleTransformMove(io, point1, startPoint1, ev, pointer1Moved);
                }
                if (io.resizable) {
                    this.handleTransformResize(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved);
                }
                if (io.rotatable) {
                    this.handleTransformRotate(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved);
                }
            }
        }
    };
    /**
     * Handles movement of the dragged element.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}                        io            Element
     * @param {IPoint}                                   point         Current point of the pointer
     * @param {IPoint}                                   startPoint    Starting point of the pointer
     * @param {MouseEvent | TouchEvent | KeyboardEvent}  ev            Original event
     * @param {boolean}                                  pointerMoved  Did pointer move?
     */
    Interaction.prototype.handleTransformMove = function (io, point, startPoint, ev, pointerMoved) {
        if (pointerMoved) {
            if (io.events.isEnabled("drag")) {
                var imev = {
                    type: "drag",
                    target: io,
                    event: ev,
                    shift: {
                        "x": point.x - startPoint.x,
                        "y": point.y - startPoint.y
                    },
                    startPoint: startPoint,
                    point: point
                };
                io.events.dispatchImmediately("drag", imev);
            }
        }
    };
    /**
     * Handles resizing of the element.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}        io            Element
     * @param {IPoint}                   point1        Current position of reference point #1
     * @param {IPoint}                   startPoint1   Original position of reference point #1
     * @param {IPoint}                   point2        Current position of reference point #2
     * @param {IPoint}                   startPoint2   Original position of reference point #2
     * @param {MouseEvent | TouchEvent}  ev            Original event
     * @param {boolean}                  pointerMoved  Did pointer move?
     */
    Interaction.prototype.handleTransformResize = function (io, point1, startPoint1, point2, startPoint2, ev, pointerMoved) {
        if (io.events.isEnabled("resize")) {
            var imev = {
                type: "resize",
                target: io,
                event: ev,
                scale: __WEBPACK_IMPORTED_MODULE_11__utils_Math__["getScale"](point1, startPoint1, point2, startPoint2),
                startPoint1: startPoint1,
                point1: point1,
                startPoint2: startPoint2,
                point2: point2
            };
            io.events.dispatchImmediately("resize", imev);
        }
    };
    /**
     * Hdanles rotation of the element.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}        io            Element
     * @param {IPoint}                   point1        Current position of reference point #1
     * @param {IPoint}                   startPoint1   Original position of reference point #1
     * @param {IPoint}                   point2        Current position of reference point #2
     * @param {IPoint}                   startPoint2   Original position of reference point #2
     * @param {MouseEvent | TouchEvent}  ev            Original event
     * @param {boolean}                  pointerMoved  Did pointer move?
     */
    Interaction.prototype.handleTransformRotate = function (io, point1, startPoint1, point2, startPoint2, ev, pointerMoved) {
        // Prepare {InteractionEvent} object
        if (io.events.isEnabled("rotate")) {
            var imev = {
                type: "rotate",
                target: io,
                event: ev,
                angle: __WEBPACK_IMPORTED_MODULE_11__utils_Math__["getRotation"](point1, startPoint1, point2, startPoint2),
            };
            io.events.dispatchImmediately("rotate", imev);
        }
    };
    /**
     * Handles all the preparations of the element when it starts to be dragged.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}        io       Element
     * @param {IPointer}                 pointer  Pointer
     * @param {MouseEvent | TouchEvent}  ev       Original event
     */
    Interaction.prototype.processDragStart = function (io, pointer, ev) {
        // Add to draggedObjects
        this.transformedObjects.push(io);
        // Report "dragstart"
        var imev = {
            type: "dragstart",
            target: io,
            event: ev
        };
        /**
         * If pointer is set we will not fire the event until the pointer has
         * actually move. If it's not set we don't have to wait for anything, so we
         * just fire off the event right away.
         */
        if (pointer) {
            pointer.dragStartEvents.push(imev);
        }
        else {
            io.dispatchImmediately("dragstart", imev);
        }
    };
    /**
     * Finishes up element drag operation.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}        io       Element
     * @param {IPointer}                 pointer  Pointer
     * @param {MouseEvent | TouchEvent}  ev       Original event
     */
    Interaction.prototype.processDragStop = function (io, pointer, ev) {
        // Pointer set?
        if (!pointer) {
            pointer = this.getDragPointer(io);
        }
        // Removed from transformedObjects
        this.transformedObjects.removeValue(io);
        // Unlock document
        //this.unlockDocument();
        // Report dragstop
        if (!pointer || this.moved(pointer, 0)) {
            if (io.events.isEnabled("dragstop")) {
                var imev = {
                    type: "dragstop",
                    target: io
                };
                io.events.dispatchImmediately("dragstop", imev);
            }
        }
    };
    /**
     * ==========================================================================
     * Controls for InteractionObjects initiating directly
     * ==========================================================================
     * @hidden
     */
    /**
     * Manually triggers drag start on the element. Could be useful in cases
     * where tracking or dragging one element can also influence dragging another
     * element.
     *
     * Passing in `pointer` reference is advisable. If not passed in it will try
     * to determine which pointer to attach to. However, it's better to specify
     * it explicitly.
     *
     * @param {InteractionObject}  io       Element
     * @param {IPointer}           pointer  Pointer
     */
    Interaction.prototype.dragStart = function (io, pointer) {
        if (pointer || (pointer = this.getDragPointer(io))) {
            this.handleDown(io, pointer, pointer.lastDownEvent);
        }
    };
    /**
     * Manually ends drag on the element.
     *
     * @param {InteractionObject}  io       Element
     * @param {IPointer}           pointer  Pointer
     */
    Interaction.prototype.dragStop = function (io, pointer) {
        if (pointer || (pointer = this.getDragPointer(io))) {
            this.handleUp(pointer, pointer.lastUpEvent);
        }
    };
    /**
     * This method uses a fuzzy logic to find the pointer to be used for dragging.
     * Beware that this is not a rock-solid solution. If there are a few objects
     * being dragged at the same time, you may get unexepected results.
     *
     * @param  {InteractionObject}  io  InteractionObject to get pointers from
     * @return {IPointer}               Pointer currently being used for dragging
     */
    Interaction.prototype.getDragPointer = function (io) {
        if (io) {
            // InteractionObject is supplied
            // Use it's first down pointer
            return io.downPointers.getIndex(0);
        }
        else if (this.transformedObjects.length) {
            // Use first dragged object
            return this.getDragPointer(this.transformedObjects.getIndex(0));
        }
        else {
            return undefined;
        }
    };
    /**
     * ==========================================================================
     * Utils
     * ==========================================================================
     * @hidden
     */
    /**
     * Returns pointer id for the given event object.
     *
     * @param  {any}     ev  Event
     * @return {string}      Pointer ID
     */
    Interaction.prototype.getPointerId = function (ev) {
        if (__WEBPACK_IMPORTED_MODULE_13__utils_Type__["hasValue"](ev.identifier)) {
            return ev.identifier;
        }
        else if (__WEBPACK_IMPORTED_MODULE_13__utils_Type__["hasValue"](ev.pointerId)) {
            return ev.pointerId;
        }
        else {
            return "1";
        }
    };
    /**
     * Returns [[Pointer]] object that is associated with the Event.
     *
     * If no such [[Pointer]] object exists, it is created.
     *
     * @param  {MouseEvent | Touch}  ev  Event
     * @return {IPointer}                Pointer
     */
    Interaction.prototype.getPointer = function (ev) {
        // Get pointer id
        var id = this.getPointerId(ev);
        // Get current coordinates
        var point = {
            "x": ev.clientX,
            "y": ev.clientY
        };
        // Look for the pointer in the Dictionary if it maybe already exists
        var pointer;
        if (this.pointers.hasKey(id)) {
            // We already have such pointer
            pointer = this.pointers.getKey(id);
            // Reset pointer
            pointer.point = point;
        }
        else {
            // Init pointer
            pointer = {
                "id": id,
                //"touch": !(ev instanceof MouseEvent) || ((<any>ev).pointerType && (<any>ev).pointerType != "pointer"),
                "touch": !(ev instanceof MouseEvent) || (ev.pointerType && ev.pointerType != "mouse"),
                "startPoint": point,
                "startTime": new Date().getTime(),
                "point": point,
                "track": [],
                "swipeCanceled": false,
                "dragStartEvents": []
            };
            // Add first breadcrumb
            this.addBreadCrumb(pointer, point);
            // Add for re-use later
            this.pointers.setKey(id, pointer);
        }
        // Log last event
        pointer.lastEvent = ev;
        return pointer;
    };
    /**
     * Resets the poiner to original state, i.e. cleans movement information,
     * starting point, etc.
     *
     * @param {IPointer} pointer Pointer
     */
    Interaction.prototype.resetPointer = function (pointer) {
        pointer.startTime = new Date().getTime();
        pointer.startPoint = pointer.point;
        pointer.track = [];
        pointer.swipeCanceled = false;
        //clearTimeout(pointer.swipeTimeout);
        //clearTimeout(pointer.holdTimeout);
    };
    /**
     * Adds a "breadcrumb" point to the [[Pointer]] to log its movement path.
     *
     * @param {IPointer}  pointer  Pointer
     * @param {IPoint}    point    Point coordinates
     */
    Interaction.prototype.addBreadCrumb = function (pointer, point) {
        pointer.track.push({
            "timestamp": new Date().getTime(),
            "point": point
        });
    };
    /**
     * Prepares the document for various touch-related operations.
     *
     * @ignore Exclude from docs
     */
    Interaction.prototype.lockDocument = function () {
        this.prepElement(this.body);
    };
    /**
     * Restores document functionality.
     *
     * @ignore Exclude from docs
     */
    Interaction.prototype.unlockDocument = function () {
        if (this.transformedObjects.length == 0) {
            this.restoreAllStyles(this.body);
        }
    };
    /**
     * Lock element (disable all touch)
     *
     * @ignore Exclude from docs
     */
    Interaction.prototype.lockElement = function (io) {
        this.prepElement(io);
    };
    /**
     * Restores element's functionality.
     *
     * @ignore Exclude from docs
     */
    Interaction.prototype.unlockElement = function (io) {
        this.restoreAllStyles(io);
    };
    /**
     * Locks document's wheel scroll.
     *
     * @ignore Exclude from docs
     */
    Interaction.prototype.lockWheel = function () {
        window.addEventListener(this._pointerEvents.wheel, this.wheelLockEvent);
    };
    /**
     * Unlocks document's wheel scroll.
     *
     * @ignore Exclude from docs
     */
    Interaction.prototype.unlockWheel = function () {
        window.removeEventListener(this._pointerEvents.wheel, this.wheelLockEvent);
    };
    /**
     * A function that cancels mouse wheel scroll.
     *
     * @ignore Exclude from docs
     * @param  {MouseEvent}  ev  Event object
     * @return {boolean}         Returns `false` to cancel
     */
    Interaction.prototype.wheelLockEvent = function (ev) {
        ev.preventDefault();
        return false;
    };
    /**
     * Applies a set of styles to an element. Stores the original styles so they
     * can be restored later.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}           io      Element
     * @param {Dictionary<string, string>}  styles  A Dictionary of style property and values
     */
    Interaction.prototype.prepElement = function (io, permanent) {
        var el = io.element;
        if (el) {
            // Define possible props
            var props = [
                "touchAction", "webkitTouchAction", "MozTouchAction", "MSTouchAction", "msTouchAction", "oTouchAction",
                "userSelect", "webkitUserSelect", "MozUserSelect", "MSUserSelect", "msUserSelect", "oUserSelect",
                "touchSelect", "webkitTouchSelect", "MozTouchSelect", "MSTouchSelect", "msTouchSelect", "oTouchSelect",
                "touchCallout", "webkitTouchCallout", "MozTouchCallout", "MSTouchCallout", "msTouchCallout", "oTouchCallout",
                "contentZooming", "webkitContentZooming", "MozContentZooming", "MSContentZooming", "msContentZooming", "oContentZooming",
                "userDrag", "webkitUserDrag", "MozUserDrag", "MSUserDrag", "msUserDrag", "oUserDrag"
            ];
            for (var i = 0; i < props.length; i++) {
                if (props[i] in el.style) {
                    this.setTemporaryStyle(io, props[i], "none");
                }
            }
            // Remove iOS-specific selection;
            this.setTemporaryStyle(io, "tapHighlightColor", "rgba(0, 0, 0, 0)");
            //this.setTemporaryStyle(io, "webkitOverflowScrolling", "none");
        }
    };
    /**
     * Cancels hold counting for the object.
     *
     * @param {InteractionObject} io Element
     */
    Interaction.prototype.cancelHold = function (io) {
        __WEBPACK_IMPORTED_MODULE_12__utils_Iterator__["each"](io.downPointers.iterator(), function (pointer) {
            //clearTimeout(pointer.holdTimeout);
        });
    };
    /**
     * Cancels swipe.
     *
     * @param {InteractionObject} io Element
     */
    Interaction.prototype.cancelSwipe = function (io) {
        __WEBPACK_IMPORTED_MODULE_12__utils_Iterator__["each"](io.downPointers.iterator(), function (pointer) {
            //clearTimeout(pointer.swipeTimeout);
        });
    };
    /**
     * Returns an option associated with hit events.
     *
     * @ignore Exclude from docs
     * @param  {InteractionObject}  io      Element
     * @param  {string}             option  Option key
     * @return {any}                        Option value
     */
    Interaction.prototype.getHitOption = function (io, option) {
        var res = io.hitOptions[option];
        if (typeof res === "undefined") {
            res = this.hitOptions[option];
        }
        return res;
    };
    /**
     * Returns an option associated with hover events.
     *
     * @ignore Exclude from docs
     * @param  {InteractionObject}  io      Element
     * @param  {string}             option  Option key
     * @return {any}                        Option value
     */
    Interaction.prototype.getHoverOption = function (io, option) {
        var res = io.hoverOptions[option];
        if (typeof res === "undefined") {
            res = this.hoverOptions[option];
        }
        return res;
    };
    /**
     * Returns an option associated with swipe events.
     *
     * @ignore Exclude from docs
     * @param  {InteractionObject}  io      Element
     * @param  {string}             option  Option key
     * @return {any}                        Option value
     */
    Interaction.prototype.getSwipeOption = function (io, option) {
        var res = io.swipeOptions[option];
        if (typeof res === "undefined") {
            res = this.swipeOptions[option];
        }
        return res;
    };
    /**
     * Returns an option for keyboard.
     *
     * @ignore Exclude from docs
     * @param  {InteractionObject}  io      Element
     * @param  {string}             option  Option key
     * @return {any}                        Option value
     */
    Interaction.prototype.getKeyboardOption = function (io, option) {
        var res = io.keyboardOptions[option];
        if (typeof res === "undefined") {
            res = this.keyboardOptions[option];
        }
        return res;
    };
    /**
     * Returns an option associated with inertia.
     *
     * @ignore Exclude from docs
     * @param  {InteractionObject}  io      Element
     * @param  {InertiaTypes}       type    Inertia type
     * @param  {string}             option  Option key
     * @return {any}                        Option value
     */
    Interaction.prototype.getInertiaOption = function (io, type, option) {
        var options = io.inertiaOptions.getKey(type);
        var res;
        if (options && __WEBPACK_IMPORTED_MODULE_13__utils_Type__["hasValue"](options[type])) {
            res = options[type];
        }
        else {
            res = this.inertiaOptions.getKey(type)[option];
        }
        return res;
    };
    /**
     * Stops currently going on inertia. Useful if inertia is currently being
     * animated and the object is being interacted with.
     *
     * @param {InteractionObject} io Element
     */
    Interaction.prototype.stopInertia = function (io) {
        var x;
        var inertias = ["move", "resize", "rotate"];
        for (var i = 0; i < inertias.length; i++) {
            x = inertias[i];
            if (io.inertias.hasKey(x)) {
                var inertia = io.inertias.getKey(x);
                if (inertia) {
                    inertia.dispose();
                    //io.inertiaAnimations.removeKey(x);
                    //this.processDragStop(io);
                    continue;
                }
            }
        }
    };
    /**
     * Check if swiping is currently being performed on an object.
     *
     * @param  {InteractionObject}  io       Element
     * @param  {IPointer}           pointer  Pointer to check
     * @return {boolean}                     `true` if swiping
     */
    Interaction.prototype.swiping = function (io, pointer) {
        var now = new Date().getTime();
        if (pointer.swipeCanceled || !io.swipeable) {
            return false;
        }
        else if ((Math.abs(pointer.startPoint.y - pointer.point.y) < this.getSwipeOption(io, "verticalThreshold")) &&
            (pointer.startTime > (now - this.getSwipeOption(io, "time")))) {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * Returns `true` if a successfull swipe action was performed on an element.
     *
     * @param  {InteractionObject}  io       Element
     * @param  {IPointer}           pointer  Pointer
     * @return {boolean}                     Swiped?
     */
    Interaction.prototype.swiped = function (io, pointer) {
        var now = new Date().getTime();
        if (pointer.swipeCanceled) {
            return false;
        }
        else if ((Math.abs(pointer.startPoint.x - pointer.point.x) > this.getSwipeOption(io, "horizontalThreshold")) &&
            (Math.abs(pointer.startPoint.y - pointer.point.y) < this.getSwipeOption(io, "verticalThreshold")) &&
            (pointer.startTime > (now - this.getSwipeOption(io, "time")))) {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * Applies style to mouse cursor based on its stage in relation to
     * [[InteractionObject]].
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}   Element
     */
    Interaction.prototype.applyCursorOverStyle = function (io) {
        // Get sprite's cursor ooptions
        var options = io.cursorOptions;
        if (!__WEBPACK_IMPORTED_MODULE_13__utils_Type__["hasValue"](options.overStyle)) {
            return;
        }
        // Apply cursor down styles
        for (var i = 0; i < options.overStyle.length; i++) {
            __WEBPACK_IMPORTED_MODULE_8__utils_DOM__["r" /* setStyle */](io.element, options.overStyle[i].property, options.overStyle[i].value);
        }
    };
    /**
     * Applies style to mouse cursor based on its stage in relation to
     * [[InteractionObject]].
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io       Element
     * @param {IPointer}           pointer  Pointer
     */
    Interaction.prototype.applyCursorDownStyle = function (io, pointer) {
        // Not applicable for touch pointers since they don't display a cursor
        if (pointer.touch) {
            return;
        }
        // Is down?
        if (io.downPointers.contains(pointer) && __WEBPACK_IMPORTED_MODULE_13__utils_Type__["hasValue"](io.cursorOptions.downStyle)) {
            // Get sprite's cursor ooptions
            var options = io.cursorOptions;
            // Apply cursor down styles
            for (var i = 0; i < options.downStyle.length; i++) {
                this.setTemporaryStyle(this.body, options.downStyle[i].property, options.downStyle[i].value);
                this.setTemporaryStyle(io, options.downStyle[i].property, options.downStyle[i].value);
            }
        }
    };
    /**
     * Restores original cursor style for the element.
     *
     * @ignore Exclude from docs
     * @param {InteractionObject}  io       Element
     * @param {IPointer}           pointer  Pointer
     */
    Interaction.prototype.restoreCursorDownStyle = function (io, pointer) {
        // Not applicable for touch pointers since they don't display a cursor
        if (pointer.touch) {
            return;
        }
        // Is down?
        if (io.downPointers.contains(pointer) && __WEBPACK_IMPORTED_MODULE_13__utils_Type__["hasValue"](io.cursorOptions.downStyle)) {
            // Get sprite's cursor ooptions
            var options = io.cursorOptions;
            // Apply cursor down styles
            for (var i = 0; i < options.downStyle.length; i++) {
                this.restoreStyle(this.body, options.downStyle[i].property);
                this.restoreStyle(io, options.downStyle[i].property);
            }
        }
    };
    /**
     * Sets style on the body of the document.
     *
     * @ignore Exclude from docs
     * @param {Array<IStyleProperty> | IStyleProperty}  style  Style definitions
     */
    Interaction.prototype.setGlobalStyle = function (style) {
        var styles = (__WEBPACK_IMPORTED_MODULE_13__utils_Type__["isArray"](style) ? style : [style]);
        for (var i = 0; i < styles.length; i++) {
            this.setTemporaryStyle(interaction.body, styles[i].property, styles[i].value);
        }
    };
    /**
     * Restores style on the body of the document.
     *
     * @ignore Exclude from docs
     * @param {Array<IStyleProperty> | IStyleProperty}  style  Style definitions
     */
    Interaction.prototype.restoreGlobalStyle = function (style) {
        var styles = (__WEBPACK_IMPORTED_MODULE_13__utils_Type__["isArray"](style) ? style : [style]);
        for (var i = 0; i < styles.length; i++) {
            this.restoreStyle(interaction.body, styles[i].property);
        }
    };
    /**
     * Checks if element is a non-cahrt element.
     *
     * @param  {InteractionObject}  io  InteractionObject
     * @return {boolean}                Global element?
     */
    Interaction.prototype.isGlobalElement = function (io) {
        return document.body === io.element;
    };
    /**
     * Checks if pointer has moved since it was created.
     *
     * @param  {IPointer}  pointer    Pointer
     * @param  {number}    tolerance  Tolerance in pixels
     * @return {boolean}              `true` if the pointer has moved
     */
    Interaction.prototype.moved = function (pointer, tolerance) {
        var shift = this.getShift(pointer);
        return (Math.abs(shift.x) > tolerance) || (Math.abs(shift.y) > tolerance);
    };
    /**
     * Returns total a shift in pointers coordinates between its original
     * position and now.
     *
     * @param  {IPointer}  pointer  Pointer
     * @return {IPoint}             Shift in coordinates (x/y)
     */
    Interaction.prototype.getShift = function (pointer) {
        return {
            "x": pointer.startPoint.x - pointer.point.x,
            "y": pointer.startPoint.y - pointer.point.y
        };
    };
    /**
     * Returns a point from [[Pointer]]'s move history at a certain timetamp.
     *
     * @param  {IPointer}     pointer    Pointer
     * @param  {number}       timestamp  Timestamp
     * @return {IBreadcrumb}             Point
     */
    Interaction.prototype.getTrailPoint = function (pointer, timestamp) {
        var res;
        for (var i = 0; i < pointer.track.length; i++) {
            if (pointer.track[i].timestamp >= timestamp) {
                res = pointer.track[i];
                break;
            }
        }
        return res;
    };
    /**
     * Checks if same pointer already exists in the list.
     *
     * @param  {List<IPointer>}  list     List to check agains
     * @param  {IPointer}        pointer  Pointer
     * @return {boolean}                  Exists?
     */
    Interaction.prototype.pointerExists = function (list, pointer) {
        var exists = false;
        list.each(function (item) {
            exists = item.point.x == pointer.point.x && item.point.y == pointer.point.y;
        });
        return exists;
    };
    /**
     * Returns an [[InteractionObject]] representation of a DOM element.
     *
     * You can use this on any HTML or SVG element, to add interactive features
     * to it.
     *
     * @param  {HTMLElement | SVGSVGElement}  element  Element
     * @return {InteractionObject}                     InteractionObject
     */
    Interaction.prototype.getInteraction = function (element) {
        var io = new __WEBPACK_IMPORTED_MODULE_4__InteractionObject__["a" /* InteractionObject */]();
        io.element = element;
        return io;
    };
    /**
     * Sets a style property on an element. Stores original value to be restored
     * later with [[restoreStyle]].
     *
     * @see {@link restoreStyle}
     * @param {InteractionObject}  io        Element
     * @param {string}             property  Property
     * @param {string}             value     Value
     */
    Interaction.prototype.setTemporaryStyle = function (io, property, value) {
        // Get element
        //let el = io.element.tagName == "g" ? <SVGSVGElement>io.element.parentNode : io.element;
        var el = io.element;
        // Save original property if it is set and hasn't been saved before already
        if (__WEBPACK_IMPORTED_MODULE_13__utils_Type__["hasValue"](el.style[property]) && !io.replacedStyles.hasKey(property)) {
            io.replacedStyles.setKey(property, el.style[property]);
        }
        // Replace with the new one
        __WEBPACK_IMPORTED_MODULE_8__utils_DOM__["r" /* setStyle */](el, property, value);
    };
    /**
     * Restores specific style on an element.
     *
     * @param {InteractionObject}  io        Element
     * @param {string}             property  Style property
     */
    Interaction.prototype.restoreStyle = function (io, property) {
        // Reset style
        if (io.replacedStyles.hasKey(property)) {
            io.element.style[property] = io.replacedStyles.getKey(property);
            io.replacedStyles.removeKey(property);
        }
        else {
            delete io.element.style[property];
        }
    };
    /**
     * Restore temporarily reset styles on an element.
     *
     * @param {InteractionObject} io Element
     */
    Interaction.prototype.restoreAllStyles = function (io) {
        __WEBPACK_IMPORTED_MODULE_12__utils_Iterator__["each"](io.replacedStyles.iterator(), function (a) {
            var key = a[0];
            var value = a[1];
            io.element.style[key] = value;
            io.replacedStyles.removeKey(key);
        });
    };
    /**
     * Processes dalyed events, such as "out" event that was initiated for
     * elements by touch.
     */
    Interaction.prototype.processDelayed = function () {
        var delayedEvent;
        while (delayedEvent = this._delayedEvents.out.shift()) {
            if (delayedEvent.timeout) {
                clearTimeout(delayedEvent.timeout);
            }
            this.handleOut(delayedEvent.io, delayedEvent.pointer, delayedEvent.event, true);
        }
    };
    /**
     * Disposes this object and cleans up after itself.
     */
    Interaction.prototype.dispose = function () {
        if (!this.isDisposed) {
            _super.prototype.dispose.call(this);
            this.restoreAllStyles(this.body);
            this.unlockWheel();
        }
    };
    return Interaction;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["b" /* BaseObjectEvents */]));

var interaction = null;
/**
 * Returns a single unified global instance of [[Interaction]].
 *
 * All code should use this function, rather than create their own instances
 * of [[Interaction]].
 */
function getInteraction() {
    if (interaction == null) {
        interaction = new Interaction();
    }
    return interaction;
}
//# sourceMappingURL=Interaction.js.map

/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["linear"] = linear;
/* harmony export (immutable) */ __webpack_exports__["quadIn"] = quadIn;
/* harmony export (immutable) */ __webpack_exports__["quadOut"] = quadOut;
/* harmony export (immutable) */ __webpack_exports__["quadInOut"] = quadInOut;
/* harmony export (immutable) */ __webpack_exports__["polyIn"] = polyIn;
/* harmony export (immutable) */ __webpack_exports__["polyOut"] = polyOut;
/* harmony export (immutable) */ __webpack_exports__["polyInOut"] = polyInOut;
/* harmony export (immutable) */ __webpack_exports__["polyIn3"] = polyIn3;
/* harmony export (immutable) */ __webpack_exports__["polyOut3"] = polyOut3;
/* harmony export (immutable) */ __webpack_exports__["polyInOut3"] = polyInOut3;
/* harmony export (immutable) */ __webpack_exports__["expIn"] = expIn;
/* harmony export (immutable) */ __webpack_exports__["expOut"] = expOut;
/* harmony export (immutable) */ __webpack_exports__["expInOut"] = expInOut;
/* harmony export (immutable) */ __webpack_exports__["sinIn"] = sinIn;
/* harmony export (immutable) */ __webpack_exports__["sinOut"] = sinOut;
/* harmony export (immutable) */ __webpack_exports__["sinInOut"] = sinInOut;
/* harmony export (immutable) */ __webpack_exports__["cubicIn"] = cubicIn;
/* harmony export (immutable) */ __webpack_exports__["cubicOut"] = cubicOut;
/* harmony export (immutable) */ __webpack_exports__["cubicInOut"] = cubicInOut;
/* harmony export (immutable) */ __webpack_exports__["circleIn"] = circleIn;
/* harmony export (immutable) */ __webpack_exports__["circleOut"] = circleOut;
/* harmony export (immutable) */ __webpack_exports__["circleInOut"] = circleInOut;
/* harmony export (immutable) */ __webpack_exports__["bounceIn"] = bounceIn;
/* harmony export (immutable) */ __webpack_exports__["bounceOut"] = bounceOut;
/* harmony export (immutable) */ __webpack_exports__["bounceInOut"] = bounceInOut;
/* harmony export (immutable) */ __webpack_exports__["elasticIn"] = elasticIn;
/* harmony export (immutable) */ __webpack_exports__["elasticOut"] = elasticOut;
/* harmony export (immutable) */ __webpack_exports__["elasticInOut"] = elasticInOut;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_Math__ = __webpack_require__(2);
/**
 * A collection of easing functions
 *
 * Parts of this collection are taken from D3.js library (https://d3js.org/)
 */
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

/**
 * The functions below are from D3.js library (https://d3js.org/)
 *
 * ----------------------------------------------------------------------------
 * Copyright 2017 Mike Bostock
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 *    contributors may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * ----------------------------------------------------------------------------
 * @hidden
 */
/**
 * ============================================================================
 * LINEAR FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Easing function: "linear".
 */
function linear(t) {
    return +t;
}
/**
 * Easing function: "quadIn".
 */
function quadIn(t) {
    return t * t;
}
/**
 * Easing function: "quadOut".
 */
function quadOut(t) {
    return t * (2 - t);
}
/**
 * Easing function: "quadInOut".
 */
function quadInOut(t) {
    return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
}
/**
 * Easing function: "polyIn".
 */
function polyIn(t, e) {
    return Math.pow(t, e);
}
/**
 * Easing function: "polyOut".
 */
function polyOut(t, e) {
    return 1 - Math.pow(1 - t, e);
}
/**
 * Easing function: "polyInOut".
 */
function polyInOut(t, e) {
    return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
}
/**
 * Easing function: "polyIn3".
 */
function polyIn3(t) {
    return polyIn(t, 3);
}
/**
 * Easing function: "polyOut3".
 */
function polyOut3(t) {
    return polyOut(t, 3);
}
/**
 * Easing function: "polyInOut3".
 */
function polyInOut3(t) {
    return polyInOut(t, 3);
}
/**
 * ============================================================================
 * EXPONENTIAL FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Easing function: "expIn".
 */
function expIn(t) {
    return Math.pow(2, 10 * t - 10);
}
/**
 * Easing function: "expOut".
 */
function expOut(t) {
    return 1 - Math.pow(2, -10 * t);
}
/**
 * Easing function: "expInOut".
 */
function expInOut(t) {
    return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;
}
/**
 * ============================================================================
 * SINE FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Easing function: "sinIn".
 */
function sinIn(t) {
    return 1 - Math.cos(t * __WEBPACK_IMPORTED_MODULE_0__utils_Math__["HALFPI"]);
}
/**
 * Easing function: "sinOut".
 */
function sinOut(t) {
    return Math.sin(t * __WEBPACK_IMPORTED_MODULE_0__utils_Math__["HALFPI"]);
}
/**
 * Easing function: "sinInOut".
 */
function sinInOut(t) {
    return (1 - Math.cos(__WEBPACK_IMPORTED_MODULE_0__utils_Math__["PI"] * t)) / 2;
}
/**
 * ============================================================================
 * CUBIC FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Easing function: "cubicIn".
 */
function cubicIn(t) {
    return t * t * t;
}
/**
 * Easing function: "cubicOut".
 */
function cubicOut(t) {
    return --t * t * t + 1;
}
/**
 * Easing function: "cubicInOut".
 */
function cubicInOut(t) {
    return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}
/**
 * ============================================================================
 * CIRCLE FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Easing function: "circleIn".
 */
function circleIn(t) {
    return 1 - Math.sqrt(1 - t * t);
}
/**
 * Easing function: "circleOut".
 */
function circleOut(t) {
    return Math.sqrt(1 - --t * t);
}
/**
 * Easing function: "circleInOut".
 */
function circleInOut(t) {
    return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
}
/**
 * ============================================================================
 * BOUNCE FUNCTIONS
 * ============================================================================
 * @hidden
 */
var b1 = 4 / 11, b2 = 6 / 11, b3 = 8 / 11, b4 = 3 / 4, b5 = 9 / 11, b6 = 10 / 11, b7 = 15 / 16, b8 = 21 / 22, b9 = 63 / 64, b0 = 1 / b1 / b1;
/**
 * Easing function: "bounceIn".
 */
function bounceIn(t) {
    return 1 - bounceOut(1 - t);
}
/**
 * Easing function: "bounceOut".
 */
function bounceOut(t) {
    return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
}
/**
 * Easing function: "bounceInOut".
 */
function bounceInOut(t) {
    return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
}
/**
 * ============================================================================
 * ELASTIC FUNCTIONS
 * ============================================================================
 * @hidden
 */
var tau = 2 * Math.PI;
var amplitude = 1;
var period = 0.3 / tau;
var s = Math.asin(1 / amplitude) * period;
/**
 * Easing function: "elasticIn".
 *
 * @function elasticIn
 * @param {number}  a  Amplitude
 * @param {number}  p  period
 */
function elasticIn(t) {
    return amplitude * Math.pow(2, 10 * --t) * Math.sin((s - t) / period);
}
/**
 * Easing function: "elasticOut".
 *
 * @function elasticOut
 * @param {number}  a  Amplitude
 * @param {number}  p  period
 */
function elasticOut(t) {
    return 1 - amplitude * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / period);
}
/**
 * Easing function: "elasticInOut".
 *
 * @function elasticInOut
 * @param {number}  a  Amplitude
 * @param {number}  p  period
 */
function elasticInOut(t) {
    return ((t = t * 2 - 1) < 0
        ? amplitude * Math.pow(2, 10 * t) * Math.sin((s - t) / period)
        : 2 - amplitude * Math.pow(2, -10 * t) * Math.sin((s + t) / period)) / 2;
}
//# sourceMappingURL=Ease.js.map

/***/ }),
/* 26 */,
/* 27 */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),
/* 28 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Filter; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__System__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Animation__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Object__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Iterator__ = __webpack_require__(3);
/**
 * This module contains a base class for an SVG filter.
 *
 * Filters can be used to decorate, change and transform just about any DOM
 * element.
 *
 * A Filter works by applying one or more effects (primitives) to SVG element.
 *
 * For more information on how SVG filters work, refer to
 * [this MDN tutorial](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/SVG_Filters_Tutorial).
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */






;
/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Base filter class.
 *
 * This class while can be instantiated will not do anything. It is just a base
 * functionality for any other "real" filters to extend.
 *
 * Filters can be used to decorate, change and transform just about any DOM
 * element.
 *
 * A Filter works by applying one or more effects (primitives) to SVG element.
 *
 * For more information on how SVG filters work, refer to
 * [this MDN tutorial](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/SVG_Filters_Tutorial).
 *
 * @todo Example
 */
var Filter = /** @class */ (function (_super) {
    __extends(Filter, _super);
    /**
     * Constructor
     */
    function Filter() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * A storage for Filter property/value pairs.
         *
         * @ignore Exclude from docs
         * @see {@link FilterProperties}
         * @type {FilterProperties}
         */
        _this.properties = {};
        /**
         * Identifies if this object is a "template" and should not be treated as
         * real object that is drawn or actually used in the chart.
         *
         * @type {boolean}
         */
        _this.isTemplate = false;
        /**
         * [_scale description]
         *
         * @todo Description
         * @type {number}
         */
        _this._scale = 1;
        /**
         * [_nonScaling description]
         *
         * @todo Description
         * @type {boolean}
         */
        _this._nonScaling = true;
        _this.className = "Filter";
        // Create a list to hold primitives (effect elements)
        _this.filterPrimitives = new __WEBPACK_IMPORTED_MODULE_3__utils_List__["b" /* List */]();
        // Automatically add added primitives to `_disposers` so they are discarded
        // when Filter object is destroyed (disposed)
        _this.filterPrimitives.events.on("insert", function (ev) {
            _this._disposers.push(ev.newValue);
        });
        // Set default dimensions
        _this.width = 120;
        _this.height = 120;
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Appends actual filter elements to the filter group.
     *
     * @ignore Exclude from docs
     * @param {Group} filterElement An SVG `<group>` element to add filter element to
     */
    Filter.prototype.appendPrimitives = function (filterElement) {
        __WEBPACK_IMPORTED_MODULE_5__utils_Iterator__["each"](this.filterPrimitives.iterator(), function (filterPrimitive) {
            filterElement.add(filterPrimitive);
        });
    };
    /**
     * Uses Transitions filter's values from current to target. This is used to
     * smoothly appear filter, rather than it pop into effect.
     *
     * @ignore Exclude from docs
     * @param  {IAnimationOptions[] | IAnimationOptions}  animationOptions  Animation options
     * @param  {number}                                   duration          Duration in milliseconds
     * @param  {(number) => number}                       easing            Easing function
     * @return {Animation}                                                  Animation instance
     */
    Filter.prototype.animate = function (animationOptions, duration, easing) {
        var animation = new __WEBPACK_IMPORTED_MODULE_2__utils_Animation__["a" /* Animation */](this, animationOptions, duration, easing).start();
        return animation;
    };
    Object.defineProperty(Filter.prototype, "width", {
        /**
         * @return {number} Width (px)
         */
        get: function () {
            return this.properties["width"];
        },
        /**
         * Width of the filter element in pixels.
         *
         * @default 120
         * @param {number} value Width (px)
         */
        set: function (value) {
            this.properties["width"] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Filter.prototype, "height", {
        /**
         * @return {number} Height
         */
        get: function () {
            return this.properties["height"];
        },
        /**
         * Height of the filter element in pixels.
         *
         * @default 120
         * @param {number} value Height (px)
         */
        set: function (value) {
            this.properties["height"] = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Copies properties from another [[Filter]] object.
     *
     * @param {Filter} filter Source [[Filter]] object
     */
    Filter.prototype.copyFrom = function (filter) {
        var _this = this;
        _super.prototype.copyFrom.call(this, filter);
        __WEBPACK_IMPORTED_MODULE_4__utils_Object__["each"](filter.properties, function (key, value) {
            _this[key] = value;
        });
    };
    Object.defineProperty(Filter.prototype, "paper", {
        /**
         * @return {Paper} Paper
         */
        get: function () {
            if (this._paper) {
                return this._paper;
            }
            return Object(__WEBPACK_IMPORTED_MODULE_1__System__["b" /* getSystem */])().ghostPaper;
        },
        /**
         * Sets [[Paper]] instance to create filter's elements in.
         *
         * @ignore Exclude from docs
         * @param {Paper}  paper  Paper
         */
        set: function (paper) {
            if (this._paper != paper) {
                this._paper = paper;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Filter.prototype, "animations", {
        /**
         * All animations currently in play.
         *
         * @ignore Exclude from docs
         * @return {Array<Animation>} List of animations
         */
        get: function () {
            if (!this._animations) {
                this._animations = [];
                this._disposers.push(new __WEBPACK_IMPORTED_MODULE_2__utils_Animation__["b" /* AnimationDisposer */](this._animations));
            }
            return this._animations;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Filter.prototype, "scale", {
        /**
         * @ignore Exclude from docs
         */
        get: function () {
            return this._scale;
        },
        /**
         * [[Sprite]] uses this method to inform filter about it's scale.
         *
         * @ignore Exclude from docs
         */
        set: function (value) {
            this._scale = value;
            this.updateScale();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Updates filter properties which depend on scale.
     *
     * @ignore Exclude from docs
     */
    Filter.prototype.updateScale = function () {
        // Dummy method for extending classes to override.
    };
    Object.defineProperty(Filter.prototype, "nonScaling", {
        /**
         * @return {boolean} Non scaling?
         */
        get: function () {
            return this._nonScaling;
        },
        /**
         * If a filter is non scaling, it will look the same even if the sprite is
         * scaled, otherwise filter will scale together with a [[Sprite]].
         *
         * @default false
         * @param {boolean}  value  Non scaling?
         */
        set: function (value) {
            this._nonScaling = value;
            if (!value) {
                this._scale = 1;
            }
            this.updateScale();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Filter.prototype, "sprite", {
        /**
         * A target element this filter is currently attached to.
         *
         * We need to keep track of it because one filter can be used for just one
         * element, so we have to remove it from the old "parent" when attaching to
         * the new one.
         *
         * @ignore Exclude from docs
         * @param {Sprite}  value  Target element
         */
        set: function (value) {
            this.setSprite(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets filter's target element.
     *
     * @ignore Exclude from docs
     * @param {Sprite}  value  Element filter is being attached to
     */
    Filter.prototype.setSprite = function (value) {
        if (this._sprite && this._sprite != value) {
            this._sprite.filters.removeValue(this);
        }
        this._sprite = value;
    };
    return Filter;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["a" /* BaseObject */]));

//# sourceMappingURL=Filter.js.map

/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RoundedRectangle; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Type__ = __webpack_require__(1);
/**
 * Rounded rectangle module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Draws a rectangle with rounded corners.
 *
 * @see {@link IRoundedRectangleEvents} for a list of available events
 * @see {@link IRoundedRectangleAdapters} for a list of available Adapters
 */
var RoundedRectangle = /** @class */ (function (_super) {
    __extends(RoundedRectangle, _super);
    /**
     * Constructor
     */
    function RoundedRectangle() {
        var _this = _super.call(this) || this;
        _this.className = "RoundedRectangle";
        _this.element = _this.paper.add("path");
        _this.pixelPerfect = true;
        _this.cornerRadius(3, 3, 3, 3);
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the element.
     *
     * @ignore Exclude from docs
     */
    RoundedRectangle.prototype.draw = function () {
        _super.prototype.draw.call(this);
        var w = this.innerWidth;
        var h = this.innerHeight;
        if (__WEBPACK_IMPORTED_MODULE_3__utils_Type__["isNumber"](w) && __WEBPACK_IMPORTED_MODULE_3__utils_Type__["isNumber"](h)) {
            var maxcr = __WEBPACK_IMPORTED_MODULE_2__utils_Math__["min"](Math.abs(w / 2), Math.abs(h / 2));
            var crtl = __WEBPACK_IMPORTED_MODULE_2__utils_Math__["fitToRange"](this.cornerRadiusTopLeft, 0, maxcr);
            var crtr = __WEBPACK_IMPORTED_MODULE_2__utils_Math__["fitToRange"](this.cornerRadiusTopRight, 0, maxcr);
            var crbr = __WEBPACK_IMPORTED_MODULE_2__utils_Math__["fitToRange"](this.cornerRadiusBottomRight, 0, maxcr);
            var crbl = __WEBPACK_IMPORTED_MODULE_2__utils_Math__["fitToRange"](this.cornerRadiusBottomLeft, 0, maxcr);
            var lineT = "M" + crtl + ",0 L" + (w - crtr) + ",0";
            var lineB = " L" + crbl + "," + h;
            var lineL = " L0," + crtl;
            var lineR = " L" + w + "," + (h - crbr);
            var arcTR = " a" + crtr + "," + crtr + " 0 0 1 " + crtr + "," + crtr;
            var arcBR = " a" + crbr + "," + crbr + " 0 0 1 -" + crbr + "," + crbr;
            var arcBL = " a" + crbl + "," + crbl + " 0 0 1 -" + crbl + ",-" + crbl;
            var arcTL = " a" + crtl + "," + crtl + " 0 0 1 " + crtl + ",-" + crtl;
            var path = lineT + arcTR + lineR + arcBR + lineB + arcBL + lineL + arcTL + " Z";
            this.element.attr({ "d": path });
        }
    };
    /**
     * Sets radius for all four corners at ones.
     *
     * All numbers are in pixels.
     *
     * @param {number}  tl  Top-left corner
     * @param {number}  tr  Top-right corner
     * @param {number}  bl  Bottom-left corner
     * @param {number}  br  Bottom-right corner
     */
    RoundedRectangle.prototype.cornerRadius = function (tl, tr, bl, br) {
        this.cornerRadiusTopLeft = tl;
        this.cornerRadiusTopRight = tr;
        this.cornerRadiusBottomLeft = bl;
        this.cornerRadiusBottomRight = br;
    };
    Object.defineProperty(RoundedRectangle.prototype, "cornerRadiusTopLeft", {
        /**
         * @return {number} Radius (px)
         */
        get: function () {
            return this.getPropertyValue("cornerRadiusTopLeft");
        },
        /**
         * Radius of the top-left corner in pixels.
         *
         * @default 3
         * @param {number}  value  Radius (px)
         */
        set: function (value) {
            this.setPropertyValue("cornerRadiusTopLeft", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RoundedRectangle.prototype, "cornerRadiusTopRight", {
        /**
         * @return {number} Radius (px)
         */
        get: function () {
            return this.getPropertyValue("cornerRadiusTopRight");
        },
        /**
         * Radius of the top-right corner in pixels.
         *
         * @default 3
         * @param {number}  value  Radius (px)
         */
        set: function (value) {
            this.setPropertyValue("cornerRadiusTopRight", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RoundedRectangle.prototype, "cornerRadiusBottomRight", {
        /**
         * @return {number} Radius (px)
         */
        get: function () {
            return this.getPropertyValue("cornerRadiusBottomRight");
        },
        /**
         * Radius of the bottom-right corner in pixels.
         *
         * @default 3
         * @param {number}  value  Radius (px)
         */
        set: function (value) {
            this.setPropertyValue("cornerRadiusBottomRight", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RoundedRectangle.prototype, "cornerRadiusBottomLeft", {
        /**
         * @return {number} Radius (px)
         */
        get: function () {
            return this.getPropertyValue("cornerRadiusBottomLeft");
        },
        /**
         * Radius of the bottom-left corner in pixels.
         *
         * @default 3
         * @param {number}  value  Radius (px)
         */
        set: function (value) {
            this.setPropertyValue("cornerRadiusBottomLeft", value, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Measures the element.
     *
     * @ignore Exclude from docs
     */
    RoundedRectangle.prototype.measureElement = function () {
        this.bbox = { x: 0, y: 0, width: this.innerWidth, height: this.innerHeight };
    };
    return RoundedRectangle;
}(__WEBPACK_IMPORTED_MODULE_0__Sprite__["a" /* Sprite */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__Registry__["b" /* registry */].registeredClasses["RoundedRectangle"] = RoundedRectangle;
//# sourceMappingURL=RoundedRectangle.js.map

/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EventDispatcher; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return TargetedEventDispatcher; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Disposer__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Array__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AsyncPending__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Type__ = __webpack_require__(1);
/**
 * Event Dispatcher module is used for registering listeners and dispatching
 * events across amCharts system.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/*export interface IEventDispatcher<T> {
    isDisposed(): boolean;
    dispose(): void;
    hasListeners(): boolean;
    enable(): void;
    disable(): void;
    enableType<Key extends keyof T>(type: Key): void;
    disableType<Key extends keyof T>(type: Key, amount?: number): void;
    isEnabled<Key extends keyof T>(type: Key): boolean;
    has<C, Key extends keyof T>(type: Key, callback?: (this: C, event: T[Key]) => void, context?: C): boolean;
    dispatchImmediately<Key extends keyof T>(type: Key, event: T[Key]): void;
    dispatch<Key extends keyof T>(type: Key, event: T[Key]): void;
    onAll<C, Key extends keyof T>(callback: (this: C, type: Key, event: T[Key]) => void, context?: C): IDisposer;
    on<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): IDisposer;
    once<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): IDisposer;
    off<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): void;
    off<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): void;
    copyFrom(source: this): void;
}*/
/**
 * Universal Event Dispatcher.
 *
 * @important
 */
var EventDispatcher = /** @class */ (function () {
    /**
     * Constructor
     */
    function EventDispatcher() {
        this._listeners = [];
        this._killed = [];
        this._disabled = {};
        this._iterating = 0;
        this._enabled = true;
        this._disposed = false;
    }
    /**
     * Returns if this object has been already disposed.
     *
     * @return {boolean} Disposed?
     */
    EventDispatcher.prototype.isDisposed = function () {
        return this._disposed;
    };
    /**
     * Dispose (destroy) this object.
     */
    EventDispatcher.prototype.dispose = function () {
        if (!this._disposed) {
            this._disposed = true;
            var a = this._listeners;
            this._iterating = 1;
            this._listeners = null;
            this._disabled = null;
            try {
                __WEBPACK_IMPORTED_MODULE_1__Array__["c" /* each */](a, function (x) {
                    x.disposer.dispose();
                });
            }
            finally {
                this._killed = null;
                this._iterating = null;
            }
        }
    };
    /**
     * Checks if this particular event dispatcher has any listeners set.
     *
     * @return {boolean} Has listeners?
     */
    EventDispatcher.prototype.hasListeners = function () {
        return this._listeners.length !== 0;
    };
    /**
     * Enable dispatching of events if they were previously disabled by
     * `disable()`.
     */
    EventDispatcher.prototype.enable = function () {
        this._enabled = true;
    };
    /**
     * Disable dispatching of events until re-enabled by `enable()`.
     */
    EventDispatcher.prototype.disable = function () {
        this._enabled = false;
    };
    /**
     * Enable dispatching particular event, if it was disabled before by
     * `disableType()`.
     *
     * @param {Key} type Event type
     */
    EventDispatcher.prototype.enableType = function (type) {
        delete this._disabled[type];
    };
    /**
     * Disable dispatching of events for a certain event type.
     *
     * Optionally, can set how many dispatches to skip before automatically
     * re-enabling the dispatching.
     *
     * @param {Key}                type    Event type
     * @param {number = Infinity}  amount  Number of event dispatches to skip
     */
    EventDispatcher.prototype.disableType = function (type, amount) {
        if (amount === void 0) { amount = Infinity; }
        this._disabled[type] = amount;
    };
    /**
     * Removes listener from dispatcher.
     *
     * Will throw an exception if such listener does not exists.
     *
     * @param {EventListener<T>} listener Listener to remove
     */
    EventDispatcher.prototype._removeListener = function (listener) {
        if (this._iterating === 0) {
            var index = this._listeners.indexOf(listener);
            if (index === -1) {
                throw new Error("Invalid state: could not remove listener");
            }
            this._listeners.splice(index, 1);
        }
        else {
            this._killed.push(listener);
        }
    };
    /**
     * Removes existing listener by certain parameters.
     *
     * @param {boolean}     once      Listener's once setting
     * @param {Key | null}  type      Listener's type
     * @param {A}           callback  Callback function
     * @param {B}           context   Callback context
     */
    EventDispatcher.prototype._removeExistingListener = function (once, type, callback, context) {
        if (this._disposed) {
            throw new Error("EventDispatcher is disposed");
        }
        var index = __WEBPACK_IMPORTED_MODULE_1__Array__["e" /* findIndex */](this._listeners, function (info) {
            return info.once === once && // TODO is this correct ?
                info.type === type &&
                info.callback === callback &&
                info.context === context;
        });
        if (index !== -1) {
            this._listeners[index].disposer.dispose();
        }
    };
    /**
     * Checks if dispatching for particular event type is enabled.
     *
     * @param  {Key}      type  Event type
     * @return {boolean}        Enabled?
     */
    EventDispatcher.prototype.isEnabled = function (type) {
        if (this._disposed) {
            throw new Error("EventDispatcher is disposed");
        }
        // TODO is this check correct ?
        return this._enabled && this._disabled[type] == null && this._listeners.length > 0;
    };
    /**
     * Checks if there's already a listener with specific parameters.
     *
     * @param   {Key | null}  type      Listener's type
     * @param   {A}           callback  Callback function
     * @param   {B}           context   Callback context
     * @return {boolean}                Has listener?
     */
    EventDispatcher.prototype.has = function (type, callback, context) {
        var index = __WEBPACK_IMPORTED_MODULE_1__Array__["e" /* findIndex */](this._listeners, function (info) {
            return info.once !== true && // Ignoring "once" listeners
                info.type === type &&
                (!callback || info.callback === callback) &&
                info.context === context;
        });
        return index !== -1;
    };
    /**
     * Checks whether event of the particular type should be dispatched.
     *
     * @param  {Key}   type  Event type
     * @return {boolean}        Dispatch?
     */
    EventDispatcher.prototype._shouldDispatch = function (type) {
        if (this._disposed) {
            throw new Error("EventDispatcher is disposed");
        }
        var count = this._disabled[type];
        if (!__WEBPACK_IMPORTED_MODULE_3__Type__["isNumber"](count)) {
            return this._enabled;
        }
        else {
            if (count <= 1) {
                delete this._disabled[type];
            }
            else {
                --this._disabled[type];
            }
            return false;
        }
    };
    /**
     * [_eachListener description]
     *
     * All of this extra code is needed when a listener is removed while iterating
     *
     * @todo Description
     * @param {EventListener<T>) => void} fn [description]
     */
    EventDispatcher.prototype._eachListener = function (fn) {
        var _this = this;
        ++this._iterating;
        try {
            __WEBPACK_IMPORTED_MODULE_1__Array__["c" /* each */](this._listeners, fn);
        }
        finally {
            --this._iterating;
            // TODO should this be inside or outside the finally ?
            if (this._iterating === 0 && this._killed.length !== 0) {
                // Remove killed listeners
                __WEBPACK_IMPORTED_MODULE_1__Array__["c" /* each */](this._killed, function (killed) {
                    _this._removeListener(killed);
                });
                this._killed.length = 0;
            }
        }
    };
    /**
     * Dispatches an event immediately without waiting for next cycle.
     *
     * @param {Key}     type   Event type
     * @param {T[Key]}  event  Event object
     * @todo automatically add in type and target properties if they are missing
     */
    EventDispatcher.prototype.dispatchImmediately = function (type, event) {
        if (this._shouldDispatch(type)) {
            // TODO check if it's faster to use an object of listeners rather than a single big array
            // TODO if the function throws, maybe it should keep going ?
            this._eachListener(function (listener) {
                if (!listener.killed && (listener.type === null || listener.type === type)) {
                    listener.dispatch(type, event);
                }
            });
        }
    };
    /**
     * Shelves the event to be dispatched within next update cycle.
     *
     * @param {Key}     type   Event type
     * @param {T[Key]}  event  Event object
     * @todo automatically add in type and target properties if they are missing
     */
    EventDispatcher.prototype.dispatch = function (type, event) {
        if (this._shouldDispatch(type)) {
            this._eachListener(function (listener) {
                // TODO check if it's faster to use an object of listeners rather than a single big array
                if (!listener.killed && (listener.type === null || listener.type === type)) {
                    // TODO if the function throws, maybe it should keep going ?
                    // TODO dispatch during the update cycle, rather than using whenIdle
                    __WEBPACK_IMPORTED_MODULE_2__AsyncPending__["e" /* whenIdle */](function () {
                        if (!listener.killed) {
                            listener.dispatch(type, event);
                        }
                    });
                }
            });
        }
    };
    /**
     * Creates, catalogs and returns an [[EventListener]].
     *
     * Event listener can be disposed.
     *
     * @param   {boolean}     once      Listener's once setting
     * @param   {Key | null}  type      Listener's type
     * @param   {A}           callback  Callback function
     * @param   {B}           context   Callback context
     * @param   {function}    dispatch
     * @returns {EventListener} An event listener
     */
    EventDispatcher.prototype._on = function (once, type, callback, context, dispatch) {
        var _this = this;
        if (this._disposed) {
            throw new Error("EventDispatcher is disposed");
        }
        this._removeExistingListener(once, type, callback, context);
        var info = {
            type: type,
            callback: callback,
            context: context,
            dispatch: dispatch,
            killed: false,
            once: once,
            disposer: new __WEBPACK_IMPORTED_MODULE_0__Disposer__["b" /* Disposer */](function () {
                info.killed = true;
                _this._removeListener(info);
            })
        };
        this._listeners.push(info);
        return info;
    };
    /**
     * Creates an event listener to be invoked on **any** event.
     *
     * @param   {A}           callback  Callback function
     * @param   {B}           context   Callback context
     * @returns {IDisposer}             A disposable event listener
     * @todo what if `listen` is called on the same function twice ?
     */
    EventDispatcher.prototype.onAll = function (callback, context) {
        return this._on(false, null, callback, context, function (type, event) { return callback.call(context, type, event); }).disposer;
    };
    /**
     * Creates an event listener to be invoked on a specific event type.
     *
     * ```TypeScript
     * series.events.on("hidden", (ev) => {
     *   console.log("Series hidden: " + ev.target.name);
     * }, this);
     * ```
     * ```JavaScript
     * series.events.on("hidden", function(ev) {
     *   console.log("Series hidden: " + ev.target.name);
     * }, this);
     * ```
     * ```JSON
     * {
     *   // ...
     *   "series": [{
     *     // ...
     *     "events": {
     *     	"hidden": function(ev) {
     *     	  console.log("Series hidden: " + ev.target.name);
     *     	}
     *     }
     *   }]
     * }
     * ```
     *
     * The above will invoke our custom event handler whenever series we put
     * event on is hidden.
     *
     * @param   {Key | null}  type      Listener's type
     * @param   {A}           callback  Callback function
     * @param   {B}           context   Callback context
     * @returns {IDisposer}             A disposable event listener
     * @todo what if `listen` is called on the same function twice ?
     */
    EventDispatcher.prototype.on = function (type, callback, context) {
        return this._on(false, type, callback, context, function (type, event) { return callback.call(context, event); }).disposer;
    };
    /**
     * Creates an event listener to be invoked on a specific event type once.
     *
     * Once the event listener is invoked, it is automatically disposed.
     *
     * ```TypeScript
     * series.events.on("hidden", (ev) => {
     *   console.log("Series hidden: " + ev.target.name);
     * }, this);
     * ```
     * ```JavaScript
     * series.events.on("hidden", function(ev) {
     *   console.log("Series hidden: " + ev.target.name);
     * }, this);
     * ```
     * ```JSON
     * {
     *   // ...
     *   "series": [{
     *     // ...
     *     "events": {
     *     	"hidden": function(ev) {
     *     	  console.log("Series hidden: " + ev.target.name);
     *     	}
     *     }
     *   }]
     * }
     * ```
     *
     * The above will invoke our custom event handler the first time series we
     * put event on is hidden.
     *
     * @param   {Key | null}  type      Listener's type
     * @param   {A}           callback  Callback function
     * @param   {B}           context   Callback context
     * @returns {IDisposer}             A disposable event listener
     * @todo what if `listen` is called on the same function twice ?
     */
    EventDispatcher.prototype.once = function (type, callback, context) {
        var x = this._on(true, type, callback, context, function (type, event) {
            x.disposer.dispose();
            callback.call(context, event);
        });
        // TODO maybe this should return a different Disposer ?
        return x.disposer;
    };
    /**
     * Removes the event listener with specific parameters.
     *
     * @param   {Key | null}  type      Listener's type
     * @param   {A}           callback  Callback function
     * @param   {B}           context   Callback context
     */
    EventDispatcher.prototype.off = function (type, callback, context) {
        this._removeExistingListener(false, type, callback, context);
    };
    /**
     * Copies all dispatcher parameters, including listeners, from another event
     * dispatcher.
     *
     * @param {this} source Source event dispatcher
     */
    EventDispatcher.prototype.copyFrom = function (source) {
        var _this = this;
        if (this._disposed) {
            throw new Error("EventDispatcher is disposed");
        }
        if (source === this) {
            throw new Error("Cannot copyFrom the same TargetedEventDispatcher");
        }
        __WEBPACK_IMPORTED_MODULE_1__Array__["c" /* each */](source._listeners, function (x) {
            // TODO is this correct ?
            if (!x.killed) {
                if (x.type === null) {
                    _this.onAll(x.callback, x.context);
                }
                else if (x.once) {
                    _this.once(x.type, x.callback, x.context);
                }
                else {
                    _this.on(x.type, x.callback, x.context);
                }
            }
        });
    };
    return EventDispatcher;
}());

/**
 * A version of the [[EventDispatcher]] that dispatches events for a specific
 * target object.
 *
 * @type {[type]}
 * @important
 */
var TargetedEventDispatcher = /** @class */ (function (_super) {
    __extends(TargetedEventDispatcher, _super);
    /**
     * Constructor
     *
     * @param {Target} target Event dispatcher target
     */
    function TargetedEventDispatcher(target) {
        var _this = _super.call(this) || this;
        _this.target = target;
        return _this;
    }
    /**
     * Copies all dispatcher parameters, including listeners, from another event
     * dispatcher.
     *
     * @param {this} source Source event dispatcher
     */
    TargetedEventDispatcher.prototype.copyFrom = function (source) {
        var _this = this;
        if (this._disposed) {
            throw new Error("EventDispatcher is disposed");
        }
        if (source === this) {
            throw new Error("Cannot copyFrom the same TargetedEventDispatcher");
        }
        __WEBPACK_IMPORTED_MODULE_1__Array__["c" /* each */](source._listeners, function (x) {
            // TODO very hacky
            if (x.context === source.target) {
                return;
            }
            // TODO is this correct ?
            if (!x.killed) {
                if (x.type === null) {
                    _this.onAll(x.callback, x.context);
                }
                else if (x.once) {
                    _this.once(x.type, x.callback, x.context);
                }
                else {
                    _this.on(x.type, x.callback, x.context);
                }
            }
        });
    };
    return TargetedEventDispatcher;
}(EventDispatcher));

//# sourceMappingURL=EventDispatcher.js.map

/***/ }),
/* 31 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Language; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Adapter__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Array__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Type__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__lang_en__ = __webpack_require__(202);
/**
 * Language module contains everything related to language-specific operations:
 * * Translating prompts
 * * Translating functions
 * * Date format localizations
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





;
;
/**
 * Handles all language-related tasks, like loading and storing translations,
 * translating prompts, lists of prompts and even functions.
 *
 * Almost every object in amCharts4 universe will have a `language` property,
 * which can be accessed for prompt translation.
 *
 * @see {@link ILanguageAdapters} for a list of available Adapters
 * @todo Make prompt keys case-insensitive
 * @important
 */
var Language = /** @class */ (function (_super) {
    __extends(Language, _super);
    /**
     * Constructor
     */
    function Language() {
        var _this = _super.call(this) || this;
        /**
         * Adapter.
         *
         * @type {Adapter<this, this["_adapter"]>}
         */
        _this.adapter = new __WEBPACK_IMPORTED_MODULE_1__Adapter__["a" /* Adapter */](_this);
        /**
         * Current locale.
         *
         * @type {ILocale}
         */
        _this._locale = __WEBPACK_IMPORTED_MODULE_4__lang_en__["a" /* default */];
        /**
         * Default locale. A locale to fall back to if none is specified, or
         * if there's no translation for the prompt for the current language.
         *
         * @type {ILocaleDefault}
         */
        _this._defaultLocale = __WEBPACK_IMPORTED_MODULE_4__lang_en__["a" /* default */];
        _this.className = "Language";
        _this.applyTheme();
        return _this;
    }
    /**
     * Returns locale that is currently used.
     *
     * @param  {ILocale}  locale  Force locale. Will use current language if not set.
     * @return {string}           Locale
     */
    Language.prototype.getLocale = function (locale) {
        if (locale == null) {
            locale = this._locale;
        }
        return this.adapter.apply("locale", {
            locale: locale
        }).locale;
    };
    /**
     * Retruns the translation of the string.
     *
     * If the translation is empty, it will return untranslated prompt.
     *
     * Third parameter and up are strings that can be used to replace "%X"
     * placeholders in prompt.
     *
     * E.g.:
     *
     * ```TypeScript
     * // Results in "This is a first translation test"
     * chart.language.translate("This is a %1 translation %2", null, "first", "test");
     * ```
     * ```JavaScriptScript
     * // Results in "This is a first translation test"
     * chart.language.translate("This is a %1 translation %2", null, "first", "test");
     * ```
     *
     * @param  {Key}            prompt   A string to translate
     * @param  {ILocale}        locale   Force translation into specific locale, e.g. fr_FR
     * @param  {Array<string>}  ...rest  Parameters to replace in string
     * @return {string}                  Translation
     */
    Language.prototype.translate = function (prompt, locale) {
        var rest = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            rest[_i - 2] = arguments[_i];
        }
        // Get langauge
        locale = this.getLocale(locale);
        // Init translation
        var translation = prompt;
        // Get translations for the locale
        var translations = this.getTranslations(locale);
        var value = translations[prompt];
        // Try to look for the translation
        if (__WEBPACK_IMPORTED_MODULE_3__Type__["hasValue"](value)) {
            // It might be an empty string
            translation = value || prompt;
            // Try to look in default language
        }
        else if (locale !== this._defaultLocale) {
            return this.translate.apply(this, __spread([prompt, this._defaultLocale], rest));
        }
        // Replace %1, %2, etc params
        if (rest.length) {
            for (var len = rest.length, i = 0; i < len; ++i) {
                translation = translation.split("%" + (i + 1)).join(rest[i]);
            }
        }
        // Return the translation
        return this.adapter.apply("translate", {
            translation: translation,
            locale: locale
        }).translation;
    };
    /**
     * Translates prompt.
     *
     * If translation is empty, it will return empty string, which is a different
     * behavior than that of regular `translate`.
     *
     * @param  {Key}            prompt   A string to translate
     * @param  {ILocale}        locale   Force translation into specific locale, e.g. fr_FR
     * @param  {Array<string>}  ...rest  Parameters to replace in string
     * @return {string}                  Translation
     */
    Language.prototype.translateEmpty = function (prompt, locale) {
        var rest = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            rest[_i - 2] = arguments[_i];
        }
        var translation = this.translate.apply(this, __spread([prompt, locale], rest));
        return translation == prompt ? "" : translation;
    };
    /**
     * Translates a function.
     *
     * This method will return a function reference, but will not run it. It's
     * up to the caller script to run the function.
     *
     * @param  {Key}                    prompt  A function id to translate
     * @param  {ILocale}                locale  Force translation into specific locale. e.g. fr_FR
     * @return {ILocaleFunctions[Key]}          A language-specific version of the function
     * @todo Apply adapter
     */
    Language.prototype.translateFunc = function (prompt, locale) {
        // Get langauge
        locale = this.getLocale(locale);
        // Get translations for the locale
        var translations = this.getTranslations(locale);
        var value = translations[prompt];
        // Try to look for the translation
        if (value != null) {
            return value;
        }
        // Try to look in default language
        if (locale !== this._defaultLocale) {
            return this.translateFunc(prompt, this._defaultLocale);
        }
        // Fail - return empty function
        return function () {
            return "";
        };
    };
    /**
     * Translates a list of prompts in one go.
     *
     * @param  {Array<Key>}     list    An array of strings to translate
     * @param  {ILocale}        locale  Force translation into specific locale. e.g. fr_FR
     * @return {Array<string>}          An array of translated strings in the same order as source list
     */
    Language.prototype.translateAll = function (list, locale) {
        var _this = this;
        // Translate all items in the list
        if (!this.isDefault()) {
            return __WEBPACK_IMPORTED_MODULE_2__Array__["i" /* map */](list, function (x) { return _this.translate(x, locale); });
        }
        else {
            return list;
        }
    };
    /**
     * Returns `true` if the currently selected locale is a default locale.
     *
     * @return {boolean} `true` if locale is default; `false` if it is not.
     */
    Language.prototype.isDefault = function () {
        return this._defaultLocale === this._locale;
    };
    Object.defineProperty(Language.prototype, "locale", {
        /**
         * @return {ILocale} Locale definition
         */
        get: function () {
            return this._locale;
        },
        /**
         * Current locale.
         *
         * @param {ILocale}  value  Locale definition (translations)
         */
        set: function (value) {
            if (this._locale != value) {
                this._locale = value;
                if (this.events.isEnabled("localechanged")) {
                    var event_1 = {
                        type: "localechanged",
                        locale: value,
                        target: this
                    };
                    this.events.dispatchImmediately("localechanged", event_1);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns translations for a given locale.
     *
     * @ignore
     * @deprecated
     * @param  {ILocale}        locale  Locale
     * @return {ILocale}        Translations
     */
    Language.prototype.getTranslations = function (locale) {
        return this.adapter.apply("translations", {
            translations: locale,
            locale: locale
        }).translations;
    };
    return Language;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["b" /* BaseObjectEvents */]));

//# sourceMappingURL=Language.js.map

/***/ }),
/* 32 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Component; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_SortedList__ = __webpack_require__(71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Dictionary__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__data_DataSource__ = __webpack_require__(130);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__responsive_Responsive__ = __webpack_require__(132);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__DataItem__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils_Array__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__utils_Ease__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__utils_Utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__utils_Object__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__utils_Type__ = __webpack_require__(1);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */















/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * A Component represents an independent functional element or control, that
 * can have it's own behavior, children, data, etc.
 *
 * A few examples of a Component: [[Legend]], [[Series]], [[Scrollbar]].
 *
 * @see {@link IComponentEvents} for a list of available events
 * @see {@link IComponentAdapters} for a list of available Adapters
 * @important
 */
var Component = /** @class */ (function (_super) {
    __extends(Component, _super);
    /**
     * Constructor
     */
    function Component() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * Holds data field names.
         *
         * Data fields define connection beween [[DataItem]] and actual properties
         * in raw data.
         *
         * @type {IComponentDataFields}
         */
        _this.dataFields = {};
        /**
         * A list of [[DataSource]] definitions of external data source.
         *
         * @ignore Exclude from docs
         * @type {Object}
         */
        _this._dataSources = {};
        /**
         * This is used when only new data is invalidated (if added using `addData`
         * method).
         *
         * @ignore Exclude from docs
         * @type {number}
         */
        _this._parseDataFrom = 0;
        /**
         *
         * @ignore Exclude from docs
         * @todo Description
         * @type {List<Component>}
         */
        _this._dataUsers = new __WEBPACK_IMPORTED_MODULE_1__utils_List__["b" /* List */]();
        /**
         * [_start description]
         *
         * @ignore Exclude from docs
         * @type {number}
         */
        _this._start = 0;
        /**
         * [_end description]
         *
         * @ignore Exclude from docs
         * @type {number}
         */
        _this._end = 1;
        /**
         * If set to `true`, changing data range in element will not trigger
         * `daterangechanged` event.
         *
         * @type {boolean}
         */
        _this.skipRangeEvent = false;
        /**
         * Whenever selected scope changes (chart is zoomed or panned), for example
         * by interaction from a Scrollbar, or API, a chart needs to reposition
         * its contents.
         *
         * `rangeChangeDuration` influences how this is performed.
         *
         * If set to zero (0), the change will happen instantenously.
         *
         * If set to non-zero value, the chart will gradually animate into new
         * position for the set amount of milliseconds.
         *
         * @default 0
         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations
         * @type {number}
         */
        _this.rangeChangeDuration = 0;
        /**
         * An easing function to use for range change animation.
         *
         * @see {@link Ease}
         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations
         * @type {function}
         */
        _this.rangeChangeEasing = __WEBPACK_IMPORTED_MODULE_10__utils_Ease__["cubicOut"];
        /**
         * A duration (ms) of each data parsing step. A Component parses its data in
         * chunks in order to avoid completely freezing the machine when large data
         * sets are used. This setting will control how many milliseconds should pass
         * when parsing data until parser stops for a brief moment to let other
         * processes catch up.
         *
         * @type {number}
         */
        _this.parsingStepDuration = 50;
        /**
         * [dataInvalid description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @type {boolean}
         */
        _this.dataInvalid = false;
        /**
         *
         * @ignore Exclude from docs
         */
        _this.rawDataInvalid = false;
        /**
         * [dataRangeInvalid description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @type {boolean}
         */
        _this.dataRangeInvalid = false;
        /**
         * [dataItemsInvalid description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @type {boolean}
         */
        _this.dataItemsInvalid = false;
        /**
         * If set to a non-zero number the element will "animate" data values of its
         * children.
         *
         * This will happen on first load and whenever data values change.
         *
         * Enabling interpolation will mean that elements will transit smoothly into
         * new values rather than updating instantly.
         *
         * @default 0
         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations
         * @type {number}
         */
        _this.interpolationDuration = 0;
        /**
         * An easing function to use for interpolating values when transiting from
         * one source value to another.
         *
         * @default cubicOut
         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations
         * @see {@link Ease}
         * @type {function}
         */
        _this.interpolationEasing = __WEBPACK_IMPORTED_MODULE_10__utils_Ease__["cubicOut"];
        /**
         * Indicates whether transition between data item's values should start and
         * play out all at once, or with a small delay (as defined by
         * `sequencedInterpolationDelay`) for each subsequent data item.
         *
         * @default true
         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations
         * @type {boolean}
         */
        _this.sequencedInterpolation = true;
        /**
         * A delay (ms) to wait between animating each subsequent data item's
         * interpolation animation.
         *
         * Relative only if `sequencedInterpolation = true`.
         *
         * @default 0
         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations
         * @type {number}
         */
        _this.sequencedInterpolationDelay = 0;
        /**
         * A progress (0-1) for the data validation process.
         *
         * @ignore Exclude from docs
         * @type {number}
         */
        _this.dataValidationProgress = 0;
        _this.className = "Component";
        _this.invalidateData();
        // Set up events
        _this.events.on("maxsizechanged", _this.invalidate, _this);
        // TODO what about remove ?
        _this.dataUsers.events.on("insert", _this.handleDataUserAdded, _this);
        // Set up disposers
        _this._disposers.push(new __WEBPACK_IMPORTED_MODULE_1__utils_List__["c" /* ListDisposer */](_this.dataItems));
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Returns a new/empty DataItem of the type appropriate for this object.
     *
     * @see {@link DataItem}
     * @return {DataItem} Data Item
     */
    Component.prototype.createDataItem = function () {
        return new __WEBPACK_IMPORTED_MODULE_6__DataItem__["a" /* DataItem */]();
    };
    /**
     * [handleDataUserAdded description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param {IListEvents<Component>["insert"]} event Event object
     */
    Component.prototype.handleDataUserAdded = function (event) {
        var dataUser = event.newValue;
        dataUser.dataProvider = this;
    };
    /**
     * [handleDataItemValueChange description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    Component.prototype.handleDataItemValueChange = function () {
        this.invalidateDataItems();
    };
    /**
     * [handleDataItemWorkingValueChange description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    Component.prototype.handleDataItemWorkingValueChange = function (event) {
    };
    /**
     * [handleDataItemWorkingLocationChange description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    Component.prototype.handleDataItemWorkingLocationChange = function (event) {
    };
    /**
     * [handleDataItemCalculatedValueChange description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    Component.prototype.handleDataItemCalculatedValueChange = function () {
    };
    /**
     * [handleDataItemPropertyChange description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    Component.prototype.handleDataItemPropertyChange = function () {
    };
    /**
     * Populates a [[DataItem]] width data from data source.
     *
     * Loops through all the fields and if such a field is found in raw data
     * object, a corresponding value on passed in `dataItem` is set.
     *
     * @ignore Exclude from docs
     * @param {Object} item
     */
    Component.prototype.processDataItem = function (dataItem, dataContext) {
        var _this = this;
        if (dataItem) {
            if (!dataContext) {
                dataContext = {};
            }
            // store reference to original data item
            dataItem.dataContext = dataContext;
            __WEBPACK_IMPORTED_MODULE_13__utils_Object__["each"](this.dataFields, function (key, fieldValue) {
                var fieldName = key;
                var value = dataContext[fieldValue];
                // Apply adapters to a retrieved value
                value = _this.adapter.apply("dataContextValue", {
                    field: fieldName,
                    value: value,
                    dataItem: dataItem
                }).value;
                if (dataItem.hasChildren[fieldName]) {
                    if (value) {
                        var children = new __WEBPACK_IMPORTED_MODULE_2__utils_SortedList__["b" /* OrderedListTemplate */](_this.createDataItem());
                        children.events.on("insert", _this.handleDataItemAdded, _this);
                        children.events.on("remove", _this.handleDataItemRemoved, _this);
                        for (var i = 0; i < value.length; i++) {
                            var rawDataItem = value[i];
                            var childDataItem = children.create();
                            childDataItem.parent = dataItem;
                            _this.processDataItem(childDataItem, rawDataItem);
                        }
                        var anyDataItem = dataItem;
                        anyDataItem[fieldName] = children;
                    }
                }
                else {
                    // data is converted to numbers/dates in each dataItem
                    if (__WEBPACK_IMPORTED_MODULE_14__utils_Type__["hasValue"](value)) {
                        dataItem[fieldName] = value;
                    }
                }
            });
            __WEBPACK_IMPORTED_MODULE_13__utils_Object__["each"](this.propertyFields, function (key, fieldValue) {
                var f = key;
                var value = dataContext[fieldValue];
                if (__WEBPACK_IMPORTED_MODULE_14__utils_Type__["hasValue"](value)) {
                    dataItem.setProperty(f, value);
                }
            });
            this._disposers.push(dataItem.events.on("valuechanged", this.handleDataItemValueChange, this));
            this._disposers.push(dataItem.events.on("workingvaluechanged", this.handleDataItemWorkingValueChange, this));
            this._disposers.push(dataItem.events.on("calculatedvaluechanged", this.handleDataItemCalculatedValueChange, this));
            this._disposers.push(dataItem.events.on("propertychanged", this.handleDataItemPropertyChange, this));
            this._disposers.push(dataItem.events.on("locationchanged", this.handleDataItemValueChange, this));
            this._disposers.push(dataItem.events.on("workinglocationchanged", this.handleDataItemWorkingLocationChange, this));
        }
    };
    /**
     *
     * When validating raw data, instead of processing data item, we update it
     *
     * @ignore Exclude from docs
     * @param {Object} item
     */
    Component.prototype.updateDataItem = function (dataItem) {
        var _this = this;
        if (dataItem) {
            var dataContext_1 = dataItem.dataContext;
            __WEBPACK_IMPORTED_MODULE_13__utils_Object__["each"](this.dataFields, function (key, fieldValue) {
                var fieldName = key;
                var value = dataContext_1[fieldValue];
                // Apply adapters to a retrieved value
                value = _this.adapter.apply("dataContextValue", {
                    field: fieldName,
                    value: value,
                    dataItem: dataItem
                }).value;
                if (dataItem.hasChildren[fieldName]) {
                    if (value) {
                        var anyDataItem = dataItem;
                        var children = (anyDataItem[fieldName]);
                        __WEBPACK_IMPORTED_MODULE_12__utils_Iterator__["each"](children.iterator(), function (child) {
                            _this.updateDataItem(child);
                        });
                    }
                }
                else {
                    // data is converted to numbers/dates in each dataItem
                    if (__WEBPACK_IMPORTED_MODULE_14__utils_Type__["hasValue"](value)) {
                        dataItem[fieldName] = value;
                    }
                }
            });
            __WEBPACK_IMPORTED_MODULE_13__utils_Object__["each"](this.propertyFields, function (key, fieldValue) {
                var f = key;
                var value = dataContext_1[fieldValue];
                if (__WEBPACK_IMPORTED_MODULE_14__utils_Type__["hasValue"](value)) {
                    dataItem.setProperty(f, value);
                }
            });
        }
    };
    /**
     * [validateDataElements description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    Component.prototype.validateDataElements = function () {
        for (var i = this.startIndex; i < this.endIndex; i++) {
            var dataItem = this.dataItems.getIndex(i);
            // TODO is this correct ?
            if (dataItem) {
                this.validateDataElement(dataItem);
            }
        }
    };
    /**
     * Validates this element and its related elements.
     *
     * @ignore Exclude from docs
     */
    Component.prototype.validate = function () {
        this.validateDataElements();
        _super.prototype.validate.call(this);
    };
    /**
     * [validateDataElement description]
     *
     * @ignore Exclude from docs
     * @param {this["_dataItem"]} dataItem [description]
     */
    Component.prototype.validateDataElement = function (dataItem) {
    };
    /**
     * Adds one or several (arrat) of data items to the existing data.
     *
     * @param {Object | Object[]} rawDataItem One or many raw data item objects
     */
    Component.prototype.addData = function (rawDataItem, removeCount) {
        this._parseDataFrom = this.data.length; // save length of parsed data
        if (rawDataItem instanceof Array) {
            this.data = this.data.concat(rawDataItem);
        }
        else {
            this.data.push(rawDataItem); // add to raw data array
        }
        this.removeData(removeCount);
        this.invalidateData();
    };
    /**
     * Removes elements from the beginning of data
     *
     * @param {Optional<number>} coun number of elements to remove
     */
    Component.prototype.removeData = function (count) {
        if (__WEBPACK_IMPORTED_MODULE_14__utils_Type__["isNumber"](count)) {
            while (count > 0) {
                var dataItem = this.dataItems.getIndex(0);
                if (dataItem) {
                    this.dataItems.remove(dataItem);
                    dataItem.dispose();
                }
                __WEBPACK_IMPORTED_MODULE_12__utils_Iterator__["each"](this._dataUsers.iterator(), function (dataUser) {
                    var dataItem = dataUser.dataItems.getIndex(0);
                    if (dataItem) {
                        dataUser.dataItems.remove(dataItem);
                        dataItem.dispose();
                    }
                });
                count--;
            }
        }
    };
    /**
     * Triggers a data (re)parsing.
     *
     * @ignore Exclude from docs
     */
    Component.prototype.invalidateData = function () {
        if (this.disabled || this.isTemplate) {
            return;
        }
        //if(!this.dataInvalid){
        __WEBPACK_IMPORTED_MODULE_9__utils_Array__["j" /* move */](__WEBPACK_IMPORTED_MODULE_7__Registry__["b" /* registry */].invalidDatas, this);
        this.dataInvalid = true;
        __WEBPACK_IMPORTED_MODULE_12__utils_Iterator__["each"](this._dataUsers.iterator(), function (x) {
            x.invalidateDataItems();
        });
        //}
    };
    /**
     * [invalidateDataUsers description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    Component.prototype.invalidateDataUsers = function () {
        __WEBPACK_IMPORTED_MODULE_12__utils_Iterator__["each"](this._dataUsers.iterator(), function (x) {
            x.invalidate();
        });
    };
    /**
     * Invalidates data values. When data array is not changed, but values within
     * it changes, we invalidate data so that component would process changes.
     *
     * @ignore Exclude from docs
     */
    Component.prototype.invalidateDataItems = function () {
        if (this.disabled || this.isTemplate) {
            return;
        }
        //if(!this.dataItemsInvalid){
        __WEBPACK_IMPORTED_MODULE_9__utils_Array__["j" /* move */](__WEBPACK_IMPORTED_MODULE_7__Registry__["b" /* registry */].invalidDataItems, this);
        this.dataItemsInvalid = true;
        __WEBPACK_IMPORTED_MODULE_12__utils_Iterator__["each"](this._dataUsers.iterator(), function (x) {
            x.invalidateDataItems();
        });
        //}
    };
    /**
     * Invalidates data range. This is done when data which must be shown
     * changes (chart is zoomed for example).
     *
     * @ignore Exclude from docs
     */
    Component.prototype.invalidateDataRange = function () {
        if (this.disabled || this.isTemplate) {
            return;
        }
        //if(!this.dataRangeInvalid){
        this.dataRangeInvalid = true;
        __WEBPACK_IMPORTED_MODULE_9__utils_Array__["j" /* move */](__WEBPACK_IMPORTED_MODULE_7__Registry__["b" /* registry */].invalidDataRange, this);
        //}
    };
    /**
     * Processes data range.
     *
     * @todo Description
     * @ignore Exclude from docs
     */
    Component.prototype.validateDataRange = function () {
        __WEBPACK_IMPORTED_MODULE_9__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_7__Registry__["b" /* registry */].invalidDataRange, this);
        this.dataRangeInvalid = false;
        if (this.startIndex != this._prevStartIndex || this.endIndex != this._prevEndIndex) {
            this.rangeChangeUpdate();
        }
        this.appendDataItems();
        this.invalidate();
        this.dispatchImmediately("datarangechanged");
    };
    /**
     * [sliceData description]
     *
     * @todo Description
     * @ignore Exclude from docs
     */
    Component.prototype.sliceData = function () {
        this._workingStartIndex = this.startIndex;
        this._workingEndIndex = this.endIndex;
    };
    /**
     * [rangeChangeUpdate description]
     *
     * @todo Description
     * @ignore Exclude from docs
     */
    Component.prototype.rangeChangeUpdate = function () {
        this.sliceData();
        this._prevStartIndex = this.startIndex;
        this._prevEndIndex = this.endIndex;
    };
    /**
     * [removeDataItems description]
     *
     * @todo Description
     * @ignore Exclude from docs
     */
    Component.prototype.removeDataItems = function () {
    };
    /**
     * [appendDataItems description]
     *
     * @todo Description
     * @ignore Exclude from docs
     */
    Component.prototype.appendDataItems = function () {
        // todo: think if we can optimize this place, maybe mark the ones which should not be removed and then remove all others?
        this.removeDataItems();
        // TODO use an iterator instead
        for (var i = this.startIndex; i < this.endIndex; i++) {
            // data item
            var dataItem = this.dataItems.getIndex(i);
            if (dataItem) {
                // append item
                this.appendDataItem(dataItem);
            }
        }
    };
    /**
     * [appendDataItem description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param {this["_dataItem"]} dataItem [description]
     */
    Component.prototype.appendDataItem = function (dataItem) {
        // todo: this makes default state to be applied a lot of times. Need to think of a diff solution
        // and we also need to find when we actually need this
        //dataItem.invalidate();
    };
    /**
     * If you want to have a smooth transition from one data values to another, you change your raw data and then you must call this method.
     * then instead of redrawing everything, the chart will check raw data and smoothly transit from previous to new data
     */
    Component.prototype.invalidateRawData = function () {
        if (this.disabled || this.isTemplate) {
            return;
        }
        //if(!this.rawDataInvalid){
        __WEBPACK_IMPORTED_MODULE_9__utils_Array__["j" /* move */](__WEBPACK_IMPORTED_MODULE_7__Registry__["b" /* registry */].invalidRawDatas, this);
        this.rawDataInvalid = true;
        __WEBPACK_IMPORTED_MODULE_12__utils_Iterator__["each"](this._dataUsers.iterator(), function (x) {
            x.invalidateRawData();
        });
        //}
    };
    /**
     * @ignore
     */
    Component.prototype.validateRawData = function () {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_9__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_7__Registry__["b" /* registry */].invalidRawDatas, this);
        __WEBPACK_IMPORTED_MODULE_12__utils_Iterator__["each"](this.dataItems.iterator(), function (dataItem) {
            if (dataItem) {
                _this.updateDataItem(dataItem);
            }
        });
    };
    /**
     * Validates (processes) data.
     *
     * @ignore Exclude from docs
     */
    Component.prototype.validateData = function () {
        this.dispatchImmediately("beforedatavalidated");
        this.dataInvalid = false;
        __WEBPACK_IMPORTED_MODULE_9__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_7__Registry__["b" /* registry */].invalidDatas, this);
        this.dataValidationProgress = 0;
        // need this to slice new data
        this._prevStartIndex = undefined;
        this._prevEndIndex = undefined;
        // todo: this needs some overthinking, maybe some extra settings like zoomOotonDataupdate like in v3 or so. some charts like pie chart probably should act like this always
        this._startIndex = undefined;
        this._endIndex = undefined;
        if (this.dataFields.data && this.dataItem) {
            var dataContext = this.dataItem.dataContext;
            this._data = dataContext[this.dataFields.data];
        }
        if (this.data.length > 0) {
            var preloader = this.preloader;
            // data items array is reset only if all data is validated, if _parseDataFrom is not 0, we append new data only
            if (this._parseDataFrom === 0) {
                __WEBPACK_IMPORTED_MODULE_12__utils_Iterator__["each"](this.dataItems.iterator(), function (dataItem) {
                    dataItem.dispose();
                });
                this.dataItems.clear();
                // and for all components
                __WEBPACK_IMPORTED_MODULE_12__utils_Iterator__["each"](this._dataUsers.iterator(), function (dataUser) {
                    __WEBPACK_IMPORTED_MODULE_12__utils_Iterator__["each"](dataUser.dataItems.iterator(), function (dataItem) {
                        dataItem.dispose();
                    });
                    dataUser.dataItems.clear();
                    // todo: this needs some overthinking, maybe some extra settings like zoomOUtonDataupdate like in v3 or so. some charts like pie chart probably should act like this always
                    dataUser._startIndex = undefined;
                    dataUser._endIndex = undefined;
                });
            }
            // and for all components
            __WEBPACK_IMPORTED_MODULE_12__utils_Iterator__["each"](this._dataUsers.iterator(), function (dataUser) {
                // todo: this needs some overthinking, maybe some extra settings like zoomOUtonDataupdate like in v3 or so. some charts like pie chart probably should act like this always
                dataUser._startIndex = undefined;
                dataUser._endIndex = undefined;
            });
            var counter = 0;
            var startTime = Date.now();
            // parse data
            var i = this._parseDataFrom;
            var n = this.data.length;
            var _loop_1 = function () {
                var rawDataItem = this_1.data[i];
                var dataItem = this_1.dataItems.create();
                this_1.processDataItem(dataItem, rawDataItem);
                __WEBPACK_IMPORTED_MODULE_12__utils_Iterator__["each"](this_1._dataUsers.iterator(), function (dataUser) {
                    var dataUserDataItem = dataUser.dataItems.create();
                    dataUser.processDataItem(dataUserDataItem, rawDataItem);
                });
                counter++;
                // show preloader if this takes too many time
                if (counter == 100) { // no need to check it on each data item
                    counter = 0;
                    var elapsed = Date.now() - startTime;
                    if (elapsed > this_1.parsingStepDuration) {
                        if (i < this_1.data.length - 10) {
                            this_1._parseDataFrom = i + 1;
                            // update preloader
                            if (preloader) {
                                if (i / this_1.data.length > 0.5 && !preloader.visible) {
                                    // do not start showing
                                }
                                else {
                                    preloader.progress = i / this_1.data.length;
                                }
                            }
                            this_1.dataValidationProgress = i / this_1.data.length;
                            i = this_1.data.length; // stops cycle
                            this_1.invalidateData();
                            return { value: void 0 };
                        }
                    }
                }
            };
            var this_1 = this;
            for (i; i < n; i++) {
                var state_1 = _loop_1();
                if (typeof state_1 === "object")
                    return state_1.value;
            }
            if (preloader) {
                preloader.progress = 1;
            }
        }
        this.dataValidationProgress = 1;
        this._parseDataFrom = 0; // reset this index, it is set to dataItems.length if addData() method was used.
        this.invalidateDataItems();
        this.dispatch("datavalidated");
    };
    /**
     * Validates (processes) data items.
     *
     * @ignore Exclude from docs
     */
    Component.prototype.validateDataItems = function () {
        __WEBPACK_IMPORTED_MODULE_9__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_7__Registry__["b" /* registry */].invalidDataItems, this);
        this.dataItemsInvalid = false;
        this.invalidateDataRange();
        this.dispatch("valueschanged");
    };
    Object.defineProperty(Component.prototype, "data", {
        /**
         * Returns element's source (raw) data.
         *
         * @return {any[]} Data
         */
        get: function () {
            if (!this._data) {
                this._data = [];
            }
            return this._data;
        },
        /**
         * Sets source (raw) data for the element. The "data" is always an `Array`
         * of objects.
         *
         * @param {any[]} value Data
         */
        set: function (value) {
            // array might be the same, but there might be items added
            // todo: check if array changed, toString maybe?
            //if (this._data != value) {
            this._data = value;
            this.invalidateData();
            //}
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns (creates if necessary) a [[DataSource]] bound to any specific
     * property.
     *
     * For example if I want to bind `data` to an external JSON file, I'd create
     * a DataSource for it.
     *
     * @param  {string}      property  Property to bind external data to
     * @return {DataSource}            A DataSource for property
     */
    Component.prototype.getDataSource = function (property) {
        var _this = this;
        if (!__WEBPACK_IMPORTED_MODULE_14__utils_Type__["hasValue"](this._dataSources[property])) {
            this._dataSources[property] = new __WEBPACK_IMPORTED_MODULE_4__data_DataSource__["a" /* DataSource */]();
            this._dataSources[property].component = this;
            this.setDataSourceEvents(this._dataSources[property], property);
            this._dataSources[property].adapter.add("dateFields", function (val) {
                return _this.dataSourceDateFields(val);
            });
            this._dataSources[property].adapter.add("numberFields", function (val) {
                return _this.dataSourceNumberFields(val);
            });
            this.events.on("inited", function () {
                _this.loadData(property);
            }, this);
        }
        return this._dataSources[property];
    };
    Object.defineProperty(Component.prototype, "dataSource", {
        /**
         * @return {DataSource} Data source
         */
        get: function () {
            if (!this._dataSources["data"]) {
                this.getDataSource("data");
            }
            return this._dataSources["data"];
        },
        /**
         *A [[DataSource]] to be used for loading Component's data.
         *
         * @see {@link https://www.amcharts.com/docs/v4/concepts/loading-external-data/} for more on loading external data
         * @param {DataSource}  value  Data source
         */
        set: function (value) {
            var _this = this;
            if (this._dataSources["data"]) {
                this.removeDispose(this._dataSources["data"]);
            }
            this._dataSources["data"] = value;
            this._dataSources["data"].component = this;
            this.events.on("inited", function () {
                _this.loadData("data");
            }, this);
            this.setDataSourceEvents(value, "data");
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Initiates loading of the external data via [[DataSource]].
     *
     * @ignore Exclude from docs
     */
    Component.prototype.loadData = function (property) {
        this._dataSources[property].load();
    };
    /**
     * This function is called by the [[DataSource]]'s `dateFields` adapater
     * so that particular chart types can popuplate this setting with their
     * own type-speicifc data fields so they are parsed properly.
     *
     * @ignore Exclude from docs
     * @param  {string[]}  value  Array of date fields
     * @return {string[]}         Array of date fields populated with chart's date fields
     */
    Component.prototype.dataSourceDateFields = function (value) {
        return value;
    };
    /**
     * This function is called by the [[DataSource]]'s `numberFields` adapater
     * so that particular chart types can popuplate this setting with their
     * own type-speicifc data fields so they are parsed properly.
     *
     * @ignore Exclude from docs
     * @param  {string[]}  value  Array of number fields
     * @return {string[]}         Array of number fields populated with chart's number fields
     */
    Component.prototype.dataSourceNumberFields = function (value) {
        return value;
    };
    /**
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {string[]}  list        [description]
     * @param  {object}    dataFields  [description]
     * @param  {string[]}  targetList  [description]
     * @return {string[]}              [description]
     */
    Component.prototype.populateDataSourceFields = function (list, dataFields, targetList) {
        __WEBPACK_IMPORTED_MODULE_9__utils_Array__["c" /* each */](targetList, function (value) {
            if (dataFields[value] && __WEBPACK_IMPORTED_MODULE_9__utils_Array__["g" /* indexOf */](list, dataFields[value]) === -1) {
                list.push(dataFields[value]);
            }
        });
        return list;
    };
    /**
     * Sets events on a [[DataSource]].
     *
     * @ignore Exclude from docs
     */
    Component.prototype.setDataSourceEvents = function (ds, property) {
        var _this = this;
        ds.events.on("started", function (ev) {
            var preloader = _this.preloader;
            if (preloader) {
                preloader.progress = 0;
                //preloader.label.text = this.language.translate("Loading");
            }
        });
        ds.events.on("loadstarted", function (ev) {
            var preloader = _this.preloader;
            if (preloader) {
                preloader.progress = 0.25;
            }
        });
        ds.events.on("loadended", function (ev) {
            var preloader = _this.preloader;
            if (preloader) {
                preloader.progress = 0.5;
            }
        });
        ds.events.on("parseended", function (ev) {
            var preloader = _this.preloader;
            if (preloader) {
                preloader.progress = 0.75;
            }
        });
        ds.events.on("ended", function (ev) {
            var preloader = _this.preloader;
            if (preloader) {
                preloader.progress = 1;
            }
        });
        ds.events.on("error", function (ev) {
            var preloader = _this.preloader;
            if (preloader) {
                preloader.progress = 1;
            }
            _this.showModal(ev.message);
        });
        if (property) {
            ds.events.on("done", function (ev) {
                var preloader = _this.preloader;
                if (preloader) {
                    preloader.progress = 1;
                }
                if (property == "data" && !__WEBPACK_IMPORTED_MODULE_14__utils_Type__["isArray"](ev.data)) {
                    ev.data = [ev.data];
                }
                _this[property] = ev.data;
            });
        }
    };
    Object.defineProperty(Component.prototype, "responsive", {
        /**
         * @return {DataSource} Data source
         */
        get: function () {
            if (!this._responsive) {
                this._responsive = new __WEBPACK_IMPORTED_MODULE_5__responsive_Responsive__["a" /* Responsive */]();
                this._responsive.component = this;
            }
            return this._responsive;
        },
        /**
         * A [[Responsive]] instance to be used when applying conditional
         * property values.
         *
         * NOTE: Responsive features are currently in development and may not work
         * as expected, if at all.
         *
         * @param {Responsive}  value  Data source
         */
        set: function (value) {
            this._responsive = value;
            this._responsive.component = this;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets current zoom.
     *
     * The range uses relative values from 0 to 1, with 0 marking beginning and 1
     * marking end of the available data range.
     *
     * @param  {IRange}  range          Range
     * @param  {boolean} skipRangeEvent Should rangechanged event not be triggered?
     * @param  {boolean} instantly      Do not animate?
     * @return {IRange}                 Actual modidied range (taking `maxZoomFactor` into account)
     */
    Component.prototype.zoom = function (range, skipRangeEvent, instantly) {
        var _this = this;
        if (skipRangeEvent === void 0) { skipRangeEvent = false; }
        if (instantly === void 0) { instantly = false; }
        var start = range.start;
        var end = range.end;
        var priority = range.priority;
        if (!__WEBPACK_IMPORTED_MODULE_14__utils_Type__["isNumber"](start) || !__WEBPACK_IMPORTED_MODULE_14__utils_Type__["isNumber"](end)) {
            return { start: this.start, end: this.end };
        }
        if (this._finalStart != start || this._finalEnd != end) {
            var maxZoomFactor = this.maxZoomFactor;
            // most likely we are dragging left scrollbar grip here, so we tend to modify end
            if (priority == "start") {
                // add to the end
                if (1 / (end - start) > maxZoomFactor) {
                    end = start + 1 / maxZoomFactor;
                }
                //unless end is > 0
                if (end > 1 && end - start < 1 / maxZoomFactor) {
                    //end = 1;
                    start = end - 1 / maxZoomFactor;
                }
            }
            // most likely we are dragging right, so we modify left
            else {
                // remove from start
                if (1 / (end - start) > maxZoomFactor) {
                    start = end - 1 / maxZoomFactor;
                }
                if (start < 0 && end - start < 1 / maxZoomFactor) {
                    //start = 0;
                    end = start + 1 / maxZoomFactor;
                }
            }
            this._finalEnd = end;
            this._finalStart = start;
            this.skipRangeEvent = skipRangeEvent;
            if (this.rangeChangeDuration > 0 && !instantly) {
                // todo: maybe move this to Animation
                var rangeChangeAnimation = this.rangeChangeAnimation;
                if (rangeChangeAnimation && rangeChangeAnimation.progress < 1) {
                    var options = rangeChangeAnimation.animationOptions;
                    if (options.length > 1) {
                        if (options[0].to == start && options[1].to == end) {
                            return { start: start, end: end };
                        }
                    }
                }
                this.dispatchImmediately("rangechangestarted");
                if (this.rangeChangeAnimation) {
                    this.rangeChangeAnimation.dispose();
                }
                this.rangeChangeAnimation = this.animate([{ property: "start", to: start }, { property: "end", to: end }], this.rangeChangeDuration, this.rangeChangeEasing);
                if (this.rangeChangeAnimation && !this.rangeChangeAnimation.isDisposed()) {
                    this.rangeChangeAnimation.events.on("animationended", function () {
                        _this.dispatchImmediately("rangechangeended");
                    });
                }
                else {
                    this.dispatchImmediately("rangechangeended");
                }
            }
            else {
                this.start = start;
                this.end = end;
            }
        }
        return { start: start, end: end };
    };
    /**
     * Zooms to specific data items using their index in data.
     *
     * @param {number}  startIndex     Index of the starting data item
     * @param {number}  endIndex       Index of the ending data item
     * @param {boolean} skipRangeEvent Should rangechanged event not be triggered?
     * @param {boolean} instantly      Do not animate?
     */
    Component.prototype.zoomToIndexes = function (startIndex, endIndex, skipRangeEvent, instantly) {
        if (!__WEBPACK_IMPORTED_MODULE_14__utils_Type__["isNumber"](startIndex) || !__WEBPACK_IMPORTED_MODULE_14__utils_Type__["isNumber"](endIndex)) {
            return;
        }
        var start = startIndex / this.dataItems.length;
        var end = endIndex / this.dataItems.length;
        this.zoom({ start: start, end: end }, skipRangeEvent, instantly);
    };
    Object.defineProperty(Component.prototype, "zoomFactor", {
        /**
         * A current zoom factor (0-1). 1 meaning fully zoomed out. (showing all of
         * the available data)
         *
         * @return {number} Zoom factor
         */
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_8__utils_Math__["fitToRange"](1 / (this.end - this.start), 1, this.maxZoomFactor);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "maxZoomFactor", {
        /**
         * @return {number} Maximum `zoomFactor`
         */
        get: function () {
            return this.getPropertyValue("maxZoomFactor");
        },
        /**
         * Max available `zoomFactor`.
         *
         * The element will not allow zoom to occur beyond this factor.
         *
         * @param {number}  value  Maximum `zoomFactor`
         */
        set: function (value) {
            if (this.setPropertyValue("maxZoomFactor", value)) {
                this.invalidateDataRange();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "startIndex", {
        /**
         * Current starting index.
         *
         * @return {number} Start index
         */
        get: function () {
            if (!__WEBPACK_IMPORTED_MODULE_14__utils_Type__["isNumber"](this._startIndex)) {
                this._startIndex = 0;
            }
            return this._startIndex;
        },
        /**
         * Sets current starting index.
         *
         * @ignore Exclude from docs
         * @param {number} value Start index
         */
        set: function (value) {
            this._startIndex = __WEBPACK_IMPORTED_MODULE_8__utils_Math__["fitToRange"](Math.round(value), 0, this.dataItems.length);
            this.start = this.indexToPosition(this._startIndex);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @ignore
     * @todo:review description
     * returns item's relative position by the index of the item
     * @param {number} index
     */
    Component.prototype.indexToPosition = function (index) {
        return index / this.dataItems.length;
    };
    Object.defineProperty(Component.prototype, "endIndex", {
        /**
         * Current ending index.
         *
         * @return {number} End index
         */
        get: function () {
            if (!__WEBPACK_IMPORTED_MODULE_14__utils_Type__["isNumber"](this._endIndex)) {
                this._endIndex = this.dataItems.length;
            }
            return this._endIndex;
        },
        /**
         * Sets current ending index.
         *
         * @ignore Exclude from docs
         * @param {number} value End index
         */
        set: function (value) {
            this._endIndex = __WEBPACK_IMPORTED_MODULE_8__utils_Math__["fitToRange"](Math.round(value), 0, this.dataItems.length);
            this.end = this.indexToPosition(this._endIndex);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "start", {
        /**
         * Current relative starting position of the data range (zoom).
         *
         * @return {number} Start (0-1)
         */
        get: function () {
            return this._start;
        },
        /**
         * Sets start of the current data range (zoom).
         *
         * @ignore Exclude from docs
         * @param {number} value Start (0-1)
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_8__utils_Math__["round"](value, 5);
            //if (1 / (this.end - value) > this.maxZoomFactor) {
            //	value = this.end - 1 / this.maxZoomFactor;
            //}
            if (this._start != value) {
                this._start = value;
                this._startIndex = Math.max(0, Math.floor(this.dataItems.length * value) || 0);
                this.invalidateDataRange();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "end", {
        /**
         * Current relative ending position fo the data range (zoom).
         *
         * @return {number} End (0-1)
         */
        get: function () {
            return this._end;
        },
        /**
         * Sets end of the current data range (zoom).
         *
         * @ignore Exclude from docs
         * @param {number} value End (0-1)
         */
        set: function (value) {
            value = __WEBPACK_IMPORTED_MODULE_8__utils_Math__["round"](value, 5);
            //if (1 / (value - this.start) > this.maxZoomFactor) {
            //	value = 1 / this.maxZoomFactor + this.start;
            //}
            if (this._end != value) {
                this._end = value;
                this._endIndex = Math.min(this.dataItems.length, Math.ceil(this.dataItems.length * value) || 0);
                this.invalidateDataRange();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * [removeFromInvalids description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    Component.prototype.removeFromInvalids = function () {
        _super.prototype.removeFromInvalids.call(this);
        __WEBPACK_IMPORTED_MODULE_9__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_7__Registry__["b" /* registry */].invalidDatas, this);
        __WEBPACK_IMPORTED_MODULE_9__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_7__Registry__["b" /* registry */].invalidSprites, this);
        __WEBPACK_IMPORTED_MODULE_9__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_7__Registry__["b" /* registry */].invalidDataItems, this);
        __WEBPACK_IMPORTED_MODULE_9__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_7__Registry__["b" /* registry */].invalidDataRange, this);
    };
    Object.defineProperty(Component.prototype, "dataItems", {
        /**
         * Returns a list of source [[DataItem]] objects.
         *
         * @return {OrderedListTemplate} List of data items
         */
        get: function () {
            // @todo Check if we can automatically dispose all of the data items when
            // Component is disposed
            if (!this._dataItems) {
                this._dataItems = new __WEBPACK_IMPORTED_MODULE_2__utils_SortedList__["b" /* OrderedListTemplate */](this.createDataItem());
                this._dataItems.events.on("insert", this.handleDataItemAdded, this);
                this._dataItems.events.on("remove", this.invalidateDataItems, this);
                //this._disposers.push(new ListDisposer(this._dataItems));
            }
            return this._dataItems;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Processes newly added [[DataItem]] as well as triggers data re-validation.
     *
     * @ignore Exclude from docs
     * @param {IListEvents<DataItem>["insert"]} event [description]
     */
    Component.prototype.handleDataItemAdded = function (event) {
        event.newValue.component = this;
        this.invalidateDataItems();
    };
    /**
     * removes [[DataItem]] as well as triggers data re-validation.
     *
     * @ignore Exclude from docs
     * @param {IListEvents<DataItem>["insert"]} event [description]
     */
    Component.prototype.handleDataItemRemoved = function (event) {
        event.oldValue.component = undefined;
        this.invalidateDataItems();
    };
    Object.defineProperty(Component.prototype, "dataMethods", {
        /**
         * [dataMethods description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @deprecated Not used?
         * @param {Dictionary} List of data methods
         */
        get: function () {
            if (!this._dataMethods) {
                this._dataMethods = new __WEBPACK_IMPORTED_MODULE_3__utils_Dictionary__["a" /* Dictionary */]();
            }
            return this._dataMethods;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Binds a data element's field to a specific field in raw data.
     * For example, for the very basic column chart you'd want to bind a `value`
     * field to a field in data, such as `price`.
     *
     * Some more advanced Components, like [[CandlestickSeries]] need several
     * data fields bound to data, such as ones for open, high, low and close
     * values.
     *
     * @todo Example
     * @param {Key}                       field  Field name
     * @param {this["_dataFields"][Key]}  value  Field name in data
     */
    Component.prototype.bindDataField = function (field, value) {
        this.dataFields[field] = value;
        this.invalidateDataRange();
    };
    /**
     * Invalidates processed data.
     *
     * @ignore Exclude from docs
     */
    Component.prototype.invalidateProcessedData = function () {
        this.resetProcessedRange();
        this.invalidateDataRange();
    };
    /**
     * [resetProcessedRange description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    Component.prototype.resetProcessedRange = function () {
        this._prevEndIndex = null;
        this._prevStartIndex = null;
    };
    Object.defineProperty(Component.prototype, "dataUsers", {
        /**
         * Returns all other [[Component]] objects that are using this element's
         * data.
         *
         * @ignore Exclude from docs
         * @todo Description (review)
         * @return {List<Component>} [description]
         */
        get: function () {
            return this._dataUsers;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns a clone of this element.
     *
     * @return {this} Clone
     */
    Component.prototype.clone = function () {
        var component = _super.prototype.clone.call(this);
        component.dataFields = __WEBPACK_IMPORTED_MODULE_11__utils_Utils__["copyProperties"](this.dataFields, {});
        return component;
    };
    /**
     * Copies all parameters from another [[Component]].
     *
     * @param {Component} source Source Component
     */
    Component.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        this.data = source.data;
    };
    /**
     * Invalidates the whole element, including all its children, causing
     * complete re-parsing of data and redraw.
     *
     * Use sparingly!
     */
    Component.prototype.reinit = function () {
        this._inited = false;
        this.deepInvalidate();
    };
    /**
     * Add an adapter for data.
     *
     * @return {Export} Exporting
     */
    Component.prototype.getExporting = function () {
        var _export = _super.prototype.getExporting.call(this);
        if (!_export.adapter.has("data", this._exportData, null, this)) {
            _export.adapter.add("data", this._exportData, null, this);
        }
        return _export;
    };
    Component.prototype._exportData = function (arg) {
        arg.data = this.data;
        return arg;
    };
    Component.prototype.setDisabled = function (value) {
        _super.prototype.setDisabled.call(this, value);
        this.invalidateData();
    };
    return Component;
}(__WEBPACK_IMPORTED_MODULE_0__Container__["a" /* Container */]));

//# sourceMappingURL=Component.js.map

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {

// Functions for local json file interactions
module.exports = {

    settings: { //settings
        url: window.location.origin + "/api/",
        rateLimit: 5,
        token: $("meta[name='_csrf']").attr("content"),
        header: $("meta[name='_csrf_header']").attr("content")
    },

    //Inserts data into server
    addData: function addData(location, data) {
        location = typeof location !== 'undefined' ? location : "";
        return fetch(module.exports.settings.url + location, {
            method: "post",
            credentials: "same-origin",
            headers: {
                "X-CSRF-Token": module.exports.settings.token,
                "Accept": "application/json",
                "Content-Type": "application/json"
            },
            body: JSON.stringify(data)
        }).then(function (response) {
            return response.json();
        });
    },

    deleteData: function deleteData(location, data) {
        return module.exports.addData(location, data);
    },

    updateData: function updateData(location, data) {
        return module.exports.addData(location, data);
    },

    post: function post(location, data) {
        return module.exports.addData(location, data);
    },

    getData: function getData(type, parameter, query) {
        parameter = typeof parameter !== 'undefined' ? parameter : "";
        query = typeof query !== 'undefined' ? query : "";

        return fetch(module.exports.settings.url + type + "/" + parameter + query, {
            method: 'GET',
            credentials: 'same-origin',
            redirect: 'follow',
            agent: null,
            headers: {
                "Content-Type": "text/plain",
                'Authorization': 'Basic ' + btoa('username:password')
            }
        }).then(function (response) {
            var json = response.json();
            if (response.status >= 200 && response.status < 300) {
                return json;
            } else {
                return json.then(Promise.reject.bind(Promise));
            }
        });
    }
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ }),
/* 34 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return System; });
/* harmony export (immutable) */ __webpack_exports__["b"] = getSystem;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__rendering_SVGContainer__ = __webpack_require__(94);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Component__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Options__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__rendering_Paper__ = __webpack_require__(103);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_AsyncPending__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_Animation__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_DOM__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils_Array__ = __webpack_require__(12);
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */











/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * The main class that handles system-wide tasks, like caching, heartbeats, etc.
 * @important
 */
var System = /** @class */ (function () {
    /**
     * Performs initialization of the System object.
     *
     * Called when the first [[Sprite]] object is created.
     *
     * @ignore Exclude from docs
     */
    function System() {
        var _this = this;
        /**
         * Unique ID of the object.
         *
         * @type {string}
         */
        this.uid = __WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].getUniqueId();
        /**
         * Invalid sizes
         * @rodo Remove commented code
         */
        //public invalidSizes: Array<Sprite>;
        /**
         * Number of times per second charts will be updated.
         *
         * This means that each time an element is invalidated it will wait for the
         * next cycle to be re-validated, and possibly redrawn.
         *
         * This happens every `1000 / frameRate` milliseconds.
         *
         * Reducing this number may reduce the load on the CPU, but might slightly
         * reduce smoothness of the animations.
         *
         * @type {number}
         * @deprecated Moved to [[Registry]]
         */
        //public frameRate: number = 60;
        /**
         * Number of times per second component container is measured.
         *
         * It is not wise to measure container as often as `frameRate`, as this would
         * use a lot of CPU when resizing window.
         *
         * @type {number}
         */
        this.measureRate = 10;
        /**
         * @todo Description
         * @ignore Exclude from docs
         * @private
         * @type {number}
         */
        this.measureCounter = 0;
        /**
         * @todo Description
         * @todo Needed?
         * @ignore Exclude from docs
         * @type {number}
         */
        this.dummyCounter = 0;
        // frame at which we should measure
        this.measureAt = Math.round(this.frameRate / this.measureRate);
        // ghost is used to draw elements while real paper is not yet created or Sprite doesn't know parent yet
        var ghostDiv = document.createElement("div");
        ghostDiv.hidden = true;
        document.body.appendChild(ghostDiv);
        var ghostSvgContainer = new __WEBPACK_IMPORTED_MODULE_2__rendering_SVGContainer__["a" /* SVGContainer */](ghostDiv);
        this.ghostPaper = new __WEBPACK_IMPORTED_MODULE_5__rendering_Paper__["a" /* Paper */](ghostSvgContainer.SVGContainer);
        this.ghostPaper.id = "ghost";
        __WEBPACK_IMPORTED_MODULE_8__utils_DOM__["p" /* ready */](function () {
            _this.update();
            Object(__WEBPACK_IMPORTED_MODULE_6__utils_AsyncPending__["b" /* raf */])(function () {
                _this.update();
            });
        });
        this.time = Date.now();
    }
    /**
     * Reports time elapsed since timer was reset.
     *
     * @ignore Exclude from docs
     * @todo Needed?
     * @param {string}   msg    Message to report in console
     * @param {boolean}  reset  Reset time counter
     */
    System.prototype.reportTime = function (msg, reset) {
        if (this.dummyCounter < 6) {
            //console.log(Date.now() - this.time, msg, this.dummyCounter2);
        }
        if (reset) {
            this.time = Date.now();
        }
    };
    /**
     * Performs "heartbeat" operations `frameRate` number of times per second.
     *
     * When the chart element is invalidated, it is not immediately redrawn.
     *
     * Instead it waits for the next `update()` cycle to be re-validated.
     *
     * @ignore Exclude from docs
     * @todo Maybe should be private?
     */
    System.prototype.update = function () {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].dispatchImmediately("enterframe");
        this.measureCounter++;
        if (this.measureCounter >= this.measureAt) {
            this.measureCounter = 0;
            this.measure();
        }
        this.validateLayouts();
        this.validatePositions();
        // data objects first - do all calculations
        // only data is parsed in chunks, thats why we do for loop instead of a while like with other invalid items.
        // important to go backwards, as items are removed!
        // TODO use iterator instead
        while (__WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].invalidDatas.length > 0) {
            var component = __WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].invalidDatas[0];
            var dataProvider = component.dataProvider;
            if (dataProvider && dataProvider.dataInvalid) {
                try {
                    dataProvider.validateData();
                    if (dataProvider.dataValidationProgress < 1) {
                        break;
                    }
                }
                catch (e) {
                    __WEBPACK_IMPORTED_MODULE_9__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].invalidDatas, dataProvider);
                    dataProvider.raiseCriticalError(e);
                }
            }
            else {
                try {
                    component.validateData();
                    if (component.dataValidationProgress < 1) {
                        break;
                    }
                }
                catch (e) {
                    __WEBPACK_IMPORTED_MODULE_9__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].invalidDatas, component);
                    component.raiseCriticalError(e);
                }
            }
        }
        while (__WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].invalidRawDatas.length > 0) {
            var component = __WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].invalidRawDatas[0];
            try {
                component.validateRawData();
            }
            catch (e) {
                __WEBPACK_IMPORTED_MODULE_9__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].invalidRawDatas, component);
                component.raiseCriticalError(e);
            }
        }
        // TODO use iterator instead
        while (__WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].invalidDataItems.length > 0) {
            var component = __WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].invalidDataItems[0];
            var dataProvider = component.dataProvider;
            // this is needed to avoid partial value validation when data is parsed in chunks
            if (component.dataInvalid || (dataProvider && dataProvider.dataInvalid)) {
                // void
            }
            else {
                try {
                    component.validateDataItems();
                }
                catch (e) {
                    __WEBPACK_IMPORTED_MODULE_9__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].invalidDataItems, component);
                    component.raiseCriticalError(e);
                }
            }
            // this might seem too much, as validateValues removes from invalidDataItems aswell, but just to be sure (in case validateData is overriden and no super is called)
            __WEBPACK_IMPORTED_MODULE_9__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].invalidDataItems, component);
        }
        // TODO use iterator instead
        while (__WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].invalidDataRange.length > 0) {
            var component = __WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].invalidDataRange[0];
            var dataProvider = component.dataProvider;
            if (component.dataInvalid || (dataProvider && dataProvider.dataInvalid)) {
                // void
            }
            else {
                try {
                    component.validateDataRange();
                    if (!component.skipRangeEvent) {
                        component.dispatchImmediately("datarangechanged");
                    }
                    component.skipRangeEvent = false;
                }
                catch (e) {
                    __WEBPACK_IMPORTED_MODULE_9__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].invalidDataRange, component);
                    component.raiseCriticalError(e);
                }
            }
            // this might seem too much, as validateDataRange removes from invalidDataRange aswell, but just to be sure (in case validateData is overriden and no super is called)
            __WEBPACK_IMPORTED_MODULE_9__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].invalidDataRange, component);
        }
        var skippedSprites = [];
        // display objects later
        // TODO use iterator instead
        while (__WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].invalidSprites.length > 0) {
            this.validateLayouts();
            this.validatePositions();
            var sprite = __WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].invalidSprites[__WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].invalidSprites.length - 1];
            // we need to check this, as validateLayout might validate sprite
            if (sprite && !sprite.isDisposed()) {
                if (sprite instanceof __WEBPACK_IMPORTED_MODULE_3__Component__["a" /* Component */] && (sprite.dataInvalid || (sprite.dataProvider && sprite.dataProvider.dataInvalid))) {
                    // void
                    skippedSprites.push(sprite);
                }
                else {
                    // @todo? maybe we should only check if preloader is visible and render only preloader sprites?
                    // if not, think how can we the next line better.
                    if (sprite.renderingFrame > 1) {
                        sprite.renderingFrame--;
                        skippedSprites.push(sprite);
                    }
                    else if (sprite.dataItem && sprite.dataItem.component && sprite.dataItem.component.dataInvalid) {
                        // void
                        skippedSprites.push(sprite);
                    }
                    else {
                        try {
                            if (sprite instanceof __WEBPACK_IMPORTED_MODULE_1__Container__["a" /* Container */]) {
                                sprite.children.each(function (child) {
                                    if (child.invalid) {
                                        if (child instanceof __WEBPACK_IMPORTED_MODULE_3__Component__["a" /* Component */] && (child.dataInvalid || (child.dataProvider && child.dataProvider.dataInvalid))) {
                                            skippedSprites.push(child);
                                        }
                                        else if (child.dataItem && child.dataItem.component && child.dataItem.component.dataInvalid) {
                                            skippedSprites.push(child);
                                        }
                                        else {
                                            child.validate();
                                        }
                                    }
                                });
                            }
                            sprite.validate();
                        }
                        catch (e) {
                            sprite.invalid = false;
                            __WEBPACK_IMPORTED_MODULE_9__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].invalidSprites, sprite);
                            sprite.raiseCriticalError(e);
                        }
                    }
                }
                // this might seem too much, but it's ok
                sprite.invalid = false;
            }
            __WEBPACK_IMPORTED_MODULE_9__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].invalidSprites, sprite);
        }
        __WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].invalidSprites = skippedSprites;
        // TODO make this more efficient
        // TODO don't copy the array
        __WEBPACK_IMPORTED_MODULE_9__utils_Array__["c" /* each */](__WEBPACK_IMPORTED_MODULE_9__utils_Array__["b" /* copy */](__WEBPACK_IMPORTED_MODULE_7__utils_Animation__["d" /* animations */]), function (x) {
            x.update();
        });
        // to avoid flicker, we validate positions last time
        //this.validateLayouts();
        //this.validatePositions();
        Object(__WEBPACK_IMPORTED_MODULE_6__utils_AsyncPending__["d" /* triggerIdle */])();
        // to avoid flicker, we validate positions last time
        this.validateLayouts();
        this.validatePositions();
        __WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].dispatchImmediately("exitframe");
        //this.dummyCounter++;
        Object(__WEBPACK_IMPORTED_MODULE_6__utils_AsyncPending__["b" /* raf */])(function () {
            _this.update();
        });
    };
    /**
     * Triggers position re-validation on all [[Sprite]] elements that have
     * invalid(ated) positions.
     *
     * @ignore Exclude from docs
     * @todo Maybe should be private?
     */
    System.prototype.validatePositions = function () {
        // invalid positions
        // TODO use iterator instead
        while (__WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].invalidPositions.length > 0) {
            var sprite = __WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].invalidPositions[__WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].invalidPositions.length - 1];
            try {
                if (sprite instanceof __WEBPACK_IMPORTED_MODULE_1__Container__["a" /* Container */]) {
                    sprite.children.each(function (sprite) {
                        if (sprite.positionInvalid) {
                            sprite.validatePosition();
                        }
                    });
                }
                sprite.validatePosition();
            }
            catch (e) {
                sprite.positionInvalid = false;
                __WEBPACK_IMPORTED_MODULE_9__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].invalidPositions, sprite);
                sprite.raiseCriticalError(e);
            }
        }
    };
    /**
     * Triggers position re-validation on all [[Container]] elements that have
     * invalid(ated) layouts.
     *
     * @ignore Exclude from docs
     * @todo Maybe should be private?
     */
    System.prototype.validateLayouts = function () {
        // invalid positions
        // TODO use iterator instead
        while (__WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].invalidLayouts.length > 0) {
            var container = __WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].invalidLayouts[__WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].invalidLayouts.length - 1];
            try {
                container.children.each(function (sprite) {
                    if (sprite instanceof __WEBPACK_IMPORTED_MODULE_1__Container__["a" /* Container */] && sprite.layoutInvalid) {
                        sprite.validateLayout();
                    }
                });
                container.validateLayout();
            }
            catch (e) {
                container.layoutInvalid = false;
                __WEBPACK_IMPORTED_MODULE_9__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].invalidLayouts, container);
                container.raiseCriticalError(e);
            }
        }
    };
    /**
     * (Re)measures all top-level SVG containers for size.
     *
     * @ignore Exclude from docs
     * @todo Maybe should be private?
     */
    System.prototype.measure = function () {
        __WEBPACK_IMPORTED_MODULE_9__utils_Array__["c" /* each */](__WEBPACK_IMPORTED_MODULE_2__rendering_SVGContainer__["b" /* svgContainers */], function (svgContainer) {
            if (svgContainer.autoResize) {
                svgContainer.measure();
            }
        });
    };
    /**
     * Outputs string to console if `verbose` is `true`.
     *
     * @param {any} value Message to output to console
     */
    System.prototype.log = function (value) {
        if (__WEBPACK_IMPORTED_MODULE_4__Options__["a" /* options */].verbose) {
            if (console) {
                console.log(value);
            }
        }
    };
    Object.defineProperty(System.prototype, "frameRate", {
        /**
         * @return {number} Frame rate
         */
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].frameRate;
        },
        /**
         * Get current theme
         * @return {ITheme} [description]
         */
        /*public get theme(): ITheme {
            return $array.last(this.themes);
        }*/
        /**
         * Number of times per second charts will be updated.
         *
         * This means that each time an element is invalidated it will wait for the
         * next cycle to be re-validated, and possibly redrawn.
         *
         * This happens every `1000 / frameRate` milliseconds.
         *
         * Reducing this number may reduce the load on the CPU, but might slightly
         * reduce smoothness of the animations.
         *
         * @type {number} Frame rate
         */
        set: function (value) {
            __WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].frameRate = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * amCharts Version.
     *
     * This follows npm's semver specification.
     *
     * @see {@link https://docs.npmjs.com/misc/semver}
     * @type {string}
     */
    System.VERSION = "4.0.0-beta.31";
    return System;
}());

var system = null;
/**
 * Returns a singleton global instance of [[System]].
 *
 * All code should call this function, rather than instantiating their
 * own System objects.
 */
function getSystem() {
    if (system == null) {
        system = new System();
    }
    return system;
}
//# sourceMappingURL=System.js.map

/***/ }),
/* 35 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return PX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return STRING; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return NUMBER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return DURATION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return PLACEHOLDER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return PLACEHOLDER2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return PLACEHOLDER3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return PLACEHOLDER4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return PLACEHOLDER5; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return PLACEHOLDER_L; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return PLACEHOLDER_R; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return PLACEHOLDER_Q; });
/**
 * A collection of String-based constants.
 * @hidden
 * @ignore Exclude from docs
 */
/**
 * @ignore Exclude from docs
 * @type {string}
 */
var PX = "px";
/**
 * @ignore Exclude from docs
 * @type {string}
 */
var STRING = "string";
/**
 * @ignore Exclude from docs
 * @type {string}
 */
var NUMBER = "number";
/**
 * @ignore Exclude from docs
 * @type {string}
 */
var DATE = "date";
/**
 * @ignore Exclude from docs
 * @type {string}
 */
var DURATION = "duration";
/**
 * @ignore Exclude from docs
 * @type {string}
 */
var PLACEHOLDER = "__§§§__";
/**
 * @ignore Exclude from docs
 * @type {string}
 */
var PLACEHOLDER2 = "__§§§§__";
/**
 * @ignore Exclude from docs
 * @type {string}
 */
var PLACEHOLDER3 = "__§§§§§__";
/**
 * @ignore Exclude from docs
 * @type {string}
 */
var PLACEHOLDER4 = "__§§§§§§__";
/**
 * @ignore Exclude from docs
 * @type {string}
 */
var PLACEHOLDER5 = "__§§§§§§§__";
/**
 * @ignore Exclude from docs
 * @type {string}
 */
var PLACEHOLDER_L = "__amcharts_a6uo6cfd8f__";
/**
 * @ignore Exclude from docs
 * @type {string}
 */
var PLACEHOLDER_R = "__amcharts_jhovxywbes__";
/**
 * @ignore Exclude from docs
 * @type {string}
 */
var PLACEHOLDER_Q = "__amcharts_pf4bcqdo3t__";
//# sourceMappingURL=Strings.js.map

/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LinearGradient; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__System__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Type__ = __webpack_require__(1);
/**
 * Contains code and logic for generating linear gradients.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */







/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Linear gradient class.
 */
var LinearGradient = /** @class */ (function (_super) {
    __extends(LinearGradient, _super);
    /**
     * Constructor.
     */
    function LinearGradient() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * List of colors switch definitions in a gradient.
         *
         * @type {List<IGradientStop>}
         */
        _this._stops = new __WEBPACK_IMPORTED_MODULE_1__utils_List__["b" /* List */]();
        /**
         * Gradient direction.
         *
         * @type {number}
         */
        _this._rotation = 0;
        _this.className = "LinearGradient";
        _this._stops.events.on("setIndex", _this.validate, _this);
        _this._stops.events.on("insert", _this.validate, _this);
        // Create element
        _this.element = _this.paper.addGroup("linearGradient");
        _this.id = "gradient-" + __WEBPACK_IMPORTED_MODULE_3__Registry__["b" /* registry */].getUniqueId();
        _this.element.attr({ "id": _this.id });
        _this._disposers.push(_this.element);
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws gradient.
     *
     * @ignore Exclude from docs
     */
    LinearGradient.prototype.validate = function () {
        var _this = this;
        var rotation = (this._rotation + 90) * __WEBPACK_IMPORTED_MODULE_5__utils_Math__["RADIANS"];
        var x1 = Math.round(50 + Math.sin(rotation + Math.PI) * 50) + '%';
        var y1 = Math.round(50 + Math.cos(rotation) * 50) + '%';
        var x2 = Math.round(50 + Math.sin(rotation) * 50) + '%';
        var y2 = Math.round(50 + Math.cos(rotation + Math.PI) * 50) + '%';
        var gradientElement = this.element;
        gradientElement.removeChildNodes();
        gradientElement.attr({ "x1": x1, "x2": x2, "y1": y1, "y2": y2 });
        __WEBPACK_IMPORTED_MODULE_4__utils_Iterator__["each"](__WEBPACK_IMPORTED_MODULE_4__utils_Iterator__["indexed"](this._stops.iterator()), function (a) {
            var i = a[0];
            var stop = a[1];
            var offset = stop.offset;
            if (!__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isNumber"](offset)) {
                offset = i / (_this._stops.length - 1);
            }
            var gradientStop = _this.paper.add("stop");
            gradientStop.attr({ "stop-color": stop.color });
            if (__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isNumber"](stop.opacity)) {
                gradientStop.attr({ "stop-opacity": stop.opacity });
            }
            if (__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isNumber"](offset)) {
                gradientStop.attr({ "offset": offset });
            }
            gradientElement.add(gradientStop);
        });
    };
    /**
     * Clears the gradient.
     *
     * @ignore Exclude from docs
     */
    LinearGradient.prototype.clear = function () {
        this._stops.clear();
    };
    /**
     * Adds a color step to the gradient.
     *
     * @param {Color}   color    Color (hex code or named color)
     * @param {number}  opacity  Opacity (value from 0 to 1; 0 completely transaprent, 1 fully opaque)
     * @param {number}  offset   Position of color in the gradient (value 0 to 1; 0 meaning start of the gradient and 1 end)
     */
    LinearGradient.prototype.addColor = function (color, opacity, offset) {
        this._stops.push({ color: color, opacity: opacity, offset: offset });
    };
    Object.defineProperty(LinearGradient.prototype, "stops", {
        /**
         * A list of color stops in the gradient.
         *
         * @return {List<IGradientStop>} Stops
         */
        get: function () {
            return this._stops;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinearGradient.prototype, "paper", {
        /**
         * @ignore Exclude from docs
         * @return {Paper} Paper
         */
        get: function () {
            if (this._paper) {
                return this._paper;
            }
            return Object(__WEBPACK_IMPORTED_MODULE_2__System__["b" /* getSystem */])().ghostPaper;
        },
        /**
         * [[Paper]] instace to use for the gradient.
         *
         * @ignore Exclude from docs
         * @param {Paper}  paper  Paper
         */
        set: function (paper) {
            if (this._paper != paper) {
                this._paper = paper;
                this.validate();
                paper.appendDef(this.element);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinearGradient.prototype, "rotation", {
        /**
         * @return {number} Rotation
         */
        get: function () {
            return this._rotation;
        },
        /**
         * Rotation (direction) of the gradient in degrees.
         *
         * @param {number}  value  Rotation
         */
        set: function (value) {
            //this.element.attr({ "gradientTransform": "rotate(" + value + " 10 100)" });
            this._rotation = value;
            this.validate();
        },
        enumerable: true,
        configurable: true
    });
    LinearGradient.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        this._stops = source.stops;
        this._rotation = source.rotation;
    };
    return LinearGradient;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["a" /* BaseObject */]));

//# sourceMappingURL=LinearGradient.js.map

/***/ }),
/* 37 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DataItem; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Adapter__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Animation__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Array__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Object__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Type__ = __webpack_require__(1);
/**
 * Defines functionality for "Data Item"
 *
 * A Data Item can be any object that can hold data. For example [[LineSeries]]
 * holds a number of values, that comprise a line graph. Each of those values
 * (data points) is a {DataItem}.
 *
 * Furthermore the [[LineSeries]] itself can be represented as a entry in the
 * legend. Since legend needs access to Line Series' value, a DataItem is
 * created for the series.
 *
 * @todo Verify/update description
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */







/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * DataItem represents single element in data, for example a data point in a
 * Serial Chart Series, e.g. a column.
 *
 * DataItem defines relationship between structured data, required for specific
 * chart type or task, and raw source data.
 *
 * It also implements required calculations, updates related visual elements,
 * etc.
 *
 * @todo Description
 * @important
 */
var DataItem = /** @class */ (function (_super) {
    __extends(DataItem, _super);
    /**
     * Constructor
     * @todo Adding events to disposers produces errors in some cases, which means that chart is using disposed Data Items which is not right
     */
    function DataItem() {
        var _this = _super.call(this) || this;
        /**
         * Holds Adapter.
         *
         * @type {Adapter<DataItem, IDataItemAdapters>}
         */
        _this.adapter = new __WEBPACK_IMPORTED_MODULE_1__utils_Adapter__["a" /* Adapter */](_this);
        /**
         * This Data Item is currently disabled.
         *
         * @ignore Exclude from docs
         * @type {boolean}
         */
        _this._disabled = false;
        /**
         * Indicates whether Data Item has any properties set.
         *
         * If it does not have any, the code can use this property to check whether
         * they need to apply costly operation of re-applying properties, whenever
         * Data Item-related element is redrawn, e.g. series.
         *
         * @type {boolean}
         */
        _this.hasProperties = false;
        /**
         * An object containing calculated values.
         */
        _this.values = {};
        /**
         * An object container current working values.
         */
        //public readonly workingValues: { [index: string]: { [index: string]: number } } = {};
        /**
         * An object containing categories.
         */
        _this.categories = {};
        /**
         * An object containing dates.
         */
        _this.dates = {};
        /**
         * An object containing locations for the Data Item.
         *
         * A location is a position within date or category, or, in some other cases,
         * where there is no single point but rather some period.
         */
        _this.locations = {};
        /**
         * Current working locations.
         */
        _this.workingLocations = {};
        /**
         * An object containing Data Item specific appearance properties in key-value
         * pairs.
         *
         * Sometimes a single Data Item needs to apply different properties than the
         * rest of the data [[Series]] it is part of. E.g. a single column,
         * represented by a Data Item needs to be filled with a different color than
         * the reset of the [[ColumnSeries]] it belongs to.
         *
         * That's where Data Item's `properties` come into play.
         *
         * Please note that you should set Data Item-specific properties using
         * `setProperty()` method, rather than access `properties` object directly.
         */
        _this.properties = {};
        /**
         * A list of [[Sprite]] elements that are associated with this Data Item.
         *
         * E.g. an [[Axis]] Data Item has several separate elements associated with
         * it, like [[AxisTick]], [[AxisLabel]], and [[Grid]].
         *
         * Data Item keeps track of all of them, so it can toggle all related visual
         * elements when it itself is toggled.
         *
         * @type {Sprite[]}
         */
        _this.sprites = [];
        /**
         * Identifies if this object is a "template" and should not be treated as
         * real object that is drawn or actually used in the chart.
         *
         * @type {boolean}
         */
        _this.isTemplate = false;
        /**
         * Is Data Item currently visible?
         *
         * @ignore Exclude from docs
         * @type {boolean}
         */
        _this._visible = true;
        /**
         * Should this Data Item be used when calculating data ranges and scales?
         *
         * @ignore Exclude from docs
         * @type {boolean}
         */
        _this._ignoreMinMax = false;
        /**
         * Some of the Data Item's data fields may contain an array of children. This
         * property contains an object indicating which fields hold an array, so that
         * they can be processed properly.
         *
         * @ignore Exclude from docs
         */
        _this.hasChildren = {};
        /**
         * Indicates whether Data Item is currently animiting from visible to hidden
         * state.
         *
         * @type {boolean}
         */
        _this.isHiding = false;
        /**
         *
         * @ignore Exclude from docs
         */
        _this._valueAnimations = {};
        /**
         *
         * @ignore Exclude from docs
         */
        _this._locationAnimations = {};
        _this.className = "DataItem";
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(DataItem.prototype, "index", {
        /**
         * Data Item's position index in Component's data.
         *
         * @return {number} Index
         */
        get: function () {
            if (this.component) {
                return this.component.dataItems.indexOf(this);
            }
            else {
                return -1;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataItem.prototype, "animations", {
        /**
         * A list of [[Animations]] objects currently mutating Data Item's values.
         *
         * @return {Array<Animation>} [description]
         */
        get: function () {
            if (!this._animations) {
                this._animations = [];
                this._disposers.push(new __WEBPACK_IMPORTED_MODULE_2__utils_Animation__["b" /* AnimationDisposer */](this._animations));
            }
            return this._animations;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataItem.prototype, "visible", {
        /**
         * Returns `true` if this Data Item is currently visible.
         *
         * @return {boolean} Visible?
         */
        get: function () {
            return this._visible;
        },
        /**
         * Sets visibility of the Data Item.
         *
         * @param {boolean} value Visible?
         */
        set: function (value) {
            this.setVisibility(value);
            if (this._visible != value) {
                this._visible = value;
                if (this.events.isEnabled("visibilitychanged")) {
                    var event_1 = {
                        type: "visibilitychanged",
                        target: this,
                        visible: value
                    };
                    this.events.dispatchImmediately("visibilitychanged", event_1);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataItem.prototype, "__disabled", {
        /**
         * Is this Data Item currently disabled?
         *
         * @ignore Exclude from docs
         * @param {boolean}
         */
        get: function () {
            return this._disabled;
        },
        /**
         * Disables all Sprites associated with this Data Item.
         *
         * @ignore Exclude from docs
         * @param {boolean}
         */
        set: function (value) {
            //	if (this._disabled != value) { // not good
            this._disabled = value;
            __WEBPACK_IMPORTED_MODULE_4__utils_Array__["c" /* each */](this.sprites, function (sprite) {
                sprite.__disabled = value;
            });
            //	}
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets visibility of the Data Item.
     *
     * @param {boolean} value Data Item
     */
    DataItem.prototype.setVisibility = function (value) {
        __WEBPACK_IMPORTED_MODULE_4__utils_Array__["c" /* each */](this.sprites, function (sprite) {
            sprite.visible = value;
            //sprite.hide();
        });
    };
    /**
     * Shows the Data Item and related visual elements.
     *
     * @param {number}    duration  Animation duration (ms)
     * @param {number}    delay     Delay animation (ms)
     * @param {string[]}  fields    A list of fields to set values of
     */
    DataItem.prototype.show = function (duration, delay, fields) {
        var _this = this;
        this.isHiding = false;
        if (this._hideDisposer) {
            this.removeDispose(this._hideDisposer);
        }
        var animation;
        if (fields) {
            __WEBPACK_IMPORTED_MODULE_4__utils_Array__["c" /* each */](fields, function (field) {
                animation = _this.setWorkingValue(field, _this.values[field].value, duration, delay);
            });
        }
        __WEBPACK_IMPORTED_MODULE_4__utils_Array__["c" /* each */](this.sprites, function (sprite) {
            var animation = sprite.show(duration);
            if (delay != null && delay > 0 && animation != null && !animation.isDisposed()) {
                animation.delay(delay);
            }
        });
        this._visible = true;
        return animation;
    };
    /**
     * Destroys this object and all related data.
     */
    DataItem.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        __WEBPACK_IMPORTED_MODULE_4__utils_Array__["c" /* each */](this.sprites, function (sprite) {
            sprite.dispose();
        });
    };
    /**
     * Hides the Data Item and related visual elements.
     *
     * @param {number}    duration  Animation duration (ms)
     * @param {number}    delay     Delay animation (ms)
     * @param {number}    toValue   A value to set to `fields` when hiding
     * @param {string[]}  fields    A list of data fields to set value to `toValue`
     */
    DataItem.prototype.hide = function (duration, delay, toValue, fields) {
        var _this = this;
        this.isHiding = true;
        __WEBPACK_IMPORTED_MODULE_4__utils_Array__["c" /* each */](this.sprites, function (sprite) {
            var animation = sprite.hide(duration);
            if (delay != null && delay > 0 && animation != null && !animation.isDisposed()) {
                animation.delay(delay);
            }
        });
        if (__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isNumber"](toValue) && fields) {
            var animation_1;
            __WEBPACK_IMPORTED_MODULE_4__utils_Array__["c" /* each */](fields, function (field) {
                var anim = _this.setWorkingValue(field, toValue, duration, delay);
                if (anim) {
                    animation_1 = anim;
                }
            });
            if (animation_1) {
                this._hideDisposer = animation_1.events.on("animationended", function () {
                    _this.visible = false;
                    _this.isHiding = false;
                });
                this._disposers.push(this._hideDisposer);
                return animation_1;
            }
        }
        this.visible = false;
    };
    /**
     * Returns a duration (ms) the Data Item should take to animate from one
     * value to another.
     *
     * If the duration is not specified via parameter, this method will try to
     * request a default duration from the related `Component`.
     *
     * @param  {number}  duration  Default duration (ms)
     * @return {number}            Duration (ms)
     */
    DataItem.prototype.getDuration = function (duration) {
        var component = this.component;
        if (component) {
            if (!__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isNumber"](duration)) {
                duration = component.interpolationDuration;
            }
        }
        if (duration != null) {
            return this.adapter.apply("duration", duration);
        }
    };
    /**
     * Returns a numeric value for specific data field.
     *
     * If `calculated` is not set, it will return a raw value, as it is in
     * source data.
     *
     * If `calculated` is set, it will return a pre-calculated specific value.
     *
     * @param  {string}           name        Data field name
     * @param  {CalculatedValue}  calculated  A calculated value name
     * @return {Optional<number>}             Value
     */
    DataItem.prototype.getValue = function (name, calculated) {
        if (name && this.component) {
            if (!calculated) {
                calculated = this.component.dataFields[name + "Show"];
                if (!calculated) {
                    calculated = "value";
                }
            }
            var value = this.values[name][calculated];
            if (this.adapter.isEnabled("value")) {
                return this.adapter.apply("value", {
                    value: value,
                    field: name
                }).value;
            }
            else {
                return value;
            }
        }
    };
    /**
     * Returns a current working value for a specific data field.
     *
     * The actual value may differ from the one returned by `getValue()`. The
     * latter returns static values from the data source.
     *
     * `getWorkingValue()` returns current value, which is usually different if
     * Data Item is animating from one state to another.
     *
     * @param  {string}           name        Data field name
     * @param  {CalculatedValue}  calculated  A calculated value name
     * @return {Optional<number>}             Value
     */
    DataItem.prototype.getWorkingValue = function (name) {
        if (name && this.component) {
            var realName = this.component.dataFields[name + "Show"];
            if (!realName) {
                realName = "workingValue";
            }
            return this.adapter.apply("workingValue", {
                workingValue: this.values[name][realName],
                field: name
            }).workingValue;
        }
    };
    /**
     * Sets a numeric value for specific data field.
     *
     * @param {string}           name        Data field name
     * @param {number}           value       Value
     * @param {CalculatedValue}  calculated  Calculated data field name
     * @param {number}           duration    Duration (ms) to animate to new value to
     * @param {number}           delay       Delay animation (ms)
     */
    DataItem.prototype.setValue = function (name, value, duration, delay) {
        var currentValue = this.values[name].value;
        var newDuration = this.getDuration(duration);
        value = __WEBPACK_IMPORTED_MODULE_6__utils_Type__["toNumber"](value);
        if (currentValue !== value) {
            this.values[name].value = value;
            if (this.events.isEnabled("valuechanged")) {
                var event_2 = {
                    type: "valuechanged",
                    target: this,
                    property: name
                };
                this.events.dispatchImmediately("valuechanged", event_2);
            }
        }
        this.setWorkingValue(name, value, newDuration, delay);
    };
    DataItem.prototype.setCalculatedValue = function (name, value, calculated) {
        var currentValue = this.values[name][calculated];
        if (currentValue !== value && __WEBPACK_IMPORTED_MODULE_6__utils_Type__["isNumber"](value)) {
            this.values[name][calculated] = value;
            if (this.events.isEnabled("calculatedvaluechanged")) {
                var event_3 = {
                    type: "calculatedvaluechanged",
                    target: this,
                    property: name
                };
                this.events.dispatchImmediately("calculatedvaluechanged", event_3);
            }
        }
    };
    /**
     * Set current working numeric value for a specific data field.
     *
     * @param  {string}           name        Data field name
     * @param  {number}           value       Value
     * @param  {CalculatedValue}  calculated  Calculated data field name
     * @param  {number}           duration    Duration (ms) to animate to new value to
     * @param  {number}           delay       Delay animation (ms)
     * @return {Optional<Animation>}          An [[Animation]] object used for transition to new values
     */
    DataItem.prototype.setWorkingValue = function (name, value, duration, delay) {
        if (__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isNumber"](this.values[name].value)) {
            var newDuration = this.getDuration(duration);
            var workingValue = this.values[name].workingValue;
            if (newDuration != null && newDuration > 0 && __WEBPACK_IMPORTED_MODULE_6__utils_Type__["isNumber"](workingValue) && this.component) { // sometimes NaN is passed, so only change this to != null if all cases of NaN are handled, otherwise animation won't stop
                if (workingValue != value) {
                    var animation = this.animate({ childObject: this.values[name], property: "workingValue", from: workingValue, to: value, dummyData: name }, newDuration, this.component.interpolationEasing);
                    if (delay != null) {
                        animation.delay(delay);
                    }
                    animation.events.on("animationstarted", this.handleInterpolationProgress, this);
                    animation.events.on("animationprogress", this.handleInterpolationProgress, this);
                    animation.events.on("animationended", this.handleInterpolationProgress, this);
                    this._valueAnimations[name] = animation;
                    return animation;
                }
                else {
                    var valueAnimation = this._valueAnimations[name];
                    if (valueAnimation) {
                        valueAnimation.stop();
                    }
                    this.values[name].workingValue = value;
                }
            }
            else {
                var valueAnimation = this._valueAnimations[name];
                if (valueAnimation) {
                    valueAnimation.stop();
                }
                this.values[name].workingValue = value;
                if (this.events.isEnabled("workingvaluechanged")) {
                    var event_4 = {
                        type: "workingvaluechanged",
                        target: this,
                        property: name
                    };
                    this.events.dispatchImmediately("workingvaluechanged", event_4);
                }
            }
        }
    };
    /**
     * Sets a relative location for a data field.
     *
     * A location is always relative on a 0 to 1 scale, with 0 being beginning,
     * 0.5 middle and 1 end.
     *
     * @todo Rewiew description
     * @param {string}  name      Data field name
     * @param {number}  value     Location (0-1)
     * @param {number}  duration  Duration (ms) to animate to new value to
     * @param {number}  delay     Delay animation (ms)
     */
    DataItem.prototype.setLocation = function (name, value, duration, delay) {
        var currentLocation = this.locations[name];
        if (currentLocation !== value) {
            this.locations[name] = value;
            if (this.events.isEnabled("locationchanged")) {
                var event_5 = {
                    type: "locationchanged",
                    target: this,
                    property: name
                };
                this.events.dispatchImmediately("locationchanged", event_5);
            }
            this.setWorkingLocation(name, value, duration, delay);
        }
    };
    /**
     * Sets a current working location for a data field.
     *
     * @todo Rewiew description
     * @param {string}  name      Data field name
     * @param {number}  value     Location (0-1)
     * @param {number}  duration  Duration (ms) to animate to new value to
     * @param {number}  delay     Delay animation (ms)
     */
    DataItem.prototype.setWorkingLocation = function (name, value, duration, delay) {
        var newDuration = this.getDuration(duration);
        var workingLocation = this.workingLocations[name];
        if (newDuration != null && newDuration > 0 && __WEBPACK_IMPORTED_MODULE_6__utils_Type__["isNumber"](workingLocation) && this.component) { // sometimes NaN is passed, so only change this to != null if all cases of NaN are handled, otherwise animation won't stop
            if (workingLocation != value) {
                var animation = this.animate({ childObject: this.workingLocations, property: name, from: workingLocation, to: value, dummyData: name }, newDuration, this.component.interpolationEasing);
                if (delay != null) {
                    animation.delay(delay);
                }
                animation.events.on("animationstarted", this.handleInterpolationProgress, this);
                animation.events.on("animationprogress", this.handleInterpolationProgress, this);
                animation.events.on("animationended", this.handleInterpolationProgress, this);
                this._locationAnimations[name] = animation;
                return animation;
            }
            else {
                var locationAnimation = this._locationAnimations[name];
                if (locationAnimation) {
                    locationAnimation.stop();
                }
                this.workingLocations[name] = value;
            }
        }
        else {
            var locationAnimation = this._locationAnimations[name];
            if (locationAnimation) {
                locationAnimation.stop();
            }
            this.workingLocations[name] = value;
            if (this.events.isEnabled("workinglocationchanged")) {
                var event_6 = {
                    type: "workinglocationchanged",
                    target: this,
                    property: name
                };
                this.events.dispatchImmediately("workinglocationchanged", event_6);
            }
        }
    };
    /**
     * Sets Date value to a data field.
     *
     * @param {string}  name      Data field name
     * @param {Date}    date      Date object
     * @param {number}  duration  Duration (ms) to animate to new value to
     */
    DataItem.prototype.setDate = function (name, date, duration) {
        if (!__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isDate"](date) && this.component) {
            date = this.component.dateFormatter.parse(date);
        }
        var currentDate = this.dates[name];
        if (currentDate !== date) {
            this.dates[name] = date;
            this.setValue(name, date.getTime(), duration);
        }
    };
    /**
     * Returns a Date value of the data field.
     *
     * @param  {string}  name  Data field name
     * @return {Date}          Date object
     */
    DataItem.prototype.getDate = function (name) {
        return this.adapter.apply("date", {
            date: this.dates[name],
            field: name
        }).date;
    };
    /**
     * Sets a Data Item-specific visual properties to apply to related elements.
     *
     * @param {string}  name   Property name
     * @param {any}     value  Property value
     */
    DataItem.prototype.setProperty = function (name, value) {
        if (this.properties[name] !== value) {
            this.hasProperties = true;
            this.properties[name] = value;
            if (this.events.isEnabled("propertychanged")) {
                var event_7 = {
                    type: "propertychanged",
                    target: this,
                    property: name,
                    value: value
                };
                this.events.dispatchImmediately("propertychanged", event_7);
            }
        }
    };
    /**
     * Sets a related category for this Data Item.
     *
     * @todo Review description
     * @param {string}  name   Data field name
     * @param {string}  value  Category
     */
    DataItem.prototype.setCategory = function (name, value) {
        if (!__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isString"](value)) {
            value = __WEBPACK_IMPORTED_MODULE_6__utils_Type__["castString"](value);
        }
        if (this.categories[name] !== value) {
            this.categories[name] = value;
        }
    };
    /**
     * Clones the Data Item, including all related data.
     *
     * @return {this} New Data Item clone
     */
    DataItem.prototype.clone = function (cloneId) {
        var dataItem = _super.prototype.clone.call(this, cloneId);
        if (this.dataContext) {
            dataItem.dataContext = __WEBPACK_IMPORTED_MODULE_3__utils_Utils__["copy"](this.dataContext, {});
        }
        __WEBPACK_IMPORTED_MODULE_3__utils_Utils__["copyProperties"](this.locations, dataItem.locations);
        __WEBPACK_IMPORTED_MODULE_3__utils_Utils__["copyProperties"](this.properties, dataItem.properties);
        __WEBPACK_IMPORTED_MODULE_3__utils_Utils__["copyProperties"](this.categories, dataItem.categories);
        __WEBPACK_IMPORTED_MODULE_3__utils_Utils__["copyProperties"](this.values, dataItem.values);
        __WEBPACK_IMPORTED_MODULE_3__utils_Utils__["copyProperties"](this.dates, dataItem.dates);
        __WEBPACK_IMPORTED_MODULE_5__utils_Object__["each"](this.values, function (name, value) {
            //for (let name in this.values) {
            dataItem.values[name] = __WEBPACK_IMPORTED_MODULE_5__utils_Object__["copy"](value);
        });
        dataItem.events.copyFrom(this.events);
        dataItem.component = this.component;
        return dataItem;
    };
    Object.defineProperty(DataItem.prototype, "opacity", {
        /**
         * Sets opacity for all Data Item's related elements (Sprites).
         *
         * @param {number} value Opacity (0-1)
         */
        set: function (value) {
            __WEBPACK_IMPORTED_MODULE_4__utils_Array__["c" /* each */](this.sprites, function (sprite) {
                sprite.opacity = value;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataItem.prototype, "ignoreMinMax", {
        /**
         * Exclude from min/max calculations?
         * @return {boolean} Exclude from min/max calculations?
         */
        get: function () {
            return this._ignoreMinMax;
        },
        /**
         * Sets whether this data point should not be included in the scale and
         * minimum/maximum calculations.
         *
         * E.g. some we may want to exclude a particular data point from influencing
         * [[ValueAxis]] scale.
         *
         * @param {boolean}  value  Exclude from min/max calculations?
         */
        set: function (value) {
            this._ignoreMinMax = value;
            if (this.events.isEnabled("propertychanged")) {
                var event_8 = {
                    type: "propertychanged",
                    target: this,
                    property: "ignoreMinMax",
                    value: value
                };
                this.events.dispatchImmediately("propertychanged", event_8);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates and starts an [[Animation]] to interpolate (morph) Data Item's
     * properties and/or values.
     *
     * @see {@link Animation}
     * @param  {IAnimationOptions[] | IAnimationOptions}  animationOptions  Animation options
     * @param  {number}                                   duration          Animation duration (ms)
     * @param  {function}                                 easing            Easing function
     * @return {Animation}                                                  Animation
     */
    DataItem.prototype.animate = function (animationOptions, duration, easing) {
        return new __WEBPACK_IMPORTED_MODULE_2__utils_Animation__["a" /* Animation */](this, animationOptions, duration, easing).start();
    };
    /**
     * Handles intermediate steps when Data Item is interpolating (morphing) from
     * one value to another.
     *
     * @ignore Exclude from docs
     * @param {AMEvent<Animation, IAnimationEvents>["animationstarted" | "animationended" | "animationprogress"]} event Event object
     */
    DataItem.prototype.handleInterpolationProgress = function (event) {
        var animation = event.target;
        // it's always only one options, no need cycle
        var animationOptions = animation.animationOptions[0];
        if (animationOptions) {
            if (this.events.isEnabled("workingvaluechanged")) {
                var event_9 = {
                    type: "workingvaluechanged",
                    target: this,
                    property: animationOptions.dummyData
                };
                this.events.dispatchImmediately("workingvaluechanged", event_9);
            }
        }
    };
    /**
     * Checks whether Data Item has values set for all of the data fields,
     * supplied via argument.
     *
     * @ignore Exclude from docs
     * @param  {string[]}  fields  Field list to check
     * @return {boolean}           Has values for all fields?
     */
    DataItem.prototype.hasValue = function (fields) {
        // todo: what about categories?
        for (var i = 0; i < fields.length; i++) {
            if (!__WEBPACK_IMPORTED_MODULE_6__utils_Type__["hasValue"](this.values[fields[i]].value)) {
                return false;
            }
        }
        return true;
    };
    Object.defineProperty(DataItem.prototype, "depth", {
        /**
         * Depth of the Data Item.
         *
         * In nested data structures, like TreeMap, this indicates the level this
         * data point is at, in relation to the parent Data Item.
         *
         * @return {number} Depth
         */
        get: function () {
            if (!this.parent) {
                return 0;
            }
            else {
                return this.parent.depth + 1;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataItem.prototype, "dataContext", {
        /**
         * Sets to a reference to an original object from Component's data.
         *
         * @return {Object} [description]
         */
        get: function () {
            return this._dataContext;
        },
        /**
         * A reference to an original object in Component's data, that this Data Item
         * is derived from.
         *
         * @param {Object} value Original data object
         */
        set: function (value) {
            this._dataContext = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * adds a sprite to dataItem.sprites array
     * @ignore
     */
    DataItem.prototype.addSprite = function (sprite) {
        if (sprite.dataItem && sprite.dataItem != this) {
            __WEBPACK_IMPORTED_MODULE_4__utils_Array__["k" /* remove */](sprite.dataItem.sprites, sprite);
        }
        this.sprites.push(sprite);
        sprite.dataItem = this;
    };
    return DataItem;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["b" /* BaseObjectEvents */]));

//# sourceMappingURL=DataItem.js.map

/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return ValueAxisDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ValueAxis; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Axis__ = __webpack_require__(80);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AxisRendererY__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_Disposer__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__ValueAxisBreak__ = __webpack_require__(110);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_utils_Object__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_utils_Utils__ = __webpack_require__(6);
/**
 * Value Axis module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */










/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[ValueAxis]].
 *
 * @see {@link DataItem}
 */
var ValueAxisDataItem = /** @class */ (function (_super) {
    __extends(ValueAxisDataItem, _super);
    /**
     * Constructor
     */
    function ValueAxisDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "ValueAxisDataItem";
        _this.values.value = {};
        _this.values.endValue = {};
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(ValueAxisDataItem.prototype, "value", {
        /**
         * @return {number} Value
         */
        get: function () {
            return this.values["value"].value;
        },
        /**
         * A data point's numeric value.
         *
         * @param {number}  value  Value
         */
        set: function (value) {
            this.setValue("value", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValueAxisDataItem.prototype, "startValue", {
        /**
         * @return {number} Value
         */
        get: function () {
            return this.values["value"].value;
        },
        /**
         * A data point's starting value.
         *
         * Used for items that span several dates, like [[ValueAxisBreak]].
         *
         * @param {number}  value  Value
         */
        set: function (value) {
            this.setValue("value", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValueAxisDataItem.prototype, "endValue", {
        /**
         * @return {number} Value
         */
        get: function () {
            return this.values["endValue"].value;
        },
        /**
         * Data point's numeric end value.
         *
         * @param {number}  value  End value
         */
        set: function (value) {
            this.setValue("endValue", value);
        },
        enumerable: true,
        configurable: true
    });
    return ValueAxisDataItem;
}(__WEBPACK_IMPORTED_MODULE_0__Axis__["b" /* AxisDataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Used to create a value axis for the chart.
 *
 * ```TypeScript
 * // Create the axis
 * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
 *
 * // Set settings
 * valueAxis.title.text = "Monthly Sales";
 * ```
 * ```JavaScript
 * // Create the axis
 * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
 *
 * // Set settings
 * valueAxis.title.text = "Monthly Sales";
 * ```
 * ```JSON
 * "yAxes": [{
 *   "type": "ValueAxis",
 *   "title": {
 *     "text": "Monthly Sales"
 *   }
 * }]
 * ```
 *
 * @see {@link IValueAxisEvents} for a list of available Events
 * @see {@link IValueAxisAdapters} for a list of available Adapters
 * @important
 */
var ValueAxis = /** @class */ (function (_super) {
    __extends(ValueAxis, _super);
    /**
     * Constructor
     */
    function ValueAxis() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * [_stepDecimalPlaces description]
         *
         * @todo Description
         * @type {number}
         */
        _this._stepDecimalPlaces = 0;
        /**
         * Should axis scale explicitly start and `min` and `max`?
         *
         * @type {boolean}
         */
        _this._strictMinMax = false;
        /**
         * Base value for the axis.
         *
         * @type {number}
         */
        _this._baseValue = 0;
        /**
         * Adjusted start in case we have breaks.
         *
         * @todo Description
         * @type {number}
         */
        _this._adjustedStart = 0;
        /**
         * Adjusted end in case we have breaks.
         *
         * @todo Description
         * @type {number}
         */
        _this._adjustedEnd = 1;
        /**
         * @todo Description
         */
        _this._valueToPosition = {};
        /**
         * @todo Description
         */
        _this._positionToValue = {};
        /**
         * A function which applies fills to alternating cells.
         *
         * @todo Description
         * @type {function}
         */
        _this.fillRule = function (dataItem) {
            var value = dataItem.value;
            var axis = dataItem.component;
            if (value / axis.step / 2 == Math.round(value / axis.step / 2)) {
                dataItem.axisFill.__disabled = true;
            }
            else {
                dataItem.axisFill.__disabled = false;
            }
        };
        /**
         * As calculating totals is expensive operation and not often needed, by default we do not do it. In case you use totalPercent or total for your charts, you must set this to true
         * @todo review description
         * @type {boolean}
         */
        _this.calculateTotals = false;
        _this.className = "ValueAxis";
        // Set field name
        _this.axisFieldName = "value";
        // Set defaults
        _this.maxZoomFactor = 1000;
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Returns a new/empty [[DataItem]] of the type appropriate for this object.
     *
     * @see {@link DataItem}
     * @return {ValueAxisDataItem} Data Item
     */
    ValueAxis.prototype.createDataItem = function () {
        return new ValueAxisDataItem();
    };
    /**
     * Returns a new/empty [[AxisBreak]] of the appropriate type.
     *
     * @return {ValueAxisBreak} Axis break
     */
    ValueAxis.prototype.createAxisBreak = function () {
        return new __WEBPACK_IMPORTED_MODULE_4__ValueAxisBreak__["a" /* ValueAxisBreak */]();
    };
    /**
     * Validates Axis' data items.
     *
     * @ignore Exclude from docs
     */
    ValueAxis.prototype.validateDataItems = function () {
        this._positionToValue = {};
        _super.prototype.validateDataItems.call(this);
        this.fixAxisBreaks();
        this.getMinMax();
        // note, not zoomMin and zoomMax, but actual position
        var minZoomed = this.positionToValue(this.start);
        var maxZoomed = this.positionToValue(this.end);
        if (this.interpolationDuration > 0) {
            if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](minZoomed) && __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](maxZoomed)) {
                this.zoomToValues(minZoomed, maxZoomed, true, true);
            }
        }
    };
    /**
     * Processes data items of the related Series.
     *
     * @ignore Exclude from docs
     */
    ValueAxis.prototype.processSeriesDataItems = function () {
        // @todo: add some boolean (maybe autodedect) if we need these calculations or not. this place uses a lot of cpu
        if (this.calculateTotals) {
            var series = this.series.getIndex(0);
            var startIndex = series.startIndex;
            if (series.dataItems.length > 0) {
                if (startIndex > 0) {
                    startIndex--;
                }
                var endIndex = series.endIndex;
                if (endIndex < series.dataItems.length) {
                    endIndex++;
                }
                // This has to be `var` in order to avoid garbage collection
                for (var i = startIndex; i < endIndex; ++i) {
                    // This has to be `var` in order to avoid garbage collection
                    var total = {};
                    __WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__["each"](this.series.iterator(), function (series) {
                        var dataItem = series.dataItems.getIndex(i);
                        if (dataItem) {
                            __WEBPACK_IMPORTED_MODULE_7__core_utils_Object__["each"](dataItem.values, function (key) {
                                var value = dataItem.values[key].workingValue; // can not use getWorkingValue here!
                                if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](value)) {
                                    if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](total[key])) {
                                        total[key] = value;
                                    }
                                    else {
                                        total[key] += value;
                                    }
                                }
                            });
                        }
                    });
                    __WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__["each"](this.series.iterator(), function (series) {
                        var dataItem = series.dataItems.getIndex(i);
                        if (dataItem) {
                            __WEBPACK_IMPORTED_MODULE_7__core_utils_Object__["each"](dataItem.values, function (key) {
                                var value = dataItem.values[key].workingValue; // can not use getWorkingValue here!
                                if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](value)) {
                                    dataItem.setCalculatedValue(key, total[key], "total");
                                    dataItem.setCalculatedValue(key, 100 * value / total[key], "totalPercent");
                                }
                            });
                        }
                    });
                }
            }
        }
    };
    /**
     * Validates the data range.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     */
    ValueAxis.prototype.validateDataRange = function () {
        _super.prototype.validateDataRange.call(this);
        // not using default caching for a better performance
        this._valueToPosition = {};
        this._positionToValue = {};
        // it's important to fix axis breaks in the beginning, as positionToValue and adjustDifference depends on breaks values
        this.fixAxisBreaks();
        // calculate zoom values
        this.calculateZoom();
    };
    /**
     * Validates the whole axis. Causes it to redraw.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     */
    ValueAxis.prototype.validate = function () {
        // this is moved to a separate method because it differs in DateAxis
        this.validateAxisElements();
        _super.prototype.validate.call(this);
        this.hideUnusedDataItems();
        // hide too close
        //this.hideTooCloseDataItems();
    };
    /**
     * Calculates all positions, related to axis as per current zoom.
     *
     * @ignore Exclude from docs
     */
    ValueAxis.prototype.calculateZoom = function () {
        if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](this.min) && __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](this.max)) {
            var min = this.positionToValue(this.start);
            var max = this.positionToValue(this.end);
            var differece = this.adjustDifference(min, max);
            var minMaxStep = this.adjustMinMax(min, max, differece, this._gridCount, true);
            min = minMaxStep.min;
            max = minMaxStep.max;
            this._adjustedStart = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["round"]((min - this.min) / (this.max - this.min), 5);
            this._adjustedEnd = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["round"]((max - this.min) / (this.max - this.min), 5);
            this._step = minMaxStep.step;
            this._stepDecimalPlaces = __WEBPACK_IMPORTED_MODULE_9__core_utils_Utils__["decimalPlaces"](this._step);
            if (this._minZoomed != min || this._maxZoomed != max) {
                this._minZoomed = min;
                this._maxZoomed = max;
                this.dispatchImmediately("selectionextremeschanged");
            }
        }
        else {
            this._adjustedStart = this.start;
            this._adjustedEnd = this.end;
        }
    };
    /*
        fixAxisBreaks() {
            let axisBreaks: List<ValueAxisBreak> = <List<ValueAxisBreak>>this.axisBreaks;
            if (axisBreaks.length > 0) {

                // first make sure that startValue is <= end value
                for (let i: number = 0; i < axisBreaks.length; i++) {
                    let axisBreak: ValueAxisBreak = axisBreaks.get(i);
                    let startValue: number = $math.min(axisBreak.startValue, axisBreak.endValue);
                    let endValue: number = $math.max(axisBreak.startValue, axisBreak.endValue);

                    axisBreak.adjustedStartValue = startValue;
                    axisBreak.adjustedEndValue = endValue;
                }

                // sort by adjustedStartValue
                this.axisBreaks.sortByKey("adjustedStartValue");

                let firstAxisBreak: ValueAxisBreak = axisBreaks.get(0);
                let previousEndValue: number = Math.min(firstAxisBreak.startValue, firstAxisBreak.endValue);

                // process breaks
                for (let i: number = 0; i < this.axisBreaks.length; i++) {
                    let axisBreak: ValueAxisBreak = axisBreaks.get(i);

                    let startValue: number = axisBreak.adjustedStartValue;
                    let endValue: number = axisBreak.adjustedEndValue;

                    // breaks can't overlap
                    // if break starts before previous break ends
                    if (startValue < previousEndValue) {
                        startValue = previousEndValue;

                        if (endValue < previousEndValue) {
                            endValue = previousEndValue;
                        }
                    }

                    axisBreak.adjustedStartValue = startValue;
                    axisBreak.adjustedEndValue = endValue;

                    // break difference
                    let axisBreakDif: number = endValue - startValue;
                    let axisBreakGridCount: number = Math.ceil(axisBreakDif / this._step * axisBreak.breakSize);

                    // calculate min, max and step for axis break
                    let breakMinMaxStep = this.adjustMinMax(startValue, endValue, axisBreakDif, axisBreakGridCount);
                    axisBreak.adjustedStep = breakMinMaxStep.step;
                    axisBreak.adjustedMin = breakMinMaxStep.min;
                    axisBreak.adjustedMax = breakMinMaxStep.max;
                    previousEndValue = endValue;
                }
            }

            this._difference = this.adjustDifference(this.min, this.max);
        }
    */
    /**
     * Validates Axis elements.
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    ValueAxis.prototype.validateAxisElements = function () {
        var _this = this;
        if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](this.max) && __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](this.min)) {
            // first regular items
            var value_1 = this.minZoomed - this._step * 2;
            if (!this.logarithmic) {
                value_1 = Math.floor(value_1 / this._step) * this._step;
            }
            else {
                var differencePower = Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E;
                if (differencePower > 1) {
                    value_1 = Math.pow(10, Math.log(this.min) * Math.LOG10E);
                }
                else {
                    value_1 = Math.floor(this.minZoomed / this._step) * this._step;
                }
            }
            var maxZoomed = this._maxZoomed + this._step;
            this.resetIterators();
            var dataItemsIterator_1 = this._dataItemsIterator;
            var i = 0;
            while (value_1 <= maxZoomed) {
                var axisBreak = this.isInBreak(value_1);
                if (!axisBreak) {
                    var dataItem = dataItemsIterator_1.find(function (x) { return x.value === value_1; });
                    //this.processDataItem(dataItem);
                    this.appendDataItem(dataItem);
                    dataItem.axisBreak = undefined;
                    if (dataItem.value != value_1) {
                        dataItem.value = value_1;
                        dataItem.text = this.formatLabel(value_1);
                        if (dataItem.label.invalid) {
                            dataItem.label.validate();
                        }
                    }
                    this.validateDataElement(dataItem);
                    i++;
                }
                if (!this.logarithmic) {
                    value_1 += this._step;
                }
                else {
                    var differencePower = Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E;
                    if (differencePower > 1) {
                        value_1 = Math.pow(10, Math.log(this.min) * Math.LOG10E + i);
                    }
                    else {
                        value_1 += this._step;
                    }
                }
            }
            var axisBreaks = this.axisBreaks;
            // breaks later
            var renderer_1 = this.renderer;
            __WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__["each"](axisBreaks.iterator(), function (axisBreak) {
                if (axisBreak.breakSize > 0) {
                    // only add grid if gap is bigger then minGridDistance
                    if (__WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["getDistance"](axisBreak.startPoint, axisBreak.endPoint) > renderer_1.minGridDistance) {
                        var breakValue_1 = axisBreak.adjustedMin;
                        while (breakValue_1 <= axisBreak.adjustedMax) {
                            if (breakValue_1 >= axisBreak.adjustedStartValue && breakValue_1 <= axisBreak.adjustedEndValue) {
                                var dataItem = dataItemsIterator_1.find(function (x) { return x.value === breakValue_1; });
                                //this.processDataItem(dataItem);
                                _this.appendDataItem(dataItem);
                                dataItem.axisBreak = axisBreak;
                                if (dataItem.value != breakValue_1) {
                                    dataItem.value = breakValue_1;
                                    dataItem.text = _this.formatLabel(breakValue_1);
                                    if (dataItem.label.invalid) {
                                        dataItem.label.validate();
                                    }
                                }
                                _this.validateDataElement(dataItem);
                            }
                            breakValue_1 += axisBreak.adjustedStep;
                        }
                    }
                }
            });
        }
    };
    /**
     * Validates axis data item.
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param {ValueAxisDataItem}  dataItem  Data item
     */
    ValueAxis.prototype.validateDataElement = function (dataItem) {
        _super.prototype.validateDataElement.call(this, dataItem);
        dataItem.__disabled = false;
        var renderer = this.renderer;
        var value = dataItem.value;
        var endValue = dataItem.endValue;
        var position = this.valueToPosition(value);
        dataItem.position = position;
        var endPosition = position;
        var fillEndPosition = this.valueToPosition(value + this._step);
        if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](endValue)) {
            endPosition = this.valueToPosition(endValue);
            fillEndPosition = endPosition;
        }
        // this point is needed to calculate distance to satisfy minGridDistance
        dataItem.point = renderer.positionToPoint(position);
        var tick = dataItem.tick;
        if (tick) {
            renderer.updateTickElement(tick, position, endPosition);
        }
        var grid = dataItem.grid;
        if (grid) {
            renderer.updateGridElement(grid, position, endPosition);
        }
        var label = dataItem.label;
        if (label) {
            renderer.updateLabelElement(label, position, endPosition);
        }
        var fill = dataItem.axisFill;
        if (fill) {
            renderer.updateFillElement(fill, position, fillEndPosition);
            if (!dataItem.isRange) {
                this.fillRule(dataItem);
            }
        }
        var mask = dataItem.mask;
        if (mask) {
            renderer.updateFillElement(mask, position, fillEndPosition);
        }
    };
    /**
     * Formats the value according to axis' own [[NumberFormatter]].
     *
     * @param  {number}  value  Source value
     * @return {string}         Formatted value
     */
    ValueAxis.prototype.formatLabel = function (value) {
        return this.numberFormatter.format(value);
    };
    Object.defineProperty(ValueAxis.prototype, "basePoint", {
        /**
         * A coordinate of the axis' base value.
         *
         * @ignore Exclude from docs
         * @return {IPoint} Base point
         */
        get: function () {
            var baseValue = this._baseValue;
            var position = this.valueToPosition(baseValue);
            var basePoint = this.renderer.positionToPoint(position);
            return basePoint;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValueAxis.prototype, "baseValue", {
        /**
         * @return {number} base value
         */
        get: function () {
            return this._baseValue;
        },
        /**
         * A base value.
         *
         * This is a threshold value that will divide "positive" and "negative"
         * value ranges.
         *
         * Other scale-related functionality also depend on base value. E.g. stacks,
         * value-dependent coloring, etc.
         *
         * @param {number} value Base value
         */
        set: function (value) {
            this._baseValue = value;
            this.invalidateLayout();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Converts a numeric value to relative position on axis
     *
     * An alias to `valueToPosition()`.
     *
     * @param  {number}  value  Value
     * @return {number}         Position
     */
    ValueAxis.prototype.anyToPosition = function (value) {
        return this.valueToPosition(value);
    };
    /**
     * Converts a numeric value to orientation point (x, y, angle) on axis
     *
     * @param  {number}  value  Value
     * @return {IOrientationPoint}  Orientation point
     */
    ValueAxis.prototype.valueToPoint = function (value) {
        var position = this.valueToPosition(value);
        var point = this.renderer.positionToPoint(position);
        var angle = this.renderer.positionToAngle(position);
        return { x: point.x, y: point.y, angle: angle };
    };
    /**
     * Converts a numeric value to orientation (x, y, angle) point on axis
     *
     * @param  {number}  value  Value
     * @return {IOrientationPoint}  Orientation point
     */
    ValueAxis.prototype.anyToPoint = function (value) {
        return this.valueToPoint(value);
    };
    /**
     * Converts a numeric value to relative position on axis.
     *
     * @param  {number}  value  Value
     * @return {number}  relative position
     */
    ValueAxis.prototype.valueToPosition = function (value) {
        if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](value)) {
            var strValue = value.toString();
            //let cachedPosition: number = this._valueToPosition[strValue];
            //if ($type.isNumber(cachedPosition)) {
            //				return cachedPosition;
            //			}
            //			else {
            // todo: think if possible to take previous value and do not go through all previous breaks
            var min_1 = this.min;
            var max_1 = this.max;
            if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](min_1) && __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](max_1)) {
                var difference = this._difference;
                if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](difference)) {
                    difference = this.adjustDifference(min_1, max_1);
                }
                var axisBreaks = this.axisBreaks;
                __WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__["eachContinue"](axisBreaks.iterator(), function (axisBreak) {
                    var startValue = axisBreak.adjustedStartValue;
                    var endValue = axisBreak.adjustedEndValue;
                    if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](startValue) && __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](endValue)) {
                        if (value < startValue) {
                            return false;
                        }
                        if (__WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["intersect"]({ start: startValue, end: endValue }, { start: min_1, end: max_1 })) { // todo: check this once and set some flag in axisBreak
                            startValue = Math.max(startValue, min_1);
                            endValue = Math.min(endValue, max_1);
                            var breakSize = axisBreak.breakSize;
                            // value to the right of break end
                            if (value > endValue) {
                                min_1 += (endValue - startValue) * (1 - breakSize); // todo: maybe this can be done differently?
                            }
                            // value to the left of break start
                            else if (value < startValue) {
                            }
                            // value within break
                            else {
                                value = startValue + (value - startValue) * breakSize;
                            }
                        }
                    }
                    return true;
                });
                var position = void 0;
                if (!this.logarithmic) {
                    position = (value - min_1) / difference;
                }
                else {
                    position = (Math.log(value) * Math.LOG10E - Math.log(this.min) * Math.LOG10E) / ((Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E));
                }
                position = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["round"](position, 5);
                //this._valueToPosition[strValue] = position;
                return position;
            }
            //}
        }
    };
    /**
     * Converts an relative position to a corresponding value within
     * axis' scale.
     *
     * @param  {number}  position  Position (px)
     * @return {number}            Value
     */
    ValueAxis.prototype.positionToValue = function (position) {
        position = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["round"](position, 10);
        var strPosition = position.toString();
        //let cachedValue: number = this._positionToValue[strPosition];
        //if ($type.isNumber(cachedValue)) {
        //			return cachedValue;
        //		}
        //		else {
        var min = this.min;
        var max = this.max;
        if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](min) && __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](max)) {
            var difference_1 = max - min; //no need to adjust!
            var axisBreaks = this.axisBreaks;
            var value_2 = null;
            // in case we have some axis breaks
            __WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__["eachContinue"](axisBreaks.iterator(), function (axisBreak) {
                var breakStartPosition = axisBreak.startPosition;
                var breakEndPosition = axisBreak.endPosition;
                var breakStartValue = axisBreak.adjustedStartValue;
                var breakEndValue = axisBreak.adjustedEndValue;
                if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](breakStartValue) && __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](breakEndValue)) {
                    if (breakStartValue > max) {
                        return false;
                    }
                    if (__WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["intersect"]({ start: breakStartValue, end: breakEndValue }, { start: min, end: max })) {
                        breakStartValue = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["max"](breakStartValue, min);
                        breakEndValue = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["min"](breakEndValue, max);
                        var breakSize = axisBreak.breakSize;
                        difference_1 -= (breakEndValue - breakStartValue) * (1 - breakSize);
                        // position to the right of break end
                        if (position > breakEndPosition) {
                            min += (breakEndValue - breakStartValue) * (1 - breakSize);
                        }
                        // position to the left of break start
                        else if (position < breakStartPosition) {
                        }
                        // value within break
                        else {
                            var breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);
                            value_2 = breakStartValue + breakPosition * (breakEndValue - breakStartValue);
                            return false;
                        }
                    }
                    return true;
                }
            });
            if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](value_2)) {
                value_2 = position * difference_1 + min;
            }
            //this._positionToValue[strPosition] = value;
            return value_2;
        }
        //}
    };
    /**
     * Converts an X coordinate to a relative value in axis' scale.
     *
     * @param  {number}  x  X (px)
     * @return {number}     Value
     */
    ValueAxis.prototype.xToValue = function (x) {
        return this.positionToValue(this.pointToPosition({ x: x, y: 0 }));
    };
    /**
     * Converts an Y coordinate to a relative value in axis' scale.
     *
     * @param  {number}  y  Y (px)
     * @return {number}     Value
     */
    ValueAxis.prototype.yToValue = function (y) {
        return this.positionToValue(this.pointToPosition({ x: 0, y: y }));
    };
    /**
     * Converts pixel coordinates to a relative position. (0-1)
     *
     * @param {IPoint}   point  Coorinates (px)
     * @return {number}         Position (0-1)
     */
    ValueAxis.prototype.pointToPosition = function (point) {
        if (this.renderer instanceof __WEBPACK_IMPORTED_MODULE_1__AxisRendererY__["a" /* AxisRendererY */]) {
            return 1 - this.renderer.pointToPosition(point);
        }
        else {
            return this.renderer.pointToPosition(point);
        }
    };
    /**
     * Calculates smallest and biggest value for the axis scale.
     *
     * @todo Description (review)
     */
    ValueAxis.prototype.getMinMax = function () {
        var _this = this;
        var min = Number.POSITIVE_INFINITY;
        var max = Number.NEGATIVE_INFINITY;
        // only if min and max are not set from outside, we go through min and max influencers
        if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](this._minDefined) || !__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](this._maxDefined)) {
            __WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__["each"](this.series.iterator(), function (series) {
                if (!series.ignoreMinMax) {
                    // check min
                    var seriesMin = series.min(_this);
                    if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](seriesMin) && (seriesMin < min)) {
                        min = seriesMin;
                    }
                    // check max
                    var seriesMax = series.max(_this);
                    if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](seriesMax) && (seriesMax > max)) {
                        max = seriesMax;
                    }
                }
            });
        }
        if (min == 0 && max == 0) {
            max = 0.9;
            min = -0.9;
        }
        // if defined from outside
        if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](this._minDefined)) {
            min = this._minDefined;
        }
        if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](this._maxDefined)) {
            max = this._maxDefined;
        }
        if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](min) || !__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](max)) {
            return;
        }
        this._minReal = min;
        this._maxReal = max;
        if (min == Number.POSITIVE_INFINITY) {
            min = undefined;
        }
        if (max == Number.NEGATIVE_INFINITY) {
            max = undefined;
        }
        var dif = this.adjustDifference(min, max); // previously it was max-min, but not worked well
        min = this.fixMin(min);
        max = this.fixMax(max);
        var minMaxStep = this.adjustMinMax(min, max, dif, this._gridCount);
        min = minMaxStep.min;
        max = minMaxStep.max;
        // do it for the second time (importat!)
        minMaxStep = this.adjustMinMax(min, max, max - min, this._gridCount, true);
        min = minMaxStep.min;
        max = minMaxStep.max;
        // return min max if strict
        if (this.strictMinMax) {
            if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](this._minDefined)) {
                min = this._minDefined;
            }
            if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](this._maxDefined)) {
                max = this._maxDefined;
            }
        }
        // checking isNumber is good when all series are hidden
        if ((this._minAdjusted != min || this._maxAdjusted != max) && __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](min) && __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](max)) {
            if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](this._minAdjusted) && __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](this._maxAdjusted) && this.inited) {
                var animation = this._minMaxAnimation;
                if (!animation || this._finalMin != min || this._finalMax != max) {
                    this._finalMin = min;
                    this._finalMax = max;
                    animation = this.animate([{ property: "_minAdjusted", from: this._minAdjusted, to: min }, { property: "_maxAdjusted", from: this._maxAdjusted, to: max }], this.rangeChangeDuration);
                    animation.events.on("animationprogress", function () {
                        _this.validateDataItems();
                    });
                    animation.events.on("animationended", function () {
                        _this.validateDataItems();
                        _this.handleSelectionExtremesChange();
                    });
                    this._minMaxAnimation = animation;
                    this.validateDataItems();
                    this.handleSelectionExtremesChange();
                }
            }
            else {
                this._minAdjusted = min;
                this._maxAdjusted = max;
                this._finalMin = min;
                this._finalMax = max;
                this.invalidateDataItems();
                this.dispatchImmediately("extremeschanged");
            }
        }
    };
    /**
     * Adjusts the minimum value.
     *
     * This is a placeholder method for extending classes to override.
     *
     * For numeric values this does nothing, however for more complex types, like
     * dates, it may be necessary to adjust.
     *
     * @param  {number}  value  Value
     * @return {number}         Adjusted value
     */
    ValueAxis.prototype.fixMin = function (value) {
        return value;
    };
    /**
     * Adjusts the maximum value.
     *
     * This is a placeholder method for extending classes to override.
     *
     * For numeric values this does nothing, however for more complex types, like
     * dates, it may be necessary to adjust.
     *
     * @param  {number}  value  Value
     * @return {number}         Adjusted value
     */
    ValueAxis.prototype.fixMax = function (value) {
        return value;
    };
    /**
     * Adjusts actual min and max scale values so that the axis starts and ends
     * at "nice" values, unless `strictMinMax` is set.
     *
     * The `difference` can be something else than `max - min`, because of the
     * axis breaks.
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {number}      min        [description]
     * @param  {number}      max        [description]
     * @param  {number}      difference [description]
     * @param  {number}      gridCount  [description]
     * @param  {boolean}     strictMode [description]
     * @return {IMinMaxStep}            [description]
     */
    ValueAxis.prototype.adjustMinMax = function (min, max, difference, gridCount, strictMode) {
        // will fail if 0
        if (gridCount <= 0) {
            gridCount = 1;
        }
        var initialMin = min;
        var initialMax = max;
        // in case min and max is the same, use max
        if (difference === 0) {
            difference = Math.abs(max);
        }
        // the number by which we need to raise 10 to get difference
        var exponent = Math.log(Math.abs(difference)) * Math.LOG10E;
        // here we find a number which is power of 10 and has the same count of numbers as difference has
        var power = Math.pow(10, Math.floor(exponent));
        // reduce this number by 10 times
        power = power / 10;
        var extra = power;
        if (strictMode) {
            extra = 0;
        }
        if (!this.logarithmic) {
            // round down min
            if (strictMode) {
                min = Math.floor(min / power) * power;
                // round up max
                max = Math.ceil(max / power) * power;
            }
            else {
                min = Math.ceil(min / power) * power - extra;
                // round up max
                max = Math.floor(max / power) * power + extra;
            }
            // don't let min go below 0 if real min is >= 0
            if (min < 0 && initialMin >= 0) {
                min = 0;
            }
            // don't let max go above 0 if real max is <= 0
            if (max > 0 && initialMax <= 0) {
                max = 0;
            }
        }
        else {
            if (min <= 0) {
                throw Error("Logarithmic value axis can not have vales <= 0.");
            }
            min = Math.pow(10, Math.floor(Math.log(Math.abs(min)) * Math.LOG10E));
            max = Math.pow(10, Math.ceil(Math.log(Math.abs(max)) * Math.LOG10E));
        }
        // repeat diff, exponent and power again with rounded values
        //difference = this.adjustDifference(min, max);
        exponent = Math.log(Math.abs(difference)) * Math.LOG10E;
        power = Math.pow(10, Math.floor(exponent));
        power = power / 10;
        // approximate difference between two grid lines
        var step = Math.ceil((difference / gridCount) / power) * power;
        var stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));
        // TODO: in v3 I had fixStepE here, ommiting it for a while, need to think about other solution
        // the step should divide by  2, 5, and 10.
        var stepDivisor = Math.ceil(step / stepPower); // number 0 - 10
        if (stepDivisor > 5) {
            stepDivisor = 10;
        }
        else if (stepDivisor <= 5 && stepDivisor > 2) {
            stepDivisor = 5;
        }
        // now get real step
        step = Math.ceil(step / (stepPower * stepDivisor)) * stepPower * stepDivisor;
        var decCount = 0;
        // in case numbers are smaller than 1
        if (stepPower < 1) {
            // exponent is less then 1 too. Count decimals of exponent
            decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 1;
            // round step
            step = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["round"](step, decCount);
        }
        if (!this.logarithmic) {
            // final min and max
            min = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["round"](step * Math.floor(min / step), decCount);
            max = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["round"](step * Math.ceil(max / step), decCount);
        }
        return { min: min, max: max, step: step };
    };
    Object.defineProperty(ValueAxis.prototype, "min", {
        /**
         * @return {number} Min value
         */
        get: function () {
            return this._minAdjusted;
        },
        /**
         * A minimum value for the axis scale.
         *
         * This value might be auto-adjusted by the Axis in order to accomodate the
         * grid nicely, i.e. plot area is divided by grid in nice equal cells.
         *
         * The above might be overridden by `strictMinMax` which will force exact
         * user-defined min and max values to be used for scale.
         *
         * @param {number}  value  Min value
         */
        set: function (value) {
            this._minDefined = value;
            this.getMinMax();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValueAxis.prototype, "step", {
        /**
         * [step description]
         *
         * @todo Description
         * @return {number} [description]
         */
        get: function () {
            return this._step;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValueAxis.prototype, "max", {
        /**
         * @return {number} Max value
         */
        get: function () {
            return this._maxAdjusted;
        },
        /**
         * A maximum value for the axis scale.
         *
         * This value might be auto-adjusted by the Axis in order to accomodate the
         * grid nicely, i.e. plot area is divided by grid in nice equal cells.
         *
         * The above might be overridden by `strictMinMax` which will force exact
         * user-defined min and max values to be used for scale.
         *
         * @param {number}  value  Max value
         */
        set: function (value) {
            this._maxDefined = value;
            this.getMinMax();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Used for the Series to register itself as the user of this Axis.
     *
     * This will also decorate both the Series and Axis with event handlers, used
     * to redraw on Axis position/zoom change.
     *
     * A disposer for those events is returned, so that they can be disposed
     * together with Series.
     *
     * @ignore Exclude from docs
     * @param  {XYSeries}   series  Series
     * @return {IDisposer}          Disposer for events
     */
    ValueAxis.prototype.registerSeries = function (series) {
        return new __WEBPACK_IMPORTED_MODULE_2__core_utils_Disposer__["c" /* MultiDisposer */]([
            _super.prototype.registerSeries.call(this, series),
            series.events.on("extremeschanged", this.handleExtremesChange, this),
            series.events.on("selectionextremeschanged", this.handleSelectionExtremesChange, this),
            this.events.on("datarangechanged", series.invalidateDataRange, series),
            this.events.on("extremeschanged", series.invalidate, series)
        ]);
    };
    /**
     * Perform tasks after Axis zoom.
     */
    ValueAxis.prototype.handleSelectionExtremesChange = function () {
        var _this = this;
        var selectionMin;
        var selectionMax;
        var allHidden = true;
        __WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__["each"](this.series.iterator(), function (series) {
            if (!series.ignoreMinMax && series.appeared) {
                if (series.visible && !series.isHiding) {
                    allHidden = false;
                }
                var seriesSelectionMin = series.selectionMin(_this);
                var seriesSelectionMax = series.selectionMax(_this);
                if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](seriesSelectionMin)) {
                    if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](selectionMin) || (seriesSelectionMin < selectionMin)) {
                        selectionMin = seriesSelectionMin;
                    }
                }
                // check max
                if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](seriesSelectionMax)) {
                    if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](selectionMax) || (seriesSelectionMax > selectionMax)) {
                        selectionMax = seriesSelectionMax;
                    }
                }
            }
        });
        if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](this._minDefined)) {
            if (this.strictMinMax) {
                selectionMin = this._minDefined;
            }
            else {
                selectionMin = this.min;
            }
        }
        if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](this._maxDefined)) {
            if (this.strictMinMax) {
                selectionMax = this._maxDefined;
            }
            else {
                selectionMax = this.max;
            }
        }
        var dif = this.adjustDifference(selectionMin, selectionMax);
        var minMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount);
        selectionMin = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["fitToRange"](minMaxStep.min, this.min, this.max);
        selectionMax = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["fitToRange"](minMaxStep.max, this.min, this.max);
        // do it for the second time !important
        dif = this.adjustDifference(selectionMin, selectionMax);
        minMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount, true);
        selectionMin = minMaxStep.min;
        selectionMax = minMaxStep.max;
        if (this.strictMinMax) {
            selectionMin = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["max"](selectionMin, this._minDefined);
            selectionMax = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["min"](selectionMax, this._maxDefined);
        }
        var start = this.valueToPosition(selectionMin);
        var end = this.valueToPosition(selectionMax);
        // in case all series are hidden or hiding, full zoomout
        if (allHidden) {
            start = 0;
            end = 1;
        }
        // temp, not sure. solving selection.change jumping
        /*
        if(selectionMin < this.min){
            this._minAdjusted = selectionMin;
        }

        if(selectionMax > this.max){
            this._maxAdjusted = selectionMax;
        } 	*/
        this.zoom({ start: start, end: end }, false);
    };
    Object.defineProperty(ValueAxis.prototype, "strictMinMax", {
        /**
         * @return {boolean} Use exact values?
         */
        get: function () {
            return this.getPropertyValue("strictMinMax");
        },
        /**
         * Indicates whether to blindly use exact `min` and `max` values set by user
         * when generating Axis scale.
         *
         * If not set, the Axis might slightly adjust those values to accomodate a
         * better looking grid.
         *
         * @default false
         * @param {boolean} value Use exact values?
         */
        set: function (value) {
            this.setPropertyValue("strictMinMax", value);
            this.invalidateDataRange();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValueAxis.prototype, "logarithmic", {
        /**
         * @return {boolean} Logarithmic scale?
         */
        get: function () {
            return this.getPropertyValue("logarithmic");
        },
        /**
         * Indicates if this axis should use a logarithmic scale.
         *
         * Please note that logarithmic axis can **only** accommodate values bigger
         * than zero.
         *
         * Having zero or negative values will result in error and failure of the
         * whole chart.
         *
         * @param {boolean} value Logarithmic scale?
         */
        set: function (value) {
            this.setPropertyValue("logarithmic", value);
            this.invalidateDataRange();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Invalidates axis data items when series extremes change
     */
    ValueAxis.prototype.handleExtremesChange = function () {
        this.getMinMax();
    };
    /**
     * Returns the X coordinate for series' data item's value.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     * @param  {XYSeriesDataItem}  dataItem  Data item
     * @param  {string}            key       Data field to get value from
     * @param  {number}            location  Location (0-1)
     * @param  {string}            stackKey  ?
     * @return {number}                      X coordinate (px)
     */
    ValueAxis.prototype.getX = function (dataItem, key, location, stackKey) {
        var value = dataItem.getWorkingValue(key);
        if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["hasValue"](stackKey)) {
            stackKey = "valueX";
        }
        var stack = dataItem.getValue(stackKey, "stack");
        if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](value)) {
            value = this.baseValue;
        }
        return this.renderer.positionToPoint(this.valueToPosition(value + stack)).x;
    };
    /**
     * Returns the Y coordinate for series' data item's value.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     * @param  {XYSeriesDataItem}  dataItem  Data item
     * @param  {string}            key       Data field to get value from
     * @param  {number}            location  Location (0-1)
     * @param  {string}            stackKey  Stack ID
     * @return {number}                      Y coordinate (px)
     */
    ValueAxis.prototype.getY = function (dataItem, key, location, stackKey) {
        var value = dataItem.getWorkingValue(key);
        if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["hasValue"](stackKey)) {
            stackKey = "valueY";
        }
        var stack = dataItem.getValue(stackKey, "stack");
        if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](value)) {
            value = this.baseValue;
        }
        return this.renderer.positionToPoint(this.valueToPosition(value + stack)).y;
    };
    /**
     * Returns an angle for series data item.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     * @param  {XYSeriesDataItem}  dataItem  Data item
     * @param  {string}            key       Data field to get value from
     * @param  {number}            location  Location (0-1)
     * @param  {string}            stackKey  Stack ID
     * @return {number}                      Angle
     */
    ValueAxis.prototype.getAngle = function (dataItem, key, location, stackKey) {
        var value = dataItem.getWorkingValue(key);
        var stack = dataItem.getValue(stackKey, "stack");
        if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](value)) {
            value = this.baseValue;
        }
        return this.positionToAngle(this.valueToPosition(value + stack));
    };
    /**
     * [getAnyRangePath description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {number}  start     [description]
     * @param  {number}  end       [description]
     * @param  {number}  location  [description]
     * @return {string}            [description]
     */
    ValueAxis.prototype.getAnyRangePath = function (start, end, location) {
        var startPosition = this.valueToPosition(start);
        var endPosition = this.valueToPosition(end);
        return this.getPositionRangePath(startPosition, endPosition); // Base class (Axis) gets range shape from AxisRenderer
    };
    /**
     * Returns text to show in a axis tooltip, based on specific position within
     * axis.
     *
     * The label will be formatted as per [[NumberFormatter]] set for the whole
     * chart, or explicitly for this Axis.
     *
     * @ignore Exclude from docs
     * @param  {number}  position  Position (px)
     * @return {string}            Label (numeric value)
     */
    ValueAxis.prototype.getTooltipText = function (position) {
        var value = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["round"](this.positionToValue(position), this._stepDecimalPlaces);
        return this.adapter.apply("getTooltipText", this.tooltip.numberFormatter.format(value));
    };
    /**
     * Zooms axis to specific values.
     *
     * @param {number}   startValue      Start value
     * @param {number}   endValue        End value
     * @param {boolean}  skipRangeEvent  Do not invoke events
     * @param {boolean}  instantly       Do not play zoom animations
     */
    ValueAxis.prototype.zoomToValues = function (startValue, endValue, skipRangeEvent, instantly) {
        var start = (startValue - this.min) / (this.max - this.min);
        var end = (endValue - this.min) / (this.max - this.min);
        this.zoom({ start: start, end: end }, skipRangeEvent, instantly);
    };
    Object.defineProperty(ValueAxis.prototype, "minZoomed", {
        /**
         * A smallest value in axis scale within current zoom.
         *
         * @return {number} Min zoom value
         */
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["max"](this.min, this._minZoomed);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValueAxis.prototype, "maxZoomed", {
        /**
         * A biggest value in axis scale within current zoom.
         * @return {number} [description]
         */
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["min"](this.max, this._maxZoomed);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Updates positioning of Axis breaks after something changes.
     *
     * @ignore Exclude from docs
     */
    ValueAxis.prototype.fixAxisBreaks = function () {
        var _this = this;
        _super.prototype.fixAxisBreaks.call(this);
        // process breaks
        __WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__["each"](this.axisBreaks.iterator(), function (axisBreak) {
            var startValue = axisBreak.adjustedStartValue;
            var endValue = axisBreak.adjustedEndValue;
            // break difference
            var axisBreakDif = endValue - startValue;
            var axisBreakGridCount = Math.ceil(axisBreakDif / _this._step * axisBreak.breakSize);
            // calculate min, max and step for axis break
            var breakMinMaxStep = _this.adjustMinMax(startValue, endValue, axisBreakDif, axisBreakGridCount);
            axisBreak.adjustedStep = breakMinMaxStep.step;
            axisBreak.adjustedMin = breakMinMaxStep.min;
            axisBreak.adjustedMax = breakMinMaxStep.max;
        });
        this._difference = this.adjustDifference(this.min, this.max);
    };
    /**
     * Returns value based on position.
     *
     * @param  {number}  position  Relative position on axis (0-1)
     * @return {string}            Position label
     */
    ValueAxis.prototype.getPositionLabel = function (position) {
        var value = this.positionToValue(position);
        return this.numberFormatter.format(value);
    };
    /**
     * Shows Axis tooltip at specific value
     *
     * @param {number} value Value
     */
    ValueAxis.prototype.showTooltipAt = function (value) {
        this.showTooltipAtPosition(this.valueToPosition(value));
    };
    return ValueAxis;
}(__WEBPACK_IMPORTED_MODULE_0__Axis__["a" /* Axis */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_3__core_Registry__["b" /* registry */].registeredClasses["ValueAxis"] = ValueAxis;
__WEBPACK_IMPORTED_MODULE_3__core_Registry__["b" /* registry */].registeredClasses["ValueAxisDataItem"] = ValueAxisDataItem;
//# sourceMappingURL=ValueAxis.js.map

/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Keyboard; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return keyboard; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Type__ = __webpack_require__(1);
/**
 * A collection of keyboard-related utilities accessible via `keyboard`
 * instance.
 */
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

/**
 * A class that represents collection of keyboard-related utilities.
 *
 * Do not instantiate this class directly, but rather use `keyboard` variable.
 */
var Keyboard = /** @class */ (function () {
    function Keyboard() {
    }
    /**
     * Returns a named key based on information contained in the event or
     * "other".
     *
     * @param  {KeyboardEvent}  ev  A keyboard event
     * @return {KeyboardKeys}       Keyboard named key
     */
    Keyboard.prototype.getEventKey = function (ev) {
        // Get the key code
        var code = ev.keyCode || ev.which, key;
        // Map to internal key
        switch (code) {
            case 38:
                key = "up";
                break;
            case 40:
                key = "down";
                break;
            case 37:
                key = "left";
                break;
            case 39:
                key = "right";
                break;
            case 13:
                key = "enter";
                break;
            case 27:
                key = "esc";
                break;
            case 36:
                key = "home";
                break;
            case 35:
                key = "end";
                break;
            case 9:
                key = "tab";
                break;
            case 17:
                key = "ctrl";
                break;
            case 18:
                key = "alt";
                break;
            case 16:
                key = "shift";
                break;
            case 32:
                key = "space";
                break;
            case 36:
                key = "home";
                break;
            case 35:
                key = "end";
                break;
            case 33:
                key = "pgup";
                break;
            case 34:
                key = "pgdn";
                break;
            case 45:
                key = "ins";
                break;
            case 46:
                key = "del";
                break;
            case 107:
                key = "plus";
                break;
            case 109:
                key = "minus";
                break;
            default:
                key = "other";
                break;
        }
        return key;
    };
    /**
     * Checks if event key is one or more of the selected named keys.
     *
     * @param  {KeyboardEvent}      ev   Keyboard event
     * @param  {string | string[]}  key  Named key or array of keys
     * @return {boolean}                 Is event key one of the list?
     */
    Keyboard.prototype.isKey = function (ev, key) {
        var eventKey = this.getEventKey(ev);
        if (__WEBPACK_IMPORTED_MODULE_0__Type__["isString"](key)) {
            key = [key];
        }
        return key.indexOf(eventKey) !== -1;
    };
    /**
     * Returns `true` if shift key was presset at the moment of the event.
     *
     * @param  {KeyboardEvent | MouseEvent}  ev  Event object
     * @return {boolean}                         Was shift pressed?
     */
    Keyboard.prototype.shiftKey = function (ev) {
        return ev.shiftKey;
    };
    /**
     * Returns `true` if ctrl key was presset at the moment of the event.
     *
     * @param  {KeyboardEvent | MouseEvent}  ev  Event object
     * @return {boolean}                         Was ctrl pressed?
     */
    Keyboard.prototype.ctrlKey = function (ev) {
        return ev.ctrlKey;
    };
    /**
     * Returns `true` if alt key was presset at the moment of the event
     * @param  {KeyboardEvent | MouseEvent}  ev  Event object
     * @return {boolean}                         Was alt pressed?
     */
    Keyboard.prototype.altKey = function (ev) {
        return ev.altKey;
    };
    /**
     * Returns `true` if meta key was presset at the moment of the event
     * @param  {KeyboardEvent | MouseEvent}  ev  Event object
     * @return {boolean}                         Was meta pressed?
     */
    Keyboard.prototype.metaKey = function (ev) {
        return ev.metaKey;
    };
    return Keyboard;
}());

/**
 * A single [[Keyboard]] instance to be reused across all elements so that
 * they don't need to instantiate their own.
 *
 * @ignore Exclude from docs
 */
var keyboard = new Keyboard();
//# sourceMappingURL=Keyboard.js.map

/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AxisRendererY; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__AxisRenderer__ = __webpack_require__(65);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_elements_WavedLine__ = __webpack_require__(75);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_elements_WavedRectangle__ = __webpack_require__(102);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__ = __webpack_require__(6);
/**
 * Module, defining Axis Renderer for vertical axes.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */








/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * A renderer for vertical axis.
 *
 * @see {@link IAxisRendererYEvents} for a list of available events
 * @see {@link IAxisRendererYAdapters} for a list of available Adapters
 */
var AxisRendererY = /** @class */ (function (_super) {
    __extends(AxisRendererY, _super);
    /**
     * Constructor.
     *
     * @param {Axis} axis Related axis
     */
    function AxisRendererY() {
        var _this = _super.call(this) || this;
        _this.className = "AxisRendererY";
        _this.minGridDistance = 40;
        _this.opposite = false;
        _this.height = Object(__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__["c" /* percent */])(100);
        _this.labels.template.verticalCenter = "middle";
        _this.applyTheme();
        return _this;
    }
    /**
    * @ignore
    */
    AxisRendererY.prototype.setAxis = function (axis) {
        _super.prototype.setAxis.call(this, axis);
        axis.layout = "horizontal";
    };
    /**
     * Called when rendered is attached to an Axis, as well as a property of
     * Axis that might affect the appearance is updated.
     *
     * E.g. `axis.opposite`, `axis.inside`, etc.
     *
     * This method is called **before** draw, so that any related setting
     * changed in this method can be changed.
     *
     * @todo Description (review)
     * @ignore Exclude from docs
     */
    AxisRendererY.prototype.processRenderer = function () {
        _super.prototype.processRenderer.call(this);
        var axis = this.axis;
        if (axis) {
            var title = axis.title;
            title.valign = "middle";
            axis.height = Object(__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__["c" /* percent */])(100);
            if (this.opposite) {
                title.rotation = 90;
                this.line.toBack();
                title.toFront();
            }
            else {
                title.rotation = -90;
                title.toBack();
                this.line.toFront();
            }
        }
    };
    /**
     * Updates some of the Axis tooltip's visual properties, related to
     * rendering of the Axis.
     *
     * @todo Description (review)
     * @ignore Exclude from docs
     */
    AxisRendererY.prototype.updateTooltip = function () {
        var axis = this.axis;
        if (axis) {
            var bigNum = 2000;
            var bbx = 0;
            var bby = 0;
            var bbw = bigNum;
            var bbh = this.pixelHeight;
            // right
            if (this.opposite) {
                if (this.inside) {
                    bbx = -bigNum;
                    bbw = bigNum;
                }
            }
            // left
            else {
                if (!this.inside) {
                    bbx = -bigNum;
                    bbw = bigNum;
                }
            }
            this.axis.updateTooltip("horizontal", { x: bbx, y: bby, width: bbw, height: bbh });
        }
    };
    Object.defineProperty(AxisRendererY.prototype, "axisLength", {
        /**
         * Returns actual length of the Axis, in pixels.
         *
         * @return {number} Length (px)
         */
        get: function () {
            var axis = this.axis;
            return axis.pixelHeight - axis.pixelPaddingTop - axis.pixelPaddingBottom;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Converts relative position on axis to point coordinates.
     *
     * @param  {number}  position  Position (0-1)
     * @return {IPoint}            Point
     */
    AxisRendererY.prototype.positionToPoint = function (position) {
        return { x: 0, y: this.positionToCoordinate(position) };
    };
    /**
     * Converts a point at specific coordinates to a relative position (0-1)
     * on the axis.
     *
     * @param  {IPoint}  point  Point
     * @return {number}         Position (0-1)
     */
    AxisRendererY.prototype.pointToPosition = function (point) {
        return this.coordinateToPosition(point.y);
    };
    /**
     * [getPositionRangePath description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {number}  startPosition  Starting position
     * @param  {number}  endPosition    End position
     * @return {string}                 SVG path
     */
    AxisRendererY.prototype.getPositionRangePath = function (startPosition, endPosition) {
        var y1 = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["fitToRange"](this.positionToCoordinate(startPosition), 0, this.axisLength);
        var y2 = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["fitToRange"](this.positionToCoordinate(endPosition), 0, this.axisLength);
        var h = Math.abs(y2 - y1);
        var w = this.getWidth();
        var y = Math.min(y1, y2);
        var x = 0;
        return __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["rectToPath"]({
            x: x,
            y: y,
            width: w,
            height: h
        }, true);
    };
    /**
     * Updates and positions a grid element.
     *
     * @ignore Exclude from docs
     * @param {Grid}    grid         Grid element
     * @param {number}  position     Starting position
     * @param {number}  endPosition  End position
     */
    AxisRendererY.prototype.updateGridElement = function (grid, position, endPosition) {
        var point = this.positionToPoint(position);
        if (grid.element) {
            grid.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["moveTo"]({ x: 0, y: 0 }) + __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["lineTo"]({ x: this.getWidth(), y: 0 }) });
        }
        this.positionItem(grid, point);
        this.toggleVisibility(grid, position, 0, 1);
    };
    /**
     * Updates and positions a tick element.
     *
     * @ignore Exclude from docs
     * @param {AxisTick}  tick         Tick element
     * @param {number}    position     Starting position
     * @param {number}    endPosition  End position
     */
    AxisRendererY.prototype.updateTickElement = function (tick, position, endPosition) {
        var point = this.positionToPoint(position);
        var tickLength = tick.length;
        if (!this.opposite) {
            point.x = this.pixelWidth;
            tickLength *= (tick.inside ? 1 : -1);
        }
        else {
            tickLength *= (tick.inside ? -1 : 1);
        }
        tick.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["moveTo"]({ x: 0, y: 0 }) + __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["lineTo"]({ x: tickLength, y: 0 }) });
        this.positionItem(tick, point);
        this.toggleVisibility(tick, position, 0, 1);
    };
    /**
     * Updates and positions the axis line element.
     *
     * @ignore Exclude from docs
     */
    AxisRendererY.prototype.updateAxisLine = function () {
        var element = this.line.element;
        if (element) {
            element.attr({ "d": __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["moveTo"]({ x: 0, y: 0 }) + __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["lineTo"]({ x: 0, y: this.axisLength }) });
        }
    };
    /**
     * Updates and positions the base grid element.
     *
     * @ignore Exclude from docs
     */
    AxisRendererY.prototype.updateBaseGridElement = function () {
        _super.prototype.updateBaseGridElement.call(this);
        var axis = this.axis;
        var w = this.getWidth();
        var h = this.getHeight();
        var y = axis.basePoint.y;
        var baseGrid = this.baseGrid;
        if (y < 0 || y > h) {
            baseGrid.hide(0);
        }
        else {
            var x = __WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__["spritePointToSprite"]({ x: 0, y: 0 }, this.gridContainer, baseGrid.parent).x;
            baseGrid.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["moveTo"]({ x: 0, y: 0 }) + __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["lineTo"]({ x: w, y: 0 }) });
            baseGrid.moveTo({ x: x, y: y });
            baseGrid.show(0);
        }
    };
    /**
     * Updates and positions a label element.
     *
     * @ignore Exclude from docs
     * @param {AxisLabel}  label        Label element
     * @param {number}     position     Starting position
     * @param {number}     endPosition  Ending position
     */
    AxisRendererY.prototype.updateLabelElement = function (label, position, endPosition) {
        position = position + (endPosition - position) * label.location;
        label.isMeasured = !label.inside;
        var point = this.positionToPoint(position);
        var horizontalCenter;
        var deltaX = 0;
        if (this.opposite) {
            if (label.inside) {
                horizontalCenter = "right";
            }
            else {
                horizontalCenter = "left";
            }
            if (label.inside) {
                if (label.align == "left") {
                    deltaX = -this.maxWidth + this.pixelWidth;
                    ;
                    horizontalCenter = "left";
                }
            }
            point.x = 0 + deltaX;
        }
        else {
            if (label.inside) {
                horizontalCenter = "left";
            }
            else {
                horizontalCenter = "right";
            }
            if (label.inside) {
                if (label.align == "right") {
                    deltaX = this.maxWidth - this.pixelWidth;
                    horizontalCenter = "right";
                }
            }
            point.x = this.pixelWidth + deltaX;
        }
        label.horizontalCenter = horizontalCenter;
        this.positionItem(label, point);
        this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);
    };
    /**
     * Updates and positions an axis break element.
     *
     * @ignore Exclude from docs
     * @param {AxisBreak} axisBreak Break element
     */
    AxisRendererY.prototype.updateBreakElement = function (axisBreak) {
        _super.prototype.updateBreakElement.call(this, axisBreak);
        var startLine = axisBreak.startLine;
        var endLine = axisBreak.endLine;
        var fillShape = axisBreak.fillShape;
        var startPoint = axisBreak.startPoint;
        var endPoint = axisBreak.endPoint;
        var x1 = axisBreak.pixelMarginLeft;
        var x2 = this.getWidth() - axisBreak.pixelMarginLeft - axisBreak.pixelMarginRight;
        startPoint.y = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["fitToRange"](startPoint.y, -1, this.pixelHeight + 1);
        endPoint.y = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["fitToRange"](endPoint.y, -1, this.pixelHeight + 1);
        if (startPoint.y == endPoint.y && (startPoint.y < 0 || startPoint.y > this.pixelHeight)) {
            axisBreak.fillShape.__disabled = true;
        }
        else {
            axisBreak.fillShape.__disabled = false;
        }
        var w = Math.abs(x2 - x1);
        startLine.x = x1;
        startLine.height = 0;
        startLine.width = w;
        endLine.x = x1;
        endLine.height = 0;
        endLine.width = w;
        fillShape.width = w;
        fillShape.height = Math.abs(endPoint.y - startPoint.y);
        fillShape.x = x1;
        fillShape.y = endPoint.y;
    };
    /**
     * Creates visual elements for and axis break.
     *
     * @ignore Exclude from docs
     * @param {AxisBreak} axisBreak Axis break
     */
    AxisRendererY.prototype.createBreakSprites = function (axisBreak) {
        axisBreak.startLine = new __WEBPACK_IMPORTED_MODULE_1__core_elements_WavedLine__["a" /* WavedLine */]();
        axisBreak.endLine = new __WEBPACK_IMPORTED_MODULE_1__core_elements_WavedLine__["a" /* WavedLine */]();
        var wavedRectangle = new __WEBPACK_IMPORTED_MODULE_2__core_elements_WavedRectangle__["a" /* WavedRectangle */]();
        wavedRectangle.setWavedSides(true, false, true, false);
        axisBreak.fillShape = wavedRectangle;
    };
    /**
     * Converts a position on the axis to a coordinate in pixels.
     *
     * @ignore Exclude from docs
     * @param  {number}  position  Position (0-1)
     * @return {number}            Coordinate (px)
     */
    AxisRendererY.prototype.positionToCoordinate = function (position) {
        var coordinate;
        var axis = this.axis;
        var axisFullLength = axis.axisFullLength;
        if (!axis.renderer.inversed) {
            coordinate = (axis.end - position) * axisFullLength;
        }
        else {
            coordinate = (position - axis.start) * axisFullLength;
        }
        return __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["round"](coordinate, 1);
    };
    return AxisRendererY;
}(__WEBPACK_IMPORTED_MODULE_0__AxisRenderer__["a" /* AxisRenderer */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_3__core_Registry__["b" /* registry */].registeredClasses["AxisRendererY"] = AxisRendererY;
//# sourceMappingURL=AxisRendererY.js.map

/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return raf; });
/* harmony export (immutable) */ __webpack_exports__["a"] = nextFrame;
/* harmony export (immutable) */ __webpack_exports__["c"] = readFrame;
/* harmony export (immutable) */ __webpack_exports__["f"] = writeFrame;
/* harmony export (immutable) */ __webpack_exports__["e"] = whenIdle;
/* harmony export (immutable) */ __webpack_exports__["d"] = triggerIdle;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Array__ = __webpack_require__(12);
/**
 * A collection of low-level async operation stuff.
 */
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

var pendingFrame = false;
var nextQueue = [];
var readQueue = [];
var writeQueue = [];
var idleQueue = [];
var fps = 1000 / 60;
/**
 * [raf description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @type {[type]}
 */
var raf = (typeof requestAnimationFrame === "function"
    ? function (fn) {
        requestAnimationFrame(fn);
    }
    : function (fn) {
        setTimeout(fn, fps);
    });
/**
 * [frameLoop description]
 *
 * @ignore Exclude from docs
 * @todo Description
 */
function frameLoop() {
    var now = Date.now();
    var length = nextQueue.length;
    for (var i = 0; i < length; ++i) {
        nextQueue[i](now);
    }
    __WEBPACK_IMPORTED_MODULE_0__Array__["m" /* shiftLeft */](nextQueue, length);
    for (var i = 0; i < readQueue.length; ++i) {
        readQueue[i](now);
    }
    readQueue.length = 0;
    for (var i = 0; i < writeQueue.length; ++i) {
        writeQueue[i](now);
    }
    writeQueue.length = 0;
    if (nextQueue.length === 0 && readQueue.length === 0) {
        pendingFrame = false;
    }
    else {
        raf(frameLoop);
    }
}
/**
 * [pendFrame description]
 *
 * @ignore Exclude from docs
 * @todo Description
 */
function pendFrame() {
    if (!pendingFrame) {
        pendingFrame = true;
        raf(frameLoop);
    }
}
/**
 * [nextFrame description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param {Listener} fn [description]
 */
function nextFrame(fn) {
    nextQueue.push(fn);
    pendFrame();
}
/**
 * [readFrame description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param {Listener} fn [description]
 */
function readFrame(fn) {
    readQueue.push(fn);
    pendFrame();
}
/**
 * [writeFrame description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param {Listener} fn [description]
 */
function writeFrame(fn) {
    writeQueue.push(fn);
    pendFrame();
}
/**
 * [whenIdle description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param {Listener} fn [description]
 */
function whenIdle(fn) {
    idleQueue.push(fn);
}
/**
 * [triggerIdle description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @todo Maybe don't trigger a callback which was added while in the middle of triggering?
 */
function triggerIdle() {
    var now = Date.now();
    var length = idleQueue.length;
    for (var i = 0; i < length; ++i) {
        idleQueue.shift()(now);
    }
}
//# sourceMappingURL=AsyncPending.js.map

/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["rgb"] = rgb;
/* harmony export (immutable) */ __webpack_exports__["hexToRgb"] = hexToRgb;
/* harmony export (immutable) */ __webpack_exports__["rgbaToRgb"] = rgbaToRgb;
/* harmony export (immutable) */ __webpack_exports__["rgbToHex"] = rgbToHex;
/* harmony export (immutable) */ __webpack_exports__["rgbToRGBA"] = rgbToRGBA;
/* harmony export (immutable) */ __webpack_exports__["pad2"] = pad2;
/* harmony export (immutable) */ __webpack_exports__["interpolate"] = interpolate;
/* harmony export (immutable) */ __webpack_exports__["lighten"] = lighten;
/* harmony export (immutable) */ __webpack_exports__["getLightnessStep"] = getLightnessStep;
/* harmony export (immutable) */ __webpack_exports__["brighten"] = brighten;
/* harmony export (immutable) */ __webpack_exports__["getBrightnessStep"] = getBrightnessStep;
/* harmony export (immutable) */ __webpack_exports__["saturate"] = saturate;
/* harmony export (immutable) */ __webpack_exports__["hslToRgb"] = hslToRgb;
/* harmony export (immutable) */ __webpack_exports__["rgbToHsl"] = rgbToHsl;
/* harmony export (immutable) */ __webpack_exports__["rgbToHsv"] = rgbToHsv;
/* harmony export (immutable) */ __webpack_exports__["hsvToRgb"] = hsvToRgb;
/* harmony export (immutable) */ __webpack_exports__["isLight"] = isLight;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Type__ = __webpack_require__(1);
/**
 * A collection of color-related functions
 */
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * Define named colors for easy resolution to RGB.
 *
 * @type {Object}
 */
var namedColors = {
    aliceblue: { r: 240, g: 248, b: 255 },
    antiquewhite: { r: 250, g: 235, b: 215 },
    aqua: { r: 0, g: 255, b: 255 },
    aquamarine: { r: 127, g: 255, b: 212 },
    azure: { r: 240, g: 255, b: 255 },
    beige: { r: 245, g: 245, b: 220 },
    bisque: { r: 255, g: 228, b: 196 },
    black: { r: 0, g: 0, b: 0 },
    blanchedalmond: { r: 255, g: 235, b: 205 },
    blue: { r: 0, g: 0, b: 255 },
    blueviolet: { r: 138, g: 43, b: 226 },
    brown: { r: 165, g: 42, b: 42 },
    burlywood: { r: 222, g: 184, b: 135 },
    cadetblue: { r: 95, g: 158, b: 160 },
    chartreuse: { r: 127, g: 255, b: 0 },
    chocolate: { r: 210, g: 105, b: 30 },
    coral: { r: 255, g: 127, b: 80 },
    cornflowerblue: { r: 100, g: 149, b: 237 },
    cornsilk: { r: 255, g: 248, b: 220 },
    crimson: { r: 220, g: 20, b: 60 },
    cyan: { r: 0, g: 255, b: 255 },
    darkblue: { r: 0, g: 0, b: 139 },
    darkcyan: { r: 0, g: 139, b: 139 },
    darkgoldenrod: { r: 184, g: 134, b: 11 },
    darkgray: { r: 169, g: 169, b: 169 },
    darkgrey: { r: 169, g: 169, b: 169 },
    darkgreen: { r: 0, g: 100, b: 0 },
    darkkhaki: { r: 189, g: 183, b: 107 },
    darkmagenta: { r: 139, g: 0, b: 139 },
    darkolivegreen: { r: 85, g: 107, b: 47 },
    darkorange: { r: 255, g: 140, b: 0 },
    darkorchid: { r: 153, g: 50, b: 204 },
    darkred: { r: 139, g: 0, b: 0 },
    darksalmon: { r: 233, g: 150, b: 122 },
    darkseagreen: { r: 143, g: 188, b: 143 },
    darkslateblue: { r: 72, g: 61, b: 139 },
    darkslategray: { r: 47, g: 79, b: 79 },
    darkslategrey: { r: 47, g: 79, b: 79 },
    darkturquoise: { r: 0, g: 206, b: 209 },
    darkviolet: { r: 148, g: 0, b: 211 },
    deeppink: { r: 255, g: 20, b: 147 },
    deepskyblue: { r: 0, g: 191, b: 255 },
    dimgray: { r: 105, g: 105, b: 105 },
    dimgrey: { r: 105, g: 105, b: 105 },
    dodgerblue: { r: 30, g: 144, b: 255 },
    firebrick: { r: 178, g: 34, b: 34 },
    floralwhite: { r: 255, g: 250, b: 240 },
    forestgreen: { r: 34, g: 139, b: 34 },
    fuchsia: { r: 255, g: 0, b: 255 },
    gainsboro: { r: 220, g: 220, b: 220 },
    ghostwhite: { r: 248, g: 248, b: 255 },
    gold: { r: 255, g: 215, b: 0 },
    goldenrod: { r: 218, g: 165, b: 32 },
    gray: { r: 128, g: 128, b: 128 },
    grey: { r: 128, g: 128, b: 128 },
    green: { r: 0, g: 128, b: 0 },
    greenyellow: { r: 173, g: 255, b: 47 },
    honeydew: { r: 240, g: 255, b: 240 },
    hotpink: { r: 255, g: 105, b: 180 },
    indianred: { r: 205, g: 92, b: 92 },
    indigo: { r: 75, g: 0, b: 130 },
    ivory: { r: 255, g: 255, b: 240 },
    khaki: { r: 240, g: 230, b: 140 },
    lavender: { r: 230, g: 230, b: 250 },
    lavenderblush: { r: 255, g: 240, b: 245 },
    lawngreen: { r: 124, g: 252, b: 0 },
    lemonchiffon: { r: 255, g: 250, b: 205 },
    lightblue: { r: 173, g: 216, b: 230 },
    lightcoral: { r: 240, g: 128, b: 128 },
    lightcyan: { r: 224, g: 255, b: 255 },
    lightgoldenrodyellow: { r: 250, g: 250, b: 210 },
    lightgray: { r: 211, g: 211, b: 211 },
    lightgrey: { r: 211, g: 211, b: 211 },
    lightgreen: { r: 144, g: 238, b: 144 },
    lightpink: { r: 255, g: 182, b: 193 },
    lightsalmon: { r: 255, g: 160, b: 122 },
    lightseagreen: { r: 32, g: 178, b: 170 },
    lightskyblue: { r: 135, g: 206, b: 250 },
    lightslategray: { r: 119, g: 136, b: 153 },
    lightslategrey: { r: 119, g: 136, b: 153 },
    lightsteelblue: { r: 176, g: 196, b: 222 },
    lightyellow: { r: 255, g: 255, b: 224 },
    lime: { r: 0, g: 255, b: 0 },
    limegreen: { r: 50, g: 205, b: 50 },
    linen: { r: 250, g: 240, b: 230 },
    magenta: { r: 255, g: 0, b: 255 },
    maroon: { r: 128, g: 0, b: 0 },
    mediumaquamarine: { r: 102, g: 205, b: 170 },
    mediumblue: { r: 0, g: 0, b: 205 },
    mediumorchid: { r: 186, g: 85, b: 211 },
    mediumpurple: { r: 147, g: 112, b: 219 },
    mediumseagreen: { r: 60, g: 179, b: 113 },
    mediumslateblue: { r: 123, g: 104, b: 238 },
    mediumspringgreen: { r: 0, g: 250, b: 154 },
    mediumturquoise: { r: 72, g: 209, b: 204 },
    mediumvioletred: { r: 199, g: 21, b: 133 },
    midnightblue: { r: 25, g: 25, b: 112 },
    mintcream: { r: 245, g: 255, b: 250 },
    mistyrose: { r: 255, g: 228, b: 225 },
    moccasin: { r: 255, g: 228, b: 181 },
    navajowhite: { r: 255, g: 222, b: 173 },
    navy: { r: 0, g: 0, b: 128 },
    oldlace: { r: 253, g: 245, b: 230 },
    olive: { r: 128, g: 128, b: 0 },
    olivedrab: { r: 107, g: 142, b: 35 },
    orange: { r: 255, g: 165, b: 0 },
    orangered: { r: 255, g: 69, b: 0 },
    orchid: { r: 218, g: 112, b: 214 },
    palegoldenrod: { r: 238, g: 232, b: 170 },
    palegreen: { r: 152, g: 251, b: 152 },
    paleturquoise: { r: 175, g: 238, b: 238 },
    palevioletred: { r: 219, g: 112, b: 147 },
    papayawhip: { r: 255, g: 239, b: 213 },
    peachpuff: { r: 255, g: 218, b: 185 },
    peru: { r: 205, g: 133, b: 63 },
    pink: { r: 255, g: 192, b: 203 },
    plum: { r: 221, g: 160, b: 221 },
    powderblue: { r: 176, g: 224, b: 230 },
    purple: { r: 128, g: 0, b: 128 },
    rebeccapurple: { r: 102, g: 51, b: 153 },
    red: { r: 255, g: 0, b: 0 },
    rosybrown: { r: 188, g: 143, b: 143 },
    royalblue: { r: 65, g: 105, b: 225 },
    saddlebrown: { r: 139, g: 69, b: 19 },
    salmon: { r: 250, g: 128, b: 114 },
    sandybrown: { r: 244, g: 164, b: 96 },
    seagreen: { r: 46, g: 139, b: 87 },
    seashell: { r: 255, g: 245, b: 238 },
    sienna: { r: 160, g: 82, b: 45 },
    silver: { r: 192, g: 192, b: 192 },
    skyblue: { r: 135, g: 206, b: 235 },
    slateblue: { r: 106, g: 90, b: 205 },
    slategray: { r: 112, g: 128, b: 144 },
    slategrey: { r: 112, g: 128, b: 144 },
    snow: { r: 255, g: 250, b: 250 },
    springgreen: { r: 0, g: 255, b: 127 },
    steelblue: { r: 70, g: 130, b: 180 },
    tan: { r: 210, g: 180, b: 140 },
    teal: { r: 0, g: 128, b: 128 },
    thistle: { r: 216, g: 191, b: 216 },
    tomato: { r: 255, g: 99, b: 71 },
    turquoise: { r: 64, g: 224, b: 208 },
    violet: { r: 238, g: 130, b: 238 },
    wheat: { r: 245, g: 222, b: 179 },
    white: { r: 255, g: 255, b: 255 },
    whitesmoke: { r: 245, g: 245, b: 245 },
    yellow: { r: 255, g: 255, b: 0 },
    yellowgreen: { r: 154, g: 205, b: 50 }
};
/**
 * Tries to resolve a named color into a hex color representation.
 *
 * @ignore Exclude from docs
 * @param  {string}  value  Color name
 * @return {string}         Color
 * @deprecated
 */
/*export function resolveNamedColor(value: string): Color {
    return (<any>namedColors)[value] ? (<any>namedColors)[value] : undefined;
}*/
/**
 * Converts a proper color hex code (i.e. "#FF5500") or named color (i.e. "red")
 * into an {iRGB} object. If the code is not correctly formatted, an RGB of
 * black is returned.
 *
 * @ignore Exclude from docs
 * @param  {string}  color  Color code
 * @param  {number}  alpha  Alpha (0-1)
 * @return {iRGB}           RGB
 */
function rgb(color, alpha) {
    // Init return value
    var rgb;
    // Try resolving color format
    // Named color?
    if (namedColors[color]) {
        rgb = namedColors[color];
    }
    // Hex code?
    else if (color.charAt(0) === "#") {
        rgb = hexToRgb(color);
    }
    // rgb() format?
    else if (color.match(/^rgba?\(/)) {
        rgb = rgbaToRgb(color);
    }
    // Was not able to resolve?
    if (!rgb) {
        rgb = { r: 0, g: 0, b: 0, a: 1 };
    }
    // Set alpha
    if (__WEBPACK_IMPORTED_MODULE_1__Type__["hasValue"](alpha)) {
        rgb.a = alpha;
    }
    return rgb;
}
/**
 * Converts a hex color code (i.e. "#FF5500") to an [[iRGB]] object.
 *
 * @ignore Exclude from docs
 * @param  {string}  hex  Hex color code
 * @return {iRGB}         RGB
 */
function hexToRgb(hex) {
    // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
    var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    hex = hex.replace(shorthandRegex, function (m, r, g, b) {
        return r + r + g + g + b + b;
    });
    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
    } : undefined;
}
/**
 * Converts color strings in format like `rgb()` and `rgba()` to [[iRGB]].
 *
 * @ignore Exclude from docs
 * @param  {string}  color  Color code
 * @return {iRGB}           RGB
 */
function rgbaToRgb(color) {
    // Init
    var matches;
    color = color.replace(/[ ]/g, "");
    // Try rgb() format
    if (matches = color.match(/^rgb\(([0-9]*),([0-9]*),([0-9]*)\)/i)) {
        matches.push("1");
    }
    else if (matches = color.match(/^rgba\(([0-9]*),([0-9]*),([0-9]*),([.0-9]*)\)/i)) {
        // nothing
    }
    else {
        return undefined;
    }
    return {
        r: parseInt(matches[1]),
        g: parseInt(matches[2]),
        b: parseInt(matches[3]),
        a: parseFloat(matches[4])
    };
}
/**
 * Converts an [[iRGB]] object into a hex color code.
 *
 * @ignore Exclude from docs
 * @param  {iRGB}    rgb  RGB
 * @return {string}       Hex color code
 */
function rgbToHex(rgb) {
    return "#" + pad2(rgb.r.toString(16)) + pad2(rgb.g.toString(16)) + pad2(rgb.b.toString(16));
}
/**
 * Converts an [[iRGB]] object into its `rgb()` or `rgba()` representation.
 *
 * @ignore Exclude from docs
 * @param  {iRGB}    rgb  RGB
 * @return {string}       `rgba()` syntax
 */
function rgbToRGBA(rgb) {
    if (__WEBPACK_IMPORTED_MODULE_1__Type__["hasValue"](rgb.a) && rgb.a !== 1) {
        return "rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + "," + rgb.a + ")";
    }
    else {
        return "rgb(" + rgb.r + "," + rgb.g + "," + rgb.b + ")";
    }
}
/**
 * Pads a 1-digit string with a zero.
 *
 * @ignore Exclude from docs
 * @param  {string}  c  Input string
 * @return {string}     Padded string
 */
function pad2(c) {
    return c.length == 1 ? "0" + c : "" + c;
}
/**
 * Returns an intermediate color between two colors based on the relative
 * position. Position needs to be in range between 0 and 1. Zero meaning the
 * resulting color will be closest to the first reference color.
 *
 * @ignore Exclude from docs
 * @param  {iRGB}    color1   First reference color
 * @param  {iRGB}    color2   Second reference color
 * @param  {number}  percent  Relative position (0-1)
 * @return {iRGB}             Interpolated color
 */
function interpolate(rgb1, rgb2, percent) {
    percent = __WEBPACK_IMPORTED_MODULE_0__Math__["fitToRange"](percent, 0, 1);
    if (rgb1) {
        if (rgb2) {
            return {
                r: rgb1.r + Math.round((rgb2.r - rgb1.r) * percent),
                g: rgb1.g + Math.round((rgb2.g - rgb1.g) * percent),
                b: rgb1.b + Math.round((rgb2.b - rgb1.b) * percent),
                a: (rgb1.a || 1) + Math.round(((rgb2.a || 1) - (rgb1.a || 1)) * percent)
            };
        }
        else {
            return rgb1;
        }
    }
    else if (rgb2) {
        return rgb2;
    }
    else {
        return rgb1;
    }
}
/**
 * Returns a color that is `percent` brighter than the reference color.
 *
 * @ignore Exclude from docs
 * @param  {iRGB}    color    Reference color
 * @param  {number}  percent  Brightness percent
 * @return {iRGB}             Hex code of the new color
 */
function lighten(rgb, percent) {
    if (rgb) {
        return {
            r: Math.max(0, Math.min(255, rgb.r + getLightnessStep(rgb.r, percent))),
            g: Math.max(0, Math.min(255, rgb.g + getLightnessStep(rgb.g, percent))),
            b: Math.max(0, Math.min(255, rgb.b + getLightnessStep(rgb.b, percent))),
            a: rgb.a
        };
    }
    else {
        // TODO is this correct ?
        return rgb;
    }
}
;
/**
 * Gets lightness step.
 *
 * @ignore Exclude from docs
 * @param  {number}  value    Value
 * @param  {number}  percent  Percent
 * @return {number}           Step
 */
function getLightnessStep(value, percent) {
    var base = percent > 0 ? 255 - value : value;
    return Math.round(base * percent);
}
/**
 * Returns a color that is `percent` brighter than the source `color`.
 *
 * @ignore Exclude from docs
 * @param  {iRGB}    color    Source color
 * @param  {number}  percent  Brightness percent
 * @return {iRGB}             New color
 */
function brighten(rgb, percent) {
    if (rgb) {
        var base = Math.min(Math.max(rgb.r, rgb.g, rgb.b), 230);
        //let base = Math.max(rgb.r, rgb.g, rgb.b);
        var step = getLightnessStep(base, percent);
        return {
            r: Math.max(0, Math.min(255, Math.round(rgb.r + step))),
            g: Math.max(0, Math.min(255, Math.round(rgb.g + step))),
            b: Math.max(0, Math.min(255, Math.round(rgb.b + step))),
            a: rgb.a
        };
    }
    else {
        // TODO is this correct ?
        return rgb;
    }
}
;
/**
 * Returns brightness step.
 *
 * @ignore Exclude from docs
 * @param  {number}  value    Value
 * @param  {number}  percent  Percent
 * @return {number}           Step
 */
function getBrightnessStep(value, percent) {
    var base = 255; //percent > 0 ? 255 - value : value;
    return Math.round(base * percent);
}
/**
 * Returns a new [[iRGB]] object based on `rgb` parameter with specific
 * saturation applied.
 *
 * `saturation` can be in the range of 0 (fully desaturated) to 1 (fully
 * saturated).
 *
 * @ignore Exclude from docs
 * @param  {iRGB}    color       Base color
 * @param  {number}  saturation  Saturation (0-1)
 * @return {iRGB}                New color
 */
function saturate(rgb, saturation) {
    if (rgb == null || saturation == 1) {
        return rgb;
    }
    var hsl = rgbToHsl(rgb);
    hsl.s = saturation;
    return hslToRgb(hsl);
}
/*
// not used
export function rgbToMatrix(rgb: iRGB): string {
    let r = $type.toText($math.round((rgb.r || 0) / 255, 10));
    let g = $type.toText($math.round((rgb.g || 0) / 255, 10));
    let b = $type.toText($math.round((rgb.b || 0) / 255, 10));
    let a = $type.toText(rgb.a || 1);
    return	      r + " 0 0 0 0" +
                    " 0 " + g + " 0 0 0" +
                    " 0 0 " + b + " 0 0" +
                    " 0 0 0 " + a + " 0";
}
*/
/**
 * The functions below are taken and adapted from Garry Tan's blog post:
 * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c
 *
 * The further attributions go mjijackson.com, which now seems to be defunct.
 */
/**
 * Converts an HSL color value to RGB. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes h, s, and l are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 *
 * Function adapted from:
 * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c
 *
 * @ignore Exclude from docs
 * @param   {number}  h       The hue
 * @param   {number}  s       The saturation
 * @param   {number}  l       The lightness
 * @return  {Array}           The RGB representation
 */
function hslToRgb(color) {
    var r, g, b;
    var h = color.h;
    var s = color.s;
    var l = color.l;
    if (s == 0) {
        r = g = b = l; // achromatic
    }
    else {
        var hue2rgb = function hue2rgb(p, q, t) {
            if (t < 0)
                t += 1;
            if (t > 1)
                t -= 1;
            if (t < 1 / 6)
                return p + (q - p) * 6 * t;
            if (t < 1 / 2)
                return q;
            if (t < 2 / 3)
                return p + (q - p) * (2 / 3 - t) * 6;
            return p;
        };
        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hue2rgb(p, q, h + 1 / 3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1 / 3);
    }
    return {
        r: Math.round(r * 255),
        g: Math.round(g * 255),
        b: Math.round(b * 255)
    };
}
/**
 * Converts an RGB color value to HSL. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes r, g, and b are contained in the set [0, 255] and
 * returns h, s, and l in the set [0, 1].
 *
 * Function adapted from:
 * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c
 *
 * @ignore Exclude from docs
 * @param   {number}  r       The red color value
 * @param   {number}  g       The green color value
 * @param   {number}  b       The blue color value
 * @return  {Array}           The HSL representation
 */
function rgbToHsl(color) {
    var r = color.r / 255;
    var g = color.g / 255;
    var b = color.b / 255;
    var max = Math.max(r, g, b);
    var min = Math.min(r, g, b);
    var h = 0;
    var s = 0;
    var l = (max + min) / 2;
    if (max === min) {
        h = s = 0; // achromatic
    }
    else {
        var d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch (max) {
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
        }
        h /= 6;
    }
    return {
        h: h,
        s: s,
        l: l
    };
}
/**
 * Converts an RGB color value to HSV. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSV_color_space.
 * Assumes r, g, and b are contained in the set [0, 255] and
 * returns h, s, and v in the set [0, 1].
 *
 * @ignore Exclude from docs
 * @param   Number  r       The red color value
 * @param   Number  g       The green color value
 * @param   Number  b       The blue color value
 * @return  Array           The HSV representation
 */
function rgbToHsv(color) {
    var r = color.r / 255;
    var g = color.g / 255;
    var b = color.b / 255;
    var max = Math.max(r, g, b), min = Math.min(r, g, b);
    var h = 0;
    var s = 0;
    var v = max;
    var d = max - min;
    s = max == 0 ? 0 : d / max;
    if (max == min) {
        h = 0; // achromatic
    }
    else {
        switch (max) {
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
        }
        h /= 6;
    }
    return {
        h: h,
        s: s,
        v: v
    };
}
/**
 * Converts an HSV color value to RGB. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSV_color_space.
 * Assumes h, s, and v are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 *
 * @ignore Exclude from docs
 * @param   Number  h       The hue
 * @param   Number  s       The saturation
 * @param   Number  v       The value
 * @return  Array           The RGB representation
 */
function hsvToRgb(color) {
    var r = 0;
    var g = 0;
    var b = 0;
    var h = color.h;
    var s = color.s;
    var v = color.v;
    var i = Math.floor(h * 6);
    var f = h * 6 - i;
    var p = v * (1 - s);
    var q = v * (1 - f * s);
    var t = v * (1 - (1 - f) * s);
    switch (i % 6) {
        case 0:
            r = v, g = t, b = p;
            break;
        case 1:
            r = q, g = v, b = p;
            break;
        case 2:
            r = p, g = v, b = t;
            break;
        case 3:
            r = p, g = q, b = v;
            break;
        case 4:
            r = t, g = p, b = v;
            break;
        case 5:
            r = v, g = p, b = q;
            break;
    }
    return {
        r: Math.round(r * 255),
        g: Math.round(g * 255),
        b: Math.round(b * 255)
    };
}
/**
 * Returns `true` if color is "light". Useful indetermining which contrasting
 * color to use for elements over this color. E.g.: you would want to use
 * black text over light background, and vice versa.
 *
 * @ignore Exclude from docs
 * @param  {iRGB}     color  Source color
 * @return {boolean}         Light?
 */
function isLight(color) {
    return ((color.r * 299) + (color.g * 587) + (color.b * 114)) / 1000 >= 128;
}
//# sourceMappingURL=Colors.js.map

/***/ }),
/* 43 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MouseCursorStyle; });
/**
 * Mouse-related functionality
 */
/**
 * Defines static methods that hold style list for various mouse cursor styles,
 * maintaining browser compatibility.
 */
var MouseCursorStyle = /** @class */ (function () {
    function MouseCursorStyle() {
    }
    /**
     * Styles for "grab" mouse cursor.
     *
     * @type {Array<IStyleProperty>}
     */
    MouseCursorStyle.grab = [{
            "property": "cursor",
            "value": "move"
        }, {
            "property": "cursor",
            "value": "grab"
        }, {
            "property": "cursor",
            "value": "-moz-grab"
        }, {
            "property": "cursor",
            "value": "-webkit-grab"
        }];
    /**
     * Styles for "grabbing" mouse cursor.
     *
     * @type {Array<IStyleProperty>}
     */
    MouseCursorStyle.grabbing = [{
            "property": "cursor",
            "value": "move"
        }, {
            "property": "cursor",
            "value": "grabbing"
        }, {
            "property": "cursor",
            "value": "-moz-grabbing"
        }, {
            "property": "cursor",
            "value": "-webkit-grabbing"
        }];
    /**
     * Styles for "pointer" mouse cursor. (usually used for links)
     *
     * @type {Array<IStyleProperty>}
     */
    MouseCursorStyle.pointer = [{
            "property": "cursor",
            "value": "pointer"
        }];
    /**
     * Styles for default mouse cursor. (browser determines style)
     *
     * @type {Array<IStyleProperty>}
     */
    MouseCursorStyle.default = [{
            "property": "cursor",
            "value": "default"
        }];
    /**
     * Styles for horizontal bi-directional resize mouse cursor.
     *
     * @type {Array<IStyleProperty>}
     */
    MouseCursorStyle.horizontalResize = [{
            "property": "cursor",
            "value": "ew-resize"
        }];
    /**
     * Styles for vertical bi-directional mouse cursor.
     *
     * @type {Array<IStyleProperty>}
     */
    MouseCursorStyle.verticalResize = [{
            "property": "cursor",
            "value": "ns-resize"
        }];
    return MouseCursorStyle;
}());

//# sourceMappingURL=Mouse.js.map

/***/ }),
/* 44 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return options; });
var options = {
    verbose: true,
    commercialLicense: false,
    classNamePrefix: "amcharts-",
    autoSetClassName: false
};
//# sourceMappingURL=Options.js.map

/***/ }),
/* 45 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Line; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Color__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__rendering_fills_LinearGradient__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Type__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Math__ = __webpack_require__(2);
/**
 * Line drawing functionality.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */






/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Draws a line.
 *
 * @see {@link ILineEvents} for a list of available events
 * @see {@link ILineAdapters} for a list of available Adapters
 */
var Line = /** @class */ (function (_super) {
    __extends(Line, _super);
    /**
     * Constructor
     */
    function Line() {
        var _this = _super.call(this) || this;
        _this.className = "Line";
        _this.element = _this.paper.add("line");
        _this.fill = Object(__WEBPACK_IMPORTED_MODULE_1__utils_Color__["c" /* color */])(); //"none";
        _this.x1 = 0;
        _this.y1 = 0;
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the line.
     *
     * @ignore Exclude from docs
     */
    Line.prototype.draw = function () {
        _super.prototype.draw.call(this);
        if (this.x1 == this.x2 || this.y1 == this.y2) {
            this.pixelPerfect = true;
        }
        else {
            this.pixelPerfect = false;
        }
        this.x1 = this.x1;
        this.x2 = this.x2;
        this.y1 = this.y1;
        this.y2 = this.y2;
    };
    Object.defineProperty(Line.prototype, "x1", {
        /**
         * @return {number} X
         */
        get: function () {
            return this.getPropertyValue("x1");
        },
        /**
         * X coordinate of first end.
         *
         * @param {number} value X
         */
        set: function (value) {
            if (!__WEBPACK_IMPORTED_MODULE_4__utils_Type__["isNumber"](value)) {
                value = 0;
            }
            var delta = 0;
            if (this.pixelPerfect && this.stroke instanceof __WEBPACK_IMPORTED_MODULE_2__rendering_fills_LinearGradient__["a" /* LinearGradient */]) {
                delta = 0.00001;
            }
            this.setPropertyValue("x1", value, true);
            this.element.attr({ "x1": value + delta });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Line.prototype, "x2", {
        /**
         * @return {number} X
         */
        get: function () {
            var value = this.getPropertyValue("x2");
            if (!__WEBPACK_IMPORTED_MODULE_4__utils_Type__["isNumber"](value)) {
                value = this.pixelWidth;
            }
            return value;
        },
        /**
         * X coordinate of second end.
         *
         * @param {number} value X
         */
        set: function (value) {
            if (!__WEBPACK_IMPORTED_MODULE_4__utils_Type__["isNumber"](value)) {
                value = 0;
            }
            this.setPropertyValue("x2", value, true);
            this.element.attr({ "x2": value });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Line.prototype, "y1", {
        /**
         * @return {number} Y
         */
        get: function () {
            return this.getPropertyValue("y1");
        },
        /**
         * Y coordinate of first end.
         *
         * @param {number} value Y
         */
        set: function (value) {
            if (!__WEBPACK_IMPORTED_MODULE_4__utils_Type__["isNumber"](value)) {
                value = 0;
            }
            var delta = 0;
            if (this.pixelPerfect && this.stroke instanceof __WEBPACK_IMPORTED_MODULE_2__rendering_fills_LinearGradient__["a" /* LinearGradient */]) {
                delta = 0.00001;
            }
            this.setPropertyValue("y1", value, true);
            this.element.attr({ "y1": value + delta });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Line.prototype, "y2", {
        /**
         * @return {number} Y
         */
        get: function () {
            var value = this.getPropertyValue("y2");
            if (!__WEBPACK_IMPORTED_MODULE_4__utils_Type__["isNumber"](value)) {
                value = this.pixelHeight;
            }
            return value;
        },
        /**
         * Y coordinate of second end.
         *
         * @param {number} value Y
         */
        set: function (value) {
            if (!__WEBPACK_IMPORTED_MODULE_4__utils_Type__["isNumber"](value)) {
                value = 0;
            }
            this.setPropertyValue("y2", value, true);
            this.element.attr({ "y2": value });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Converts relative position along the line (0-1) into pixel coordinates.
     *
     * @param  {number}             position  Position (0-1)
     * @return {IOrientationPoint}            Coordinates
     */
    Line.prototype.positionToPoint = function (position) {
        var point1 = { x: this.x1, y: this.y1 };
        var point2 = { x: this.x2, y: this.y2 };
        var point = __WEBPACK_IMPORTED_MODULE_5__utils_Math__["getMidPoint"](point1, point2, position);
        var angle = __WEBPACK_IMPORTED_MODULE_5__utils_Math__["getAngle"](point1, point2);
        return { x: point.x, y: point.y, angle: angle };
    };
    return Line;
}(__WEBPACK_IMPORTED_MODULE_0__Sprite__["a" /* Sprite */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_3__Registry__["b" /* registry */].registeredClasses["Line"] = Line;
//# sourceMappingURL=Line.js.map

/***/ }),
/* 46 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return Tension; });
/* harmony export (immutable) */ __webpack_exports__["c"] = wavedLine;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Basis; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Path__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Array__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Math__ = __webpack_require__(2);
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





/**
 * [sign description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @todo Move this someplace else
 * @param {number} x [description]
 */
function sign(x) {
    return x < 0 ? -1 : 1;
}
/**
 * [slope2 description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {number} x0 [description]
 * @param  {number} x1 [description]
 * @param  {number} y0 [description]
 * @param  {number} y1 [description]
 * @param  {number} t  [description]
 * @return {number}    [description]
 */
function slope2(x0, x1, y0, y1, t) {
    var h = x1 - x0;
    return h ? (3 * (y1 - y0) / h - t) / 2 : t;
}
/**
 * [slope3 description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {number} x0 [description]
 * @param  {number} x1 [description]
 * @param  {number} y0 [description]
 * @param  {number} y1 [description]
 * @param  {number} x2 [description]
 * @param  {number} y2 [description]
 * @return {number}    [description]
 */
function slope3(x0, x1, y0, y1, x2, y2) {
    var h0 = x1 - x0;
    var h1 = x2 - x1;
    var s0 = (y1 - y0) / (h0 || h1 < 0 && -0);
    var s1 = (y2 - y1) / (h1 || h0 < 0 && -0);
    var p = (s0 * h1 + s1 * h0) / (h0 + h1);
    return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
}
/**
 * @ignore Exclude from docs
 * @todo Description
 */
var Tension = /** @class */ (function () {
    /**
     * Constructor.
     *
     * @param {number} tensionX [description]
     * @param {number} tensionY [description]
     */
    function Tension(tensionX, tensionY) {
        this._tensionX = tensionX;
        this._tensionY = tensionY;
    }
    /**
     * [smooth description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {Array<IPoint>}  points  [description]
     * @return {string}                 [description]
     */
    Tension.prototype.smooth = function (points) {
        var tensionX = this._tensionX;
        var tensionY = this._tensionY;
        if (points.length < 3 || (tensionX >= 1 && tensionY >= 1)) {
            return __WEBPACK_IMPORTED_MODULE_1__Path__["polyline"](points);
        }
        var first = points[0];
        var last = points[points.length - 1];
        var closed = false;
        if (__WEBPACK_IMPORTED_MODULE_4__utils_Math__["round"](first.x, 3) == __WEBPACK_IMPORTED_MODULE_4__utils_Math__["round"](last.x) && __WEBPACK_IMPORTED_MODULE_4__utils_Math__["round"](first.y) == __WEBPACK_IMPORTED_MODULE_4__utils_Math__["round"](last.y)) {
            closed = true;
        }
        // Can't moveTo here, as it wont be possible to have fill then.
        var path = "";
        for (var i = 0; i < points.length - 1; i++) {
            var p0 = points[i - 1];
            var p1 = points[i];
            var p2 = points[i + 1];
            var p3 = points[i + 2];
            if (i === 0) {
                if (closed) {
                    p0 = points[points.length - 2];
                }
                else {
                    p0 = points[i];
                }
            }
            else if (i == points.length - 2) {
                if (closed) {
                    p3 = points[1];
                }
                else {
                    p3 = points[i + 1];
                }
            }
            var controlPointA = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["getCubicControlPointA"](p0, p1, p2, p3, tensionX, tensionY);
            var controlPointB = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["getCubicControlPointB"](p0, p1, p2, p3, tensionX, tensionY);
            path += __WEBPACK_IMPORTED_MODULE_1__Path__["cubicCurveTo"](p2, controlPointA, controlPointB);
        }
        return path;
    };
    return Tension;
}());

/**
 * Returns a waved line SVG path between two points.
 *
 * @ignore Exclude from docs
 * @param  {IPoint}   point1            Starting point
 * @param  {IPoint}   point2            Ending point
 * @param  {number}   waveLength        Wave length
 * @param  {number}   waveHeight        Wave height
 * @param  {boolean}  adjustWaveLength  Adjust wave length based on the actual line length
 * @return {string}                     SVG path
 */
function wavedLine(point1, point2, waveLength, waveHeight, tension, adjustWaveLength) {
    var x1 = point1.x;
    var y1 = point1.y;
    var x2 = point2.x;
    var y2 = point2.y;
    var distance = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["getDistance"](point1, point2);
    if (adjustWaveLength) {
        waveLength = distance / Math.round(distance / waveLength);
    }
    var d = __WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].getCache(__WEBPACK_IMPORTED_MODULE_3__utils_Utils__["stringify"](["wavedLine", point1.x, point2.x, point1.y, point2.y, waveLength, waveHeight]));
    if (!d) {
        if (distance > 0) {
            var angle = Math.atan2(y2 - y1, x2 - x1);
            var cos = Math.cos(angle);
            var sin = Math.sin(angle);
            var waveLengthX = waveLength * cos;
            var waveLengthY = waveLength * sin;
            if (waveLength <= 1 || waveHeight <= 1) {
                d = __WEBPACK_IMPORTED_MODULE_1__Path__["lineTo"](point2);
            }
            else {
                var halfWaveCount = Math.round(2 * distance / waveLength);
                var points = [];
                var sign_1 = 1;
                if (x2 < x1) {
                    sign_1 *= -1;
                }
                if (y2 < y1) {
                    sign_1 *= -1;
                }
                for (var i = 0; i <= halfWaveCount; i++) {
                    sign_1 *= -1;
                    var x = x1 + i * waveLengthX / 2 + sign_1 * waveHeight / 2 * sin;
                    var y = y1 + i * waveLengthY / 2 - sign_1 * waveHeight / 2 * cos;
                    points.push({ x: x, y: y });
                }
                d = new Tension(tension, tension).smooth(points);
            }
        }
        else {
            d = "";
        }
        __WEBPACK_IMPORTED_MODULE_0__Registry__["b" /* registry */].setCache(__WEBPACK_IMPORTED_MODULE_3__utils_Utils__["stringify"](["wavedLine", point1.x, point2.x, point1.y, point2.y, waveLength, waveHeight]), d);
    }
    return d;
}
/**
 * @ignore Exclude from docs
 * @todo Description
 */
var Basis = /** @class */ (function () {
    /**
     * Constructor.
     *
     * @param {object}  info  [description]
     */
    function Basis(info) {
        this._closed = info.closed;
    }
    /**
     * [smooth description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {Array<IPoint>}  points  [description]
     * @return {string}                 [description]
     */
    Basis.prototype.smooth = function (points) {
        var _this = this;
        var x0 = NaN;
        var x1 = NaN;
        var x2 = NaN;
        var x3 = NaN;
        var x4 = NaN;
        var y0 = NaN;
        var y1 = NaN;
        var y2 = NaN;
        var y3 = NaN;
        var y4 = NaN;
        var point = 0;
        var output = "";
        var pushCurve = function (x, y) {
            output += __WEBPACK_IMPORTED_MODULE_1__Path__["cubicCurveTo"]({
                x: (x0 + 4 * x1 + x) / 6,
                y: (y0 + 4 * y1 + y) / 6
            }, {
                x: (2 * x0 + x1) / 3,
                y: (2 * y0 + y1) / 3
            }, {
                x: (x0 + 2 * x1) / 3,
                y: (y0 + 2 * y1) / 3
            });
        };
        var pushPoint = function (_a) {
            var x = _a.x, y = _a.y;
            switch (point) {
                case 0:
                    point = 1;
                    if (_this._closed) {
                        x2 = x;
                        y2 = y;
                    }
                    else {
                        output += __WEBPACK_IMPORTED_MODULE_1__Path__["lineTo"]({ x: x, y: y });
                    }
                    break;
                case 1:
                    point = 2;
                    if (_this._closed) {
                        x3 = x;
                        y3 = y;
                    }
                    break;
                case 2:
                    point = 3;
                    if (_this._closed) {
                        x4 = x;
                        y4 = y;
                        output += __WEBPACK_IMPORTED_MODULE_1__Path__["moveTo"]({ x: (x0 + 4 * x1 + x) / 6, y: (y0 + 4 * y1 + y) / 6 });
                        break;
                    }
                    else {
                        output += __WEBPACK_IMPORTED_MODULE_1__Path__["lineTo"]({ x: (5 * x0 + x1) / 6, y: (5 * y0 + y1) / 6 });
                        // fall-through
                    }
                default:
                    pushCurve(x, y);
                    break;
            }
            x0 = x1;
            x1 = x;
            y0 = y1;
            y1 = y;
        };
        __WEBPACK_IMPORTED_MODULE_2__utils_Array__["c" /* each */](points, pushPoint);
        if (this._closed) {
            switch (point) {
                case 1:
                    output += __WEBPACK_IMPORTED_MODULE_1__Path__["moveTo"]({ x: x2, y: y2 });
                    output += __WEBPACK_IMPORTED_MODULE_1__Path__["closePath"]();
                    break;
                case 2:
                    output += __WEBPACK_IMPORTED_MODULE_1__Path__["moveTo"]({ x: (x2 + 2 * x3) / 3, y: (y2 + 2 * y3) / 3 });
                    output += __WEBPACK_IMPORTED_MODULE_1__Path__["lineTo"]({ x: (x3 + 2 * x2) / 3, y: (y3 + 2 * y2) / 3 });
                    output += __WEBPACK_IMPORTED_MODULE_1__Path__["closePath"]();
                    break;
                case 3:
                    pushPoint({ x: x2, y: y2 });
                    pushPoint({ x: x3, y: y3 });
                    pushPoint({ x: x4, y: y4 });
                    break;
            }
        }
        else {
            switch (point) {
                case 3:
                    pushCurve(x1, y1);
                // fall-through
                case 2:
                    output += __WEBPACK_IMPORTED_MODULE_1__Path__["lineTo"]({ x: x1, y: y1 });
                    break;
            }
            output += __WEBPACK_IMPORTED_MODULE_1__Path__["closePath"]();
        }
        return output;
    };
    return Basis;
}());

//# sourceMappingURL=Smoothing.js.map

/***/ }),
/* 47 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Circle; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Math__ = __webpack_require__(2);
/**
 * Functionality for drawing circles.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Used to create a circle
 * @see {@link ICircleEvents} for a list of available events
 * @see {@link ICircleAdapters} for a list of available Adapters
 */
var Circle = /** @class */ (function (_super) {
    __extends(Circle, _super);
    /**
     * Constructor
     */
    function Circle() {
        var _this = _super.call(this) || this;
        _this.radius = Object(__WEBPACK_IMPORTED_MODULE_1__utils_Percent__["c" /* percent */])(100);
        _this.className = "Circle";
        _this.element = _this.paper.add("circle");
        _this.horizontalCenter = "middle";
        _this.verticalCenter = "middle";
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the circle.
     */
    Circle.prototype.draw = function () {
        _super.prototype.draw.call(this);
        this.element.attr({ "r": this.pixelRadius });
    };
    Object.defineProperty(Circle.prototype, "radius", {
        /**
         * @return {number} Radius
         */
        get: function () {
            return this.getPropertyValue("radius");
        },
        /**
         * Radius of the circle.
         *
         * Can be either absolute (pixels) or relative ([Percent]).
         *
         * @param {number | Percent}  value  Radius
         */
        set: function (value) {
            this.setPropertyValue("radius", value, true);
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Circle.prototype, "pixelRadius", {
        /**
         * Radius of the circle in pixels.
         *
         * This is a read-only property. To set radius in pixels, use `radius`
         * property.
         *
         * @readonly
         * @return {number} Radius (px)
         */
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_3__utils_Utils__["relativeToValue"](this.radius, __WEBPACK_IMPORTED_MODULE_4__utils_Math__["min"](this.innerWidth / 2, this.innerHeight / 2));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Updates bounding box.
     *
     * @ignore Exclude from docs
     */
    Circle.prototype.measureElement = function () {
        this.bbox = {
            x: -this.pixelRadius,
            y: -this.pixelRadius,
            width: this.pixelRadius * 2,
            height: this.pixelRadius * 2
        };
    };
    return Circle;
}(__WEBPACK_IMPORTED_MODULE_0__Sprite__["a" /* Sprite */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__Registry__["b" /* registry */].registeredClasses["Circle"] = Circle;
//# sourceMappingURL=Circle.js.map

/***/ }),
/* 48 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Slice; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__rendering_Path__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Type__ = __webpack_require__(1);
/**
 * Slice module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */






/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Draws a wedged semi-circle - slice. Usually used for Pie/Donut charts.
 *
 * @see {@link ISliceEvents} for a list of available events
 * @see {@link ISliceAdapters} for a list of available Adapters
 */
var Slice = /** @class */ (function (_super) {
    __extends(Slice, _super);
    /**
     * Constructor
     */
    function Slice() {
        var _this = 
        // Init
        _super.call(this) || this;
        _this.className = "Slice";
        // Set defaults
        // @todo Override `measureElement` method and calculate size using math
        _this.cornerRadius = 0;
        _this.startAngle = 0;
        _this.innerRadius = 0;
        _this.radius = 0;
        _this.arc = 0;
        _this.shiftRadius = 0;
        _this.strokeOpacity = 1;
        // Create a slice wedge element
        _this.slice = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__Sprite__["a" /* Sprite */]);
        _this.slice.element = _this.paper.add("path");
        _this.slice.isMeasured = false;
        _this._disposers.push(_this.slice);
        _this.element.attr({ "stroke-linejoin": "round" });
        _this.element.attr({ "stroke-linecap": "round" });
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the element.
     *
     * @ignore Exclude from docs
     */
    Slice.prototype.draw = function () {
        _super.prototype.draw.call(this);
        this.slice.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["arc"](this.startAngle, this.arc, this.radius, this.innerRadius, this.radiusY, this.cornerRadius, this.innerCornerRadius) });
        this.slice.invalidate();
        this.shiftRadius = this.shiftRadius;
    };
    Slice.prototype.getContainerBBox = function () {
        return __WEBPACK_IMPORTED_MODULE_3__utils_Math__["getArcRect"](this.startAngle, this.startAngle + this.arc, this.radius);
    };
    Object.defineProperty(Slice.prototype, "startAngle", {
        /**
         * @return {number} Angle (0-360)
         */
        get: function () {
            return this.getPropertyValue("startAngle");
        },
        /**
         * The angle at which left edge of the slice is drawn. (0-360)
         *
         * 0 is to the right of the center.
         *
         * @param {number}  value  Angle (0-360)
         */
        set: function (value) {
            this.setPropertyValue("startAngle", __WEBPACK_IMPORTED_MODULE_3__utils_Math__["normalizeAngle"](value), true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slice.prototype, "arc", {
        /**
         * @return {number} [description]
         */
        get: function () {
            return this.getPropertyValue("arc");
        },
        /**
         * [arc description]
         *
         * @todo Description
         * @param {number} value [description]
         */
        set: function (value) {
            if (!__WEBPACK_IMPORTED_MODULE_5__utils_Type__["isNumber"](value)) {
                value = 0;
            }
            this.setPropertyValue("arc", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slice.prototype, "radius", {
        /**
         * @return {number} Radius (px)
         */
        get: function () {
            var radius = this.getPropertyValue("radius");
            if (!__WEBPACK_IMPORTED_MODULE_5__utils_Type__["isNumber"](radius)) {
                radius = 0;
            }
            return radius;
        },
        /**
         * Radius of the slice in pixels.
         *
         * @param {number}  value  Radius (px)
         */
        set: function (value) {
            this.setPropertyValue("radius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slice.prototype, "radiusY", {
        /**
         * @return {number} Vertical radius (0-1)
         */
        get: function () {
            var value = this.getPropertyValue("radiusY");
            if (!__WEBPACK_IMPORTED_MODULE_5__utils_Type__["isNumber"](value)) {
                value = this.radius;
            }
            return value;
        },
        /**
         * Vertical radius for creating skewed slices.
         *
         * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half
         * the `radius`.
         *
         * @param {number} value Vertical radius (0-1)
         */
        set: function (value) {
            this.setPropertyValue("radiusY", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slice.prototype, "innerRadius", {
        /**
         * @return {number} Radius (px)
         */
        get: function () {
            return this.getPropertyValue("innerRadius");
        },
        /**
         * Inner radius of the slice for creating cut out (donut) slices.
         *
         * @default 0
         * @param {number}  value  Radius (px)
         */
        set: function (value) {
            this.setPropertyValue("innerRadius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slice.prototype, "cornerRadius", {
        /**
         * @return {number} Radius (px)
         */
        get: function () {
            return this.getPropertyValue("cornerRadius");
        },
        /**
         * Radius of slice's outer corners in pixels.
         *
         * @default 0
         * @param {number}  value  Radius (px)
         */
        set: function (value) {
            this.setPropertyValue("cornerRadius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slice.prototype, "innerCornerRadius", {
        /**
         * @return {number} Radius (px)
         */
        get: function () {
            return this.getPropertyValue("innerCornerRadius");
        },
        /**
         * Radius of slice's inner corners in pixels.
         *
         * @default 0
         * @param {number}  value  Radius (px)
         */
        set: function (value) {
            this.setPropertyValue("innerCornerRadius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slice.prototype, "shiftRadius", {
        /**
         * @return {number} [description]
         */
        get: function () {
            return this.getPropertyValue("shiftRadius");
        },
        /**
         * [shiftRadius description]
         *
         * 0-1
         *
         * @todo Description
         * @param {number} value [description]
         */
        set: function (value) {
            this.setPropertyValue("shiftRadius", value);
            this.dx = value * this.radius * this.ix;
            this.dy = value * this.radiusY * this.iy;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slice.prototype, "ix", {
        /**
         * [ix description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @return {number} [description]
         */
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_3__utils_Math__["cos"](this.middleAngle);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slice.prototype, "iy", {
        /**
         * [iy description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @return {number} [description]
         */
        get: function () {
            if (this.radius > 0) {
                return __WEBPACK_IMPORTED_MODULE_3__utils_Math__["sin"](this.middleAngle) * this.radiusY / this.radius;
            }
            else {
                return 0;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slice.prototype, "middleAngle", {
        /**
         * An angle of the slice's middle.
         *
         * @ignore Exclude from docs
         * @return {number} Angle
         */
        get: function () {
            return this.startAngle + this.arc / 2;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * X coordinate for the slice tooltip.
     *
     * @return {number} X
     */
    Slice.prototype.getTooltipX = function () {
        var value = this.getPropertyValue("tooltipX");
        if (!__WEBPACK_IMPORTED_MODULE_5__utils_Type__["isNumber"](value)) {
            value = this.ix * (this.innerRadius + (this.radius - this.innerRadius) / 2);
        }
        return value;
    };
    /**
     * Y coordinate for the slice tooltip.
     *
     * @return {number} Y
     */
    Slice.prototype.getTooltipY = function () {
        var value = this.getPropertyValue("tooltipY");
        if (!__WEBPACK_IMPORTED_MODULE_5__utils_Type__["isNumber"](value)) {
            value = this.iy * (this.innerRadius + (this.radius - this.innerRadius) / 2);
        }
        return value;
    };
    return Slice;
}(__WEBPACK_IMPORTED_MODULE_0__Container__["a" /* Container */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__Registry__["b" /* registry */].registeredClasses["Slice"] = Slice;
//# sourceMappingURL=Slice.js.map

/***/ }),
/* 49 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Bullet; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Registry__ = __webpack_require__(0);
/**
 * Module that defines everything related to building bullets.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Class used to creates bullets.
 *
 * @see {@link IBulletEvents} for a list of available events
 * @see {@link IBulletAdapters} for a list of available Adapters
 * @todo Usage example
 * @important
 */
var Bullet = /** @class */ (function (_super) {
    __extends(Bullet, _super);
    /**
     * Constructor
     */
    function Bullet() {
        var _this = _super.call(this) || this;
        _this.className = "Bullet";
        _this.isMeasured = false;
        _this.tooltipX = 0;
        _this.tooltipY = 0;
        _this.layout = "none";
        _this.copyToLegendMarker = true;
        return _this;
    }
    Object.defineProperty(Bullet.prototype, "locationX", {
        /**
         * @return {number} Location (0-1)
         */
        get: function () {
            return this.getPropertyValue("locationX");
        },
        /**
         * Relative horizontal location within cell. (0-1)
         *
         * @param {number}  value  Location (0-1)
         */
        set: function (value) {
            this.setPropertyValue("locationX", value, false, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Bullet.prototype, "locationY", {
        /**
         * @return {number} Location (0-1)
         */
        get: function () {
            return this.getPropertyValue("locationY");
        },
        /**
         * Relative vertical location within cell. (0-1)
         *
         * @param {number}  value  Location (0-1)
         */
        set: function (value) {
            this.setPropertyValue("locationY", value, false, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Bullet.prototype, "xField", {
        /**
         * @return {string} [description]
         */
        get: function () {
            return this.getPropertyValue("xField");
        },
        /**
         * [xField description]
         *
         * @todo Description
         * @param {string}  value  [description]
         */
        set: function (value) {
            this.setPropertyValue("xField", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Bullet.prototype, "yField", {
        /**
         * @return {string} [description]
         */
        get: function () {
            return this.getPropertyValue("yField");
        },
        /**
         * [yField description]
         *
         * Description
         * @param {string}  value  [description]
         */
        set: function (value) {
            this.setPropertyValue("yField", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Bullet.prototype, "isDynamic", {
        /**
         * @return {boolean} Redraw on data change?
         */
        get: function () {
            return this.getPropertyValue("isDynamic");
        },
        /**
         * Indicates if the bullet is "dynamic".
         *
         * In most cases the bullets remain the same, even if the underlying data
         * changes.
         *
         * However, in cases where bullet also displays a label, or its size depends
         * on data, it also needs to be redrawn when the underlying data changes.
         *
         * Only those bullets that have set `isDynamic = true` will be redrawn each
         * time data changes. Regular bullets will be reused as they are.
         *
         * @default false
         * @param {boolean}  value  Redraw on data change?
         */
        set: function (value) {
            this.setPropertyValue("isDynamic", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Bullet.prototype, "copyToLegendMarker", {
        /**
         * @return {boolean} Redraw on data change?
         */
        get: function () {
            return this.getPropertyValue("copyToLegendMarker");
        },
        /**
         * Indicates if the bullet should be copied to legend marker
         *
         * @default false
         * @param {boolean}  value  Redraw on data change?
         */
        set: function (value) {
            this.setPropertyValue("copyToLegendMarker", value);
        },
        enumerable: true,
        configurable: true
    });
    return Bullet;
}(__WEBPACK_IMPORTED_MODULE_0__core_Container__["a" /* Container */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["b" /* registry */].registeredClasses["Bullet"] = Bullet;
//# sourceMappingURL=Bullet.js.map

/***/ }),
/* 50 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return ColumnSeriesDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ColumnSeries; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__XYSeries__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_utils_Dictionary__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__axes_ValueAxis__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__axes_CategoryAxis__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__elements_Column__ = __webpack_require__(51);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_elements_RoundedRectangle__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__core_utils_Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__core_utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__core_utils_Object__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__core_utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__core_utils_Array__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__core_utils_Type__ = __webpack_require__(1);
/**
 * Column series module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */
















/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[ColumnSeries]].
 *
 * @see {@link DataItem}
 */
var ColumnSeriesDataItem = /** @class */ (function (_super) {
    __extends(ColumnSeriesDataItem, _super);
    /**
     * Constructor
     */
    function ColumnSeriesDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "ColumnSeriesDataItem";
        _this.locations["dateX"] = 0.5;
        _this.locations["dateY"] = 0.5;
        _this.locations["categoryX"] = 0.5;
        _this.locations["categoryY"] = 0.5;
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(ColumnSeriesDataItem.prototype, "column", {
        /**
         * @return {Column} Column
         */
        get: function () {
            return this._column;
        },
        /**
         * A column used to draw a column for this data item.
         *
         * @param {Column}  column
         */
        set: function (column) {
            this.setColumn(column);
        },
        enumerable: true,
        configurable: true
    });
    ColumnSeriesDataItem.prototype.setColumn = function (column) {
        if (this._column && column != this._column) {
            __WEBPACK_IMPORTED_MODULE_14__core_utils_Array__["k" /* remove */](this.sprites, this._column);
        }
        this._column = column;
        if (column) {
            var prevDataItem = column.dataItem;
            if (prevDataItem && prevDataItem != this) {
                prevDataItem.column = undefined;
            }
            this.addSprite(column);
        }
    };
    Object.defineProperty(ColumnSeriesDataItem.prototype, "rangesColumns", {
        /**
         * A dictionary storing axes ranges columns by axis uid
         *
         * @type {Dictionary<string, this["_column"]>}
         */
        get: function () {
            if (!this._rangesColumns) {
                this._rangesColumns = new __WEBPACK_IMPORTED_MODULE_4__core_utils_Dictionary__["a" /* Dictionary */]();
            }
            return this._rangesColumns;
        },
        enumerable: true,
        configurable: true
    });
    return ColumnSeriesDataItem;
}(__WEBPACK_IMPORTED_MODULE_0__XYSeries__["b" /* XYSeriesDataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Defines [[Series]] for a column graph.
 *
 * @see {@link IColumnSeriesEvents} for a list of available Events
 * @see {@link IColumnSeriesAdapters} for a list of available Adapters
 * @todo Example
 * @important
 */
var ColumnSeries = /** @class */ (function (_super) {
    __extends(ColumnSeries, _super);
    /**
     * Constructor
     */
    function ColumnSeries() {
        var _this = _super.call(this) || this;
        /**
         * Start location within cell for columns.
         *
         * @type {number}
         */
        _this._startLocation = 0;
        /**
         * End location within cell for columns.
         *
         * @type {number}
         */
        _this._endLocation = 1;
        /**
         * When working value of dataItem changes, we must process all the values to calculate sum, min, max etc. Also update stack values. This is quite expensive operation.
         * Unfortunately we do not know if user needs this processed values or not. By setting simplifiedProcessing = true you disable this processing and in case working
         * value changes, we only redraw the particular column. Do not do this if you have staked chart or use calculated values in bullets or in tooltips.
         *
         * @type {boolean}
         */
        _this.simplifiedProcessing = false;
        _this.className = "ColumnSeries";
        _this.width = Object(__WEBPACK_IMPORTED_MODULE_10__core_utils_Percent__["c" /* percent */])(100);
        _this.height = Object(__WEBPACK_IMPORTED_MODULE_10__core_utils_Percent__["c" /* percent */])(100);
        _this.strokeOpacity = 0;
        _this.fillOpacity = 1;
        _this.clustered = true;
        var columnsContainer = _this.mainContainer.createChild(__WEBPACK_IMPORTED_MODULE_2__core_Container__["a" /* Container */]);
        columnsContainer.shouldClone = false;
        columnsContainer.isMeasured = false;
        columnsContainer.layout = "none";
        _this._columnsContainer = columnsContainer;
        _this.columns;
        _this.columns.template.pixelPerfect = false;
        _this.tooltipColorSource = _this.columns.template;
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(ColumnSeries.prototype, "columnsContainer", {
        /**
         * A container that columns are created in.
         *
         * @ignore Exclude from docs
         */
        get: function () {
            return this._columnsContainer;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets defaults that instantiate some objects that rely on parent, so they
     * cannot be set in constructor.
     */
    ColumnSeries.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);
        if (!__WEBPACK_IMPORTED_MODULE_15__core_utils_Type__["hasValue"](this.readerTitle)) {
            this.readerTitle = this.language.translate("Column Series");
        }
    };
    /**
     * Returns a new/empty DataItem of the type appropriate for this object.
     *
     * @see {@link DataItem}
     * @return {ColumnSeriesDataItem} Data Item
     */
    ColumnSeries.prototype.createDataItem = function () {
        return new ColumnSeriesDataItem();
    };
    /**
     * (Re)validates the whole series, effectively causing it to redraw.
     *
     * @ignore Exclude from docs
     */
    ColumnSeries.prototype.validate = function () {
        //@todo Check if we can do better than use `instanceof`
        var _this = this;
        // find start/end locations based on clustered/stacked settings
        // go through chart series instead of base axis series, because axis series doesn't maintain order
        var baseAxisSeries = this.chart.series;
        var clusterCount = 0;
        var index = 0;
        __WEBPACK_IMPORTED_MODULE_13__core_utils_Iterator__["each"](baseAxisSeries.iterator(), function (series) {
            if (series instanceof ColumnSeries) {
                if (_this.baseAxis == series.baseAxis) {
                    if ((!series.stacked && series.clustered) || clusterCount === 0) {
                        clusterCount++;
                    }
                    if (series == _this) {
                        index = clusterCount - 1;
                    }
                }
            }
        });
        var renderer = this.baseAxis.renderer;
        var cellStartLocation = renderer.cellStartLocation;
        var cellEndLocation = renderer.cellEndLocation;
        this._startLocation = cellStartLocation + (index / clusterCount) * (cellEndLocation - cellStartLocation);
        this._endLocation = cellStartLocation + (index + 1) / clusterCount * (cellEndLocation - cellStartLocation);
        // can't use columnsContainer.removeChildren() because with 3d columns we use one container for all columns
        __WEBPACK_IMPORTED_MODULE_13__core_utils_Iterator__["each"](this.columns.iterator(), function (column) {
            column.__disabled = true;
        });
        _super.prototype.validate.call(this);
    };
    /**
     * Validates data item's element, effectively redrawing it.
     *
     * @ignore Exclude from docs
     * @param {ColumnSeriesDataItem}  dataItem  Data item
     */
    ColumnSeries.prototype.validateDataElement = function (dataItem) {
        // important oder here, first real, then super. we need this to know size
        this.validateDataElementReal(dataItem);
        _super.prototype.validateDataElement.call(this, dataItem);
    };
    /**
     * Returns relative start location for the data item.
     *
     * @param  {this["_dataItem"]}  dataItem  Data item
     * @return {number}                       Location (0-1)
     */
    ColumnSeries.prototype.getStartLocation = function (dataItem) {
        var startLocation = this._startLocation;
        if (this.baseAxis == this.xAxis) {
            startLocation += dataItem.locations[this.xOpenField] - 0.5;
        }
        else {
            startLocation += dataItem.locations[this.yOpenField] - 0.5;
        }
        return startLocation;
    };
    ColumnSeries.prototype.handleDataItemWorkingValueChange = function (event) {
        if (this.simplifiedProcessing) {
            this.validateDataElement(event.target);
        }
        else {
            _super.prototype.handleDataItemWorkingValueChange.call(this, event);
        }
    };
    /**
     * Returns relative end location for the data item.
     *
     * @param  {this["_dataItem"]}  dataItem  Data item
     * @return {number}                       Location (0-1)
     */
    ColumnSeries.prototype.getEndLocation = function (dataItem) {
        var endLocation = this._endLocation;
        if (this.baseAxis == this.xAxis) {
            endLocation += dataItem.locations[this.xField] - 0.5;
        }
        else {
            endLocation += dataItem.locations[this.yField] - 0.5;
        }
        return endLocation;
    };
    /**
     * Validates data item's elements.
     *
     * @ignore Exclude from docs
     * @param {this["_dataItem"]}  dataItem  Data item
     */
    ColumnSeries.prototype.validateDataElementReal = function (dataItem) {
        var _this = this;
        //	if (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way
        var l;
        var r;
        var t;
        var b;
        var startLocation = this.getStartLocation(dataItem);
        var endLocation = this.getEndLocation(dataItem);
        var xField = this.xField;
        var xOpenField = this.xOpenField;
        var yField = this.yField;
        var yOpenField = this.yOpenField;
        var template = this.columns.template;
        var percentWidth = template.percentWidth;
        var percentHeight = template.percentHeight;
        var pixelWidth = template.pixelWidth;
        var pixelHeight = template.pixelHeight;
        var maxWidth = template.maxWidth;
        var maxHeight = template.maxHeight;
        // two category axes
        if ((this.xAxis instanceof __WEBPACK_IMPORTED_MODULE_6__axes_CategoryAxis__["a" /* CategoryAxis */]) && (this.yAxis instanceof __WEBPACK_IMPORTED_MODULE_6__axes_CategoryAxis__["a" /* CategoryAxis */])) {
            startLocation = 0;
            endLocation = 1;
            if (!__WEBPACK_IMPORTED_MODULE_15__core_utils_Type__["isNaN"](percentWidth)) {
                var offset = __WEBPACK_IMPORTED_MODULE_11__core_utils_Math__["round"]((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);
                startLocation += offset;
                endLocation -= offset;
            }
            l = this.xAxis.getX(dataItem, xOpenField, startLocation);
            r = this.xAxis.getX(dataItem, xField, endLocation);
            // in case width is set in pixels
            if (__WEBPACK_IMPORTED_MODULE_15__core_utils_Type__["isNaN"](percentWidth)) {
                var offset = ((r - l) - pixelWidth) / 2;
                l += offset;
                r -= offset;
            }
            // in case max width is set in pixels
            if (!__WEBPACK_IMPORTED_MODULE_15__core_utils_Type__["isNaN"](maxWidth)) {
                var offset = ((r - l) - maxWidth) / 2;
                l += offset;
                r -= offset;
            }
            startLocation = 0;
            endLocation = 1;
            if (!__WEBPACK_IMPORTED_MODULE_15__core_utils_Type__["isNaN"](percentHeight)) {
                var offset = __WEBPACK_IMPORTED_MODULE_11__core_utils_Math__["round"]((1 - percentHeight / 100) / 2, 5);
                startLocation += offset;
                endLocation -= offset;
            }
            t = this.yAxis.getY(dataItem, yOpenField, startLocation);
            b = this.yAxis.getY(dataItem, yField, endLocation);
            // in case width is set in pixels
            if (__WEBPACK_IMPORTED_MODULE_15__core_utils_Type__["isNaN"](percentHeight)) {
                var offset = ((b - t) - pixelHeight) / 2;
                b += offset;
                t -= offset;
            }
            // in case max width is set in pixels
            if (!__WEBPACK_IMPORTED_MODULE_15__core_utils_Type__["isNaN"](maxHeight)) {
                var offset = ((b - t) - maxHeight) / 2;
                b += offset;
                t -= offset;
            }
            r = this.fixHorizontalCoordinate(r);
            l = this.fixHorizontalCoordinate(l);
            t = this.fixVerticalCoordinate(t);
            b = this.fixVerticalCoordinate(b);
        }
        else if (this.baseAxis == this.xAxis) {
            // in case width is set in percent
            if (!__WEBPACK_IMPORTED_MODULE_15__core_utils_Type__["isNaN"](percentWidth)) {
                var offset = __WEBPACK_IMPORTED_MODULE_11__core_utils_Math__["round"]((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);
                startLocation += offset;
                endLocation -= offset;
            }
            l = this.xAxis.getX(dataItem, xOpenField, startLocation);
            r = this.xAxis.getX(dataItem, xField, endLocation);
            // in case width is set in pixels
            if (__WEBPACK_IMPORTED_MODULE_15__core_utils_Type__["isNaN"](percentWidth)) {
                var offset = ((r - l) - pixelWidth) / 2;
                l += offset;
                r -= offset;
            }
            // in case width is set in pixels
            if (!__WEBPACK_IMPORTED_MODULE_15__core_utils_Type__["isNaN"](maxWidth)) {
                var offset = ((r - l) - maxWidth) / 2;
                l += offset;
                r -= offset;
            }
            var bottomLocation = dataItem.locations[yOpenField];
            var topLocation = dataItem.locations[yField];
            // otherwise gantt chart will start items in the middle of a cell
            if (this.yAxis instanceof __WEBPACK_IMPORTED_MODULE_5__axes_ValueAxis__["a" /* ValueAxis */]) {
                bottomLocation = 0;
                topLocation = 0;
            }
            b = this.yAxis.getY(dataItem, yOpenField, bottomLocation);
            t = this.yAxis.getY(dataItem, yField, topLocation);
            // used to save location for bullets, but it's not a good approach
            // dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;
            t = this.fixVerticalCoordinate(t);
            b = this.fixVerticalCoordinate(b);
        }
        // horizontal bars
        else {
            if (!__WEBPACK_IMPORTED_MODULE_15__core_utils_Type__["isNaN"](percentHeight)) {
                var offset = __WEBPACK_IMPORTED_MODULE_11__core_utils_Math__["round"]((1 - percentHeight / 100) / 2, 5);
                startLocation += offset;
                endLocation -= offset;
            }
            t = this.yAxis.getY(dataItem, yOpenField, startLocation);
            b = this.yAxis.getY(dataItem, yField, endLocation);
            // in case width is set in pixels
            if (__WEBPACK_IMPORTED_MODULE_15__core_utils_Type__["isNaN"](percentHeight)) {
                var offset = ((b - t) - pixelHeight) / 2;
                b += offset;
                t -= offset;
            }
            // in case width is set in pixels
            if (!__WEBPACK_IMPORTED_MODULE_15__core_utils_Type__["isNaN"](maxHeight)) {
                var offset = ((b - t) - maxHeight) / 2;
                b += offset;
                t -= offset;
            }
            var rightLocation = dataItem.locations[xField];
            var leftLocation = dataItem.locations[xOpenField];
            // otherwise gantt chart will start items in the middle of a cell
            if (this.xAxis instanceof __WEBPACK_IMPORTED_MODULE_5__axes_ValueAxis__["a" /* ValueAxis */]) {
                rightLocation = 0;
                leftLocation = 0;
            }
            r = this.xAxis.getX(dataItem, xField, rightLocation);
            l = this.xAxis.getX(dataItem, xOpenField, leftLocation);
            // used to save location for bullets, but it's not a good approach
            // dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;
            r = this.fixHorizontalCoordinate(r);
            l = this.fixHorizontalCoordinate(l);
        }
        var paddingLeft = template.pixelPaddingLeft;
        var paddingRight = template.pixelPaddingRight;
        var paddingTop = template.pixelPaddingTop;
        var paddingBottom = template.pixelPaddingBottom;
        var w = Math.abs(r - l);
        var h = Math.abs(b - t);
        var x = Math.min(l, r);
        var y = Math.min(t, b);
        if (w - paddingLeft - paddingRight > 0 && h - paddingTop - paddingBottom > 0) {
            var column = void 0;
            if (!dataItem.column) {
                column = this.columns.create();
                //$object.forceCopyProperties(this.columns.template, column, visualProperties);
                __WEBPACK_IMPORTED_MODULE_12__core_utils_Object__["copyProperties"](this, column, __WEBPACK_IMPORTED_MODULE_1__core_Sprite__["b" /* visualProperties */]); // need this because 3d columns are not in the same container
                __WEBPACK_IMPORTED_MODULE_12__core_utils_Object__["copyProperties"](this.columns.template, column, __WEBPACK_IMPORTED_MODULE_1__core_Sprite__["b" /* visualProperties */]); // second time, no force, so that columns.template would override series properties
                dataItem.addSprite(column);
                dataItem.column = column;
            }
            else {
                column = dataItem.column;
            }
            column.width = w;
            column.height = h;
            column.x = x;
            column.y = y;
            column.parent = this.columnsContainer;
            this.setColumnStates(column);
            if (column.invalid) {
                column.validate(); // validate as if it was used previously, it will flicker with previous dimensions
            }
            column.__disabled = false;
            __WEBPACK_IMPORTED_MODULE_13__core_utils_Iterator__["each"](this.axisRanges.iterator(), function (axisRange) {
                var rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);
                if (!rangeColumn) {
                    rangeColumn = _this.columns.create();
                    //$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);
                    __WEBPACK_IMPORTED_MODULE_12__core_utils_Object__["copyProperties"](axisRange.contents, rangeColumn, __WEBPACK_IMPORTED_MODULE_1__core_Sprite__["b" /* visualProperties */]); // need this because 3d columns are not in the same container
                    dataItem.addSprite(rangeColumn);
                    dataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);
                }
                rangeColumn.parent = axisRange.contents;
                rangeColumn.width = w;
                rangeColumn.height = h;
                rangeColumn.x = x;
                rangeColumn.y = y;
                _this.setColumnStates(rangeColumn);
                if (rangeColumn.invalid) {
                    rangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions
                }
                rangeColumn.__disabled = false;
            });
        }
        else {
            this.disableUnusedColumns(dataItem);
        }
        dataItem.itemWidth = w;
        dataItem.itemHeight = h;
    };
    ColumnSeries.prototype.disableUnusedColumns = function (dataItem) {
        if (dataItem.column) {
            // otherwise might flicker when enabling
            dataItem.column.width = 0;
            dataItem.column.height = 0;
            dataItem.column.__disabled = true;
        }
        __WEBPACK_IMPORTED_MODULE_13__core_utils_Iterator__["each"](this.axisRanges.iterator(), function (axisRange) {
            var rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);
            if (rangeColumn) {
                // otherwise might flicker when enabling
                rangeColumn.width = 0;
                rangeColumn.height = 0;
                rangeColumn.__disabled = true;
            }
        });
    };
    /**
     * Apply different state/coloring to columns based on the change value.
     *
     * @param {Sprite}  sprite  Sprite to apply state to
     * @todo Do not apply accessibility to wicks of the candlesticks
     */
    ColumnSeries.prototype.setColumnStates = function (sprite) {
        var _this = this;
        var dataItem = sprite.dataItem;
        if (this.xAxis instanceof __WEBPACK_IMPORTED_MODULE_5__axes_ValueAxis__["a" /* ValueAxis */] || this.yAxis instanceof __WEBPACK_IMPORTED_MODULE_5__axes_ValueAxis__["a" /* ValueAxis */]) {
            var open_1;
            var value = void 0;
            var change = void 0;
            if (this.baseAxis == this.yAxis) {
                open_1 = dataItem.getValue(this.xOpenField);
                value = dataItem.getValue(this.xField);
                change = dataItem.getValue(this.xAxis.axisFieldName + "X", "previousChange");
            }
            else {
                open_1 = dataItem.getValue(this.yOpenField);
                value = dataItem.getValue(this.yField);
                change = dataItem.getValue(this.yAxis.axisFieldName + "Y", "previousChange");
            }
            if (value < open_1) {
                dataItem.droppedFromOpen = true;
                sprite.setState(this._dropFromOpenState, 0);
            }
            else {
                dataItem.droppedFromOpen = false;
                sprite.setState(this._riseFromOpenState, 0);
            }
            if (change < 0) {
                dataItem.droppedFromPrevious = true;
                sprite.setState((this._dropFromPreviousState), 0);
            }
            else {
                dataItem.droppedFromPrevious = false;
                sprite.setState((this._riseFromPreviousState), 0);
            }
        }
        // Set accessibility
        if (!this.isInTransition()) {
            if (this.itemsFocusable()) {
                sprite.role = "menuitem";
                sprite.focusable = true;
            }
            else {
                sprite.role = "listitem";
                sprite.focusable = false;
            }
            // Set readerTitle on demand only (focus or hover)
            if (__WEBPACK_IMPORTED_MODULE_15__core_utils_Type__["hasValue"](this.itemReaderText) && this.itemReaderText != "") {
                if (sprite.focusable) {
                    sprite.events.once("focus", function (ev) {
                        sprite.readerTitle = _this.populateString(_this.itemReaderText, dataItem);
                    });
                    sprite.events.once("blur", function (ev) {
                        sprite.readerTitle = "";
                    });
                }
                if (sprite.hoverable) {
                    sprite.events.once("over", function (ev) {
                        sprite.readerTitle = _this.populateString(_this.itemReaderText, dataItem);
                    });
                    sprite.events.once("out", function (ev) {
                        sprite.readerTitle = "";
                    });
                }
            }
        }
    };
    Object.defineProperty(ColumnSeries.prototype, "columns", {
        /**
         * A list of column elements in the series.
         *
         * @return {ListTemplate<this["_column"]>} Columns
         */
        get: function () {
            if (!this._columns) {
                this._columns = new __WEBPACK_IMPORTED_MODULE_3__core_utils_List__["e" /* ListTemplate */](this.createColumnTemplate());
            }
            return this._columns;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates and returns a column element to use as a template.
     *
     * @return {this["_column"]} Column template
     */
    ColumnSeries.prototype.createColumnTemplate = function () {
        return new __WEBPACK_IMPORTED_MODULE_8__elements_Column__["a" /* Column */]();
    };
    Object.defineProperty(ColumnSeries.prototype, "clustered", {
        /**
         * @return {boolean} Clustered?
         */
        get: function () {
            return this.getPropertyValue("clustered");
        },
        /**
         * Cluster this series columns?
         *
         * Setting to `false` will make columns overlap with pther series.
         *
         * @default true
         * @param {boolean}  value  Clustered?
         */
        set: function (value) {
            this.setPropertyValue("clustered", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnSeries.prototype, "dropFromOpenState", {
        /**
         * A state to apply to a column when close value is lower than open value.
         *
         * Can be used to differentiate appearance based on value relations.
         *
         * NOTE: this will work only if at least one axis is [[ValueAxis]].
         *
         * @readonly You can modify state object, but can't overwrite it
         * @return {SpriteState} State
         */
        get: function () {
            if (!this._dropFromOpenState) {
                this._dropFromOpenState = this.states.create("dropFromOpenState");
            }
            return this._dropFromOpenState;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnSeries.prototype, "dropFromPreviousState", {
        /**
         * A state to apply to a column when its value is lower value of a previous
         * column.
         *
         * Can be used to differentiate appearance based on value relations.
         *
         * @readonly You can modify state object, but can't overwrite it
         * @return {SpriteState} State
         */
        get: function () {
            if (!this._dropFromPreviousState) {
                this._dropFromPreviousState = this.states.create("dropFromPreviousState");
            }
            return this._dropFromPreviousState;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnSeries.prototype, "riseFromOpenState", {
        /**
         * A state to apply to a column when close value is same or higher than open
         * value.
         *
         * Can be used to differentiate appearance based on value relations.
         *
         * NOTE: this will work only if at least one axis is [[ValueAxis]].
         *
         * @readonly You can modify state object, but can't overwrite it
         * @return {SpriteState} State
         */
        get: function () {
            if (!this._riseFromOpenState) {
                this._riseFromOpenState = this.states.create("riseFromOpenState");
            }
            return this._riseFromOpenState;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnSeries.prototype, "riseFromPreviousState", {
        /**
         * A state to apply to a column when its value is same or higher than value
         * of a previous column.
         *
         * Can be used to differentiate appearance based on value relations.
         *
         * @readonly You can modify state object, but can't overwrite it
         * @return {SpriteState} State
         */
        get: function () {
            if (!this._riseFromPreviousState) {
                this._riseFromPreviousState = this.states.create("riseFromPreviousState");
            }
            return this._riseFromPreviousState;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Updates value of the related legend item.
     *
     * @ignore Exclude from docs
     * @param {ColumnSeriesDataItem}  dataItem  Data item
     */
    ColumnSeries.prototype.updateLegendValue = function (dataItem) {
        var _this = this;
        _super.prototype.updateLegendValue.call(this, dataItem);
        if (this.legendDataItem) {
            var marker = this.legendDataItem.marker;
            var fromOpenState_1;
            var fromPreviousState_1;
            if (dataItem) {
                if (dataItem.droppedFromOpen) {
                    fromOpenState_1 = this._dropFromOpenState;
                }
                else {
                    fromOpenState_1 = this._riseFromOpenState;
                }
                if (dataItem.droppedFromPrevious) {
                    fromPreviousState_1 = this._dropFromPreviousState;
                }
                else {
                    fromPreviousState_1 = this._riseFromPreviousState;
                }
            }
            __WEBPACK_IMPORTED_MODULE_13__core_utils_Iterator__["each"](marker.children.iterator(), function (child) {
                if (dataItem) {
                    child.setState(fromPreviousState_1);
                    child.setState(fromOpenState_1);
                }
                else {
                    // todo: think what to do here, maybe apply above states based on totals?
                    child.setState(_this._riseFromPreviousState);
                    child.setState(_this._riseFromOpenState);
                }
            });
        }
    };
    /**
     * Creates elements in related legend container, that mimics the look of this
     * Series.
     *
     * @ignore Exclude from docs
     * @param {Container}  marker  Legend item container
     */
    ColumnSeries.prototype.createLegendMarker = function (marker) {
        var w = marker.pixelWidth;
        var h = marker.pixelHeight;
        marker.removeChildren();
        var column = marker.createChild(__WEBPACK_IMPORTED_MODULE_9__core_elements_RoundedRectangle__["a" /* RoundedRectangle */]);
        column.shouldClone = false;
        __WEBPACK_IMPORTED_MODULE_12__core_utils_Object__["copyProperties"](this, column, __WEBPACK_IMPORTED_MODULE_1__core_Sprite__["b" /* visualProperties */]);
        column.copyFrom(this.columns.template);
        column.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow
        column.width = w;
        column.height = h;
    };
    /**
     * Copies all properties from another instance of [[ColumnSeries]].
     *
     * @param {ColumnSeries}  source  Source series
     */
    ColumnSeries.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        this.columns.template.copyFrom(source.columns.template);
    };
    /**
    * returns bullet x location
    * @ignore
    */
    ColumnSeries.prototype.getBulletLocationX = function (bullet, field) {
        if (this.baseAxis == this.xAxis) {
            return (this._startLocation + this._endLocation) / 2;
        }
        else {
            return _super.prototype.getBulletLocationX.call(this, bullet, field);
        }
    };
    /**
    * returns bullet y location
    * @ignore
    */
    ColumnSeries.prototype.getBulletLocationY = function (bullet, field) {
        if (this.baseAxis == this.yAxis) {
            return (this._startLocation + this._endLocation) / 2;
        }
        else {
            return _super.prototype.getBulletLocationY.call(this, bullet, field);
        }
    };
    /**
     * @ignore Exclude from docs
     */
    ColumnSeries.prototype.fixVerticalCoordinate = function (coordinate) {
        var paddingBottom = this.columns.template.pixelPaddingBottom;
        var paddingTop = this.columns.template.pixelPaddingTop;
        var minY = -paddingTop;
        var maxY = this.yAxis.axisLength + paddingBottom;
        return __WEBPACK_IMPORTED_MODULE_11__core_utils_Math__["fitToRange"](coordinate, minY, maxY);
    };
    /**
     * @ignore Exclude from docs
     */
    ColumnSeries.prototype.fixHorizontalCoordinate = function (coordinate) {
        var paddingLeft = this.columns.template.pixelPaddingLeft;
        var paddingRight = this.columns.template.pixelPaddingRight;
        var minX = -paddingLeft;
        var maxX = this.xAxis.axisLength + paddingRight;
        return __WEBPACK_IMPORTED_MODULE_11__core_utils_Math__["fitToRange"](coordinate, minX, maxX);
    };
    return ColumnSeries;
}(__WEBPACK_IMPORTED_MODULE_0__XYSeries__["a" /* XYSeries */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_7__core_Registry__["b" /* registry */].registeredClasses["ColumnSeries"] = ColumnSeries;
__WEBPACK_IMPORTED_MODULE_7__core_Registry__["b" /* registry */].registeredClasses["ColumnSeriesDataItem"] = ColumnSeriesDataItem;
//# sourceMappingURL=ColumnSeries.js.map

/***/ }),
/* 51 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Column; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_elements_RoundedRectangle__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__ = __webpack_require__(2);
/**
 * Module that defines everything related to building Columns.
 * It is a container which has column element which is a RoundedRectangle.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Class used to creates Columns.
 *
 * @see {@link IColumnEvents} for a list of available events
 * @see {@link IColumnAdapters} for a list of available Adapters
 * @todo Usage example
 * @important
 */
var Column = /** @class */ (function (_super) {
    __extends(Column, _super);
    /**
     * Constructor
     */
    function Column() {
        var _this = _super.call(this) || this;
        _this.className = "Column";
        _this.width = Object(__WEBPACK_IMPORTED_MODULE_3__core_utils_Percent__["c" /* percent */])(80);
        _this.height = Object(__WEBPACK_IMPORTED_MODULE_3__core_utils_Percent__["c" /* percent */])(80);
        _this.isMeasured = true; // for correct position of the tooltip
        _this.applyOnClones = true;
        _this.strokeOpacity = 1;
        _this.layout = "none";
        _this.createAssets();
        // otherwise users will have to set layout themselves if they'll want to align, scale etc children
        _this.events.on("childadded", function () {
            if (_this.layout == "none") {
                _this.layout = "absolute";
            }
        });
        return _this;
    }
    Column.prototype.createAssets = function () {
        this.column = this.createChild(__WEBPACK_IMPORTED_MODULE_1__core_elements_RoundedRectangle__["a" /* RoundedRectangle */]);
        this.column.shouldClone = false;
        this.column.cornerRadius(0, 0, 0, 0);
    };
    Column.prototype.validate = function () {
        _super.prototype.validate.call(this);
        if (this.column) {
            this.column.width = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["min"](this.pixelWidth, this.maxWidth);
            this.column.height = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["min"](this.pixelHeight, this.maxHeight);
        }
    };
    Column.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        if (this.column) {
            this.column.copyFrom(source.column);
        }
    };
    return Column;
}(__WEBPACK_IMPORTED_MODULE_0__core_Container__["a" /* Container */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__core_Registry__["b" /* registry */].registeredClasses["Column"] = Column;
//# sourceMappingURL=Column.js.map

/***/ }),
/* 52 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Button; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Label__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__elements_RoundedRectangle__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_InterfaceColorSet__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Registry__ = __webpack_require__(0);
/**
 * Functionality for drawing simple buttons.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Button class is capable of drawing a simple rectangular button with
 * optionally rounded corners and an icon in it.
 *
 * @see {@link IButtonEvents} for a list of available events
 * @see {@link IButtonAdapters} for a list of available Adapters
 */
var Button = /** @class */ (function (_super) {
    __extends(Button, _super);
    /**
     * Constructor
     */
    function Button() {
        var _this = 
        // Init
        _super.call(this) || this;
        _this.className = "Button";
        _this.tooltipY = 0;
        // Set defaults
        _this.iconPosition = "left";
        _this.layout = "horizontal";
        _this.contentAlign = "center";
        _this.contentValign = "middle";
        _this.padding(8, 16, 8, 16);
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_3__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        // Create background
        var background = _this.background;
        background.fill = interfaceColors.getFor("secondaryButton");
        background.stroke = interfaceColors.getFor("secondaryButtonStroke");
        background.fillOpacity = 1;
        background.strokeOpacity = 1;
        background.cornerRadius(3, 3, 3, 3);
        // Create the label element
        _this.label = new __WEBPACK_IMPORTED_MODULE_1__Label__["a" /* Label */]();
        _this.label.fill = interfaceColors.getFor("secondaryButtonText");
        ;
        // Create default states
        var hoverState = background.states.create("hover");
        hoverState.properties.fillOpacity = 1;
        hoverState.properties.fill = interfaceColors.getFor("secondaryButtonHover");
        var downState = background.states.create("down");
        downState.transitionDuration = 100;
        downState.properties.fill = interfaceColors.getFor("secondaryButtonDown");
        downState.properties.fillOpacity = 1;
        // Set up accessibility
        // A button should be always focusable
        _this.role = "button";
        _this.focusable = true;
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(Button.prototype, "icon", {
        /**
         * @return {Sprite} Icon Sprite
         */
        get: function () {
            return this.getPropertyValue("icon");
        },
        /**
         * A [[Sprite]] to be used as an icon on button.
         *
         * @param {Sprite} icon Icon Sprite
         */
        set: function (icon) {
            var currentIcon = this.getPropertyValue("icon");
            if (currentIcon) {
                //this._icon.dispose();
                //this.removeDispose(currentIcon);
                currentIcon.parent = undefined;
            }
            if (icon) {
                this.setPropertyValue("icon", icon);
                icon.parent = this;
                icon.interactionsEnabled = false;
                this.iconPosition = this.iconPosition;
                this._disposers.push(icon);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "iconPosition", {
        /**
         * @return {"left" | "right"} Icon position
         */
        get: function () {
            return this.getPropertyValue("iconPosition");
        },
        /**
         * Icon position: "left" or "right".
         *
         * @default "left"
         * @param {"left" | "right"}  position  Icon position
         */
        set: function (position) {
            this.setPropertyValue("iconPosition", position);
            if (this.icon) {
                if (position == "left") {
                    this.icon.toBack();
                }
                else {
                    this.icon.toFront();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "label", {
        /**
         * @return {Label} Label element
         */
        get: function () {
            return this._label;
        },
        /**
         * [[Label]] element to be used for text.
         *
         * @param {Label}  label element
         */
        set: function (label) {
            if (this._label) {
                //this._label.dispose();
                this.removeDispose(this._label);
            }
            if (label) {
                this._label = label;
                label.parent = this;
                this._disposers.push(this._label);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates a background element for the button.
     *
     * @ignore Exclude from docs
     * @return {RoundedRectangle} Background element
     */
    Button.prototype.createBackground = function () {
        return new __WEBPACK_IMPORTED_MODULE_2__elements_RoundedRectangle__["a" /* RoundedRectangle */]();
    };
    return Button;
}(__WEBPACK_IMPORTED_MODULE_0__Container__["a" /* Container */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_4__Registry__["b" /* registry */].registeredClasses["Button"] = Button;
//# sourceMappingURL=Button.js.map

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(54);

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(21)(content, options);

if(content.locals) module.exports = content.locals;

if(false) {
	module.hot.accept("!!../../../../../node_modules/css-loader/index.js!./map.css", function() {
		var newContent = require("!!../../../../../node_modules/css-loader/index.js!./map.css");

		if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];

		var locals = (function(a, b) {
			var key, idx = 0;

			for(key in a) {
				if(!b || a[key] !== b[key]) return false;
				idx++;
			}

			for(key in b) idx--;

			return idx === 0;
		}(content.locals, newContent.locals));

		if(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');

		update(newContent);
	});

	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(20)(false);
// imports


// module
exports.push([module.i, "\n/*MAP CSS Save seperately later*/\n\n\n\n.map-container {\n    height: calc(100vh - 115px);\n}\n\n#map {\n    padding-top: 5px;\n    min-width: 940px;\n    text-align: center;\n    height: 600px;\n    max-height: 100vh;\n}\n\n\n.navbar {\n    padding-top:0;\n    padding-bottom:0;\n}\n\n\n#education-chart {\n    height: calc(100vh - 200px);\n}\n\n#growth-chart, #health-chart, #radar-chart, #crime-chart {\n    height: calc(100vh - 200px);\n}\n\n.state .icon {\n    stroke-width: 1;\n    stroke: #fff;\n    fill: currentColor;\n    height: 100%;\n    width: 100%;\n}\n\n.state {\n    color: #5a6aff;\n    transition: 500ms color;\n    padding-left: 15px;\n}\n\n\n.state-tiny {\n    width: 50px;\n    height: 50px;\n    float: left;\n    color: black;\n}\n\n.col-md-6 {\n    width: 50vw;\n    margin: 0;\n    padding: 0;\n    padding-top: 10px;\n}\n\n.main-state-nav {\n    padding-top: 10px;\n}\n\n\n.state-half-border {\n    border-right: 1px dotted #d7d7d7;\n    padding-right: 0;\n    margin-right: 0\n}\n\n\n\n.state:hover {\n    color: #72cfff;\n}\n\n.tooltip {\n    z-index: 9999999;\n}\n\n#popperElement {\n    padding: 15px;\n    background: rgba(255,255,255,0.9);\n    -webkit-border-radius: 10px;\n    -moz-border-radius: 10px;\n    border-radius: 10px;\n    border: 2px solid #ff9890;\n    width: 400px;\n}\n\n.page {\n    padding: 0;\n}\n\n.view-state .page {\n    padding: 20px;\n}\n\n.left-state, right-state {\n width: 50%;\n    height: calc(100vh - 50px);\n}\n\n.left-state {\n    border-right: 1px dotted #d7d7d7;\n}\n\n\n/*.one {*/\n    /*background-color: rgba(41, 17, 18, 0.8);*/\n/*}*/\n\n.two {\n    background-color: rgba(111, 102, 102, 0.8);\n}\n.three {\n    background-color: rgba(156, 143, 143, 0.8);\n}\n\n.four {\n    background-color: rgba(185, 170, 170, 0.8);\n}\n\n.five {\n    background-color: rgba(208, 191, 191, 0.8);\n}\n\nh2 {\n    font-size: 5.2vw;\n}\n\n\n.metric {\n\n}\n\n.metric .name {\n    text-transform: uppercase;\n    font-size: 1.0vw;\n    text-align: center;\n}\n\n.metric .number {\n    font-size: 3.0vw;\n    text-align: center;\n}\n\n.bold {\n    font-weight: bold;\n\n}\n\n.state-header-name {\n    font-size: 7em;\n    color: #fff;\n    text-shadow: 2px 1px 8px rgba(150, 150, 150, 0.75);\n    margin:0;\n\n}\n\n.state-nav {\n    position: sticky;\n    position: -webkit-sticky;\n    top: 0; /* required */\n    z-index: 100;\n\n    background-color: rgba(255,255,255,1);\n    border-bottom: 2px solid pink;\n}\n\n\n.state-header {\n    width: 100vw;\n    height: calc(100vh - 50px);\n    -webkit-background-size: cover;\n    background-size: cover;\n    padding: 0;\n    margin: 0;\n}\n\n\n.state-header-half {\n    width: 50%;\n    height: calc(100vh - 50px);\n    -webkit-background-size: cover;\n    background-size: cover;\n    padding: 0;\n    margin: 0;\n}\n\n\n\n.ribbon-green {\n    font: bold 15px Sans-Serif;\n    color: #333;\n    text-align: center;\n    text-shadow: rgba(255,255,255,0.5) 0px 1px 0px;\n    -webkit-transform: rotate(45deg);\n    -moz-transform:    rotate(45deg);\n    -ms-transform:     rotate(45deg);\n    -o-transform:      rotate(45deg);\n    position: relative;\n    padding: 7px 0;\n    left: -5px;\n    top: 15px;\n    width: 120px;\n    background-color: #BFDC7A;\n    background-image: -webkit-gradient(linear, left top, left bottom, from(#BFDC7A), to(#8EBF45));\n    background-image: -webkit-linear-gradient(top, #BFDC7A, #8EBF45);\n    background-image:    -moz-linear-gradient(top, #BFDC7A, #8EBF45);\n    background-image:     -ms-linear-gradient(top, #BFDC7A, #8EBF45);\n    background-image:      -o-linear-gradient(top, #BFDC7A, #8EBF45);\n    color: #6a6340;\n    -webkit-box-shadow: 0px 0px 3px rgba(0,0,0,0.3);\n    -moz-box-shadow:    0px 0px 3px rgba(0,0,0,0.3);\n    box-shadow:         0px 0px 3px rgba(0,0,0,0.3);\n}\n\n.ribbon-green:before, .ribbon-green:after {\n    content: \"\";\n    border-top:   3px solid #6e8900;\n    border-left:  3px solid transparent;\n    border-right: 3px solid transparent;\n    position:absolute;\n    bottom: -3px;\n}\n\n.ribbon-green:before {\n    left: 0;\n}\n.ribbon-green:after {\n    right: 0;\n}​\n\n\n .corner-ribbon {\n\n\n     top: 25px;\n     left: -50px;\n     text-align: center;\n     line-height: 80px;\n     letter-spacing: 1px;\n     color: #f0f0f0;\n     transform: rotate(-45deg);\n     -webkit-transform: rotate(-45deg);\n }\n\n.corner-ribbon.top-left{\n    top: 89px;\n    padding: 20px;\n    left: -79px;\n    width: 311px;\n    text-align: center;\n    transform: rotate(-45deg);\n    -webkit-transform: rotate(-45deg);\n    z-index: 1;\n    position: absolute;\n}\n\n.corner-ribbon.shadow{\n    box-shadow: 0 0 3px rgba(0,0,0,.3);\n}\n\n.corner-ribbon.red{\n    background-color: #BFDC7A;\n    background-image: -webkit-gradient(linear, left top, left bottom, from(#BFDC7A), to(#8EBF45));\n    background-image: -webkit-linear-gradient(top, #BFDC7A, #8EBF45);\n    background-image:    -moz-linear-gradient(top, #BFDC7A, #8EBF45);\n    background-image:     -ms-linear-gradient(top, #BFDC7A, #8EBF45);\n    background-image:      -o-linear-gradient(top, #BFDC7A, #8EBF45);\n\n}\n\n", ""]);

// exports


/***/ }),
/* 55 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["order"] = order;
/**
 * ============================================================================
 * COMPARING FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Comparing function used for ordering.
 *
 * @ignore Exclude from docs
 * @param  {number}    a  Number 1
 * @param  {number}    b  Number 2
 * @return {Ordering}     Result
 */
function order(a, b) {
    if (a === b) {
        return 0;
    }
    else if (a < b) {
        return -1;
    }
    else {
        return 1;
    }
}
//# sourceMappingURL=Number.js.map

/***/ }),
/* 56 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TextFormatter; });
/* harmony export (immutable) */ __webpack_exports__["b"] = getTextFormatter;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__rendering_AMElement__ = __webpack_require__(74);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Adapter__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Strings__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Type__ = __webpack_require__(1);
/**
 * Handles formatting of pseudo-markup in text.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





/**
 * Handles formatting of pseudo-markdown in text.
 *
 * @todo Encode < > in output
 * @todo Add more adapters
 * @important
 */
var TextFormatter = /** @class */ (function (_super) {
    __extends(TextFormatter, _super);
    /**
     * Constructor
     */
    function TextFormatter() {
        var _this = _super.call(this) || this;
        /**
         * Adapter.
         *
         * @type {Adapter<TextFormatter, ITextFormatterAdapters>}
         */
        _this.adapter = new __WEBPACK_IMPORTED_MODULE_2__utils_Adapter__["a" /* Adapter */](_this);
        _this.className = "TextFormatter";
        _this.applyTheme();
        return _this;
    }
    /**
     * Formats the text according to specifications passed in.
     *
     * @param  {string}  text    Text to format
     * @param  {string}  output  Output format (svg, html)
     * @return {string}          Formatted text
     */
    TextFormatter.prototype.format = function (text, output) {
        // Apply default
        if (!__WEBPACK_IMPORTED_MODULE_4__utils_Type__["hasValue"](output)) {
            output = "svg";
        }
        // Init return value
        var formatted = "";
        // Replace double (escaped) square spaces with remporary codes
        text = this.escape(text);
        // Divvy up the string by style tags
        var styles = text.match(/\[([^\]]*?)\]/gm);
        if (!styles) {
            // Nothing to do here - no formatting elements
            return this.wrap(text, "", output);
        }
        // Get pure text - no style tags
        var texts = text.split(/\[[^\[\]]*\]/);
        // Go through each of the texts and wrap it in style tags
        for (var i = 0; i < texts.length; i++) {
            // Get text bit
            var t = texts[i];
            // Check if string is empty
            if (t === "") {
                continue;
            }
            // Run through an adapter
            t = this.adapter.apply("chunk", t);
            // Get related style
            var s = "";
            if (i > 0) {
                s = styles[i - 1].replace('[', '').replace(']', '');
            }
            // Wrap text in tag
            formatted += this.wrap(t, s, output);
        }
        // Replace placeholders back
        formatted = this.unescape(formatted);
        // Return result
        return this.cleanUp(formatted);
    };
    /**
     * Replaces brackets with temporary placeholders.
     *
     * @ignore Exclude from docs
     * @param  {string}  text  Input text
     * @return {string}        Escaped text
     */
    TextFormatter.prototype.escape = function (text) {
        return text.replace("[[", __WEBPACK_IMPORTED_MODULE_3__utils_Strings__["i" /* PLACEHOLDER_L */]).replace("]]", __WEBPACK_IMPORTED_MODULE_3__utils_Strings__["k" /* PLACEHOLDER_R */]).replace("''", __WEBPACK_IMPORTED_MODULE_3__utils_Strings__["j" /* PLACEHOLDER_Q */]);
    };
    /**
     * Replaces placeholders back to brackets.
     *
     * @ignore Exclude from docs
     * @param  {string}  text  Escaped text
     * @return {string}        Unescaped text
     */
    TextFormatter.prototype.unescape = function (text) {
        return text.replace(__WEBPACK_IMPORTED_MODULE_3__utils_Strings__["i" /* PLACEHOLDER_L */], "[[").replace(__WEBPACK_IMPORTED_MODULE_3__utils_Strings__["k" /* PLACEHOLDER_R */], "]]").replace(__WEBPACK_IMPORTED_MODULE_3__utils_Strings__["j" /* PLACEHOLDER_Q */], "'");
    };
    /**
     * Cleans up the text text for leftover double square brackets.
     *
     * @ignore Exclude from docs
     * @param  {string}  text  Input text
     * @return {string}        Cleaned up text
     */
    TextFormatter.prototype.cleanUp = function (text) {
        return text.replace("[[", "[").replace("]]", "]").replace("''", "'");
    };
    /**
     * Wraps text into corresponding tags.
     *
     * @ignore Exclude from docs
     * @param  {string}  text   Text to wrap
     * @param  {string}  style  Styles
     * @param  {string}  output  Format to output in (svg, html)
     * @return {string}          Formatted string
     */
    TextFormatter.prototype.wrap = function (text, style, output) {
        if (style === "" || style === "/") {
            //return text;
            style = "";
        }
        switch (output) {
            case "html":
                return this.wrapHtml(text, this.translateStyleShortcuts(style));
            default:
                return this.wrapSvg(text, this.translateStyleShortcuts(style));
        }
    };
    /**
     * Wraps text in styled SVG tag.
     *
     * @ignore Exclude from docs
     * @param  {string}  text   Text to wrap
     * @param  {string}  style  Style property
     * @return {string}         Formatted tag
     */
    TextFormatter.prototype.wrapSvg = function (text, style) {
        if (style === "") {
            return "<tspan>" + text + "</tspan>";
        }
        else {
            return "<tspan style='" + style + "'>" + text + "</tspan>";
        }
    };
    /**
     * Returns an SVG `<tspan>` element.
     *
     * @ignore Exclude from docs
     * @param  {string}     text   Text
     * @param  {string}     style  Style
     * @return {AMElement}         Element
     */
    TextFormatter.prototype.getSvgElement = function (text, style) {
        var element = new __WEBPACK_IMPORTED_MODULE_1__rendering_AMElement__["a" /* AMElement */]("tspan");
        element.textContent = text;
        if (style) {
            element.node.setAttribute("style", style);
        }
        return element;
    };
    /**
     * Wraps text in HTML <span> tag.
     *
     * @ignore Exclude from docs
     * @param  {string}  text   Text to wrap
     * @param  {string}  style  Style property
     * @return {string}         Formatted tag
     * @todo Translate SVG styles into HTML ones
     */
    TextFormatter.prototype.wrapHtml = function (text, style) {
        if (style === "") {
            return "<span>" + text + "</span>";
        }
        else {
            return "<span style='" + this.styleSvgToHtml(style) + "'>" + text + "</span>";
        }
    };
    /**
     * Returns an HTML `<span>` element.
     *
     * @ignore Exclude from docs
     * @param  {string}       text   Text/HTML
     * @param  {string}       style  Style definition
     * @return {HTMLElement}         HTML element
     */
    TextFormatter.prototype.getHtmlElement = function (text, style) {
        var element = document.createElement("span");
        element.innerHTML = text;
        if (style) {
            element.setAttribute("style", style);
        }
        return element;
    };
    /**
     * Trabslates SVG CSS into HTML CSS.
     *
     * @ignore Exclude from docs
     * @param  {string}  style  SVG CSS
     * @return {string}         HTML CSS
     * @todo Implement actual translation
     */
    TextFormatter.prototype.styleSvgToHtml = function (style) {
        style = style.replace(/fill:/, "color:");
        return style;
    };
    /**
     * Translates style shortcuts into full styles, i.e.:
     * "bold" => "font-weight: bold"
     * "#f00" => "fill: #f00"
     *
     * @ignore Exclude from docs
     * @param  {string}  style  Untranslated style
     * @return {string}         Translated style
     * @todo Implement actual translation
     */
    TextFormatter.prototype.translateStyleShortcuts = function (style) {
        // Get style parts
        var b = style.match(/([\w\-]*:[\s]?[^;\s\]]*)|(\#[\w]{1,6})|([\w]+)|(\/)/gi);
        // Empty?
        if (!b) {
            return style;
        }
        // Check each part
        for (var i = 0; i < b.length; i++) {
            if (b[i].match(/^bold$/i)) {
                // Bold
                b[i] = "font-weight:" + b[i];
            }
            else if (b[i] == "/") {
                // Just closing tag
                // Do nothing
                b[i] = "";
            }
            else if (!b[i].match(/:/)) {
                // Color
                b[i] = "fill:" + b[i];
            }
        }
        return b.join(';');
    };
    /**
     * Splits string into chunks. (style blocks, quoted blocks, regular blocks)
     *
     * If the second parameter `quotedBlocks` is set to `true` this method will
     * also single out text blocks enclosed within single quotes that no
     * formatting should be applied to, and they should be displayed as is.
     *
     * Default for the above is `false`, so that you can use single quote in text
     * without escaping it.
     *
     * If enabled, single quotes can be escaped by doubling it - adding two
     * single quotes, which will be replaced by a one single quote in the final
     * output.
     *
     * @ignore Exclude from docs
     * @param  {string}    text          Text to chunk
     * @param  {boolean}   quotedBlocks  Use quoted blocks
     * @return {string[]}                Array of string chunks
     */
    TextFormatter.prototype.chunk = function (text, quotedBlocks) {
        if (quotedBlocks === void 0) { quotedBlocks = false; }
        // Init result
        var res = [];
        // Replace double (escaped) square spaces and quotes with temporary codes
        text = this.escape(text);
        // Deal with style blocks
        var chunks = quotedBlocks ? text.split("'") : [text];
        for (var i = 0; i < chunks.length; i++) {
            var chunk = chunks[i];
            // Empty?
            if (chunk === "") {
                continue;
            }
            if ((i % 2) === 0) {
                // Text outside quotes
                // Parse for style blocks which are "text" chunks, the rest chunks are
                // "value"
                chunk = chunk.replace("][", "]" + __WEBPACK_IMPORTED_MODULE_3__utils_Strings__["d" /* PLACEHOLDER */] + "[");
                var chunks2 = chunk.split(/[\[\]]+/);
                for (var i2 = 0; i2 < chunks2.length; i2++) {
                    var chunk2 = this.unescape(chunks2[i2]);
                    // Placeholder?
                    if (chunk2 === __WEBPACK_IMPORTED_MODULE_3__utils_Strings__["d" /* PLACEHOLDER */]) {
                        continue;
                    }
                    // Empty?
                    if (chunk2 === "") {
                        continue;
                    }
                    // Block or value
                    if ((i2 % 2) === 0) {
                        res.push({
                            "type": "value",
                            "text": this.adapter.apply("chunk", chunk2)
                        });
                    }
                    else {
                        res.push({
                            "type": "format",
                            "text": "[" + chunk2 + "]"
                        });
                    }
                }
            }
            else {
                // A text within doublequotes
                // All chunks are "text"
                var chunks2 = chunk.split(/[\[\]]+/);
                for (var i2 = 0; i2 < chunks2.length; i2++) {
                    var chunk2 = this.unescape(chunks2[i2]);
                    // Empty?
                    if (chunk2 === "") {
                        continue;
                    }
                    // Block or text
                    if ((i2 % 2) === 0) {
                        res.push({
                            "type": "text",
                            "text": chunk2
                        });
                    }
                    else if (this.isImage(chunk2)) {
                        res.push({
                            "type": "image",
                            "text": "[" + chunk2 + "]"
                        });
                    }
                    else {
                        res.push({
                            "type": "format",
                            "text": "[" + chunk2 + "]"
                        });
                    }
                }
            }
        }
        return res;
    };
    /**
     * Checks if supplied format contains image information and should be
     * formatted as such.
     * I.e.: `[img: myImage.png]`
     *
     * @ignore Exclude from docs
     * @param  {string}   text  Format
     * @return {boolean}        `true` if it is an image
     */
    TextFormatter.prototype.isImage = function (text) {
        return text.match(/img[ ]?:/) ? true : false;
    };
    return TextFormatter;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["a" /* BaseObject */]));

var formatter;
/**
 * Returns the global instance of [[TextFormatter]].
 *
 * All classes and instances should reuse this universal text formatter,
 * rather than create their own instance of it.
 *
 * @type {TextFormatter}
 */
function getTextFormatter() {
    if (formatter == null) {
        formatter = new TextFormatter();
    }
    return formatter;
}
//# sourceMappingURL=TextFormatter.js.map

/***/ }),
/* 57 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DateFormatter; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_Language__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Base__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__formatters_TextFormatter__ = __webpack_require__(56);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Strings__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Type__ = __webpack_require__(1);
/**
 * Handles date and time formatting
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();






/**
 * Handles date and time formatting.
 *
 * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/} Tutorial on date/time formatting
 * @todo Better type casting of passed in date?
 * @todo Quarter support?
 * @todo When parsing named months make the search case-insensitive
 * @todo Escape a.m./p.m. properly when used in RegEx
 */
var DateFormatter = /** @class */ (function (_super) {
    __extends(DateFormatter, _super);
    /**
     * Constructor
     */
    function DateFormatter() {
        var _this = _super.call(this) || this;
        /**
         * Date format.
         *
         * @type {string}
         */
        _this._dateFormat = "yyyy-MM-dd";
        /**
         * Input date format.
         *
         * @type {string}
         */
        _this._inputDateFormat = "yyyy-MM-dd";
        /**
         * Assume UTC time zone.
         *
         * @type {boolean}
         */
        _this._utc = false;
        /**
         * First day of week.
         *
         * 0 - Sunday
         * 1 - Monday
         *
         * Etc.
         *
         * @type {number}
         */
        _this._firstDayOfWeek = 1;
        /**
         * A list of month names.
         *
         * @type {Array<MonthNames>}
         */
        _this._months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        /**
         * A list of short month names.
         *
         * @param {Array<ShortMonthNames>}
         */
        _this._monthsShort = ["Jan", "Feb", "Mar", "Apr", "May(short)", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        /**
         * A list of weekday names.
         *
         * @type {Array<Weekdays>}
         */
        _this._weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
        /**
         * A list of short weekday names.
         *
         * @type {Array<ShortWeekdays>}
         */
        _this._weekdaysShort = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
        /**
         * Output format to produce. If the format calls for applying color to the
         * formatted value, this setting will determine what markup to use: SVG or
         * HTML.
         *
         * Available options: svg, html.
         *
         * @default "svg"
         * @type {string}
         */
        _this._outputFormat = "svg";
        _this.className = "DateFormatter";
        _this.applyTheme();
        return _this;
    }
    /**
     * Formats the date value according to specified format.
     *
     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/} Tutorial on date/time formatting
     * @param  {any}     source  Date value
     * @param  {string}  format  Format
     * @return {string}          Formatted date string
     */
    DateFormatter.prototype.format = function (source, format) {
        // No language?
        if (!this.language) {
            if (this.sprite) {
                this.language = this.sprite.language;
            }
            else {
                this.language = new __WEBPACK_IMPORTED_MODULE_0__utils_Language__["a" /* Language */];
            }
        }
        // No format passed in or it's empty
        if (typeof format === "undefined" || format === "") {
            format = this._dateFormat;
        }
        // Clean format
        format = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["cleanFormat"](format);
        // get format info (it will also deal with parser caching)
        var info = this.parseFormat(format);
        // Do any casting if required
        // This will take care of timestamps as well as Date objects
        var date = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["anyToDate"](source);
        // Check if it's a valid date
        if (!__WEBPACK_IMPORTED_MODULE_5__utils_Type__["isNumber"](date.getTime())) {
            return this.language.translate("Invalid date");
        }
        // Apply format
        var formatted = this.applyFormat(date, info);
        // We're done
        return formatted;
    };
    /**
     * Parses format into structured infromation.
     *
     * @param {string} format Format template
     */
    DateFormatter.prototype.parseFormat = function (format) {
        // Check cache
        if (typeof (this.getCache(format)) !== "undefined") {
            return this.getCache(format);
        }
        // Init format parse info holder
        var info = {
            "template": "",
            "parts": []
        };
        // Let TextFormatter split into chunks
        var chunks = Object(__WEBPACK_IMPORTED_MODULE_2__formatters_TextFormatter__["b" /* getTextFormatter */])().chunk(format, true);
        for (var i = 0; i < chunks.length; i++) {
            var chunk = chunks[i];
            if (chunk.type === "value") {
                // Just "Date"?
                if (chunk.text.match(/^date$/i)) {
                    chunk.text = this._dateFormat;
                }
                // Find all possible parts
                var matches = chunk.text.match(/G|yyyy|yyy|yy|y|YYYY|YYY|YY|Y|u|MMMMM|MMMM|MMM|MM|M|ww|w|W|dd|d|DDD|DD|D|F|g|EEEEE|EEEE|EEE|EE|E|eeeee|eeee|eee|ee|e|aaa|aa|a|hh|h|HH|H|KK|K|kk|k|mm|m|ss|s|SSS|SS|S|A|zzzz|zzz|zz|z|ZZ|Z|t|x|nnn|nn|n|i|I/g);
                // Found?
                if (matches) {
                    // Populate template
                    for (var x = 0; x < matches.length; x++) {
                        info.parts.push(matches[x]);
                        chunk.text = chunk.text.replace(matches[x], __WEBPACK_IMPORTED_MODULE_3__utils_Strings__["d" /* PLACEHOLDER */]);
                    }
                }
            }
            // Apply to template
            info.template += chunk.text;
        }
        // Apply style formatting
        //info.template = getTextFormatter().format(info.template, this.outputFormat);
        // Save cache
        this.setCache(format, info);
        return info;
    };
    /**
     * Applies format to Date.
     *
     * @param  {Date}            date  Date object
     * @param  {DateFormatInfo}  info  Parsed format information
     * @return {string}                Formatted date string
     */
    DateFormatter.prototype.applyFormat = function (date, info) {
        // Init return value
        var res = info.template;
        // Get values
        var fullYear, month, weekday, day, hours, minutes, seconds, milliseconds, offset = date.getTimezoneOffset(), timestamp = date.getTime();
        if (this.utc) {
            fullYear = date.getUTCFullYear();
            month = date.getUTCMonth();
            weekday = date.getUTCDay();
            day = date.getUTCDate();
            hours = date.getUTCHours();
            minutes = date.getUTCMinutes();
            seconds = date.getUTCSeconds();
            milliseconds = date.getUTCMilliseconds();
        }
        else {
            fullYear = date.getFullYear();
            month = date.getMonth();
            weekday = date.getDay();
            day = date.getDate();
            hours = date.getHours();
            minutes = date.getMinutes();
            seconds = date.getSeconds();
            milliseconds = date.getMilliseconds();
        }
        // Go through each part and format/replace it in template
        for (var i = 0; i < info.parts.length; i++) {
            var value = "";
            switch (info.parts[i]) {
                case "G":
                    value = this.language.translate(fullYear < 0
                        ? "_era_bc"
                        : "_era_ad");
                    break;
                case "yyyy":
                    value = fullYear.toString();
                    break;
                case "yyy":
                case "yy":
                case "y":
                    value = fullYear.toString().substr(-info.parts[i].length);
                    break;
                case "YYYY":
                case "YYY":
                case "YY":
                case "Y":
                    var week = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["getWeek"](date);
                    var year = fullYear;
                    if (week == 1 && weekday > 1) {
                        year++;
                    }
                    if (info.parts[i] == "YYYY") {
                        value = year.toString();
                    }
                    else {
                        value = year.toString().substr(-info.parts[i].length);
                    }
                    break;
                case "u":
                    // @todo
                    break;
                case "MMMMM":
                    value = this.language.translate(this._months[month]).substr(0, 1);
                    break;
                case "MMMM":
                    value = this.language.translate(this._months[month]);
                    break;
                case "MMM":
                    value = this.language.translate(this._monthsShort[month]);
                    break;
                case "MM":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](month + 1, 2, "0");
                    break;
                case "M":
                    value = (month + 1).toString();
                    break;
                case "ww":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](__WEBPACK_IMPORTED_MODULE_4__utils_Utils__["getWeek"](date, this.utc), 2, "0");
                    break;
                case "w":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["getWeek"](date, this.utc).toString();
                    break;
                case "W":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["getMonthWeek"](date, this.utc).toString();
                    break;
                case "dd":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](day, 2, "0");
                    break;
                case "d":
                    value = day.toString();
                    break;
                case "DD":
                case "DDD":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](__WEBPACK_IMPORTED_MODULE_4__utils_Utils__["getYearDay"](date, this.utc).toString(), info.parts[i].length, "0");
                    break;
                case "D":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["getYearDay"](date, this.utc).toString();
                    break;
                case "F":
                    // @todo
                    break;
                case "g":
                    // @todo
                    break;
                case "t":
                    value = this.language.translateFunc("_dateOrd").call(this, day);
                    break;
                case "E":
                    value = (weekday || 7).toString();
                    break;
                case "EE":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"]((weekday || 7).toString(), 2, "0");
                    break;
                case "EEE":
                case "eee":
                    value = this.language.translate(this._weekdaysShort[weekday]);
                    break;
                case "EEEE":
                case "eeee":
                    value = this.language.translate(this._weekdays[weekday]);
                    break;
                case "EEEEE":
                case "eeeee":
                    value = this.language.translate(this._weekdays[weekday]).substr(0, 1);
                    break;
                case "e":
                case "ee":
                    value = (weekday - this.firstDayOfWeek + 1).toString();
                    if (info.parts[i] == "ee") {
                        value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](value, 2, "0");
                    }
                    break;
                case "a":
                    if (hours > 12) {
                        value = this.language.translate("PM");
                    }
                    else if (hours === 12 && (minutes > 0)) {
                        value = this.language.translate("PM");
                    }
                    else {
                        value = this.language.translate("AM");
                    }
                    break;
                case "aa":
                    if (hours > 12) {
                        value = this.language.translate("P.M.");
                    }
                    else if (hours === 12 && (minutes > 0)) {
                        value = this.language.translate("P.M.");
                    }
                    else {
                        value = this.language.translate("A.M.");
                    }
                    break;
                case "aaa":
                    if (hours > 12) {
                        value = this.language.translate("P");
                    }
                    else if (hours === 12 && (minutes > 0)) {
                        value = this.language.translate("P");
                    }
                    else {
                        value = this.language.translate("A");
                    }
                    break;
                case "h":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["get12Hours"](hours).toString();
                    break;
                case "hh":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](__WEBPACK_IMPORTED_MODULE_4__utils_Utils__["get12Hours"](hours), 2, "0");
                    break;
                case "H":
                    value = hours.toString();
                    break;
                case "HH":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](hours, 2, "0");
                    break;
                case "K":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["get12Hours"](hours, 0).toString();
                    break;
                case "KK":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](__WEBPACK_IMPORTED_MODULE_4__utils_Utils__["get12Hours"](hours, 0), 2, "0");
                    break;
                case "k":
                    value = (hours + 1).toString();
                    break;
                case "kk":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](hours + 1, 2, "0");
                    break;
                case "m":
                    value = minutes.toString();
                    break;
                case "mm":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](minutes, 2, "0");
                    break;
                case "s":
                    value = seconds.toString();
                    break;
                case "ss":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](seconds, 2, "0");
                    break;
                case "S":
                case "SS":
                case "SSS":
                    value = Math.round((milliseconds / 1000) * Math.pow(10, info.parts[i].length)).toString();
                    break;
                case "x":
                    value = timestamp.toString();
                    break;
                case "n":
                case "nn":
                case "nnn":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](milliseconds, info.parts[i].length, "0");
                    break;
                case "z":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["getTimeZone"](date, false, false, this.utc);
                    break;
                case "zz":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["getTimeZone"](date, true, false, this.utc);
                    break;
                case "zzz":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["getTimeZone"](date, false, true, this.utc);
                    break;
                case "zzzz":
                    value = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["getTimeZone"](date, true, true, this.utc);
                    break;
                case "Z":
                case "ZZ":
                    var tz = Math.abs(offset) / 60;
                    var tzh = Math.floor(tz);
                    var tzm = tz * 60 - tzh * 60;
                    if (info.parts[i] == "Z") {
                        value = "GMT";
                        value += offset > 0 ? "-" : "+";
                        value += __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](tzh, 2) + ":" + __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](tzm, 2);
                    }
                    else {
                        value = offset > 0 ? "-" : "+";
                        value += __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](tzh, 2) + __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["padString"](tzm, 2);
                    }
                    break;
                case "i":
                    value = date.toISOString();
                    break;
                case "I":
                    value = date.toUTCString();
                    break;
            }
            res = res.replace(__WEBPACK_IMPORTED_MODULE_3__utils_Strings__["d" /* PLACEHOLDER */], value);
        }
        return res;
    };
    /**
     * Parses any input value into Date object.
     *
     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/#Parsing_Dates} Tutorial on date/time parsing
     * @param  {any}     source  Source value
     * @param  {string}  format  Source format
     * @return {Date}            Date object
     */
    DateFormatter.prototype.parse = function (source, format) {
        // Format set?
        if (!__WEBPACK_IMPORTED_MODULE_5__utils_Type__["hasValue"](format)) {
            format = this.inputDateFormat;
        }
        // Is it already a Date
        if (source instanceof Date) {
            return source;
        }
        // Is it a numeric timestamp
        if (typeof source === "number") {
            return new Date(source);
        }
        // No? Let's check if it's string, and try converting to it if nec
        if (typeof source !== "string") {
            source = source.toString();
        }
        // no language?
        if (!this.language) {
            if (this.sprite) {
                this.language = this.sprite.language;
            }
            else {
                this.language = new __WEBPACK_IMPORTED_MODULE_0__utils_Language__["a" /* Language */];
            }
        }
        // Init return value
        var res = new Date(1970, 0, 1, 0, 0, 0);
        // Init RegEx for parsing
        var reg = "";
        // Clean format
        format = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["cleanFormat"](format);
        // Parse format
        var info = this.parseFormat(format);
        // Init parsed items holder
        var parsedIndexes = {
            "year": -1,
            "year3": -1,
            "year2": -1,
            "year1": -1,
            "month": -1,
            "monthShort": -1,
            "monthLong": -1,
            "weekdayShort": -1,
            "weekdayLong": -1,
            "day": -1,
            "yearDay": -1,
            "week": -1,
            "hourBase0": -1,
            "hour12Base0": -1,
            "hourBase1": -1,
            "hour12Base1": -1,
            "minute": -1,
            "second": -1,
            "millisecond": -1,
            "millisecondDigits": -1,
            "am": -1,
            "zone": -1,
            "timestamp": -1,
            "iso": -1
        };
        // Index adjuster
        var indexAdjust = 0, index = 0;
        // Iterate through all of the parts
        for (var i = 0; i < info.parts.length; i++) {
            // Set current match index
            index = i + indexAdjust + 1;
            switch (info.parts[i]) {
                case "yyyy":
                case "YYYY":
                    reg += "([0-9]{4,})";
                    parsedIndexes.year = index;
                    break;
                case "yyy":
                case "YYY":
                    reg += "([0-9]{3})";
                    parsedIndexes.year3 = index;
                    break;
                case "yy":
                case "YY":
                    reg += "([0-9]{2})";
                    parsedIndexes.year2 = index;
                    break;
                case "y":
                case "Y":
                    reg += "([0-9]{1})";
                    parsedIndexes.year1 = index;
                    break;
                case "MMMM":
                    reg += "(" + this.getStringList(this._months).join("|") + ")";
                    parsedIndexes.monthLong = index;
                    break;
                case "MMM":
                    reg += "(" + this.getStringList(this._monthsShort).join("|") + ")";
                    parsedIndexes.monthShort = index;
                    break;
                case "MM":
                case "M":
                    reg += "([0-9]{2}|[0-9]{1})";
                    parsedIndexes.month = index;
                    break;
                case "ww":
                case "w":
                    reg += "([0-9]{2}|[0-9]{1})";
                    parsedIndexes.week = index;
                    break;
                case "dd":
                case "d":
                    reg += "([0-9]{2}|[0-9]{1})";
                    parsedIndexes.day = index;
                    break;
                case "DDD":
                case "DD":
                case "D":
                    reg += "([0-9]{3}|[0-9]{2}|[0-9]{1})";
                    parsedIndexes.yearDay = index;
                    break;
                case "dddd":
                    reg += "(" + this.getStringList(this._weekdays).join("|") + ")";
                    parsedIndexes.weekdayLong = index;
                    break;
                case "ddd":
                    reg += "(" + this.getStringList(this._weekdaysShort).join("|") + ")";
                    parsedIndexes.weekdayShort = index;
                    break;
                case "aaa":
                case "aa":
                case "a":
                    // TODO: fix (escape regex)
                    reg += "(" + this.getStringList(["AM", "PM", "A.M.", "P.M.", "A", "P"]).join("|") + ")";
                    parsedIndexes.am = index;
                    break;
                case "hh":
                case "h":
                    reg += "([0-9]{2}|[0-9]{1})";
                    parsedIndexes.hour12Base1 = index;
                    break;
                case "HH":
                case "H":
                    reg += "([0-9]{2}|[0-9]{1})";
                    parsedIndexes.hourBase0 = index;
                    break;
                case "KK":
                case "K":
                    reg += "([0-9]{2}|[0-9]{1})";
                    parsedIndexes.hour12Base0 = index;
                    break;
                case "kk":
                case "k":
                    reg += "([0-9]{2}|[0-9]{1})";
                    parsedIndexes.hourBase1 = index;
                    break;
                case "mm":
                case "m":
                    reg += "([0-9]{2}|[0-9]{1})";
                    parsedIndexes.minute = index;
                    break;
                case "ss":
                case "s":
                    reg += "([0-9]{2}|[0-9]{1})";
                    parsedIndexes.second = index;
                    break;
                case "SSS":
                case "SS":
                case "S":
                    reg += "([0-9]{3}|[0-9]{2}|[0-9]{1})";
                    parsedIndexes.millisecond = index;
                    parsedIndexes.millisecondDigits = info.parts[i].length;
                    break;
                case "nnn":
                case "nn":
                case "n":
                    reg += "([0-9]{3}|[0-9]{2}|[0-9]{1})";
                    parsedIndexes.millisecond = index;
                    break;
                case "x":
                    reg += "([0-9]{1,})";
                    parsedIndexes.timestamp = index;
                    break;
                case "Z":
                    reg += "GMT([-+]+[0-9]{2}:[0-9]{2})";
                    parsedIndexes.zone = index;
                    break;
                case "ZZ":
                    reg += "([\\-+]+[0-9]{2}[0-9]{2})";
                    parsedIndexes.zone = index;
                    break;
                case "i":
                    reg += "([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{3}Z)";
                    parsedIndexes.iso = index;
                    break;
                case "G":
                case "YYYY":
                case "YYY":
                case "YY":
                case "Y":
                case "MMMMM":
                case "W":
                case "EEEEE":
                case "EEEE":
                case "EEE":
                case "EE":
                case "E":
                case "eeeee":
                case "eeee":
                case "eee":
                case "ee":
                case "e":
                case "zzzz":
                case "zzz":
                case "zz":
                case "z":
                case "t":
                    // Ignore
                    indexAdjust--;
                    break;
            }
            reg += "[^0-9]*";
        }
        // Try matching
        var regex = new RegExp(reg);
        var matches;
        if (matches = source.match(regex)) {
            // Populate the date object
            // Full year
            if (parsedIndexes.year > -1) {
                var val = parseInt(matches[parsedIndexes.year]);
                if (this.utc) {
                    res.setUTCFullYear(val);
                }
                else {
                    res.setFullYear(val);
                }
            }
            // 3-digit year
            if (parsedIndexes.year3 > -1) {
                var val = parseInt(matches[parsedIndexes.year3]);
                val += 1000;
                if (this.utc) {
                    res.setUTCFullYear(val);
                }
                else {
                    res.setFullYear(val);
                }
            }
            // 2-digit year
            if (parsedIndexes.year2 > -1) {
                var val = parseInt(matches[parsedIndexes.year2]);
                if (val > 50) {
                    val += 1000;
                }
                else {
                    val += 2000;
                }
                if (this.utc) {
                    res.setUTCFullYear(val);
                }
                else {
                    res.setFullYear(val);
                }
            }
            // 1-digit year
            if (parsedIndexes.year1 > -1) {
                var val = parseInt(matches[parsedIndexes.year1]);
                val = Math.floor((new Date().getFullYear()) / 10) * 10 + val;
                if (this.utc) {
                    res.setUTCFullYear(val);
                }
                else {
                    res.setFullYear(val);
                }
            }
            // Full month
            if (parsedIndexes.monthLong > -1) {
                var val = this.resolveMonth(matches[parsedIndexes.monthLong]);
                if (this.utc) {
                    res.setUTCMonth(val);
                }
                else {
                    res.setMonth(val);
                }
            }
            // Short month
            if (parsedIndexes.monthShort > -1) {
                var val = this.resolveShortMonth(matches[parsedIndexes.monthShort]);
                if (this.utc) {
                    res.setUTCMonth(val);
                }
                else {
                    res.setMonth(val);
                }
            }
            // Numeric month
            if (parsedIndexes.month > -1) {
                var val = parseInt(matches[parsedIndexes.month]) - 1;
                if (this.utc) {
                    res.setUTCMonth(val);
                }
                else {
                    res.setMonth(val);
                }
            }
            // Weekday
            // @todo
            // Week
            if ((parsedIndexes.week > -1) && (parsedIndexes.day === -1)) {
                // We parse weeks ONLY if day is not explicitly set
                // TODO: this needs work
                // (but maybe later - I can hardly imagine anyone passing their dates in weeks)
                var val = __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["getDayFromWeek"](parseInt(matches[parsedIndexes.week]), this.utc ? res.getUTCFullYear() : res.getFullYear(), 1, this.utc);
                if (this.utc) {
                    res.setUTCMonth(0);
                    res.setUTCDate(val);
                }
                else {
                    res.setMonth(0);
                    res.setDate(val);
                }
            }
            // Day
            if (parsedIndexes.day > -1) {
                var val = parseInt(matches[parsedIndexes.day]);
                if (this.utc) {
                    res.setUTCDate(val);
                }
                else {
                    res.setDate(val);
                }
            }
            // Year day
            if (parsedIndexes.yearDay > -1) {
                var val = parseInt(matches[parsedIndexes.yearDay]);
                if (this.utc) {
                    res.setUTCMonth(0);
                    res.setUTCDate(val);
                }
                else {
                    res.setMonth(0);
                    res.setDate(val);
                }
            }
            // 24 Hour (0-23)
            if (parsedIndexes.hourBase0 > -1) {
                var val = parseInt(matches[parsedIndexes.hourBase0]);
                if (this.utc) {
                    res.setUTCHours(val);
                }
                else {
                    res.setHours(val);
                }
            }
            // 24 Hour (1-24)
            if (parsedIndexes.hourBase1 > -1) {
                var val = parseInt(matches[parsedIndexes.hourBase1]) - 1;
                if (this.utc) {
                    res.setUTCHours(val);
                }
                else {
                    res.setHours(val);
                }
            }
            // 12 Hour (0-11)
            if (parsedIndexes.hour12Base0 > -1) {
                var val = parseInt(matches[parsedIndexes.hour12Base0]);
                if ((parsedIndexes.am > -1) && !this.isAm(matches[parsedIndexes.am])) {
                    val += 12;
                }
                if (this.utc) {
                    res.setUTCHours(val);
                }
                else {
                    res.setHours(val);
                }
            }
            // 12 Hour (1-12)
            if (parsedIndexes.hour12Base1 > -1) {
                var val = parseInt(matches[parsedIndexes.hour12Base1]) - 1;
                if ((parsedIndexes.am > -1) && !this.isAm(matches[parsedIndexes.am])) {
                    val += 12;
                }
                if (this.utc) {
                    res.setUTCHours(val);
                }
                else {
                    res.setHours(val);
                }
            }
            // Minute
            if (parsedIndexes.minute > -1) {
                var val = parseInt(matches[parsedIndexes.minute]);
                if (this.utc) {
                    res.setUTCMinutes(val);
                }
                else {
                    res.setMinutes(val);
                }
            }
            // Second
            if (parsedIndexes.second > -1) {
                var val = parseInt(matches[parsedIndexes.second]);
                if (this.utc) {
                    res.setUTCSeconds(val);
                }
                else {
                    res.setSeconds(val);
                }
            }
            // Millisecond
            if (parsedIndexes.millisecond > -1) {
                var val = parseInt(matches[parsedIndexes.millisecond]);
                if (parsedIndexes.millisecondDigits == 2) {
                    val *= 10;
                }
                else if (parsedIndexes.millisecondDigits == 1) {
                    val *= 100;
                }
                if (this.utc) {
                    res.setUTCMilliseconds(val);
                }
                else {
                    res.setMilliseconds(val);
                }
            }
            // Timestamp
            if (parsedIndexes.timestamp > -1) {
                res.setTime(parseInt(matches[parsedIndexes.timestamp]));
            }
            // Adjust time zone
            if (parsedIndexes.zone > -1) {
                var zone = matches[parsedIndexes.zone].replace(/:/, "");
                var match = zone.match(/([+\-]?)([0-9]{2})([0-9]{2})/);
                var dir = match[1];
                var hour = match[2];
                var minute = match[3];
                var offset = parseInt(hour) * 60 + parseInt(minute);
                // Adjust offset
                // Making it negative does not seem to make sense, but it's right
                // because of how JavaScript calculates GTM offsets
                if (dir == "+") {
                    offset *= -1;
                }
                // Check the difference in offset
                var originalOffset = res.getTimezoneOffset();
                var diff = offset - originalOffset;
                if (diff != 0) {
                    res.setMinutes(res.getMinutes() + diff);
                }
            }
            // ISO
            if (parsedIndexes.iso > -1) {
                res = new Date(matches[parsedIndexes.iso]);
            }
        }
        else {
            // Didn't match anything
            // Let's try dropping it into Date constructor and hope for the best
            res = new Date(source);
        }
        return res;
    };
    /**
     * Resolves month name (i.e. "December") into a month number (11).
     *
     * @param  {MonthNames}  value  Month name
     * @return {number}             Month number
     */
    DateFormatter.prototype.resolveMonth = function (value) {
        // Let's try English first
        var month = this._months.indexOf(value);
        if (month > -1) {
            return month;
        }
        // Try the translation
        if (this.language && !this.language.isDefault()) {
            month = this.language.translateAll(this._months).indexOf(value);
            if (month > -1) {
                return month;
            }
        }
        return 0;
    };
    /**
     * Resolves short month name (i.e. "Dec") into a month number.
     *
     * @param  {ShortMonthNames}  value  Short month name
     * @return {number}                  Month number
     */
    DateFormatter.prototype.resolveShortMonth = function (value) {
        // Let's try English first
        var month = this._monthsShort.indexOf(value);
        if (month > -1) {
            return month;
        }
        // Try the translation
        if (this.language && !this.language.isDefault()) {
            month = this.language.translateAll(this._monthsShort).indexOf(value);
            if (month > -1) {
                return month;
            }
        }
        return 0;
    };
    /**
     * Checks if passed in string represents AM/PM notation in many of its
     * versions.
     *
     * @param  {string}   value  Source string
     * @return {boolean}         Is it AM/PM?
     */
    DateFormatter.prototype.isAm = function (value) {
        var list = this.getStringList(["AM", "A.M.", "A"]);
        return list.indexOf(value.toUpperCase()) > -1;
    };
    /**
     * Invalidates related [[Sprite]] causing it to redraw.
     */
    DateFormatter.prototype.invalidateSprite = function () {
        if (this.sprite) {
            this.sprite.invalidate();
        }
    };
    /**
     * Translates list of strings.
     *
     * @param  {Array<keyof ILocaleProperties>}  list  Source strings
     * @return {Array<string>}                         Translated strings
     */
    DateFormatter.prototype.getStringList = function (list) {
        var res = [];
        for (var i = 0; i < list.length; i++) {
            res.push(list[i]);
            // translate?
            if (this.language && !this.language.isDefault()) {
                res.push(this.language.translate(list[i]));
            }
        }
        return res;
    };
    Object.defineProperty(DateFormatter.prototype, "dateFormat", {
        /**
         * @return {string} Date format
         */
        get: function () {
            return this._dateFormat;
        },
        /**
         * Date format to use.
         *
         * If format is not supplied in-line in the string, this setting will be
         * used.
         *
         * @default "yyyy-MM-dd"
         * @param {string} value Date format
         */
        set: function (value) {
            this._dateFormat = value;
            this.invalidateSprite();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateFormatter.prototype, "inputDateFormat", {
        /**
         * @return {string} Date format
         */
        get: function () {
            return this._inputDateFormat;
        },
        /**
         * Date format to use when parsing dates.
         *
         * @default "yyyy-MM-dd"
         * @param {string} value Date format
         */
        set: function (value) {
            this._inputDateFormat = value;
            this.invalidateSprite();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateFormatter.prototype, "utc", {
        /**
         * @return {boolean} Use UTC?
         */
        get: function () {
            return this._utc;
        },
        /**
         * Should formatter use UTC functions?
         *
         * If UTC is used, all date/time values will be independent on client's
         * time zone.
         *
         * @param {boolean} value Use UTC?
         */
        set: function (value) {
            this._utc = value;
            this.invalidateSprite();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateFormatter.prototype, "firstDayOfWeek", {
        /**
         * @return {number} First day of week
         */
        get: function () {
            return this._firstDayOfWeek;
        },
        /**
         * Dirst day of the week:
         *
         * * 0 - Sunday
         * * 1 - Monday
         * * 2 - Tuesday
         *
         * Etc.
         *
         * @param {number} value First day of week
         */
        set: function (value) {
            this._firstDayOfWeek = value;
            this.invalidateSprite();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateFormatter.prototype, "outputFormat", {
        /**
         * @ignore Exclude from docs
         * @return {string} Format
         */
        get: function () {
            return this._outputFormat;
        },
        /**
         * Output format for the formatted date.
         *
         * @ignore Exclude from docs
         * @param {string}  value  Format
         */
        set: function (value) {
            this._outputFormat = value.toLowerCase();
            this.invalidateSprite();
        },
        enumerable: true,
        configurable: true
    });
    return DateFormatter;
}(__WEBPACK_IMPORTED_MODULE_1__Base__["a" /* BaseObject */]));

//# sourceMappingURL=DateFormatter.js.map

/***/ }),
/* 58 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Tooltip; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__PointedRectangle__ = __webpack_require__(139);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__elements_Label__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Animation__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Color__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__rendering_filters_DropShadowFilter__ = __webpack_require__(145);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_Ease__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_Utils__ = __webpack_require__(6);
/**
 * Provides functionality used to creating and showing tooltips (balloons).
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */









/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Tooltip displays text and/or multimedia information in a balloon over chart
 * area.
 * @see {@link ITooltipEvents} for a list of available events
 * @see {@link ITooltipAdapters} for a list of available Adapters
 */
var Tooltip = /** @class */ (function (_super) {
    __extends(Tooltip, _super);
    /**
     * Constructor
     */
    function Tooltip() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * Holds numeric boundary values. Calculated from the `boundingContainer`.
         *
         * @type {IRectangle}
         */
        _this._boundingRect = { x: 0, y: 0, width: 40000, height: 40000 };
        /**
         * Coordinates tolltip's pointer (stem) should point to.
         *
         * @type {IPoint}
         */
        _this._pointTo = { x: 0, y: 0 };
        /**
         * [fitPointerToBounds description]
         *
         * @todo Description
         * @type {boolean}
         */
        _this.fitPointerToBounds = false;
        /**
         * If tooltipOrientation is vertical, it can be drawn below or above point. We need to know this when solving overlapping
         *
         * @type "up" | "down"
         * @ignore
         */
        _this._verticalOrientation = "up";
        _this.className = "Tooltip";
        _this.isMeasured = false;
        _this.getFillFromObject = true;
        _this.margin(5, 5, 5, 5);
        // Create chrome/background
        var background = _this.background;
        background.interactionsEnabled = false;
        background.fillOpacity = 0.9;
        background.strokeWidth = 1;
        background.strokeOpacity = 1;
        background.stroke = Object(__WEBPACK_IMPORTED_MODULE_4__utils_Color__["c" /* color */])("#ffffff");
        background.cornerRadius = 3;
        background.pointerLength = 6;
        background.pointerBaseWidth = 10;
        _this.autoTextColor = true;
        // Create text element
        var label = _this.createChild(__WEBPACK_IMPORTED_MODULE_2__elements_Label__["a" /* Label */]);
        label.shouldClone = false;
        _this.label = label;
        label.padding(7, 12, 6, 12);
        label.interactionsEnabled = false;
        label.horizontalCenter = "middle";
        label.fill = Object(__WEBPACK_IMPORTED_MODULE_4__utils_Color__["c" /* color */])("#ffffff");
        _this._disposers.push(label);
        _this.label.events.on("sizechanged", function () {
            _this.drawBackground();
        });
        _this.label.events.on("positionchanged", function () {
            _this.drawBackground();
        });
        _this.label.zIndex = 1; // @todo remove this line when bg sorting is solved
        // Set defaults
        _this.pointerOrientation = "vertical";
        var dropShadow = new __WEBPACK_IMPORTED_MODULE_5__rendering_filters_DropShadowFilter__["a" /* DropShadowFilter */]();
        dropShadow.dy = 1;
        dropShadow.dx = 1;
        dropShadow.opacity = 0.5;
        _this.filters.push(dropShadow);
        _this.animationDuration = 0;
        _this.animationEasing = __WEBPACK_IMPORTED_MODULE_7__utils_Ease__["cubicOut"];
        // Set accessibility options
        _this.role = "tooltip";
        _this.visible = false;
        _this.opacity = 0;
        _this.x = 0;
        _this.y = 0;
        _this.events.on("visibilitychanged", function () {
            _this.label.disabled = !_this.visible;
            if (_this.visible) {
                _this.label.invalidate();
            }
        });
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(Tooltip.prototype, "getStrokeFromObject", {
        /**
         * Specifies if tooltip background should get stroke color from the sprite it is pointing to.
         *
         * @return {boolean}
         * @default false
         */
        get: function () {
            return this.getPropertyValue("getStrokeFromObject");
        },
        /**
         * Specifies if tooltip background should get stroke color from the sprite it is pointing to.
         *
         * @param {value} value boolean
         */
        set: function (value) {
            this.setPropertyValue("getStrokeFromObject", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tooltip.prototype, "autoTextColor", {
        /**
         * Specifies if text color should be chosen automatically for a better readability.
         *
         * @return {boolean}
         * @default true
         */
        get: function () {
            return this.getPropertyValue("autoTextColor");
        },
        /**
         * Specifies if text color should be chosen automatically for a better readability.
         *
         * @param {value} value boolean
         */
        set: function (value) {
            this.setPropertyValue("autoTextColor", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tooltip.prototype, "getFillFromObject", {
        /**
         * Specifies if tooltip background should get fill color from the sprite it is pointing to.
         *
         * @return {boolean}
         * @default true
         */
        get: function () {
            return this.getPropertyValue("getFillFromObject");
        },
        /**
         * Specifies if tooltip background should get fill color from the sprite it is pointing to.
         *
         * @param {value} value boolean
         */
        set: function (value) {
            this.setPropertyValue("getFillFromObject", value, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates and returns a background element.
     *
     * @ignore Exclude from docs
     * @return {PointedRectangle} Background
     */
    Tooltip.prototype.createBackground = function () {
        return new __WEBPACK_IMPORTED_MODULE_1__PointedRectangle__["a" /* PointedRectangle */]();
    };
    Object.defineProperty(Tooltip.prototype, "pointerOrientation", {
        /**
         * @return {PointerOrientation} Orientation
         */
        get: function () {
            return this.getPropertyValue("pointerOrientation");
        },
        /**
         * Pointer orientation: "horizontal" or "vertical".
         *
         * @default "vertical"
         * @param {PointerOrientation}  value  Orientation
         */
        set: function (value) {
            this.setPropertyValue("pointerOrientation", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tooltip.prototype, "animationDuration", {
        /**
         * @return {PointerOrientation} Orientation
         */
        get: function () {
            return this.getPropertyValue("animationDuration");
        },
        /**
         * Duration in milliseconds for the animation to take place when the tolltip
         * is moving from one place to another.
         * @default 0
         * @param {number}  value  number
         */
        set: function (value) {
            this.setPropertyValue("animationDuration", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tooltip.prototype, "animationEasing", {
        /**
         * @return {Function}
         */
        get: function () {
            return this.getPropertyValue("animationEasing");
        },
        /**
         * Tooltip animation easing function.
         * @todo: review description and default
         * @default $ease.cubicOut
         * @param {Function}  value (value: number) => number
         */
        set: function (value) {
            this.setPropertyValue("animationEasing", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tooltip.prototype, "html", {
        /**
         * @return {string} HTML content
         */
        get: function () {
            return this.label.html;
        },
        /**
         * HTML content for the Tooltip.
         *
         * Provided value will be used as is, without applying any further
         * formatting to it.
         *
         * @param {string}  value  HTML content
         */
        set: function (value) {
            if (this.label.html != value) {
                this.label.html = value;
                this.invalidate();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tooltip.prototype, "text", {
        /**
         * @return {string} SVG text
         */
        get: function () {
            return this.label.text;
        },
        /**
         * SVG text content for the Tooltip.
         *
         * Text can have a number of formatting options supported by
         * [[TextFormatter]].
         *
         * @param {string}  value  SVG text
         */
        set: function (value) {
            if (this.label.text != value) {
                this.label.text = value;
                this.invalidate();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates the Tooltip.
     *
     * @ignore Exclude from docs
     */
    Tooltip.prototype.draw = function () {
        _super.prototype.draw.call(this);
        var label = this.label;
        if (label.invalid) {
            label.validate();
        }
        var x = this._pointTo.x;
        var y = this._pointTo.y;
        var boundingRect = this._boundingRect;
        var textW = label.measuredWidth;
        var textH = label.measuredHeight;
        var pointerLength = this.background.pointerLength;
        var textX;
        var textY;
        // try to handle if text is wider than br
        if (textW > boundingRect.width) {
            var p0 = __WEBPACK_IMPORTED_MODULE_8__utils_Utils__["spritePointToDocument"]({ x: boundingRect.x, y: boundingRect.y }, this.parent);
            var p1 = __WEBPACK_IMPORTED_MODULE_8__utils_Utils__["spritePointToDocument"]({ x: boundingRect.x + boundingRect.width, y: boundingRect.y + boundingRect.height }, this.parent);
            var documentWidth = document.body.offsetWidth;
            var documentHeight = document.body.offsetHeight;
            if (p1.x > documentWidth / 2) {
                boundingRect.x = boundingRect.width - textW;
            }
            else {
                boundingRect.width = boundingRect.x + textW;
            }
        }
        // horizontal
        if (this.pointerOrientation == "horizontal") {
            textY = -textH / 2;
            if (x > boundingRect.x + boundingRect.width / 2) {
                textX = -textW / 2 - pointerLength;
            }
            else {
                textX = textW / 2 + pointerLength;
            }
        }
        // vertical pointer
        else {
            textX = __WEBPACK_IMPORTED_MODULE_6__utils_Math__["fitToRange"](0, boundingRect.x - x + textW / 2, boundingRect.x - x + boundingRect.width - textW / 2);
            if (y > boundingRect.y + textH + pointerLength) {
                textY = -textH - pointerLength;
                this._verticalOrientation = "up";
            }
            else {
                textY = pointerLength;
                this._verticalOrientation = "down";
            }
        }
        textY = __WEBPACK_IMPORTED_MODULE_6__utils_Math__["fitToRange"](textY, boundingRect.y - y, boundingRect.y + boundingRect.height - textH - y);
        label.x = textX;
        label.y = textY;
    };
    /**
     * Overrides functionality from the superclass.
     *
     * @ignore Exclude from docs
     */
    Tooltip.prototype.updateBackground = function () {
        this.group.addToBack(this.background.group);
    };
    /**
     * Draws Tooltip background (chrome, background and pointer/stem).
     *
     * @ignore Exclude from docs
     */
    Tooltip.prototype.drawBackground = function () {
        var label = this.label;
        var background = this.background;
        var textWidth = label.measuredWidth;
        var textHeight = label.measuredHeight;
        var boundingRect = this._boundingRect;
        var bgWidth = textWidth;
        var bgX = label.pixelX - textWidth / 2;
        var bgHeight = textHeight;
        var bgY = label.pixelY;
        var x = this._pointTo.x;
        var y = this._pointTo.y;
        var boundX1 = boundingRect.x - x;
        var boundX2 = boundX1 + boundingRect.width;
        var boundY1 = boundingRect.y - y;
        var boundY2 = boundY1 + boundingRect.height;
        background.x = bgX;
        background.y = bgY;
        background.width = bgWidth;
        background.height = bgHeight;
        if (this.fitPointerToBounds) {
            background.pointerX = __WEBPACK_IMPORTED_MODULE_6__utils_Math__["fitToRange"](-background.x, boundX1 - background.x, boundX2 - background.x);
            background.pointerY = __WEBPACK_IMPORTED_MODULE_6__utils_Math__["fitToRange"](-background.y, boundY1 - background.y, boundY2 - background.y);
        }
        else {
            background.pointerX = -background.x;
            background.pointerY = -background.y;
        }
        background.validate();
    };
    /**
     * Set nes tooltip's anchor point and moves whole tooltip.
     *
     * @param {number}  x  X coordinate
     * @param {number}  y  Y coordinate
     */
    Tooltip.prototype.pointTo = function (point, instantly) {
        if (this._pointTo.x != point.x || this._pointTo.y != point.y) {
            this._pointTo = point;
            this.invalidate();
            // this helps to avoid strange animation from nowhere on initial show or when balloon was hidden already
            if (!this.visible || instantly) {
                this.moveTo(this._pointTo);
                if (this._animation) {
                    this._animation.dispose();
                }
            }
            else {
                // helps to avoid flicker on top/left corner				
                if (this.pixelX == 0 && this.pixelY == 0) {
                    this.moveTo(this._pointTo);
                }
                else {
                    this._animation = new __WEBPACK_IMPORTED_MODULE_3__utils_Animation__["a" /* Animation */](this, [{ property: "x", to: point.x, from: this.pixelX }, { property: "y", to: point.y, from: this.pixelY }], this.animationDuration, this.animationEasing).start();
                }
            }
        }
    };
    /**
     * Sets numeric boundaries Tooltip needs to obey (so it does not go outside
     * specific area).
     *
     * @ignore Exclude from docs
     * @param {IRectangle} rectangle Boundary rectangle
     */
    Tooltip.prototype.setBounds = function (rectangle) {
        this._boundingRect = rectangle;
        this.invalidate();
    };
    Object.defineProperty(Tooltip.prototype, "boundingContainer", {
        /**
         * Sets a [[Container]] instance to be used when calculating numeric
         * boundaries for the Tooltip.
         *
         * @ignore Exclude from docs
         * @param {Container}  container  Boundary container
         */
        set: function (container) {
            this._boundingContainer = container;
            // TODO remove closures ?
            container.events.on("sizechanged", this.updateBounds, this);
            container.events.on("positionchanged", this.updateBounds, this);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Updates numeric boundaries for the Tooltip, based on the
     * `boundingCountrainer`.
     */
    Tooltip.prototype.updateBounds = function () {
        var boundingContainer = this._boundingContainer;
        // to global
        var rect = __WEBPACK_IMPORTED_MODULE_8__utils_Utils__["spriteRectToSvg"]({
            x: boundingContainer.pixelX,
            y: boundingContainer.pixelY,
            width: boundingContainer.maxWidth,
            height: boundingContainer.maxHeight
        }, boundingContainer);
        this.setBounds(rect);
    };
    Object.defineProperty(Tooltip.prototype, "verticalOrientation", {
        /**
         * If tooltipOrientation is vertical, it can be drawn below or above point. We need to know this when solving overlapping
         * @return "up" | "down"
         */
        get: function () {
            return this._verticalOrientation;
        },
        enumerable: true,
        configurable: true
    });
    return Tooltip;
}(__WEBPACK_IMPORTED_MODULE_0__Container__["a" /* Container */]));

//# sourceMappingURL=Tooltip.js.map

/***/ }),
/* 59 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ColorSet; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Color__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Colors__ = __webpack_require__(42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Type__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Utils__ = __webpack_require__(6);
/**
 * This module contains ColorSet object definition
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Represents a set of colors. Can also generate colors according to set rules.
 *
 * @important
 */
var ColorSet = /** @class */ (function (_super) {
    __extends(ColorSet, _super);
    /**
     * Constructor
     */
    function ColorSet() {
        var _this = _super.call(this) || this;
        /**
         * Holds the list of the colors in this set. (preset or auto-generated)
         *
         * @type {Color[]}
         */
        _this._list = [];
        /**
         * Current step in a color generator's cycle.
         *
         * @type {number}
         */
        _this._currentStep = 0;
        /**
         * Current pass in the color generator's cycle. Normally a generator would
         * cycle through all available hue range, then repeat it, alternating other
         * color properties, to generate distinctive colors.
         *
         * @type {number}
         */
        _this._currentPass = 0;
        /**
         * A base color. If there are no colors pre-set in the color list, ColorSet
         * will use this color as a base when generating new ones, applying
         * `stepOptions` and `passOptions` to this base color.
         *
         * @type {Color}
         */
        _this.baseColor = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* Color */]({
            r: 103,
            g: 183,
            b: 220
        });
        /**
         * Modifications to apply with each new generated color.
         *
         * @type {iColorSetStepOptions}
         */
        _this.stepOptions = {};
        /**
         * Modifications to apply on top of `stepOptions` for each "pass" of the
         * color generation.
         *
         * A "pass" is when ColorSet generates `minColors` number of colors.
         *
         * @type {iColorSetStepOptions}
         */
        _this.passOptions = {
            brighten: -0.2
        };
        /**
         * An index increment to use when iterating through color list.
         *
         * Default is 1, which means returning each and every color.
         *
         * Setting it to a bigger number will make ColorSet `next()` iterator skip
         * some colors.
         *
         * E.g. setting to 2, will return every second color in the list.
         *
         * This is useful, when the color list has colors that are too close each
         * other for contrast.
         *
         * However, having bigger number will mean that `next()` iterator will go
         * through the list quicker, and the generator will kick sooner.
         *
         * @type {number}
         */
        _this.step = 1;
        /**
         * A number of colors to generate in one "pass".
         *
         * This setting can be automatically overridden, if ColorSet has a list of
         * pre-set colors. In such case ColorSet will generate exactly the same
         * number of colors with each pass as there were colors in original set.
         *
         * @type {number}
         */
        _this.minColors = 20;
        /**
         * Do not let the "lightness" of generated color to fall below this
         * threshold.
         *
         * @type {number}
         */
        _this.minLightness = 0.2;
        /**
         * Do not let the "lightness" of generated color to get above this threshold.
         *
         * @type {number}
         */
        _this.maxLightness = 0.9;
        /**
         * Randomly shuffle generated colors.
         *
         * @type {boolean}
         */
        _this.shuffle = false;
        /**
         * When colors are generated, based on `stepOptions`, each generated color
         * gets either lighter or darker.
         *
         * If this is set to `true`, color generator will switch to opposing spectrum
         * when reaching `minLightness` or `maxLightness`.
         *
         * E.g. if we start off with a red color, then gradually generate lighter
         * colors through rose shades, then switch back to dark red and gradually
         * increase the lightness of it until it reaches the starting red.
         *
         * If set to `false` it will stop there and cap lightness at whatever level
         * we hit `minLightness` or `maxLightness`, which may result in a number of
         * the same colors.
         *
         * @type {boolean}
         */
        _this.wrap = true;
        /**
         * Re-use same colors in the pre-set list, when ColorSet runs out of colors,
         * rather than start generating new ones.
         *
         * @type {boolean}
         */
        _this.reuse = false;
        /**
         * Saturation of colors. This will change saturation of all colors of color
         * set
         *
         * It is recommended to set this in theme, as changing it at run time won't
         * make the items to redraw and change color.
         *
         * @type {boolean}
         */
        _this.saturation = 1;
        _this.className = "ColorSet";
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(ColorSet.prototype, "list", {
        /**
         * Returns current list of colors.
         *
         * If there are none, a new list of colors is generated, based on various
         * ColorSet settings.
         *
         * @return {Color[]} Color list
         */
        get: function () {
            if (!this._list) {
                this.generate(this.minColors);
            }
            return this._list;
        },
        /**
         * Sets a list of pre-defined colors to use for the iterator.
         *
         * @param {Color[]} value Color list
         */
        set: function (value) {
            this._list = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns next color in the list using internal iterator counter.
     *
     * If `step` is set to something other than 1, it may return other color than
     * exact next one in the list.
     *
     * @return {Color} Color
     */
    ColorSet.prototype.next = function () {
        if (this.list.length <= this._currentStep) {
            if (this.reuse && this._currentPass == 0 && this._list.length) {
                this.minColors = this._list.length;
            }
            this.generate(this.minColors);
        }
        var color = this.list[this._currentStep];
        this._currentStep += this.step;
        return color.saturate(this.saturation);
    };
    /**
     * Returns a color at specific index in the list.
     *
     * @param  {number}  i  Index
     * @return {Color}      Color
     */
    ColorSet.prototype.getIndex = function (i) {
        if (this.list.length <= i) {
            if (this.reuse && this._currentPass == 0 && this._list.length) {
                this.minColors = this._list.length;
            }
            this.generate(this.minColors);
            return this.getIndex(i);
        }
        return this.list[i].saturate(this.saturation);
    };
    /**
     * Resets internal iterator.
     *
     * Calling `next()` after this will return the very first color in the color
     * list, even if it was already returned before.
     */
    ColorSet.prototype.reset = function () {
        this._currentStep = 0;
    };
    /**
     * Generates colors based on the various ColorSet settings.
     *
     * @param {number} count Number of colors to generate
     */
    ColorSet.prototype.generate = function (count) {
        // Init
        var curColor = this.currentColor;
        var hsl = __WEBPACK_IMPORTED_MODULE_2__Colors__["rgbToHsl"](curColor.rgb);
        var hueStep = __WEBPACK_IMPORTED_MODULE_3__Type__["hasValue"](this.stepOptions.hue) ? this.stepOptions.hue : 1 / count;
        var mods = {
            brighten: 0,
            lighten: 0,
            lightness: hsl.l,
            saturation: hsl.s
        };
        // Generate list of hues, and shuffle them
        var hues = [];
        if (this.reuse) {
            for (var i = 0; i < count; i++) {
                hues.push(__WEBPACK_IMPORTED_MODULE_2__Colors__["rgbToHsl"](this._list[i].rgb).h);
            }
        }
        else {
            for (var i = 0; i < count; i++) {
                var h = hsl.h + hueStep * i;
                if (this.wrap && (h > 1)) {
                    h -= 1;
                }
                hues.push(h);
            }
        }
        // Shuffle colors randomly
        if (this.shuffle) {
            hues.sort(function (a, b) {
                return Math.random() - 0.5;
            });
        }
        // Generate colors by rotating hue
        for (var i = 0; i < count; i++) {
            // Update hue
            if (this.reuse) {
                hsl = __WEBPACK_IMPORTED_MODULE_2__Colors__["rgbToHsl"](this._list[i].rgb);
            }
            else {
                hsl.h = hues.shift();
            }
            // Apply HSL mods
            this.applyStepOptions(hsl, mods, i, this._currentPass);
            // Convert back to Color
            var c = Object(__WEBPACK_IMPORTED_MODULE_1__Color__["c" /* color */])(__WEBPACK_IMPORTED_MODULE_2__Colors__["hslToRgb"](hsl));
            // Apply regular color mods
            var brighten = (this.stepOptions.brighten || 0) * i + (this.passOptions.brighten || 0) * this._currentPass;
            if (brighten != 0) {
                if (this.wrap) {
                    brighten = __WEBPACK_IMPORTED_MODULE_4__Utils__["fitNumberRelative"](brighten, this.minLightness, this.maxLightness);
                }
                else {
                    brighten = __WEBPACK_IMPORTED_MODULE_4__Utils__["fitNumber"](brighten, this.minLightness, this.maxLightness);
                }
                c = c.brighten(brighten);
            }
            var lighten = (this.stepOptions.lighten || 0) * i + (this.passOptions.lighten || 0) * this._currentPass;
            if (lighten != 0) {
                if (this.wrap) {
                    lighten = __WEBPACK_IMPORTED_MODULE_4__Utils__["fitNumberRelative"](lighten, this.minLightness, this.maxLightness);
                }
                else {
                    lighten = __WEBPACK_IMPORTED_MODULE_4__Utils__["fitNumber"](lighten, this.minLightness, this.maxLightness);
                }
                c = c.lighten(lighten);
            }
            this._list.push(c);
        }
        this._currentPass++;
    };
    Object.defineProperty(ColorSet.prototype, "currentColor", {
        /**
         * Returns current last color. It's either the last color in the list of
         * colors, or `baseColor` if list is empty.
         *
         * @return {Color} Color
         */
        get: function () {
            if (this._list.length == 0) {
                return this.baseColor.saturate(this.saturation);
            }
            else {
                return this._list[this._list.length - 1].saturate(this.saturation);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Generates modifiers for color, based on what step and pass.
     *
     * @param {iHSL}                  hsl   Curren HSL value of the color to modify
     * @param {iColorSetStepOptions}  base  The modifiers that were before modification to use as a base
     * @param {number}                step  Current step
     * @param {number}                pass  Current pass
     */
    ColorSet.prototype.applyStepOptions = function (hsl, base, step, pass) {
        // Process lightness
        hsl.l = base.lightness + (this.stepOptions.lightness || 0) * step + (this.passOptions.lightness || 0) * pass;
        if (this.wrap) {
            if (hsl.l > 1) {
                hsl.l = hsl.l - Math.floor(hsl.l);
            }
            else if (hsl.l < 0) {
                hsl.l = -(hsl.l - Math.floor(hsl.l));
            }
            hsl.l = __WEBPACK_IMPORTED_MODULE_4__Utils__["fitNumberRelative"](hsl.l, this.minLightness, this.maxLightness);
        }
        else {
            if (hsl.l > 1) {
                hsl.l = 1;
            }
            else if (hsl.l < 0) {
                hsl.l = 0;
            }
            hsl.l = __WEBPACK_IMPORTED_MODULE_4__Utils__["fitNumber"](hsl.l, this.minLightness, this.maxLightness);
        }
    };
    return ColorSet;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["a" /* BaseObject */]));

//# sourceMappingURL=ColorSet.js.map

/***/ }),
/* 60 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return XYChartDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return XYChart; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__SerialChart__ = __webpack_require__(109);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__axes_AxisRendererX__ = __webpack_require__(66);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__axes_AxisRendererY__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__axes_CategoryAxis__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__series_XYSeries__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__cursors_XYCursor__ = __webpack_require__(112);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_elements_ZoomOutButton__ = __webpack_require__(148);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__core_utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__core_utils_Type__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__core_utils_Utils__ = __webpack_require__(6);
/**
 * XY Chart module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */















/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[XYChart]].
 *
 * @see {@link DataItem}
 */
var XYChartDataItem = /** @class */ (function (_super) {
    __extends(XYChartDataItem, _super);
    /**
     * Constructor
     */
    function XYChartDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "XYChartDataItem";
        _this.applyTheme();
        return _this;
    }
    return XYChartDataItem;
}(__WEBPACK_IMPORTED_MODULE_0__SerialChart__["b" /* SerialChartDataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.
 *
 * Basically this is a chart type, that is used to display any chart
 * information in a square plot area.
 *
 * The horizontal and vertical scale is determined by the type of Axis.
 *
 * The plot types are determined by type of Series.
 *
 * ```TypeScript
 * // Includes
 * import * as am4core from "@amcharts/amcharts4/core";
 * import * as am4charts from "@amcharts/amcharts4/charts";
 *
 * // Create chart
 * let chart = am4core.create("chartdiv", am4charts.XYChart);
 *
 * // Add Data
 * chart.data = [{
 * "country": "USA",
 * "visits": 3025
 * }, {
 * 	"country": "China",
 * 	"visits": 1882
 * }, {
 * 	"country": "Japan",
 * 	"visits": 1809
 * }];
 *
 * // Add category axis
 * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
 * categoryAxis.dataFields.category = "country";
 *
 * // Add value axis
 * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
 *
 * // Add series
 * let series = chart.series.push(new am4charts.ColumnSeries());
 * series.name = "Web Traffic";
 * series.dataFields.categoryX = "country";
 * series.dataFields.valueY = "visits";
 * ```
 * ```JavaScript
 * // Create chart
 * var chart = am4core.create("chartdiv", am4charts.XYChart);
 *
 * // The following would work as well:
 * // var chart = am4core.create("chartdiv", "XYChart");
 *
 * // Add Data
 * chart.data = [{
 * "country": "USA",
 * "visits": 3025
 * }, {
 * 	"country": "China",
 * 	"visits": 1882
 * }, {
 * 	"country": "Japan",
 * 	"visits": 1809
 * }];
 *
 * // Add category axis
 * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
 * categoryAxis.dataFields.category = "country";
 *
 * // Add value axis
 * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
 *
 * // Add series
 * var series = chart.series.push(new am4charts.ColumnSeries());
 * series.name = "Web Traffic";
 * series.dataFields.categoryX = "country";
 * series.dataFields.valueY = "visits";
 * ```
 * ```JSON
 * var chart = am4core.createFromConfig({
 *
 * 	// Category axis
 * 	"xAxes": [{
 * 		"type": "CategoryAxis",
 * 		"dataFields": {
 * 			"category": "country"
 * 		}
 * 	}],
 *
 * 	// Value axis
 * 	"yAxes": [{
 * 		"type": "ValueAxis"
 * 	}],
 *
 * 	// Series
 * 	"series": [{
 * 		"type": "ColumnSeries",
 * 		"dataFields": {
 * 			"categoryX": "country",
 * 			"valueY": "visits"
 * 		},
 * 		"name": "Web Traffic"
 * 	}],
 *
 * 	// Cursor
 * 	"cursor": {},
 *
 * 	// Data
 * 	"data": [{
 * 		"country": "USA",
 * 		"visits": 3025
 * 	}, {
 * 		"country": "China",
 * 		"visits": 1882
 * 	}, {
 * 		"country": "Japan",
 * 		"visits": 1809
 * 	}]
 *
 * }, "chartdiv", "XYChart");
 * ```
 *
 *
 * @see {@link IXYChartEvents} for a list of available Events
 * @see {@link IXYChartAdapters} for a list of available Adapters
 * @important
 */
var XYChart = /** @class */ (function (_super) {
    __extends(XYChart, _super);
    /**
     * Constructor
     */
    function XYChart() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * Defines the type of horizontal axis rederer.
         *
         * @type {typeof AxisRendererX}
         */
        _this._axisRendererX = __WEBPACK_IMPORTED_MODULE_3__axes_AxisRendererX__["a" /* AxisRendererX */];
        /**
         * Defines the type of vertical axis rederer.
         *
         * @type {typeof AxisRendererY}
         */
        _this._axisRendererY = __WEBPACK_IMPORTED_MODULE_4__axes_AxisRendererY__["a" /* AxisRendererY */];
        _this.className = "XYChart";
        // Set defaults
        //this.margin(10, 10, 10, 10);
        _this.maskBullets = true;
        // Create main chart container
        var chartCont = _this.chartContainer;
        chartCont.layout = "vertical";
        _this.padding(15, 15, 15, 15);
        // Create top axes container
        var topAxesCont = chartCont.createChild(__WEBPACK_IMPORTED_MODULE_1__core_Container__["a" /* Container */]);
        topAxesCont.shouldClone = false;
        topAxesCont.layout = "vertical";
        topAxesCont.width = Object(__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__["c" /* percent */])(100);
        topAxesCont.zIndex = 1;
        _this.topAxesContainer = topAxesCont;
        // Create vertical axes and plot area container
        // Plot area and vertical axes share the whole width of the chart,
        // so we need to put then into a separate container so that layouting
        // engine takes care of the positioning
        var yAxesAndPlotCont = chartCont.createChild(__WEBPACK_IMPORTED_MODULE_1__core_Container__["a" /* Container */]);
        yAxesAndPlotCont.shouldClone = false;
        yAxesAndPlotCont.layout = "horizontal";
        yAxesAndPlotCont.width = Object(__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__["c" /* percent */])(100);
        yAxesAndPlotCont.height = Object(__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__["c" /* percent */])(100);
        yAxesAndPlotCont.zIndex = 0;
        _this.yAxesAndPlotContainer = yAxesAndPlotCont;
        // Create a container for bottom axes
        var bottomAxesCont = chartCont.createChild(__WEBPACK_IMPORTED_MODULE_1__core_Container__["a" /* Container */]);
        bottomAxesCont.shouldClone = false;
        bottomAxesCont.width = Object(__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__["c" /* percent */])(100);
        bottomAxesCont.layout = "vertical";
        bottomAxesCont.zIndex = 1;
        _this.bottomAxesContainer = bottomAxesCont;
        // Create a container for left-side axes
        var leftAxesCont = yAxesAndPlotCont.createChild(__WEBPACK_IMPORTED_MODULE_1__core_Container__["a" /* Container */]);
        leftAxesCont.shouldClone = false;
        leftAxesCont.layout = "horizontal";
        leftAxesCont.height = Object(__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__["c" /* percent */])(100);
        leftAxesCont.contentAlign = "right";
        leftAxesCont.events.on("transformed", _this.updateXAxesMargins, _this);
        leftAxesCont.zIndex = 1;
        _this.leftAxesContainer = leftAxesCont;
        // Create a container for plot area
        var plotCont = yAxesAndPlotCont.createChild(__WEBPACK_IMPORTED_MODULE_1__core_Container__["a" /* Container */]);
        plotCont.shouldClone = false;
        plotCont.height = Object(__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__["c" /* percent */])(100);
        plotCont.width = Object(__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__["c" /* percent */])(100);
        _this.plotContainer = plotCont;
        _this._cursorContainer = plotCont;
        // Create a container for right-side axes
        var rightAxesCont = yAxesAndPlotCont.createChild(__WEBPACK_IMPORTED_MODULE_1__core_Container__["a" /* Container */]);
        rightAxesCont.shouldClone = false;
        rightAxesCont.layout = "horizontal";
        rightAxesCont.height = Object(__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__["c" /* percent */])(100);
        rightAxesCont.zIndex = 1;
        rightAxesCont.events.on("transformed", _this.updateXAxesMargins, _this);
        _this.rightAxesContainer = rightAxesCont;
        _this.seriesContainer.parent = plotCont;
        _this.bulletsContainer.parent = plotCont;
        var zoomOutButton = plotCont.createChild(__WEBPACK_IMPORTED_MODULE_8__core_elements_ZoomOutButton__["a" /* ZoomOutButton */]);
        zoomOutButton.shouldClone = false;
        zoomOutButton.align = "right";
        zoomOutButton.valign = "top";
        zoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;
        zoomOutButton.marginTop = 5;
        zoomOutButton.marginRight = 5;
        zoomOutButton.hide(0);
        _this.zoomOutButton = zoomOutButton;
        _this._bulletMask = _this.plotContainer;
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Sets defaults that instantiate some objects that rely on parent, so they
     * cannot be set in constructor.
     */
    XYChart.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);
        // Add a default screen reader title for accessibility
        // This will be overridden in screen reader if there are any `titles` set
        if (!__WEBPACK_IMPORTED_MODULE_13__core_utils_Type__["hasValue"](this.readerTitle)) {
            this.readerTitle = this.language.translate("X/Y chart");
        }
    };
    /**
     * Draws the chart.
     *
     * @ignore Exclude from docs
     */
    XYChart.prototype.draw = function () {
        _super.prototype.draw.call(this);
        this.seriesContainer.toFront();
        this.bulletsContainer.toFront();
        if (this.maskBullets) {
            this.bulletsContainer.mask = this._bulletMask;
        }
    };
    /**
     * Triggers a redrawing of all chart's series.
     *
     * @ignore Exclude from docs
     */
    XYChart.prototype.updatePlotElements = function () {
        __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["each"](this.series.iterator(), function (series) {
            series.invalidate();
        });
    };
    /**
     * Triggers data (re)validation which in turn can cause a redraw of the
     * whole chart or just aprticular series / elements.
     *
     * @ignore Exclude from docs
     */
    XYChart.prototype.validateData = function () {
        // tell axes that data changed
        if (this._parseDataFrom == 0) {
            __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["each"](this.xAxes.iterator(), function (axis) {
                axis.dataChangeUpdate();
            });
            __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["each"](this.yAxes.iterator(), function (axis) {
                axis.dataChangeUpdate();
            });
        }
        _super.prototype.validateData.call(this);
        if (this.cursor) {
            if (this.data.length > 0) {
                this.cursor.__disabled = false;
            }
        }
        // reset minimums
        this.leftAxesContainer.minWidth = undefined;
        this.rightAxesContainer.minWidth = undefined;
    };
    /**
     * Updates margins for horizontal axes based on settings and available space.
     *
     * @ignore Exclude from docs
     */
    XYChart.prototype.updateXAxesMargins = function () {
        var leftAxesWidth = this.leftAxesContainer.measuredWidth;
        var rightAxesWidth = this.rightAxesContainer.measuredWidth;
        var bottomAxesCont = this.bottomAxesContainer;
        if (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {
            bottomAxesCont.paddingLeft = leftAxesWidth;
            bottomAxesCont.paddingRight = rightAxesWidth;
        }
        var topAxesCont = this.topAxesContainer;
        if (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {
            topAxesCont.paddingLeft = leftAxesWidth;
            topAxesCont.paddingRight = rightAxesWidth;
        }
    };
    /**
     * Triggers an update on the horizontal axis when one of its properties
     * change.
     *
     * @ignore Exclude from docs
     * @param {AMEvent<Axis, ISpriteEvents>["propertychanged"]} event An event object
     */
    XYChart.prototype.handleXAxisChange = function (event) {
        this.updateXAxis(event.target);
    };
    /**
     * Triggers an update on the vertical axis when one of its properties
     * change.
     *
     * @ignore Exclude from docs
     * @param {AMEvent<Axis, ISpriteEvents>["propertychanged"]} event An event object
     */
    XYChart.prototype.handleYAxisChange = function (event) {
        this.updateYAxis(event.target);
    };
    /**
     * Sets up a new horizontal (X) axis when it is added to the chart.
     *
     * @ignore Exclude from docs
     * @param {IListEvents<Axis>["insert"]}  event  Axis insert event
     */
    XYChart.prototype.processXAxis = function (event) {
        var axis = event.newValue;
        axis.chart = this;
        axis.renderer = new this._axisRendererX();
        axis.axisLetter = "X";
        axis.renderer.observe(["opposite", "inside", "inversed", "minGridDistance"], this.handleXAxisChange, this);
        axis.events.on("datarangechanged", this.handleXAxisRangeChange, this);
        // Although axis does not use data directly, we set dataProvider here
        // (but not add to chart data users) to hold up rendering before data
        // is parsed (system handles this)
        axis.dataProvider = this;
        this.updateXAxis(axis.renderer);
        this.processAxis(axis);
    };
    /**
     * Removes events from the Axis when it is removed from the chart.
     *
     * @ignore Exclude from docs
     * @param {IListEvents<Axis>["remove"]}  event  Event
     */
    XYChart.prototype.processXAxisRemoval = function (event) {
        var axis = event.oldValue;
        axis.events.off("datarangechanged", this.handleXAxisRangeChange, this);
    };
    /**
     * Sets up a new vertical (Y) axis when it is added to the chart.
     *
     * @ignore Exclude from docs
     * @param {IListEvents<Axis>["insert"]} event Axis insert event
     */
    XYChart.prototype.processYAxis = function (event) {
        var axis = event.newValue;
        axis.chart = this;
        axis.renderer = new this._axisRendererY();
        axis.axisLetter = "Y";
        axis.renderer.observe(["opposite", "inside", "inversed", "minGridDistance"], this.handleYAxisChange, this);
        axis.events.on("datarangechanged", this.handleYAxisRangeChange, this);
        // Although axis does not use data directly, we set dataProvider here
        // (but not add to chart data users) to hold up rendering before data
        // is parsed (system handles this)
        axis.dataProvider = this;
        this.updateYAxis(axis.renderer);
        this.processAxis(axis);
    };
    /**
     * Removes events from the Axis when it is removed from the chart.
     *
     * @ignore Exclude from docs
     * @param {IListEvents<Axis>["remove"]}  event  Event
     */
    XYChart.prototype.processYAxisRemoval = function (event) {
        var axis = event.oldValue;
        axis.events.off("datarangechanged", this.handleYAxisRangeChange, this);
    };
    /**
     * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'
     * value range changes.
     *
     * @param {AMEvent<Axis, IComponentEvents>["datarangechanged"]} event Range change event
     */
    XYChart.prototype.handleXAxisRangeChange = function (event) {
        var range = this.getCommonAxisRange(this.xAxes);
        if (this.scrollbarX) {
            this.zoomAxes(this.xAxes, range, true);
        }
        this.toggleZoomOutButton();
        this.updateScrollbar(this.scrollbarX, range);
    };
    /**
     * Shows or hides the Zoom Out button depending on whether the chart is fully
     * zoomed out or not.
     */
    XYChart.prototype.toggleZoomOutButton = function () {
        if (this.zoomOutButton) {
            var show_1 = false;
            __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["eachContinue"](this.xAxes.iterator(), function (axis) {
                if (__WEBPACK_IMPORTED_MODULE_11__core_utils_Math__["round"](axis.start, 3) != 0 || __WEBPACK_IMPORTED_MODULE_11__core_utils_Math__["round"](axis.end, 3) != 1) {
                    show_1 = true;
                    return false;
                }
                return true;
            });
            __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["eachContinue"](this.yAxes.iterator(), function (axis) {
                if (__WEBPACK_IMPORTED_MODULE_11__core_utils_Math__["round"](axis.start, 3) != 0 || __WEBPACK_IMPORTED_MODULE_11__core_utils_Math__["round"](axis.end, 3) != 1) {
                    show_1 = true;
                    return false;
                }
                return true;
            });
            if (!this.seriesAppeared) {
                show_1 = false;
            }
            if (show_1) {
                this.zoomOutButton.show();
            }
            else {
                this.zoomOutButton.hide();
            }
        }
    };
    /**
     * @ignore
     * moved this check to a separate method so that we could override it in TreeMapSeries
     */
    XYChart.prototype.seriesAppeared = function () {
        var appeared = false;
        __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["each"](this.series.iterator(), function (series) {
            if (!series.appeared) {
                appeared = false;
                return false;
            }
        });
        return appeared;
    };
    /**
     * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'
     * value range changes.
     *
     * @param {AMEvent<Axis, IComponentEvents>["datarangechanged"]} event Range change event
     */
    XYChart.prototype.handleYAxisRangeChange = function (event) {
        var range = this.getCommonAxisRange(this.yAxes);
        if (this.scrollbarY) {
            this.zoomAxes(this.yAxes, range, true);
        }
        this.toggleZoomOutButton();
        this.updateScrollbar(this.scrollbarY, range);
    };
    /**
     * Updates a relative scrollbar whenever data range of the axis changes.
     *
     * @param {Scrollbar}  scrollbar  Scrollbar instance
     * @param {IRange}     range      New data (values) range of the axis
     */
    XYChart.prototype.updateScrollbar = function (scrollbar, range) {
        if (scrollbar) {
            scrollbar.skipRangeEvents();
            scrollbar.start = range.start;
            scrollbar.end = range.end;
        }
    };
    /**
     * Returns a common range of values between a list of axes.
     *
     * This is used to synchronize the zoom between multiple axes.
     *
     * @ignore Exclude from docs
     * @param  {List<Axis>}  axes  A list of axes
     * @return {IRange}            Common value range
     */
    XYChart.prototype.getCommonAxisRange = function (axes) {
        var start;
        var end;
        __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["each"](axes.iterator(), function (axis) {
            var axisStart = axis.start;
            var axisEnd = axis.end;
            if (axis.renderer.inversed) {
                axisStart = 1 - axis.end;
                axisEnd = 1 - axis.start;
            }
            if (!__WEBPACK_IMPORTED_MODULE_13__core_utils_Type__["isNumber"](start) || (axisStart < start)) {
                start = axisStart;
            }
            if (!__WEBPACK_IMPORTED_MODULE_13__core_utils_Type__["isNumber"](end) || (axisEnd > end)) {
                end = axisEnd;
            }
        });
        return { start: start, end: end };
    };
    /**
     * Triggers (re)rendering of the horizontal (X) axis.
     *
     * @ignore Exclude from docs
     * @param {Axis}  axis  Axis
     */
    XYChart.prototype.updateXAxis = function (renderer) {
        var axis = renderer.axis;
        if (renderer.opposite) {
            axis.parent = this.topAxesContainer;
            axis.toFront();
        }
        else {
            axis.parent = this.bottomAxesContainer;
            axis.toBack();
        }
        axis.initRenderer();
    };
    /**
     * Triggers (re)rendering of the vertical (Y) axis.
     *
     * @ignore Exclude from docs
     * @param {Axis}  axis  Axis
     */
    XYChart.prototype.updateYAxis = function (renderer) {
        var axis = renderer.axis;
        if (renderer.opposite) {
            axis.parent = this.rightAxesContainer;
            axis.toBack();
        }
        else {
            axis.parent = this.leftAxesContainer;
            axis.toFront();
        }
        axis.initRenderer();
    };
    /**
     * Decorates an Axis for use with this chart, e.g. sets proper renderer
     * and containers for placement.
     *
     * @param {Axis}  axis  Axis
     */
    XYChart.prototype.processAxis = function (axis) {
        // Value axis does not use data directly, only category axis does
        if (axis instanceof __WEBPACK_IMPORTED_MODULE_5__axes_CategoryAxis__["a" /* CategoryAxis */]) {
            this._dataUsers.moveValue(axis);
        }
        var renderer = axis.renderer;
        renderer.gridContainer.parent = this.plotContainer;
        renderer.gridContainer.toBack();
        renderer.breakContainer.parent = this.plotContainer;
        renderer.breakContainer.toFront();
        renderer.breakContainer.zIndex = 1;
        this.plotContainer.events.on("maxsizechanged", function (event) {
            axis.invalidateDataItems();
        });
    };
    Object.defineProperty(XYChart.prototype, "xAxes", {
        /**
         * A list of horizontal (X) axes.
         *
         * @return {List<Axis>} List of axes
         */
        get: function () {
            if (!this._xAxes) {
                this._xAxes = new __WEBPACK_IMPORTED_MODULE_2__core_utils_List__["b" /* List */]();
                this._xAxes.events.on("insert", this.processXAxis, this);
                this._xAxes.events.on("remove", this.processXAxisRemoval, this);
            }
            return this._xAxes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYChart.prototype, "yAxes", {
        /**
         * A list of vertical (Y) axes.
         *
         * @return {List<Axis>} List of axes
         */
        get: function () {
            if (!this._yAxes) {
                this._yAxes = new __WEBPACK_IMPORTED_MODULE_2__core_utils_List__["b" /* List */]();
                this._yAxes.events.on("insert", this.processYAxis, this);
                this._yAxes.events.on("remove", this.processYAxisRemoval, this);
            }
            return this._yAxes;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Decorates a new [[XYSeries]] object with required parameters when it is
     * added to the chart.
     *
     * @ignore Exclude from docs
     * @param {IListEvents<XYSeries>["insert"]}  event  Event
     */
    XYChart.prototype.processSeries = function (event) {
        try {
            _super.prototype.processSeries.call(this, event);
            var series = event.newValue;
            series.xAxis; // this is enough to get axis, handled in getter
            series.yAxis; // this is enough to get axis, handled in getter
            if (series.fill == undefined) {
                series.fill = this.colors.next();
            }
            if (series.stroke == undefined) {
                series.stroke = series.fill;
            }
        }
        catch (e) {
            this.raiseCriticalError(e);
        }
    };
    Object.defineProperty(XYChart.prototype, "cursor", {
        /**
         * @return {XYCursor} Cursor
         */
        get: function () {
            return this._cursor;
        },
        /**
         * Chart's [[Cursor]].
         *
         * @param {XYCursor}  cursor  Cursor
         */
        set: function (cursor) {
            if (this._cursor != cursor) {
                if (this._cursor) {
                    this.removeDispose(this._cursor);
                }
                this._cursor = cursor;
                if (cursor) {
                    // TODO this is wrong, fix it
                    this._disposers.push(cursor);
                    cursor.chart = this;
                    cursor.parent = this._cursorContainer;
                    cursor.events.on("cursorpositionchanged", this.handleCursorPositionChange, this);
                    cursor.events.on("zoomstarted", this.handleCursorZoomStart, this);
                    cursor.events.on("zoomended", this.handleCursorZoomEnd, this);
                    cursor.events.on("panstarted", this.handleCursorPanStart, this);
                    cursor.events.on("panning", this.handleCursorPanning, this);
                    cursor.events.on("panended", this.handleCursorPanEnd, this);
                    cursor.events.on("hidden", this.handleHideCursor, this);
                    cursor.zIndex = Number.MAX_SAFE_INTEGER - 1;
                    if (this.data.length == 0) {
                        cursor.__disabled = true;
                    }
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates and returns a new [[Cursor]] suitable for this chart type.
     *
     * @return {this} New cursor
     */
    XYChart.prototype.createCursor = function () {
        return new __WEBPACK_IMPORTED_MODULE_7__cursors_XYCursor__["a" /* XYCursor */]();
    };
    /**
     * Performs tasks when the cursor's position changes, e.g. shows proper
     * tooltips on axes and series.
     *
     * @ignore Exclude from docs
     */
    XYChart.prototype.handleCursorPositionChange = function () {
        if (this.cursor.visible && !this.cursor.isHiding) {
            var xPosition = this.cursor.xPosition;
            var yPosition = this.cursor.yPosition;
            this.showAxisTooltip(this.xAxes, xPosition);
            this.showAxisTooltip(this.yAxes, yPosition);
            this.showSeriesTooltip({
                x: xPosition,
                y: yPosition
            });
        }
    };
    /**
     * Hides all cursor-related tooltips when the cursor itself is hidden.
     *
     * @ignore Exclude from docs
     */
    XYChart.prototype.handleHideCursor = function () {
        this.hideObjectTooltip(this.xAxes);
        this.hideObjectTooltip(this.yAxes);
        this.hideObjectTooltip(this.series);
        this.updateSeriesLegend();
    };
    /**
     * Updates values for each series' legend item.
     *
     * @ignore Exclude from docs
     */
    XYChart.prototype.updateSeriesLegend = function () {
        __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["each"](this.series.iterator(), function (series) {
            series.updateLegendValue();
        });
    };
    /**
     * Hides a tooltip for a list of objects.
     *
     * @ignore Exclude from docs
     * @param {List<Sprite>}  sprites  A list of sprites to hide tooltip for
     */
    XYChart.prototype.hideObjectTooltip = function (sprites) {
        __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["each"](sprites.iterator(), function (sprite) {
            sprite.tooltip.hide(0);
        });
    };
    /**
     * Shows a tooltip for all chart's series, using specific coordinates as a
     * reference point.
     *
     * The tooltip might be shown at different coordinates depending on the
     * actual data point's position, overlapping with other tooltips, etc.
     *
     * @ignore Exclude from docs
     * @param {IPoint}  position  Reference point
     */
    XYChart.prototype.showSeriesTooltip = function (position) {
        var _this = this;
        var topLeft = __WEBPACK_IMPORTED_MODULE_14__core_utils_Utils__["spritePointToSvg"]({ x: -0.5, y: -0.5 }, this.plotContainer);
        var bottomRight = __WEBPACK_IMPORTED_MODULE_14__core_utils_Utils__["spritePointToSvg"]({ x: this.plotContainer.pixelWidth + 0.5, y: this.plotContainer.pixelHeight + 0.5 }, this.plotContainer);
        var seriesPoints = [];
        this.series.each(function (series) {
            if (series.tooltipText || series.tooltipHTML) {
                series.tooltip.setBounds({ x: 0, y: 0, width: _this.pixelWidth, height: _this.pixelHeight });
                var point = series.showTooltipAtPosition(position.x, position.y);
                if (point && __WEBPACK_IMPORTED_MODULE_11__core_utils_Math__["isInRectangle"](point, { x: topLeft.x, y: topLeft.y, width: bottomRight.x - topLeft.x, height: bottomRight.y - topLeft.y })) {
                    seriesPoints.push({ point: point, series: series });
                }
                else {
                    series.tooltip.hide(0);
                }
            }
        });
        seriesPoints.sort(function (a, b) {
            if (a.point.y > b.point.y) {
                return 1;
            }
            else {
                return 0;
            }
        });
        if (seriesPoints.length > 0) {
            var top_1 = topLeft.y;
            var bottom = bottomRight.y;
            var topSeriesPoints = [];
            var botSeriesPoints = [];
            for (var i = 0; i < seriesPoints.length; i++) {
                if (seriesPoints[i].point.y < top_1 + (bottom - top_1) / 2) {
                    topSeriesPoints.push(seriesPoints[i]);
                }
                else {
                    botSeriesPoints.push(seriesPoints[i]);
                }
            }
            var nextY = top_1;
            //@todo: solve overlapping when tooltips are close to center
            for (var i = 0; i < topSeriesPoints.length; i++) {
                var series = topSeriesPoints[i].series;
                var pointY = topSeriesPoints[i].point.y;
                var tooltip = series.tooltip;
                tooltip.setBounds({ x: 0, y: nextY, width: this.pixelWidth, height: bottom });
                if (tooltip.invalid) {
                    tooltip.validate();
                }
                tooltip.toBack();
                //@labeltodo
                nextY = __WEBPACK_IMPORTED_MODULE_14__core_utils_Utils__["spritePointToSvg"]({ x: 0, y: tooltip.label.pixelY + tooltip.label.pixelHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom }, tooltip).y;
            }
            var nextHeight = bottom;
            for (var i = botSeriesPoints.length - 1; i >= 0; i--) {
                var series = botSeriesPoints[i].series;
                var tooltip = series.tooltip;
                var pointY = botSeriesPoints[i].point.y;
                tooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: nextHeight });
                if (tooltip.invalid) {
                    tooltip.validate();
                }
                tooltip.toBack();
                //@labeltodo
                nextHeight = __WEBPACK_IMPORTED_MODULE_14__core_utils_Utils__["spritePointToSvg"]({ x: 0, y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop }, tooltip).y;
            }
        }
    };
    /**
     * Shows tooltips for a list of axes at specific position.
     *
     * Position might be X coordinate for horizontal axes, and Y coordinate for
     * vertical axes.
     *
     * @ignore Exclude from docs
     * @param {List<Axis>}  axes      List of axes to show tooltip on
     * @param {number}      position  Position (px)
     */
    XYChart.prototype.showAxisTooltip = function (axes, position) {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["each"](axes.iterator(), function (axis) {
            if (_this.dataItems.length > 0) {
                axis.showTooltipAtPosition(position);
            }
        });
    };
    /**
     * Recalculates the value range for the axis.
     *
     * @param  {Axis}    axis   Axis
     * @param  {IRange}  range  Range
     * @return {IRange}         Modified range
     */
    XYChart.prototype.getUpdatedRange = function (axis, range) {
        var start;
        var end;
        var inversed = axis.renderer.inversed;
        if (axis.renderer instanceof __WEBPACK_IMPORTED_MODULE_4__axes_AxisRendererY__["a" /* AxisRendererY */]) {
            range = __WEBPACK_IMPORTED_MODULE_11__core_utils_Math__["invertRange"](range);
        }
        if (inversed) {
            __WEBPACK_IMPORTED_MODULE_11__core_utils_Math__["invertRange"](range);
            start = 1 - axis.end;
            end = 1 - axis.start;
        }
        else {
            start = axis.start;
            end = axis.end;
        }
        var difference = end - start;
        return {
            start: start + range.start * difference,
            end: start + range.end * difference
        };
    };
    /**
     * Performs zoom and other operations when user finishes zooming using chart
     * cursor, e.g. zooms axes.
     *
     * @param {IXYCursorEvents["zoomended"]} event Cursor's event
     */
    XYChart.prototype.handleCursorZoomEnd = function (event) {
        var cursor = this.cursor;
        var behavior = cursor.behavior;
        if (behavior == "zoomX" || behavior == "zoomXY") {
            var xRange = cursor.xRange;
            if (xRange) {
                xRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);
                xRange.priority = "start";
                this.zoomAxes(this.xAxes, xRange);
            }
        }
        if (behavior == "zoomY" || behavior == "zoomXY") {
            var yRange = cursor.yRange;
            if (yRange) {
                yRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);
                yRange.priority = "start";
                this.zoomAxes(this.yAxes, yRange);
            }
        }
        this.handleHideCursor();
    };
    /**
     * Performs zoom and other operations when user is panning chart plot using chart cursor.
     *
     * @param {IXYCursorEvents["panning"]} event Cursor's event
     */
    XYChart.prototype.handleCursorPanStart = function (event) {
        var xAxis = this.xAxes.getIndex(0);
        if (xAxis) {
            this._panStartXRange = { start: xAxis.start, end: xAxis.end };
        }
        var yAxis = this.yAxes.getIndex(0);
        if (yAxis) {
            this._panStartYRange = { start: yAxis.start, end: yAxis.end };
        }
    };
    /**
     * Performs zoom and other operations when user ends panning
     *
     * @param {IXYCursorEvents["panning"]} event Cursor's event
     */
    XYChart.prototype.handleCursorPanEnd = function (event) {
        var cursor = this.cursor;
        var behavior = cursor.behavior;
        if (this._panEndXRange && (behavior == "panX" || behavior == "panXY")) {
            var panEndRange = this._panEndXRange;
            var delta = 0;
            if (panEndRange.start < 0) {
                delta = panEndRange.start;
            }
            if (panEndRange.end > 1) {
                delta = panEndRange.end - 1;
            }
            this.zoomAxes(this.xAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);
            this._panEndXRange = undefined;
            this._panStartXRange = undefined;
        }
        if (this._panEndYRange && (behavior == "panY" || behavior == "panXY")) {
            var panEndRange = this._panEndYRange;
            var delta = 0;
            if (panEndRange.start < 0) {
                delta = panEndRange.start;
            }
            if (panEndRange.end > 1) {
                delta = panEndRange.end - 1;
            }
            this.zoomAxes(this.yAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);
            this._panEndYRange = undefined;
            this._panStartYRange = undefined;
        }
    };
    /**
     * Performs zoom and other operations when user is panning chart plot using chart cursor.
     *
     * @param {IXYCursorEvents["panning"]} event Cursor's event
     */
    XYChart.prototype.handleCursorPanning = function (event) {
        var cursor = this.cursor;
        var behavior = cursor.behavior;
        var maxPanOut = cursor.maxPanOut;
        if (this._panStartXRange && (behavior == "panX" || behavior == "panXY")) {
            var panStartRange = this._panStartXRange;
            var range = cursor.xRange;
            var difference = panStartRange.end - panStartRange.start;
            var delta = range.start;
            var newStart = Math.max(-maxPanOut, delta + panStartRange.start);
            var newEnd = Math.min(range.start + panStartRange.end, 1 + maxPanOut);
            if (newStart <= 0) {
                newEnd = newStart + difference;
            }
            if (newEnd >= 1) {
                newStart = newEnd - difference;
            }
            var newRange = {
                start: newStart,
                end: newEnd
            };
            this._panEndXRange = newRange;
            this.zoomAxes(this.xAxes, newRange);
        }
        if (this._panStartYRange && (behavior == "panY" || behavior == "panXY")) {
            var panStartRange = this._panStartYRange;
            var range = cursor.yRange;
            var difference = panStartRange.end - panStartRange.start;
            var delta = range.start;
            var newStart = Math.max(-maxPanOut, delta + panStartRange.start);
            var newEnd = Math.min(range.start + panStartRange.end, 1 + maxPanOut);
            if (newStart <= 0) {
                newEnd = newStart + difference;
            }
            if (newEnd >= 1) {
                newStart = newEnd - difference;
            }
            var newRange = {
                start: newStart,
                end: newEnd
            };
            this._panEndYRange = newRange;
            this.zoomAxes(this.yAxes, newRange);
        }
        this.handleHideCursor();
    };
    /**
     * Performs zoom and other operations when user starts zooming using chart
     * cursor, e.g. zooms axes.
     *
     * @param {IXYCursorEvents["zoomended"]} event Cursor's event
     */
    XYChart.prototype.handleCursorZoomStart = function (event) {
        // Nothing here
        // This method is here only as a "placeholder" for extending classes to
        // override if necessary
    };
    Object.defineProperty(XYChart.prototype, "scrollbarX", {
        /**
         * @return {Scrollbar} Scrollbar
         */
        get: function () {
            return this._scrollbarX;
        },
        /**
         * Horizontal (X) scrollbar.
         *
         * @param {Scrollbar} scrollbar Scrollbar
         */
        set: function (scrollbar) {
            var _this = this;
            if (this._scrollbarX) {
                this.removeDispose(this._scrollbarX);
            }
            this._scrollbarX = scrollbar;
            if (scrollbar) {
                this._disposers.push(scrollbar);
                scrollbar.parent = this.topAxesContainer;
                scrollbar.toBack();
                scrollbar.orientation = "horizontal";
                scrollbar.events.on("rangechanged", this.handleXScrollbarChange, this);
                // accessibility related
                scrollbar.adapter.add("positionValue", function (arg) {
                    var xAxis = _this.xAxes.getIndex(0);
                    if (xAxis) {
                        arg.value = xAxis.getPositionLabel(arg.position);
                    }
                    return arg;
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYChart.prototype, "scrollbarY", {
        /**
         * @return {Scrollbar} Scrollbar
         */
        get: function () {
            return this._scrollbarY;
        },
        /**
         * Vertical (Y) scrollbar.
         *
         * @param {Scrollbar} scrollbar Scrollbar
         */
        set: function (scrollbar) {
            var _this = this;
            if (this._scrollbarY) {
                this.removeDispose(this._scrollbarY);
            }
            this._scrollbarY = scrollbar;
            if (scrollbar) {
                this._disposers.push(scrollbar);
                scrollbar.parent = this.rightAxesContainer;
                scrollbar.toFront();
                scrollbar.orientation = "vertical";
                scrollbar.events.on("rangechanged", this.handleYScrollbarChange, this);
                // accessibility related
                scrollbar.adapter.add("positionValue", function (arg) {
                    var yAxis = _this.yAxes.getIndex(0);
                    if (yAxis) {
                        arg.value = yAxis.getPositionLabel(arg.position);
                    }
                    return arg;
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Zooms axes affected by the horizontal (X) scrollbar when the selection
     * on it changes.
     *
     * @param {AMEvent<Scrollbar, IScrollbarEvents>["rangechanged"]} event Scrollbar range change event
     */
    XYChart.prototype.handleXScrollbarChange = function (event) {
        var scrollbar = event.target;
        var range = this.zoomAxes(this.xAxes, scrollbar.range);
        scrollbar.fixRange(range);
    };
    /**
     * Zooms axes affected by the vertical (Y) scrollbar when the selection
     * on it changes.
     *
     * @param {AMEvent<Scrollbar, IScrollbarEvents>["rangechanged"]} event Scrollbar range change event
     */
    XYChart.prototype.handleYScrollbarChange = function (event) {
        var scrollbar = event.target;
        var range = this.zoomAxes(this.yAxes, scrollbar.range);
        scrollbar.fixRange(range);
    };
    /**
     * Zooms axes that are affected by to specific relative range.
     *
     * @param  {List<Axis>}  axes       List of axes to zoom
     * @param  {IRange}      range      Range of values to zoom to (0-1)
     * @param  {boolean}     instantly  If set to `true` will skip zooming animation
     * @return {IRange}                 Recalculated range that is common to all involved axes
     */
    XYChart.prototype.zoomAxes = function (axes, range, instantly, round) {
        var realRange = { start: 0, end: 1 };
        if (!this.dataInvalid) {
            __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["each"](axes.iterator(), function (axis) {
                if (axis.renderer.inversed) {
                    range = __WEBPACK_IMPORTED_MODULE_11__core_utils_Math__["invertRange"](range);
                }
                if (round) {
                    var diff = range.end - range.start;
                    range.start = axis.roundPosition(range.start + 0.0001, 0);
                    range.end = range.start + diff;
                }
                var axisRange = axis.zoom(range, instantly, instantly);
                if (axis.renderer.inversed) {
                    axisRange = __WEBPACK_IMPORTED_MODULE_11__core_utils_Math__["invertRange"](axisRange);
                }
                realRange = axisRange;
            });
        }
        return realRange;
    };
    Object.defineProperty(XYChart.prototype, "maskBullets", {
        /**
         * @return {boolean} Mask bullet container?
         */
        get: function () {
            return this.getPropertyValue("maskBullets");
        },
        /**
         * Indicates if bullet container is masked.
         *
         * If it is set to `true`, any bullets that do not fit into bullet container
         * will be clipped off. Settting to `false` will allow bullets to "spill out"
         * of the plot area so they are not cut off.
         *
         * @param {boolean} value Mask bullet container?
         */
        set: function (value) {
            this.setPropertyValue("maskBullets", value, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * This function is called by the [[DataSource]]'s `dateFields` adapater
     * so that particular chart types can popuplate this setting with their
     * own type-speicifc data fields so they are parsed properly.
     *
     * @param  {string[]}  fields  Array of date fields
     * @return {string[]}          Array of date fields populated with chart's date fields
     */
    XYChart.prototype.dataSourceDateFields = function (fields) {
        var _this = this;
        // Process parent
        fields = _super.prototype.dataSourceDateFields.call(this, fields);
        // Check if we have any series with date-fields
        __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["each"](this.series.iterator(), function (series) {
            fields = _this.populateDataSourceFields(fields, series.dataFields, ["dateX", "dateY", "openDateX", "openDateY"]);
        });
        return fields;
    };
    /**
     * This function is called by the [[DataSource]]'s `numberFields` adapater
     * so that particular chart types can popuplate this setting with their
     * own type-specific data fields so they are parsed properly.
     *
     * @param  {string[]}  value  Array of number fields
     * @return {string[]}         Array of number fields populated with chart's number fields
     */
    XYChart.prototype.dataSourceNumberFields = function (fields) {
        var _this = this;
        fields = _super.prototype.dataSourceDateFields.call(this, fields);
        // Check if we have any series with date-fields
        __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["each"](this.series.iterator(), function (series) {
            fields = _this.populateDataSourceFields(fields, series.dataFields, ["valueX", "valueY", "openValueX", "openValueY"]);
        });
        return fields;
    };
    /**
     * Processes JSON-based config before it is applied to the object.
     *
     * @ignore Exclude from docs
     * @param {object}  config  Config
     */
    XYChart.prototype.processConfig = function (config) {
        if (config) {
            // Save axis ranges for later processing
            var xAxes = [];
            var yAxes = [];
            // Set up axes
            if (__WEBPACK_IMPORTED_MODULE_13__core_utils_Type__["hasValue"](config.xAxes) && __WEBPACK_IMPORTED_MODULE_13__core_utils_Type__["isArray"](config.xAxes)) {
                for (var i = 0, len = config.xAxes.length; i < len; i++) {
                    if (!config.xAxes[i].type) {
                        throw Error("[XYChart error] No type set for xAxes[" + i + "].");
                    }
                    else if (__WEBPACK_IMPORTED_MODULE_13__core_utils_Type__["hasValue"](config.xAxes[i]["axisRanges"])) {
                        xAxes.push({
                            axisRanges: config.xAxes[i]["axisRanges"],
                            index: i
                        });
                        delete (config.xAxes[i]["axisRanges"]);
                    }
                }
            }
            if (__WEBPACK_IMPORTED_MODULE_13__core_utils_Type__["hasValue"](config.yAxes) && __WEBPACK_IMPORTED_MODULE_13__core_utils_Type__["isArray"](config.yAxes)) {
                for (var i = 0, len = config.yAxes.length; i < len; i++) {
                    if (!config.yAxes[i].type) {
                        throw Error("[XYChart error] No type set for yAxes[" + i + "].");
                    }
                    else if (__WEBPACK_IMPORTED_MODULE_13__core_utils_Type__["hasValue"](config.yAxes[i]["axisRanges"])) {
                        yAxes.push({
                            axisRanges: config.yAxes[i]["axisRanges"],
                            index: i
                        });
                        delete (config.yAxes[i]["axisRanges"]);
                    }
                }
            }
            // Set up series
            if (__WEBPACK_IMPORTED_MODULE_13__core_utils_Type__["hasValue"](config.series) && __WEBPACK_IMPORTED_MODULE_13__core_utils_Type__["isArray"](config.series)) {
                for (var i = 0, len = config.series.length; i < len; i++) {
                    config.series[i].type = config.series[i].type || "LineSeries";
                }
            }
            // Set up cursor
            if (__WEBPACK_IMPORTED_MODULE_13__core_utils_Type__["hasValue"](config.cursor) && !__WEBPACK_IMPORTED_MODULE_13__core_utils_Type__["hasValue"](config.cursor.type)) {
                config.cursor.type = "XYCursor";
            }
            // Set up scrollbars
            if (__WEBPACK_IMPORTED_MODULE_13__core_utils_Type__["hasValue"](config.scrollbarX) && !__WEBPACK_IMPORTED_MODULE_13__core_utils_Type__["hasValue"](config.scrollbarX.type)) {
                config.scrollbarX.type = "Scrollbar";
            }
            if (__WEBPACK_IMPORTED_MODULE_13__core_utils_Type__["hasValue"](config.scrollbarY) && !__WEBPACK_IMPORTED_MODULE_13__core_utils_Type__["hasValue"](config.scrollbarY.type)) {
                config.scrollbarY.type = "Scrollbar";
            }
            _super.prototype.processConfig.call(this, config);
            // Finish up with ranges.
            // We need to do this here because series are processed last in JSON
            // config. Therefore their respective objects are not yet are available
            // when axis (and respectively their ranges) are being processed.
            if (yAxes.length) {
                for (var i = 0; i < yAxes.length; i++) {
                    this.yAxes.getIndex(yAxes[i].index).config = {
                        axisRanges: yAxes[i].axisRanges
                    };
                }
            }
            if (xAxes.length) {
                for (var i = 0; i < xAxes.length; i++) {
                    this.xAxes.getIndex(xAxes[i].index).config = {
                        axisRanges: xAxes[i].axisRanges
                    };
                }
            }
        }
    };
    /**
     * This function is used to sort element's JSON config properties, so that
     * some properties that absolutely need to be processed last, can be put at
     * the end.
     *
     * @ignore Exclude from docs
     * @param  {string}  a  Element 1
     * @param  {string}  b  Element 2
     * @return {Ordering}   Sorting number
     */
    XYChart.prototype.configOrder = function (a, b) {
        if (a == b) {
            return 0;
        }
        // Must come last
        else if (a == "scrollbarX") {
            return 1;
        }
        else if (b == "scrollbarX") {
            return -1;
        }
        else if (a == "scrollbarY") {
            return 1;
        }
        else if (b == "scrollbarY") {
            return -1;
        }
        else if (a == "series") {
            return 1;
        }
        else if (b == "series") {
            return -1;
        }
        else {
            return _super.prototype.configOrder.call(this, a, b);
        }
    };
    /**
     * Creates a new Series of type suitable for this chart.
     *
     * @return {this} New series
     */
    XYChart.prototype.createSeries = function () {
        return new __WEBPACK_IMPORTED_MODULE_6__series_XYSeries__["a" /* XYSeries */]();
    };
    Object.defineProperty(XYChart.prototype, "zoomOutButton", {
        /**
         * @return {Button} Zoom out button
         */
        get: function () {
            return this._zoomOutButton;
        },
        /**
         * A [[Button]] element that is used for zooming out the chart.
         *
         * This button appears only when chart is zoomed in, and disappears
         * autoamatically when it is zoome dout.
         *
         * @param {Button}  button  Zoom out button
         */
        set: function (button) {
            var _this = this;
            this._zoomOutButton = button;
            if (button) {
                button.events.on("hit", function () {
                    _this.zoomAxes(_this.xAxes, { start: 0, end: 1 });
                    _this.zoomAxes(_this.yAxes, { start: 0, end: 1 });
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Copies all parameters from another [[XYChart]].
     *
     * @param {XYChart} source Source XYChart
     */
    XYChart.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        this.xAxes.copyFrom(source.xAxes);
        this.yAxes.copyFrom(source.yAxes);
        this.zoomOutButton.copyFrom(source.zoomOutButton);
        //@todo copy all container properties
    };
    return XYChart;
}(__WEBPACK_IMPORTED_MODULE_0__SerialChart__["a" /* SerialChart */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_10__core_Registry__["b" /* registry */].registeredClasses["XYChart"] = XYChart;
//# sourceMappingURL=XYChart.js.map

/***/ }),
/* 61 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return SeriesDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Series; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Component__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_DataItem__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_elements_Tooltip__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__elements_Bullet__ = __webpack_require__(49);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__Legend__ = __webpack_require__(117);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_Options__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__core_utils_Color__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__core_utils_Ease__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__core_utils_Utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__core_utils_Object__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__core_utils_Type__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__core_utils_Array__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__core_utils_Colors__ = __webpack_require__(42);
/**
 * Functionality for any series-based elements, like Line Series (graphs),
 * Pie slice lists, etc.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



















/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[Series]].
 *
 * @see {@link DataItem}
 */
var SeriesDataItem = /** @class */ (function (_super) {
    __extends(SeriesDataItem, _super);
    /**
     * Constructor
     */
    function SeriesDataItem() {
        var _this = _super.call(this) || this;
        /**
         * A dictionary of data items bullets, where key is uid of a bullet template.
         *
         * @ignore Exclude from docs
         * @todo review description
         * @type {Dictionary}
         */
        _this.bullets = new __WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__["a" /* Dictionary */]();
        _this.className = "SeriesDataItem";
        //@todo Should we make `bullets` list disposable?
        //this._disposers.push(new DictionaryDisposer(this.bullets));
        _this.values.value = {};
        _this.values.value = {};
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(SeriesDataItem.prototype, "value", {
        /**
         * @return {number} Value
         */
        get: function () {
            return this.values.value.value;
        },
        /**
         * data items's numeric value.
         *
         * @param {number}  value  Value
         */
        set: function (value) {
            this.setValue("value", value);
        },
        enumerable: true,
        configurable: true
    });
    return SeriesDataItem;
}(__WEBPACK_IMPORTED_MODULE_4__core_DataItem__["a" /* DataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Defines base class for any kind of serial data.
 *
 * @see {@link ISeriesEvents} for a list of available Events
 * @see {@link ISeriesAdapters} for a list of available Adapters
 * @todo Separate axis-related stuff to some other class so that MapSeries would not have unrelated stuff
 */
var Series = /** @class */ (function (_super) {
    __extends(Series, _super);
    /**
     * Constructor
     */
    function Series() {
        var _this = _super.call(this) || this;
        /**
         * Should this series excluded from the axis scale calculations?
         *
         * @default false
         * @type {boolean}
         */
        _this._ignoreMinMax = false;
        /**
         * Should series' bullets?
         *
         * @default true
         * @type {boolean}
         */
        _this._showBullets = true;
        /**
         * Settings for the appearance of the related legend items.
         */
        _this.legendSettings = new __WEBPACK_IMPORTED_MODULE_8__Legend__["c" /* LegendSettings */]();
        /**
         * Lowest overal values by type.
         *
         * @type {Dictionary}
         */
        _this._tmin = new __WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__["a" /* Dictionary */]();
        /**
         * Highest overal values by type.
         *
         * @type {Dictionary}
         */
        _this._tmax = new __WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__["a" /* Dictionary */]();
        /**
         * Lowest values in current selection by type.
         *
         * @type {Dictionary}
         */
        _this._smin = new __WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__["a" /* Dictionary */]();
        /**
         * Highest values in current selection by type.
         *
         * @type {Dictionary}
         */
        _this._smax = new __WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__["a" /* Dictionary */]();
        /**
         * [dataItemsByAxis description]
         *
         * Both by category and date.
         *
         * @ignore Exclude from docs
         * @todo Description
         * @type {Dictionary}
         */
        _this.dataItemsByAxis = new __WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__["a" /* Dictionary */]();
        /**
         * Normally series items are focusable using keyboard, so that people can
         * select them with a TAB key. However, if there are a lot of data points on
         * screen it might be long and useless to tab through all o fthem.
         *
         * This is where `skipFocusThreshold` comes in. If there are more items than
         * the value set here, we will not make those focusable and rather let screen
         * reader software rely on the series summary, or authors provide alternative
         * detailed information display, such as HTML table.
         *
         * Different series might have different threshold defaults.
         *
         * @type {Number}
         */
        _this.skipFocusThreshold = 20;
        /**
         * flag which is set to true when initial animation is finished
         * @ignore
         */
        _this.appeared = false;
        _this.className = "Series";
        _this.isMeasured = false;
        _this.layout = "none";
        _this.shouldClone = false;
        _this.axisRanges = new __WEBPACK_IMPORTED_MODULE_2__core_utils_List__["b" /* List */]();
        _this.axisRanges.events.on("insert", _this.processAxisRange, _this);
        _this.minBulletDistance = 0; // otherwise we'll have a lot of cases when people won't see bullets and think it's a bug
        _this.mainContainer = _this.createChild(__WEBPACK_IMPORTED_MODULE_5__core_Container__["a" /* Container */]);
        _this.mainContainer.shouldClone = false;
        _this.mainContainer.mask = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__core_Sprite__["a" /* Sprite */]);
        // all bullets should go on top of lines/fills. So we add a separate container for bullets and later set it's parent to chart.bulletsContainer
        _this.bulletsContainer = _this.mainContainer.createChild(__WEBPACK_IMPORTED_MODULE_5__core_Container__["a" /* Container */]);
        _this.bulletsContainer.shouldClone = false;
        _this.bulletsContainer.layout = "none";
        _this.tooltip = new __WEBPACK_IMPORTED_MODULE_6__core_elements_Tooltip__["a" /* Tooltip */]();
        _this._disposers.push(_this.tooltip);
        _this.hiddenState.transitionEasing = __WEBPACK_IMPORTED_MODULE_13__core_utils_Ease__["cubicIn"];
        // this data item holds sums, averages, etc
        _this.dataItem = _this.createDataItem();
        _this.dataItem.component = _this;
        // Apply accessibility
        _this.role = "group";
        _this.events.once("beforevalidated", function () { _this.appear(); }, _this);
        //this.hiddenState.properties.opacity = 1; // because we hide by changing values
        _this.applyTheme();
        return _this;
    }
    /**
     * Sets defaults that instantiate some objects that rely on parent, so they
     * cannot be set in constructor.
     */
    Series.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);
        if (!__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["hasValue"](this.readerTitle)) {
            this.readerTitle = this.language.translate("Series");
        }
    };
    /**
     * Returns a new/empty DataItem of the type appropriate for this object.
     *
     * @see {@link DataItem}
     * @return {SeriesDataItem} Data Item
     */
    Series.prototype.createDataItem = function () {
        return new SeriesDataItem();
    };
    Object.defineProperty(Series.prototype, "chart", {
        /**
         * @return {this} Chart
         */
        get: function () {
            return this._chart;
        },
        /**
         * Chart series is used on.
         *
         * @param {this["_chart"]}  value  Chart
         */
        set: function (value) {
            this._chart = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Performs initial animation of the series after data validation.
     *
     * @ignore Exclude from docs
     */
    Series.prototype.appear = function () {
        var _this = this;
        this.appeared = false;
        this.hide(0);
        var animation = this.show();
        if (animation && !animation.isDisposed()) {
            animation.events.once("animationended", function () {
                _this.appeared = true;
            });
        }
        else {
            this.appeared = true;
        }
    };
    /**
     * Fades in bullet container and related elements.
     *
     * @ignore Exclude from docs
     * @param  {number}     duration  Animation duration (ms)
     * @return {Animation}            Animation
     */
    Series.prototype.showReal = function (duration) {
        this.bulletsContainer.show(duration);
        return _super.prototype.showReal.call(this, duration);
    };
    /**
     * Fades out bullet container and related elements.
     *
     * @ignore Exclude from docs
     * @param  {number}     duration  Animation duration (ms)
     * @return {Animation}            Animation
     */
    Series.prototype.hideReal = function (duration) {
        this.bulletsContainer.hide(duration);
        return _super.prototype.hideReal.call(this, duration);
    };
    /**
     * Positions bullet.
     *
     * @param {Bullet}  bullet  Bullet
     */
    Series.prototype.positionBullet = function (bullet) {
        // Placeholder method for extending classes to override.
    };
    /**
     * Decorates newly created bullet after it has been instert into the list.
     *
     * @param {IListEvents<Bullet>["insert"]}  event  List event
     * @todo investigate why itemReaderText is undefined
     */
    Series.prototype.processBullet = function (event) {
        var bullet = event.newValue;
        // create list and iterator
        var bulletsList = new __WEBPACK_IMPORTED_MODULE_2__core_utils_List__["e" /* ListTemplate */](bullet);
        this.bulletsLists.setKey(bullet.uid, bulletsList);
        // Add accessibility options to bullet
        // If there are relatively few bullets, make them focusable
        if (this.itemsFocusable()) {
            bullet.focusable = true;
        }
    };
    /**
     * Validates data items.
     *
     * @ignore Exclude from docs
     */
    Series.prototype.validateDataItems = function () {
        _super.prototype.validateDataItems.call(this);
        this.processValues(false);
    };
    /**
     * Returns first value for the specific key in the series.
     *
     * @param  {string}  key  Key
     * @return {number}       Value
     * @todo Description
     * @todo Convert to propert object property iterator
     */
    Series.prototype.getFirstValue = function (key) {
        // find first
        return __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["findMap"](this.dataItems.iterator(), function (dataItem) {
            for (var key_1 in dataItem.values) {
                var value = dataItem.values[key_1].workingValue;
                if (__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](value)) {
                    return value;
                }
            }
            return null;
        });
    };
    /**
     * [rangeChangeUpdate description]
     *
     * @todo Description
     */
    Series.prototype.rangeChangeUpdate = function () {
        _super.prototype.rangeChangeUpdate.call(this);
        this.processValues(true);
    };
    /**
     * [processValues description]
     *
     * @todo Description
     * @todo Convert to propert object property iterator
     * @param {OrderedList<this["_dataItem"]>} dataItems [description]
     */
    Series.prototype.processValues = function (working) {
        var _this = this;
        var dataItems = this.dataItems;
        var count = {};
        var sum = {};
        var low = {};
        var high = {};
        var open = {};
        var close = {};
        var previous = {};
        var first = {};
        //let duration: number = 0; // todo: check if series uses selection.change or selection.change.percent and set duration to interpolationduration
        var startIndex = this._workingStartIndex;
        var endIndex = this._workingEndIndex;
        this.bulletsContainer.children.each(function (sprite) {
            sprite.__disabled = true;
        });
        // it's ok, we loop trough all the data and check if i is within start/end index later
        __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["each"](__WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["indexed"](dataItems.iterator()), function (a) {
            var i = a[0];
            var dataItem = a[1];
            for (var key in dataItem.values) {
                var value = dataItem.values[key].workingValue;
                if (i >= startIndex && i <= endIndex) { // do not add to count, sum etc if it is not within start/end index
                    if (__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](value)) {
                        // count values
                        if (!__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](count[key])) {
                            count[key] = 0;
                        }
                        count[key]++;
                        // sum values
                        if (!__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](sum[key])) {
                            sum[key] = 0;
                        }
                        sum[key] += value;
                        // open
                        if (!__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](open[key])) {
                            open[key] = value;
                        }
                        // close
                        close[key] = value;
                        // low
                        if (!__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](low[key])) {
                            low[key] = value;
                        }
                        else {
                            if (low[key] > value) {
                                low[key] = value;
                            }
                        }
                        // high
                        if (!__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](high[key])) {
                            high[key] = value;
                        }
                        else {
                            if (high[key] < value) {
                                high[key] = value;
                            }
                        }
                    }
                }
                if (!__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](first[key])) {
                    first[key] = _this.getFirstValue(key);
                }
                // change
                dataItem.setCalculatedValue(key, value - first[key], "change");
                // change from start percent
                dataItem.setCalculatedValue(key, (value - first[key]) / first[key] * 100, "changePercent");
                // previous change
                var prevValue = previous[key];
                if (!__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](prevValue)) {
                    prevValue = value;
                }
                dataItem.setCalculatedValue(key, value - prevValue, "previousChange");
                // previous change percent
                dataItem.setCalculatedValue(key, (value - prevValue) / prevValue * 100, "previousChangePercent");
                // save previous
                previous[key] = value;
            }
        });
        // todo: this is not often needed (pie chart mostly), any chance to avoid? chart could have a flag which would enable/disable this calculations
        // todo: think what to do with value.percent - we need to cycle through all data in order to have proper values, but this is expensive. flag might be a solution.
        __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["each"](__WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["indexed"](dataItems.iterator()), function (a) {
            var i = a[0];
            var dataItem = a[1];
            __WEBPACK_IMPORTED_MODULE_15__core_utils_Object__["each"](dataItem.values, function (key) {
                var ksum = sum[key];
                var value = dataItem.values[key].workingValue;
                // this hack is made in order to make it possible to animate single slice to 0
                // if there is only one slice left, percent value is always 100%, so it won't animate
                // so we use real value of a slice instead of current value
                if (value == ksum) {
                    ksum = dataItem.values[key].value;
                }
                if (i >= startIndex && i <= endIndex) {
                    var percent = void 0; // used to be = 0; but no good for pie chart
                    if (__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](value) && ksum > 0) {
                        percent = value / ksum * 100;
                        dataItem.setCalculatedValue(key, percent, "percent");
                    }
                }
            });
        });
        // calculate one before first (cant do that in cycle, as we don't know open yet
        // when drawing line chart we should draw line to the invisible data point to the left, otherwise the line will always look like it starts from the selected point
        // so we do startIndex - 1
        if (startIndex > 0) {
            var zeroItem_1 = dataItems.getIndex(startIndex - 1);
            __WEBPACK_IMPORTED_MODULE_15__core_utils_Object__["each"](zeroItem_1.values, function (key) {
                //for (let key in zeroItem.values) {
                var value = zeroItem_1.values[key].value;
                // change
                zeroItem_1.setCalculatedValue(key, value - open[key], "change");
                // change percent
                zeroItem_1.setCalculatedValue(key, (value - open[key]) / open[key] * 100, "changePercent");
                //}
            });
        }
        // we save various data like sum, average to dataPoint of the series
        var dataItem = this.dataItem;
        __WEBPACK_IMPORTED_MODULE_15__core_utils_Object__["each"](dataItem.values, function (key) {
            dataItem.setCalculatedValue(key, sum[key], "sum");
            dataItem.setCalculatedValue(key, sum[key] / count[key], "average");
            dataItem.setCalculatedValue(key, open[key], "open");
            dataItem.setCalculatedValue(key, close[key], "close");
            dataItem.setCalculatedValue(key, low[key], "low");
            dataItem.setCalculatedValue(key, high[key], "high");
            dataItem.setCalculatedValue(key, count[key], "count");
        });
    };
    /**
     * (Re)validates the whole series, effectively causing it to redraw.
     *
     * @ignore Exclude from docs
     */
    Series.prototype.validate = function () {
        __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["each"](this.axisRanges.iterator(), function (axisRange) {
            //axisRange.contents.disposeChildren(); // not good for columns, as they are reused
            //			axisRange.appendChildren();
            axisRange.validate();
        });
        _super.prototype.validate.call(this);
        this.bulletsContainer.fill = this.fill;
        this.bulletsContainer.stroke = this.stroke;
        if (this.topParent) {
            this.tooltip.setBounds({ x: 0, y: 0, width: this.topParent.maxWidth, height: this.topParent.maxHeight });
        }
    };
    /**
     * Validates data item's element, effectively redrawing it.
     *
     * @ignore Exclude from docs
     * @param {SeriesDataItem}  dataItem  Data item
     */
    Series.prototype.validateDataElement = function (dataItem) {
        var _this = this;
        _super.prototype.validateDataElement.call(this, dataItem);
        if (this._showBullets) {
            __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["each"](this.bullets.iterator(), function (bulletTemplate) {
                // always better to use the same, this helps to avoid redrawing
                var bullet = dataItem.bullets.getKey(bulletTemplate.uid);
                if (!bullet) {
                    bullet = bulletTemplate.clone();
                }
                var currentDataItem = bullet.dataItem;
                if (currentDataItem != dataItem) {
                    // set to undefined in order not to reuse
                    if (currentDataItem) {
                        currentDataItem.bullets.setKey(bulletTemplate.uid, undefined);
                    }
                    dataItem.addSprite(bullet);
                    if (bullet.isDynamic) {
                        dataItem.events.on("workingvaluechanged", bullet.deepInvalidate, bullet);
                        //dataItem.events.on("calculatedvaluechanged", bullet.deepInvalidate, bullet);
                        _this.dataItem.events.on("workingvaluechanged", bullet.deepInvalidate, bullet);
                    }
                    bullet.deepInvalidate();
                }
                bullet.parent = _this.bulletsContainer;
                bullet.visible = true;
                dataItem.bullets.setKey(bulletTemplate.uid, bullet);
                // Add accessibility to bullet
                var readerText = _this.itemReaderText || ("{" + bullet.xField + "}: {" + bullet.yField + "}");
                if (bullet.focusable) {
                    bullet.events.once("focus", function (ev) {
                        bullet.readerTitle = _this.populateString(readerText, bullet.dataItem);
                    });
                    bullet.events.once("blur", function (ev) {
                        bullet.readerTitle = "";
                    });
                }
                if (bullet.hoverable) {
                    bullet.events.once("over", function (ev) {
                        bullet.readerTitle = _this.populateString(readerText, bullet.dataItem);
                    });
                    bullet.events.once("out", function (ev) {
                        bullet.readerTitle = "";
                    });
                }
                // pass max w/h so we'd know if we should show/hide somethings
                bullet.maxWidth = dataItem.itemWidth;
                bullet.maxHeight = dataItem.itemHeight;
                bullet.__disabled = false;
                _this.positionBullet(bullet);
            });
        }
    };
    /**
     * [handleDataItemWorkingValueChange description]
     *
     * @todo Description
     */
    Series.prototype.handleDataItemWorkingValueChange = function (event) {
        this.invalidateProcessedData();
    };
    Object.defineProperty(Series.prototype, "ignoreMinMax", {
        /**
         * @return {boolean} Exclude from calculations?
         */
        get: function () {
            return this._ignoreMinMax;
        },
        /**
         * Should this series excluded from the axis scale calculations?
         *
         * @default false
         * @param {boolean}  value  Exclude from calculations?
         */
        set: function (value) {
            this._ignoreMinMax = value;
            this.invalidateDataItems();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Create a mask for the series.
     *
     * @ignore Exclude from docs
     */
    Series.prototype.createMask = function () {
        // A placeholder method for extending classes to override.
    };
    /**
     * Process axis range after it has been added to the list.
     *
     * @param {IListEvents<AxisDataItem>["insert"]}  event  Event
     */
    Series.prototype.processAxisRange = function (event) {
        // create container if not existing
        if (!this.rangesContainer) {
            this.rangesContainer = this.createChild(__WEBPACK_IMPORTED_MODULE_5__core_Container__["a" /* Container */]);
            this.rangesContainer.shouldClone = false;
            this.rangesContainer.isMeasured = false;
        }
        var axisRange = event.newValue;
        if (axisRange) {
            axisRange.contents.parent = this.rangesContainer;
            axisRange.isRange = true;
        }
    };
    /**
     * [getAxisField description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {Axis}    axis  [description]
     * @return {string}        [description]
     */
    Series.prototype.getAxisField = function (axis) {
        return;
    };
    /**
     * Shows the tooltip at specific position.
     *
     * @ignore Exclude from docs
     * @param {number}  xPosition  X
     * @param {number}  yPosition  Y
     */
    Series.prototype.showTooltipAtPosition = function (xPosition, yPosition) {
        // Placeholder method for extending classes to override.
    };
    Object.defineProperty(Series.prototype, "minBulletDistance", {
        /**
         * @return {number} Distance (px)
         */
        get: function () {
            return this.getPropertyValue("minBulletDistance");
        },
        /**
         * Minimal distance between two adjacent bullets in pixels.
         *
         * If bullet is closer, it will be skipped and not shown.
         *
         * This allows to avoid crammed up graphs wil a lot of bullets.
         *
         * @default 50
         * @param {number}  value  Distance (px)
         */
        set: function (value) {
            this.setPropertyValue("minBulletDistance", value);
            this.invalidateDataRange();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Series.prototype, "bullets", {
        /**
         * A list of bullets that will be added to each and every items in the
         * series.
         *
         * You can push any object that is a descendant of a [[Bullet]] here. All
         * items added to this list will be copied and used as a bullet on all data
         * items, including their properties, events, etc.
         *
         * @see {@link https://www.amcharts.com/docs/v4/concepts/bullets/} for more info about the concept of Bullets
         * @return {ListTemplate<Bullet>} List of bullets.
         */
        get: function () {
            if (!this._bullets) {
                this._bullets = new __WEBPACK_IMPORTED_MODULE_2__core_utils_List__["e" /* ListTemplate */](new __WEBPACK_IMPORTED_MODULE_7__elements_Bullet__["a" /* Bullet */]());
                this._bullets.events.on("insert", this.processBullet, this);
                this.bulletsLists = new __WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__["a" /* Dictionary */]();
            }
            return this._bullets;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Destroys series and related elements.
     */
    Series.prototype.dispose = function () {
        if (!this._disposed) {
            _super.prototype.dispose.call(this);
            this.removeDispose(this.bulletsContainer);
        }
    };
    /**
     * Binds related legend data item's visual settings to this series' visual
     * settings.
     *
     * @ignore Exclude from docs
     * @param {Container}  marker  Legend item container
     */
    Series.prototype.createLegendMarker = function (marker) {
        // This is a placeholder method for extending classes to override.
    };
    Object.defineProperty(Series.prototype, "hiddenInLegend", {
        /**
         * @return {boolean} Hidden in legend?
         */
        get: function () {
            return this.getPropertyValue("hiddenInLegend");
        },
        /**
         * Should the series be hidden in legend?
         *
         * @param {boolean} value Hidden in legend?
         */
        set: function (value) {
            this.setPropertyValue("hiddenInLegend", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Series.prototype, "name", {
        /**
         * @return {string} Name
         */
        get: function () {
            return this.adapter.apply("name", this._title);
        },
        /**
         * Series' name.
         *
         * @param {string}  value  Name
         */
        set: function (value) {
            this._title = value;
            this.readerTitle = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Series.prototype, "itemReaderText", {
        /**
         * @return {string} Screen reader text template
         */
        get: function () {
            // Get explicitly set reader text
            var readerText = this._itemReaderText;
            // Not set? Let's try something else
            if (!readerText) {
                // Tooltip text?
                if (this.tooltipText) {
                    readerText = __WEBPACK_IMPORTED_MODULE_14__core_utils_Utils__["plainText"](this.tooltipText);
                }
                else if (this.tooltipHTML) {
                    readerText = __WEBPACK_IMPORTED_MODULE_14__core_utils_Utils__["plainText"](this.tooltipHTML);
                }
            }
            return this.adapter.apply("itemReaderText", readerText);
        },
        /**
         * Screen reader text to be applied to each individual data item, such
         * as bullets, columns or slices.
         *
         * The template can contain field reference meta codes, i.e. `{dateX}`,
         * `{valueY}`, etc.
         *
         * Any text formatting options, e.g. `[bold]` will be ignored.
         *
         * @param {string} value Screen reader text template
         */
        set: function (value) {
            this._itemReaderText = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns if number of data items in the series are beyond non-focusable
     * count and should not be available for TAB-through.
     *
     * @ignore Exclude from docs
     * @return {boolean} Items focusable?
     */
    Series.prototype.itemsFocusable = function () {
        return this.dataItems.length >= this.skipFocusThreshold ? false : true;
    };
    Object.defineProperty(Series.prototype, "legendDataItem", {
        /**
         * @return {LegendDataItem<Series, ISeriesEvents>} Data item
         */
        get: function () {
            return this._legendDataItem;
        },
        /**
         * Legend data item that corresponds to this series.
         *
         * @param {LegendDataItem<Series, ISeriesEvents>}  value  Data item
         */
        set: function (value) {
            this._legendDataItem = value;
            this._legendDataItem.itemContainer.deepInvalidate();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Updates corresponding legend data item with current values.
     *
     * @ignore Exclude from docs
     * @param {this["_dataItem"]}  dataItem  Data item
     */
    Series.prototype.updateLegendValue = function (dataItem) {
        // if this series has legend item
        if (this.legendDataItem) {
            var legendSettings = this.legendSettings;
            var legendDataItem = this.legendDataItem;
            var label = legendDataItem.label;
            var valueLabel = legendDataItem.valueLabel;
            // update legend
            if (dataItem) {
                if (legendSettings.itemValueText) {
                    valueLabel.text = legendSettings.itemValueText;
                }
                if (legendSettings.itemLabelText) {
                    label.text = legendSettings.itemLabelText;
                }
                valueLabel.dataItem = dataItem;
                label.dataItem = this.dataItem;
            }
            else {
                // if itemLabelText is set, means we have to reset label even if labelText is not set
                if (legendSettings.labelText || legendSettings.itemLabelText != undefined) {
                    label.text = legendSettings.labelText;
                }
                if (legendSettings.valueText || legendSettings.itemValueText != undefined) {
                    valueLabel.text = legendSettings.valueText;
                }
                label.dataItem = this.dataItem;
                valueLabel.dataItem = this.dataItem;
            }
        }
    };
    /**
     * Copies all properties from another instance of [[Series]].
     *
     * @param {Series}  source  Source series
     */
    Series.prototype.copyFrom = function (source) {
        this.bullets.copyFrom(source.bullets);
        this.bulletsContainer.copyFrom(source.bulletsContainer);
        _super.prototype.copyFrom.call(this, source);
    };
    /**
     * Displays a modal or console message with error, and halts any further
     * processing of this element.
     *
     * @param {Error} e Error
     */
    Series.prototype.raiseCriticalError = function (e) {
        this._chart.modal.content = e.message;
        this._chart.modal.closable = false;
        this._chart.modal.show();
        this._chart.disabled = true;
        if (__WEBPACK_IMPORTED_MODULE_9__core_Options__["a" /* options */].verbose) {
            console.log(e);
        }
    };
    /**
     * Applies filters to the element.
     *
     * @ignore Exclude from docs
     */
    Series.prototype.applyFilters = function () {
        _super.prototype.applyFilters.call(this);
        this.bulletsContainer.filters.clear();
        this.bulletsContainer.filters.copyFrom(this.filters);
    };
    Object.defineProperty(Series.prototype, "heatRules", {
        /**
         * @todo Description
         */
        get: function () {
            var _this = this;
            if (!this._heatRules) {
                this._heatRules = new __WEBPACK_IMPORTED_MODULE_2__core_utils_List__["b" /* List */]();
                this._heatRules.events.on("insert", function (event) {
                    var heatRule = event.newValue;
                    var target = heatRule.target;
                    if (target) {
                        var dataField_1 = heatRule.dataField;
                        if (!__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["hasValue"](dataField_1)) {
                            dataField_1 = "value";
                        }
                        var min_1 = heatRule.min;
                        var max_1 = heatRule.max;
                        var seriesDataItem_1 = _this.dataItem;
                        var property_1 = heatRule.property;
                        var minValue = __WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["toNumber"](heatRule.minValue);
                        var maxValue = __WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["toNumber"](heatRule.maxValue);
                        if (!__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](minValue) && !__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](maxValue)) {
                            _this.dataItem.events.on("calculatedvaluechanged", function (event) {
                                if (event.property == dataField_1) {
                                    __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["each"](_this.dataItems.iterator(), function (dataItem) {
                                        var foundSprite = false;
                                        __WEBPACK_IMPORTED_MODULE_17__core_utils_Array__["c" /* each */](dataItem.sprites, function (sprite) {
                                            if (sprite.clonedFrom == target) {
                                                var anySprite = sprite;
                                                anySprite[property_1] = anySprite[property_1];
                                                foundSprite = true;
                                            }
                                        });
                                        if (!foundSprite) {
                                            __WEBPACK_IMPORTED_MODULE_17__core_utils_Array__["c" /* each */](dataItem.sprites, function (sprite) {
                                                if (sprite instanceof __WEBPACK_IMPORTED_MODULE_5__core_Container__["a" /* Container */]) {
                                                    __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["each"](sprite.children.iterator(), function (child) {
                                                        if (child.className == target.className) {
                                                            var anyChild = child;
                                                            anyChild[property_1] = anyChild[property_1];
                                                        }
                                                        // giveup here
                                                        else if (child instanceof __WEBPACK_IMPORTED_MODULE_5__core_Container__["a" /* Container */]) {
                                                            child.deepInvalidate();
                                                        }
                                                    });
                                                }
                                            });
                                        }
                                    });
                                }
                            });
                        }
                        _this.dataItems.template.events.on("workingvaluechanged", function (event) {
                            if (event.property == dataField_1) {
                                var dataItem = event.target;
                                var foundSprite_1 = false;
                                __WEBPACK_IMPORTED_MODULE_17__core_utils_Array__["c" /* each */](dataItem.sprites, function (sprite) {
                                    if (sprite.clonedFrom == target) {
                                        var anySprite = sprite;
                                        anySprite[property_1] = anySprite[property_1];
                                        foundSprite_1 = true;
                                    }
                                });
                                if (!foundSprite_1) {
                                    __WEBPACK_IMPORTED_MODULE_17__core_utils_Array__["c" /* each */](dataItem.sprites, function (sprite) {
                                        if (sprite instanceof __WEBPACK_IMPORTED_MODULE_5__core_Container__["a" /* Container */]) {
                                            __WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__["each"](sprite.children.iterator(), function (child) {
                                                if (child.className == target.className) {
                                                    var anyChild = child;
                                                    anyChild[property_1] = anyChild[property_1];
                                                }
                                                // givup here
                                                else if (child instanceof __WEBPACK_IMPORTED_MODULE_5__core_Container__["a" /* Container */]) {
                                                    child.deepInvalidate();
                                                }
                                            });
                                        }
                                    });
                                }
                            }
                        });
                        target.adapter.add(property_1, function (value, ruleTarget, property) {
                            var minValue = __WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["toNumber"](heatRule.minValue);
                            var maxValue = __WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["toNumber"](heatRule.maxValue);
                            if (ruleTarget instanceof __WEBPACK_IMPORTED_MODULE_1__core_Sprite__["a" /* Sprite */]) {
                                var anySprite = ruleTarget;
                                var propertyField = anySprite.propertyFields[property];
                                if (propertyField && ruleTarget.dataItem) {
                                    var dataContext = ruleTarget.dataItem.dataContext;
                                    if (dataContext && __WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["hasValue"](dataContext[propertyField])) {
                                        return value;
                                    }
                                }
                            }
                            var dataItem = ruleTarget.dataItem;
                            if (!__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](minValue)) {
                                minValue = seriesDataItem_1.values[dataField_1].low;
                            }
                            if (!__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](maxValue)) {
                                maxValue = seriesDataItem_1.values[dataField_1].high;
                            }
                            if (dataItem) {
                                var workingValue = dataItem.values[dataField_1].workingValue;
                                if (__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["hasValue"](min_1) && __WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["hasValue"](max_1) && __WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](minValue) && __WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](maxValue) && __WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](workingValue)) {
                                    var percent = (workingValue - minValue) / (maxValue - minValue);
                                    if (__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](min_1)) {
                                        return min_1 + (max_1 - min_1) * percent;
                                    }
                                    else if (min_1 instanceof __WEBPACK_IMPORTED_MODULE_11__core_utils_Color__["a" /* Color */]) {
                                        return new __WEBPACK_IMPORTED_MODULE_11__core_utils_Color__["a" /* Color */](__WEBPACK_IMPORTED_MODULE_18__core_utils_Colors__["interpolate"](min_1.rgb, max_1.rgb, percent));
                                    }
                                }
                            }
                            return value;
                        });
                    }
                });
            }
            return this._heatRules;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Processes JSON-based config before it is applied to the object.
     *
     * @ignore Exclude from docs
     * @param {object}  config  Config
     */
    Series.prototype.processConfig = function (config) {
        var heatRules;
        if (config) {
            // Set up bullets
            if (__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["hasValue"](config.bullets) && __WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isArray"](config.bullets)) {
                for (var i = 0, len = config.bullets.length; i < len; i++) {
                    var bullets = config.bullets[i];
                    if (!__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["hasValue"](bullets.type)) {
                        bullets.type = "Bullet";
                    }
                }
            }
            // Let's take heatRules out of the config, so that we can process
            // them later, when bullets are already there
            if (__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["hasValue"](config.heatRules) && __WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isArray"](config.heatRules)) {
                heatRules = config.heatRules;
                delete config.heatRules;
            }
        }
        _super.prototype.processConfig.call(this, config);
        // Process heat rules again, when all other lements are ready
        if (heatRules) {
            for (var i = 0, len = heatRules.length; i < len; i++) {
                var rule = heatRules[i];
                // Resolve target
                var target = this;
                if (__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["hasValue"](rule.target) && __WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isString"](rule.target)) {
                    // Check if we can find this element by id
                    if (this.map.hasKey(rule.target)) {
                        target = this.map.getKey(rule.target);
                    }
                    else {
                        var parts = rule.target.split(".");
                        for (var x = 0; x < parts.length; x++) {
                            if (target instanceof __WEBPACK_IMPORTED_MODULE_2__core_utils_List__["b" /* List */]) {
                                target = target.getIndex(__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["toNumber"](parts[x]));
                            }
                            else {
                                target = target[parts[x]];
                            }
                        }
                    }
                }
                rule.target = target;
                // Resolve colors and percents
                if (__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["hasValue"](rule.min)) {
                    rule.min = this.maybeColorOrPercent(rule.min);
                }
                if (__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["hasValue"](rule.max)) {
                    rule.max = this.maybeColorOrPercent(rule.max);
                }
            }
            _super.prototype.processConfig.call(this, {
                heatRules: heatRules
            });
        }
    };
    /**
     * This function is used to sort element's JSON config properties, so that
     * some properties that absolutely need to be processed last, can be put at
     * the end.
     *
     * @ignore Exclude from docs
     * @param  {string}  a  Element 1
     * @param  {string}  b  Element 2
     * @return {Ordering}   Sorting number
     */
    Series.prototype.configOrder = function (a, b) {
        if (a == b) {
            return 0;
        }
        // Must come last
        else if (a == "heatRules") {
            return 1;
        }
        else if (b == "heatRules") {
            return -1;
        }
        else {
            return _super.prototype.configOrder.call(this, a, b);
        }
    };
    return Series;
}(__WEBPACK_IMPORTED_MODULE_0__core_Component__["a" /* Component */]));

/**
 * Register class, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_10__core_Registry__["b" /* registry */].registeredClasses["Series"] = Series;
__WEBPACK_IMPORTED_MODULE_10__core_Registry__["b" /* registry */].registeredClasses["SeriesDataItem"] = SeriesDataItem;
//# sourceMappingURL=Series.js.map

/***/ }),
/* 62 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return CategoryAxisDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CategoryAxis; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Axis__ = __webpack_require__(80);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_Dictionary__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__CategoryAxisBreak__ = __webpack_require__(158);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_Type__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__ = __webpack_require__(3);
/**
 * Category axis module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */







/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[CategoryAxis]].
 *
 * @see {@link DataItem}
 */
var CategoryAxisDataItem = /** @class */ (function (_super) {
    __extends(CategoryAxisDataItem, _super);
    /**
     * Constructor
     */
    function CategoryAxisDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "CategoryAxisDataItem";
        _this.text = "{category}";
        _this.locations.category = 0;
        _this.locations.startCategory = 0;
        _this.locations.endCategory = 1;
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(CategoryAxisDataItem.prototype, "category", {
        /**
         * @return {string} Category
         */
        get: function () {
            return this.properties["category"];
        },
        /**
         * Category.
         *
         * @param {string}  value  Category
         */
        set: function (value) {
            this.setProperty("category", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryAxisDataItem.prototype, "startCategory", {
        /**
         * @param {string} Category
         */
        get: function () {
            return this.properties["category"];
        },
        /**
         * An alias to `category`.
         *
         * @param {string}  value  Category
         */
        set: function (value) {
            this.setProperty("category", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryAxisDataItem.prototype, "endCategory", {
        /**
         * @return {string} End category
         */
        get: function () {
            return this.properties["endCategory"];
        },
        /**
         * End category.
         *
         * Used for items that span several categories, like [[CategoryAxisBreak]].
         *
         * @param {string}  value  End category
         */
        set: function (value) {
            this.setProperty("endCategory", value);
        },
        enumerable: true,
        configurable: true
    });
    return CategoryAxisDataItem;
}(__WEBPACK_IMPORTED_MODULE_0__Axis__["b" /* AxisDataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Used to create a category-based axis for the chart.
 *
 * ```TypeScript
 * // Create the axis
 * let xAxis = chart.xAxes.push(new am4charts.CategoryAxis());
 *
 * // Set settings
 * xAxis.title.text = "Clients";
 * ```
 * ```JavaScript
 * // Create the axis
 * var valueAxis = chart.xAxes.push(new am4charts.CategoryAxis());
 *
 * // Set settings
 * valueAxis.title.text = "Clients";
 * ```
 * ```JSON
 * "xAxes": [{
 *   "type": "CategoryAxis",
 *   "title": {
 *     "text": "Clients"
 *   }
 * }]
 * ```
 *
 * @see {@link ICategoryAxisEvents} for a list of available Events
 * @see {@link ICategoryAxisAdapters} for a list of available Adapters
 * @important
 */
var CategoryAxis = /** @class */ (function (_super) {
    __extends(CategoryAxis, _super);
    /**
     * Constructor
     */
    function CategoryAxis() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * A collection that holds Axis' data items sorted by each category.
         *
         * @type {Dictionary}
         */
        _this.dataItemsByCategory = new __WEBPACK_IMPORTED_MODULE_2__core_utils_Dictionary__["a" /* Dictionary */]();
        /**
         * [_preBuildCount description]
         *
         * @todo Description
         * @type {number}
         */
        _this._preBuildCount = 0;
        _this.className = "CategoryAxis";
        // Set field name
        _this.axisFieldName = "category";
        // Add adapter to strip down `#id=xxx` from categories
        _this.adapter.add("label", function (value) {
            value = value.replace(/\#id=.*$/, "");
            return value;
        });
        _this._prebuildDisposer = __WEBPACK_IMPORTED_MODULE_1__core_Registry__["b" /* registry */].events.on("enterframe", _this.prebuildDataItem, _this);
        _this._lastDataItem = _this.createDataItem();
        _this._lastDataItem.component = _this;
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * [prebuildDataItem description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    CategoryAxis.prototype.prebuildDataItem = function () {
        if (this.dataItems.length > 0) {
            this.dataItems.getIndex(this._preBuildCount);
            var dataItem = this.dataItems.getIndex(this._preBuildCount);
            if (dataItem.__disabled) {
                this.appendDataItem(dataItem);
                this.validateDataElement(dataItem);
                dataItem.__disabled = true;
            }
            this._preBuildCount++;
            if (this._preBuildCount >= this.dataItems.length - 1) {
                this._prebuildDisposer.dispose();
            }
        }
    };
    /**
     * Returns a new/empty [[DataItem]] of the type appropriate for this object.
     *
     * @see {@link DataItem}
     * @return {CategoryAxisDataItem} Data Item
     */
    CategoryAxis.prototype.createDataItem = function () {
        return new CategoryAxisDataItem();
    };
    /**
     * Returns a new/empty [[AxisBreak]] of the appropriate type.
     *
     * @return {CategoryAxisBreak} Axis break
     */
    CategoryAxis.prototype.createAxisBreak = function () {
        return new __WEBPACK_IMPORTED_MODULE_3__CategoryAxisBreak__["a" /* CategoryAxisBreak */]();
    };
    /**
     * Validates the data range.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     */
    CategoryAxis.prototype.validateDataRange = function () {
        var _this = this;
        var dataCount = this.dataItems.length;
        var startIndex = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["fitToRange"](Math.floor(this.start * dataCount - 1), 0, dataCount);
        var endIndex = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["fitToRange"](Math.ceil(this.end * dataCount), 0, dataCount);
        if (this.renderer.invalid) {
            this.renderer.validate();
        }
        // find frequency at which we'll show items
        var maxCount = this.renderer.axisLength / this.renderer.minGridDistance;
        var frequency = Math.ceil((endIndex - startIndex) / maxCount);
        this._startIndex = Math.floor(startIndex / frequency) * frequency;
        this._endIndex = Math.ceil(this.end * dataCount);
        this.fixAxisBreaks();
        if (this._startIndex == this._endIndex) {
            this._endIndex++;
        }
        this._frequency = frequency;
        _super.prototype.validateDataRange.call(this);
        __WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__["each"](this._series.iterator(), function (series) {
            if ((series.xAxis instanceof CategoryAxis) && (series.yAxis instanceof CategoryAxis)) {
                series.invalidateDataRange();
            }
            else {
                series.start = _this.start;
                series.end = _this.end;
                // range might not change, but axis breaks might.
                if (_this.axisBreaks.length > 0) {
                    series.invalidateDataRange();
                }
            }
        });
    };
    /**
     * Validates the whole axis. Causes it to redraw.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     */
    CategoryAxis.prototype.validate = function () {
        var _this = this;
        _super.prototype.validate.call(this);
        this.maxZoomFactor = this.dataItems.length;
        if (this.dataItems.length <= 0) {
            this.maxZoomFactor = 1;
        }
        this.resetIterators();
        __WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__["each"](this.dataItems.iterator(), function (dataItem) {
            dataItem.__disabled = true;
        });
        // it's important to use protected variables here, as getters will return 0 - length
        // TODO use iterator instead
        // @ todo: not solved cat axis item fading
        var startIndex = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["max"](0, this._startIndex - this._frequency);
        var endIndex = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["min"](this.dataItems.length, this._endIndex + this._frequency);
        var itemIndex = 0;
        for (var i = startIndex; i < endIndex; i = i + this._frequency) {
            if (i <= this.dataItems.length) {
                var dataItem = this.dataItems.getIndex(i);
                var axisBreak = this.isInBreak(i);
                if (!axisBreak) {
                    this.appendDataItem(dataItem);
                    this.validateDataElement(dataItem, itemIndex);
                }
                itemIndex++;
            }
        }
        this.appendDataItem(this._lastDataItem);
        this.validateDataElement(this._lastDataItem, itemIndex + 1, this.dataItems.length);
        var axisBreaks = this.axisBreaks;
        __WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__["each"](axisBreaks.iterator(), function (axisBreak) {
            var adjustedStartValue = axisBreak.adjustedStartValue;
            var adjustedEndValue = axisBreak.adjustedEndValue;
            if (__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["intersect"]({ start: adjustedStartValue, end: adjustedEndValue }, { start: _this._startIndex, end: _this._endIndex })) {
                var frequency = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["fitToRange"](Math.ceil(_this._frequency / axisBreak.breakSize), 1, adjustedEndValue - adjustedStartValue);
                var itemIndex_1 = 0;
                // TODO use iterator instead
                for (var b = adjustedStartValue; b <= adjustedEndValue; b = b + frequency) {
                    var dataItem = _this.dataItems.getIndex(b);
                    _this.appendDataItem(dataItem);
                    _this.validateDataElement(dataItem, itemIndex_1);
                    itemIndex_1++;
                }
            }
        });
    };
    /**
     * [validateDataElement description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param {CategoryAxisDataItem}  dataItem   [description]
     * @param {number}                itemIndex  [description]
     */
    CategoryAxis.prototype.validateDataElement = function (dataItem, itemIndex, index) {
        _super.prototype.validateDataElement.call(this, dataItem);
        dataItem.__disabled = false;
        var renderer = this.renderer;
        if (!__WEBPACK_IMPORTED_MODULE_5__core_utils_Type__["isNumber"](index)) {
            index = this.categoryToIndex(dataItem.category);
        }
        var endIndex = this.categoryToIndex(dataItem.endCategory);
        if (!__WEBPACK_IMPORTED_MODULE_5__core_utils_Type__["isNumber"](endIndex)) {
            endIndex = index;
        }
        var position = this.indexToPosition(index, dataItem.locations.category);
        var endPosition = this.indexToPosition(endIndex, dataItem.locations.endCategory);
        dataItem.position = position;
        var fillEndIndex;
        var fillPosition;
        var fillEndPosition;
        if (dataItem.isRange) {
            fillEndIndex = endIndex;
            fillPosition = this.indexToPosition(index, dataItem.locations.category);
            fillEndPosition = this.indexToPosition(fillEndIndex, dataItem.locations.endCategory);
        }
        else {
            fillEndIndex = index + this._frequency;
            fillPosition = this.indexToPosition(index, dataItem.axisFill.location);
            fillEndPosition = this.indexToPosition(fillEndIndex, dataItem.axisFill.location);
        }
        dataItem.point = renderer.positionToPoint(position);
        var tick = dataItem.tick;
        if (tick) {
            renderer.updateTickElement(tick, position, endPosition);
        }
        var grid = dataItem.grid;
        if (grid) {
            renderer.updateGridElement(grid, position, endPosition);
        }
        var label = dataItem.label;
        if (label) {
            dataItem.text = dataItem.text; //@todo if this is left, kills custom data item text. this.adapter.apply("label", dataItem.category);
            renderer.updateLabelElement(label, position, endPosition);
        }
        var fill = dataItem.axisFill;
        if (fill) {
            renderer.updateFillElement(fill, fillPosition, fillEndPosition);
            if (!dataItem.isRange) {
                this.fillRule(dataItem, itemIndex);
            }
        }
        var mask = dataItem.mask;
        if (mask) {
            renderer.updateFillElement(mask, fillPosition, fillEndPosition);
        }
    };
    /**
     * Processes the axis data item.
     *
     * @ignore Exclude from docs
     * @param {CategoryAxisDataItem}  dataItem     Data item
     * @param {Object}                dataContext  The raw data that corresponds to this data item
     */
    CategoryAxis.prototype.processDataItem = function (dataItem, dataContext) {
        // creat a collection for fast access
        _super.prototype.processDataItem.call(this, dataItem, dataContext);
        // check if such category already exists
        var existingDataItem = this.dataItemsByCategory.getKey(dataItem.category);
        if (existingDataItem != dataItem) {
            this.dataItems.remove(existingDataItem);
        }
        this.dataItemsByCategory.setKey(dataItem.category, dataItem);
    };
    /**
     * Converts a category index to an actual screen coordinate on the axis.
     *
     * `location` identifies relative location within category. 0 - beginning,
     * 0.5 - middle, 1 - end, and anything inbetween.
     *
     * @param  {number}                     index     Index
     * @param  {AxisItemLocation | number}  location  Location (0-1)
     * @return {number}                               Position (px)
     */
    CategoryAxis.prototype.indexToPosition = function (index, location) {
        if (!__WEBPACK_IMPORTED_MODULE_5__core_utils_Type__["isNumber"](location)) {
            location = 0.5;
        }
        var startIndex = this.startIndex;
        var endIndex = this.endIndex;
        var difference = this.adjustDifference(startIndex, endIndex);
        var cellStartLocation = this.renderer.cellStartLocation;
        var cellEndLocation = this.renderer.cellEndLocation;
        difference -= cellStartLocation;
        difference -= (1 - cellEndLocation);
        var axisBreaks = this.axisBreaks;
        __WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__["eachContinue"](axisBreaks.iterator(), function (axisBreak) {
            var breakStartIndex = axisBreak.adjustedStartValue;
            var breakEndIndex = axisBreak.adjustedEndValue;
            if (index < startIndex) {
                return false;
            }
            if (__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["intersect"]({ start: breakStartIndex, end: breakEndIndex }, { start: startIndex, end: endIndex })) {
                breakStartIndex = Math.max(startIndex, breakStartIndex);
                breakEndIndex = Math.min(endIndex, breakEndIndex);
                var breakSize = axisBreak.breakSize;
                // value to the right of break end
                if (index > breakEndIndex) {
                    startIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);
                }
                // value to the left of break start
                else if (index < breakStartIndex) {
                }
                // value within break
                else {
                    index = breakStartIndex + (index - breakStartIndex) * breakSize;
                }
            }
            return true;
        });
        return __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["round"]((index + location - cellStartLocation - startIndex) / difference, 5);
    };
    /**
     * Converts a string category name to relative position on axis.
     *
     * `location` identifies relative location within category. 0 - beginning,
     * 0.5 - middle, 1 - end, and anything inbetween.
     *
     * @param  {string}            category  Category name
     * @param  {AxisItemLocation}  location  Location (0-1)
     * @return {number}                      Position
     */
    CategoryAxis.prototype.categoryToPosition = function (category, location) {
        var index = this.categoryToIndex(category);
        return this.indexToPosition(index, location);
    };
    /**
     * Converts a string category name to a orientation point (x, y, angle) on axis
     *
     * `location` identifies relative location within category. 0 - beginning,
     * 0.5 - middle, 1 - end, and anything inbetween.
     * @param  {string}            category  Category name
     * @param  {AxisItemLocation}  location  Location (0-1)
     * @return {IOrientationPoint}  Orientation point
     */
    CategoryAxis.prototype.categoryToPoint = function (category, location) {
        var position = this.categoryToPosition(category, location);
        var point = this.renderer.positionToPoint(position);
        var angle = this.renderer.positionToAngle(position);
        return { x: point.x, y: point.y, angle: angle };
    };
    /**
     * Converts a string category name to a orientation point (x, y, angle) on axis
     *
     * `location` identifies relative location within category. 0 - beginning,
     * 0.5 - middle, 1 - end, and anything inbetween.
     * @param  {string}            category  Category name
     * @param  {AxisItemLocation}  location  Location (0-1)
     * @return {IOrientationPoint}  Orientation point
     */
    CategoryAxis.prototype.anyToPoint = function (category, location) {
        return this.categoryToPoint(category, location);
    };
    /**
     * Converts a string category name to relative position on axis.
     *
     * An alias to `categoryToPosition()`.
     *
     * @param  {string}            category  Category name
     * @param  {AxisItemLocation}  location  Location (0-1)
     * @return {number}                      Relative position
     */
    CategoryAxis.prototype.anyToPosition = function (category, location) {
        return this.categoryToPosition(category, location);
    };
    /**
     * Converts named category to an index of data item it corresponds to.
     *
     * @param  {string}  category  Category
     * @return {number}            Data item index
     */
    CategoryAxis.prototype.categoryToIndex = function (category) {
        var dataItem = this.dataItemsByCategory.getKey(category);
        if (dataItem) {
            return dataItem.index;
        }
    };
    /**
     * Zooms the axis to specific named ctaegories.
     *
     * @param {string}  startCategory  Start category
     * @param {string}  endCategory    End category
     */
    CategoryAxis.prototype.zoomToCategories = function (startCategory, endCategory) {
        this.zoomToIndexes(this.categoryToIndex(startCategory), this.categoryToIndex(endCategory));
    };
    /**
     * [getAnyRangePath description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {string}           start         [description]
     * @param  {string}           end           [description]
     * @param  {AxisItemLocation} startLocation [description]
     * @param  {AxisItemLocation} endLocation   [description]
     * @return {string}                         [description]
     */
    CategoryAxis.prototype.getAnyRangePath = function (start, end, startLocation, endLocation) {
        var startPos = this.categoryToPosition(start, startLocation);
        var endPos = this.categoryToPosition(end, endLocation);
        return this.getPositionRangePath(startPos, endPos); // Base class (Axis) gets range shape from AxisRenderer
    };
    /**
     * Takes an absolute position (px) within axis and adjust it to a specific
     * `location` within category it corresponds to.
     *
     * @param  {number}            position  Source position (px)
     * @param  {AxisItemLocation}  location  Location within category (0-1)
     * @return {number}                      Adjusted position (px)
     */
    CategoryAxis.prototype.roundPosition = function (position, location) {
        var index = this.positionToIndex(position);
        return this.indexToPosition(index, location);
    };
    /**
     * Returns a data item from Series that corresponds to a specific absolute
     * position on the Axis.
     *
     * @param  {XYSeries}          series    Target series
     * @param  {number}            position  Position (px)
     * @return {XYSeriesDataItem}            Series data item
     */
    CategoryAxis.prototype.getSeriesDataItem = function (series, position) {
        return series.dataItems.getIndex(this.positionToIndex(position));
    };
    /**
     * Returns the X coordinate for series' data item.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     * @param  {SeriesDataItem}  dataItem  Data item
     * @param  {string}          key       Category
     * @param  {number}          location  Location (0-1)
     * @return {number}                    X coordinate (px)
     */
    CategoryAxis.prototype.getX = function (dataItem, key, location) {
        var position = this.categoryToPosition(dataItem.categories[key], location);
        if (__WEBPACK_IMPORTED_MODULE_5__core_utils_Type__["isNaN"](position)) {
            return this.basePoint.x;
        }
        else {
            return this.renderer.positionToPoint(position).x;
        }
    };
    /**
     * Returns the Y coordinate for series' data item.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     * @param  {SeriesDataItem}  dataItem  Data item
     * @param  {string}          key       Category
     * @param  {number}          location  Location (0-1)
     * @return {number}                    Y coordinate (px)
     */
    CategoryAxis.prototype.getY = function (dataItem, key, location) {
        var position = this.categoryToPosition(dataItem.categories[key], location);
        if (__WEBPACK_IMPORTED_MODULE_5__core_utils_Type__["isNaN"](position)) {
            return this.basePoint.y;
        }
        else {
            return this.renderer.positionToPoint(position).y;
        }
    };
    /**
     * Returns an angle for series data item.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     * @param  {XYSeriesDataItem}  dataItem  Data item
     * @param  {string}            key       Category
     * @param  {number}            location  Location (0-1)
     * @param  {string}            stackKey  Stack key (?)
     * @return {number}                      Angle
     */
    CategoryAxis.prototype.getAngle = function (dataItem, key, location, stackKey) {
        return this.positionToAngle(this.categoryToPosition(dataItem.categories[key], location));
    };
    /**
     * Returns an absolute pixel coordinate of the start of the cell (category),
     * that specific position value falls into.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     * @param  {number}  position  Position (px)
     * @return {number}            Cell start position (px)
     */
    CategoryAxis.prototype.getCellStartPosition = function (position) {
        return this.roundPosition(position, 0);
    };
    /**
     * Returns an absolute pixel coordinate of the end of the cell (category),
     * that specific position value falls into.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     * @param  {number}  position  Position (px)
     * @return {number}            Cell end position (px)
     */
    CategoryAxis.prototype.getCellEndPosition = function (position) {
        return this.roundPosition(position, 1);
    };
    /**
     * Returns text to show in a category tooltip, based on specific position
     * within axis.
     *
     * @ignore Exclude from docs
     * @param  {number}  position  Position (px)
     * @return {string}            Label (category)
     */
    CategoryAxis.prototype.getTooltipText = function (position) {
        var dataItem = this.dataItems.getIndex(this.positionToIndex(position));
        if (dataItem) {
            return this.adapter.apply("getTooltipText", dataItem.category);
        }
    };
    /**
     * Returns an index of the category that corresponds to specific pixel
     * position within axis.
     *
     * @param  {number}  position  Position (px)
     * @return {number}            Category index
     */
    CategoryAxis.prototype.positionToIndex = function (position) {
        position = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["round"](position, 10);
        var startIndex = this.startIndex;
        var endIndex = this.endIndex;
        var difference = endIndex - startIndex;
        var axisBreaks = this.axisBreaks;
        var index = null;
        // in case we have some axis breaks
        __WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__["eachContinue"](axisBreaks.iterator(), function (axisBreak) {
            var breakStartPosition = axisBreak.startPosition;
            var breakEndPosition = axisBreak.endPosition;
            var breakStartIndex = axisBreak.adjustedStartValue;
            var breakEndIndex = axisBreak.adjustedEndValue;
            breakStartIndex = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["max"](breakStartIndex, startIndex);
            breakEndIndex = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["min"](breakEndIndex, endIndex);
            var breakSize = axisBreak.breakSize;
            difference -= (breakEndIndex - breakStartIndex) * (1 - breakSize);
            // position to the right of break end
            if (position > breakEndPosition) {
                startIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);
            }
            // position to the left of break start
            else if (position < breakStartPosition) {
            }
            // value within break
            else {
                var breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);
                index = breakStartIndex + Math.round(breakPosition * (breakEndIndex - breakStartIndex));
                return false;
            }
            return true;
        });
        if (!__WEBPACK_IMPORTED_MODULE_5__core_utils_Type__["isNumber"](index)) {
            index = Math.floor(position * difference + startIndex);
        }
        if (index >= endIndex) {
            index--;
        }
        return index;
    };
    /**
     * Returns category based on position.
     *
     * @param  {number}  position  Relative position on axis (0-1)
     * @return {string}            Position label
     */
    CategoryAxis.prototype.getPositionLabel = function (position) {
        var dataItem = this.dataItems.getIndex(this.positionToIndex(position));
        if (dataItem) { // @martynas todo: added this check, but this means that some aria label might not be received?
            return dataItem.category;
        }
    };
    Object.defineProperty(CategoryAxis.prototype, "basePoint", {
        /**
         * [basePoint description]
         *
         * @todo Description
         * @return {IPoint} Base point
         */
        get: function () {
            // This makes base grid to be drawn at the end of the axis and adds extra
            // grid which we need to nicely close the chart.
            return this.renderer.positionToPoint(1);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Initializes Axis' renderer.
     *
     * @ignore Exclude from docs
     */
    CategoryAxis.prototype.initRenderer = function () {
        _super.prototype.initRenderer.call(this);
        var renderer = this.renderer;
        renderer.baseGrid.disabled = true;
    };
    return CategoryAxis;
}(__WEBPACK_IMPORTED_MODULE_0__Axis__["a" /* Axis */]));

/**
 * Register class, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["b" /* registry */].registeredClasses["CategoryAxis"] = CategoryAxis;
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["b" /* registry */].registeredClasses["CategoryAxisDataItem"] = CategoryAxisDataItem;
//# sourceMappingURL=CategoryAxis.js.map

/***/ }),
/* 63 */,
/* 64 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Rectangle; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Math__ = __webpack_require__(2);
/**
 * Functionality for drawing rectangles.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Used to draw a rectangle.
 *
 * @see {@link IRectangleEvents} for a list of available events
 * @see {@link IRectangleAdapters} for a list of available Adapters
 */
var Rectangle = /** @class */ (function (_super) {
    __extends(Rectangle, _super);
    /**
     * Constructor
     * * Creates a `<rect>` element
     * * Creates default state
     */
    function Rectangle() {
        var _this = _super.call(this) || this;
        _this.className = "Rectangle";
        _this.element = _this.paper.add("rect");
        _this.pixelPerfect = true;
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the element.
     *
     * @ignore Exclude from docs
     */
    Rectangle.prototype.draw = function () {
        _super.prototype.draw.call(this);
        var precision = this._positionPrecision;
        if (this.pixelPerfect) {
            precision = 0;
        }
        var w = __WEBPACK_IMPORTED_MODULE_2__utils_Math__["round"](this.innerWidth, precision);
        var h = __WEBPACK_IMPORTED_MODULE_2__utils_Math__["round"](this.innerHeight, precision);
        this.element.attr({
            "width": w,
            "height": h
        });
    };
    /**
     * Updates bounding box based on element dimension settings.
     *
     * @ignore Exclude from docs
     */
    Rectangle.prototype.measureElement = function () {
        this.bbox = {
            x: 0,
            y: 0,
            width: this.innerWidth,
            height: this.innerHeight
        };
    };
    return Rectangle;
}(__WEBPACK_IMPORTED_MODULE_0__Sprite__["a" /* Sprite */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__Registry__["b" /* registry */].registeredClasses["Rectangle"] = Rectangle;
//# sourceMappingURL=Rectangle.js.map

/***/ }),
/* 65 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AxisRenderer; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_utils_Disposer__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AxisLine__ = __webpack_require__(133);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__AxisFill__ = __webpack_require__(98);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Grid__ = __webpack_require__(99);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__AxisLabel__ = __webpack_require__(100);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__AxisTick__ = __webpack_require__(134);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__core_utils_Math__ = __webpack_require__(2);
/**
 * Module, defining base Axis Renderer.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */











/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * A base class for all axis renderers.
 *
 * @see {@link IAxisRendererEvents} for a list of available events
 * @see {@link IAxisRendererAdapters} for a list of available Adapters
 */
var AxisRenderer = /** @class */ (function (_super) {
    __extends(AxisRenderer, _super);
    /**
     * Constructor.
     *
     * @param {Axis} axis Related axis
     */
    function AxisRenderer() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * A related chart.
         *
         * @todo Description
         * @type {MutableValueDisposer}
         */
        _this._chart = new __WEBPACK_IMPORTED_MODULE_1__core_utils_Disposer__["d" /* MutableValueDisposer */]();
        _this.className = "AxisRenderer";
        // Set defaults
        _this.minGridDistance = 50;
        _this.inside = false;
        _this.inversed = false;
        _this.tooltipLocation = 0.5;
        _this.fullWidthTooltip = false;
        _this.cellStartLocation = 0;
        _this.cellEndLocation = 1;
        _this.minLabelPosition = 0;
        _this.maxLabelPosition = 1;
        _this.shouldClone = false;
        var gridContainer = _this.createChild(__WEBPACK_IMPORTED_MODULE_0__core_Container__["a" /* Container */]);
        gridContainer.shouldClone = false;
        gridContainer.layout = "none";
        gridContainer.isMeasured = false;
        gridContainer.width = Object(__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__["c" /* percent */])(100);
        gridContainer.height = Object(__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__["c" /* percent */])(100);
        _this.gridContainer = gridContainer;
        var breakContainer = _this.createChild(__WEBPACK_IMPORTED_MODULE_0__core_Container__["a" /* Container */]);
        breakContainer.shouldClone = false;
        breakContainer.isMeasured = false;
        breakContainer.layout = "none";
        breakContainer.width = Object(__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__["c" /* percent */])(100);
        breakContainer.height = Object(__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__["c" /* percent */])(100);
        _this.breakContainer = breakContainer;
        _this.line = _this.createChild(__WEBPACK_IMPORTED_MODULE_2__AxisLine__["a" /* AxisLine */]); // yes, to axis, not to renderer
        _this.line.shouldClone = false;
        _this.line.strokeOpacity = 0;
        _this.ticks.template.strokeOpacity = 0;
        //this.ticks.template.disabled = true;
        //this.axisFills.template.disabled = true;
        var baseGrid = _this.createChild(__WEBPACK_IMPORTED_MODULE_4__Grid__["a" /* Grid */]);
        baseGrid.shouldClone = false;
        _this.baseGrid = baseGrid;
        //this.gridContainer.events.on("maxsizechanged", this.invalidateAxisItems, this);
        // Make elements disposable
        var disposers = _this._disposers;
        disposers.push(baseGrid);
        disposers.push(_this.line);
        disposers.push(gridContainer);
        disposers.push(breakContainer);
        disposers.push(_this._chart);
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(AxisRenderer.prototype, "axis", {
        get: function () {
            return this._axis;
        },
        set: function (axis) {
            this.setAxis(axis);
        },
        enumerable: true,
        configurable: true
    });
    /**
    * @ignore
    */
    AxisRenderer.prototype.setAxis = function (axis) {
        this._axis = axis;
        this.baseGrid.parent = axis;
        this.line.parent = axis;
    };
    /**
     * Called when rendered is attached to an Axis, as well as a property of
     * Axis that might affect the appearance is updated.
     *
     * E.g. `axis.opposite`, `axis.inside`, etc.
     *
     * This method is called **before** draw, so that any related setting
     * changed in this method can be changed.
     *
     * @todo Description (review)
     * @ignore Exclude from docs
     */
    AxisRenderer.prototype.processRenderer = function () {
        this.events.on("sizechanged", this.updateTooltip, this);
        this.events.on("positionchanged", this.updateTooltip, this);
        this.labels.template.inside = this.inside;
        this.ticks.template.inside = this.inside;
    };
    /**
     * Updates Axis' tooltip.
     *
     * @todo Description (review)
     * @ignore Exclude from docs
     */
    AxisRenderer.prototype.updateTooltip = function () {
        // This is a placeholder method for extending classes to override.
    };
    Object.defineProperty(AxisRenderer.prototype, "axisLength", {
        /**
         * Returns actual length of the Axis, in pixels.
         *
         * @return {number} Length (px)
         */
        get: function () {
            // This is a placeholder method for extending classes to override.
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Re-positions an element to new coordinates.
     *
     * @ignore Exclude from docs
     * @param {Sprite}  item   A target element
     * @param {IPoint}  point  New coordinates
     */
    AxisRenderer.prototype.positionItem = function (item, point) {
        if (item) {
            item.moveTo(point);
        }
    };
    /**
     * Converts relative position on axis to point coordinates.
     *
     * @ignore Exclude from docs
     * @param  {number}  position  Position (0-1)
     * @return {IPoint}            Point
     */
    AxisRenderer.prototype.positionToPoint = function (position) {
        // This is a placeholder method for extending classes to override.
        return { x: 0, y: 0 };
    };
    /**
     * Converts relative position on axis to angle.
     *
     * @ignore Exclude from docs
     * @todo Description (review / units)
     * @param  {number}  position  Position (0-1)
     * @return {number}            Angle
     */
    AxisRenderer.prototype.positionToAngle = function (position) {
        // This is a placeholder method for extending classes to override.
        return 0;
    };
    /**
     * Converts relative position (0-1) on axis to a pixel coordinate.
     *
     * @todo Description (review)
     * @param  {number}  position  Position (0-1)
     * @return {number}            Coordinate (px)
     */
    AxisRenderer.prototype.positionToCoordinate = function (position) {
        var coordinate;
        var axis = this.axis;
        var axisFullLength = axis.axisFullLength;
        if (axis.renderer.inversed) {
            coordinate = (axis.end - position) * axisFullLength;
        }
        else {
            coordinate = (position - axis.start) * axisFullLength;
        }
        return __WEBPACK_IMPORTED_MODULE_10__core_utils_Math__["round"](coordinate, 1);
    };
    AxisRenderer.prototype.getHeight = function () {
        var axis = this.axis;
        if (axis && axis.chart) {
            var chart = this.axis.chart;
            if (chart.plotContainer) {
                return chart.plotContainer.pixelHeight;
            }
        }
        return this.gridContainer.pixelHeight;
    };
    AxisRenderer.prototype.getWidth = function () {
        var axis = this.axis;
        if (axis && axis.chart) {
            var chart = this.axis.chart;
            if (chart.plotContainer) {
                return chart.plotContainer.pixelWidth;
            }
        }
        return this.gridContainer.pixelWidth;
    };
    /**
     * Converts a coordinate in pixels to a relative position. (0-1)
     *
     * @todo Description (review)
     * @param  {number}  coordinate  Coordinate (px)
     * @return {number}              Position (0-1)
     */
    AxisRenderer.prototype.coordinateToPosition = function (coordinate) {
        var position;
        var axis = this.axis;
        var axisFullLength = axis.axisFullLength;
        if (axis.renderer.inversed) {
            position = axis.end - coordinate / axisFullLength;
        }
        else {
            position = coordinate / axisFullLength + axis.start;
        }
        return __WEBPACK_IMPORTED_MODULE_10__core_utils_Math__["round"](position, 5);
    };
    /**
     * Converts a point at specific coordinates to a relative position (0-1)
     * on the axis.
     *
     * @ignore Exclude from docs
     * @param  {IPoint}  point  Point
     * @return {number}         Position (0-1)
     */
    AxisRenderer.prototype.pointToPosition = function (point) {
        // This is a placeholder method for extending classes to override.
        return 0;
    };
    /**
     * [getPositionRangePath description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {number}  startPosition  Starting position
     * @param  {number}  endPosition    End position
     * @return {string}                 SVG path
     */
    AxisRenderer.prototype.getPositionRangePath = function (startPosition, endPosition) {
        return "";
    };
    /**
     * Invalidates all axis data items, effectively causing them re-evaluated.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     */
    AxisRenderer.prototype.invalidateAxisItems = function () {
        var axis = this.axis;
        if (axis) {
            axis.invalidateDataItems();
        }
    };
    /**
     * Updates and positions a grid element.
     *
     * @ignore Exclude from docs
     * @param {Grid}    grid         Grid element
     * @param {number}  position     Starting position
     * @param {number}  endPosition  End position
     */
    AxisRenderer.prototype.updateGridElement = function (grid, position, endPosition) {
        // This is a placeholder method for extending classes to override.
    };
    /**
     * Updates and positions a tick element.
     *
     * @ignore Exclude from docs
     * @param {AxisTick}  tick         Tick element
     * @param {number}    position     Starting position
     * @param {number}    endPosition  End position
     */
    AxisRenderer.prototype.updateTickElement = function (tick, position, endPosition) {
        // This is a placeholder method for extending classes to override.
    };
    /**
     * Updates and positions a label element.
     *
     * @ignore Exclude from docs
     * @param {AxisLabel}  label        Label element
     * @param {number}     position     Starting position
     * @param {number}     endPosition  Ending position
     */
    AxisRenderer.prototype.updateLabelElement = function (label, position, endPosition) {
        // This is a placeholder method for extending classes to override.
    };
    /**
     * Updates and positions the axis line element.
     *
     * @ignore Exclude from docs
     * @param {AxisFill}  fill         Fill element
     * @param {number}    position     Starting position
     * @param {number}    endPosition  Ending position
     */
    AxisRenderer.prototype.updateFillElement = function (fill, position, endPosition) {
        fill.startPosition = position;
        fill.endPosition = endPosition;
    };
    /**
     * Updates and positions the axis line element.
     *
     * @ignore Exclude from docs
     */
    AxisRenderer.prototype.updateAxisLine = function () {
        // This is a placeholder method for extending classes to override.
    };
    /**
     * Updates and positions the base grid element.
     *
     * @ignore Exclude from docs
     */
    AxisRenderer.prototype.updateBaseGridElement = function () {
        // This is a placeholder method for extending classes to override.
    };
    /**
     * Updates and positions an axis break element.
     *
     * @ignore Exclude from docs
     * @param {AxisBreak} axisBreak Break element
     */
    AxisRenderer.prototype.updateBreakElement = function (axisBreak) {
        this.positionItem(axisBreak.startLine, axisBreak.startPoint);
        this.toggleVisibility(axisBreak.startLine, axisBreak.startPosition, 0, 1);
        this.positionItem(axisBreak.endLine, axisBreak.endPoint);
        this.toggleVisibility(axisBreak.endLine, axisBreak.endPosition, 0, 1);
    };
    Object.defineProperty(AxisRenderer.prototype, "minGridDistance", {
        /**
         * @return {number} Min distance (px)
         */
        get: function () {
            return this.getPropertyValue("minGridDistance");
        },
        /**
         * Minimum distance in pixels between grid elements.
         *
         * @param {number}  value  Min distance (px)
         */
        set: function (value) {
            if (this.setPropertyValue("minGridDistance", value)) {
                if (this.axis) {
                    this.axis.invalidateLayout();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRenderer.prototype, "chart", {
        /**
         * @ignore Exclude from docs
         * @return {Chart} Chart
         */
        get: function () {
            return this._chart.get();
        },
        /**
         * A chart, associated with the Axis.
         *
         * @ignore Exclude from docs
         * @param {Chart}  value  Chart
         */
        set: function (value) {
            this._chart.set(value, null);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Toggles visibility of an element, based on its current position and
     * min/max position settings.
     *
     * E.g. labels based on `minLabelPosition` and `maxLabelPosition`.
     *
     * @ignore Exclude from docs
     * @param {Sprite}  sprite       An element to toggle
     * @param {number}  position     Elements current position
     * @param {number}  minPosition  Min position setting
     * @param {number}  maxPosition  Max position setting
     */
    AxisRenderer.prototype.toggleVisibility = function (sprite, position, minPosition, maxPosition) {
        var axis = this.axis;
        var updatedStart = axis.start + (axis.end - axis.start) * minPosition - 0.00001;
        var updatedEnd = axis.start + (axis.end - axis.start) * maxPosition + 0.00001;
        if (position < updatedStart || position > updatedEnd) {
            sprite.__disabled = true;
        }
        else {
            sprite.__disabled = false;
        }
    };
    /**
     * Creates visual elements for and axis break.
     *
     * @ignore Exclude from docs
     * @param {AxisBreak} axisBreak Axis break
     */
    AxisRenderer.prototype.createBreakSprites = function (axisBreak) {
        // This is a placeholder method for extending classes to override.
    };
    Object.defineProperty(AxisRenderer.prototype, "axisFills", {
        /**
         * A list of Axis' Fill elements.
         *
         * @return {ListTemplate} Fill elements
         */
        get: function () {
            if (!this._axisFills) {
                this._axisFills = new __WEBPACK_IMPORTED_MODULE_7__core_utils_List__["e" /* ListTemplate */](this.createFill(this.axis));
                this._disposers.push(new __WEBPACK_IMPORTED_MODULE_7__core_utils_List__["c" /* ListDisposer */](this._axisFills));
            }
            return this._axisFills;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns a new fill element, suitable for this Axis Renderer type.
     *
     * @return {AxisFill} Fill element
     */
    AxisRenderer.prototype.createFill = function (axis) {
        return new __WEBPACK_IMPORTED_MODULE_3__AxisFill__["a" /* AxisFill */](axis);
    };
    Object.defineProperty(AxisRenderer.prototype, "grid", {
        /**
         * A list of Axis' Grid elements.
         *
         * @return {ListTemplate} Grid elements
         */
        get: function () {
            if (!this._grid) {
                this._grid = new __WEBPACK_IMPORTED_MODULE_7__core_utils_List__["e" /* ListTemplate */](this.createGrid());
                this._disposers.push(new __WEBPACK_IMPORTED_MODULE_7__core_utils_List__["c" /* ListDisposer */](this._grid));
            }
            return this._grid;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns a new grid element, suitable for this Axis Renderer type.
     *
     * @return {Grid} Grid element
     */
    AxisRenderer.prototype.createGrid = function () {
        return new __WEBPACK_IMPORTED_MODULE_4__Grid__["a" /* Grid */]();
    };
    Object.defineProperty(AxisRenderer.prototype, "ticks", {
        /**
         * A list of Axis' Tick elements.
         *
         * @return {ListTemplate} Tick elements
         */
        get: function () {
            if (!this._ticks) {
                var tick = this.createTick();
                tick.isMeasured = false;
                this._ticks = new __WEBPACK_IMPORTED_MODULE_7__core_utils_List__["e" /* ListTemplate */](tick);
                this._disposers.push(new __WEBPACK_IMPORTED_MODULE_7__core_utils_List__["c" /* ListDisposer */](this._ticks));
            }
            return this._ticks;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns a new tick element, suitable for this Axis Renderer type.
     *
     * @return {AxisTick} Tick element
     */
    AxisRenderer.prototype.createTick = function () {
        return new __WEBPACK_IMPORTED_MODULE_6__AxisTick__["a" /* AxisTick */]();
    };
    Object.defineProperty(AxisRenderer.prototype, "labels", {
        /**
         * A list of Axis' Label elements.
         *
         * @return {ListTemplate} Label elements
         */
        get: function () {
            if (!this._labels) {
                this._labels = new __WEBPACK_IMPORTED_MODULE_7__core_utils_List__["e" /* ListTemplate */](this.createLabel());
                this._disposers.push(new __WEBPACK_IMPORTED_MODULE_7__core_utils_List__["c" /* ListDisposer */](this._labels));
            }
            return this._labels;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns a new label element, suitable for this Axis Renderer type.
     *
     * @return {AxisLabel} Label element
     */
    AxisRenderer.prototype.createLabel = function () {
        return new __WEBPACK_IMPORTED_MODULE_5__AxisLabel__["a" /* AxisLabel */]();
    };
    Object.defineProperty(AxisRenderer.prototype, "inside", {
        /**
         * @return {boolean} Labels inside?
         */
        get: function () {
            return this.getPropertyValue("inside");
        },
        /**
         * Indicates whether Axis' labels and ticks should be drawn inside Plot area.
         *
         * Does not work with all renderers, like AxisRendererRadial.
         *
         * @param {boolean}  value  Labels inside?
         */
        set: function (value) {
            this.setPropertyValue("inside", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRenderer.prototype, "opposite", {
        /**
         * @return {boolean} Draw axis on opposite side?
         */
        get: function () {
            return this.getPropertyValue("opposite");
        },
        /**
         * Indicates whether Axis should be drawn on the opposite side of the plot
         * area than it would normally be drawn based on chart's settings.
         *
         * Does not work with all renderers, like [[AxisRendererRadial]] and
         * [[AxisRenderer Circular].
         *
         * @param {boolean}  value  Draw axis on opposite side?
         */
        set: function (value) {
            this.setPropertyValue("opposite", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRenderer.prototype, "fullWidthTooltip", {
        /**
         * @return {boolean} Full width tooltip?
         */
        get: function () {
            return this.getPropertyValue("fullWidthTooltip");
        },
        /**
         * Indicates if Axis tooltip should take the whole width of the axis cell.
         * (between two grid lines)
         *
         * NOTE: this setting is ignored on circular axis types.
         *
         * @param {boolean} value Full width tooltip?
         */
        set: function (value) {
            this.setPropertyValue("fullWidthTooltip", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRenderer.prototype, "tooltipLocation", {
        /**
         * @return {number} Tooltip location
         */
        get: function () {
            return this.getPropertyValue("tooltipLocation");
        },
        /**
         * Location within axis cell to show tooltip on. (0-1)
         *
         * 0 - show at the start
         * 0.5 - show right in the middle
         * 1 - show at the end
         *
         * @param {number} value Tooltip location
         */
        set: function (value) {
            this.setPropertyValue("tooltipLocation", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRenderer.prototype, "cellStartLocation", {
        /**
         * @return {number} Cell start (0-1)
         */
        get: function () {
            return this.getPropertyValue("cellStartLocation");
        },
        /**
         * Location for the cell start.
         *
         * Normally a "cell" is the whole available width in a category.
         *
         * If there are several clustered column-like series available, the whole
         * space is divided between each clustered column, or column stacks.
         *
         * `cellStartLocation` identifies where, within available space, the actual
         * cell starts.
         *
         * This, together with column series' `width` will affect actual width of
         * columns, and thus gaps between them.
         *
         * This will affect category-like axes only, like [[DateAxis]], or
         * [[CategoryAxis]].
         *
         * This is used to limit a space occupied by series like column.
         *
         * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.
         * @param {number} value Cell start (0-1)
         */
        set: function (value) {
            this.setPropertyValue("cellStartLocation", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRenderer.prototype, "cellEndLocation", {
        /**
         * @return {number} Cell end (0-1)
         */
        get: function () {
            return this.getPropertyValue("cellEndLocation");
        },
        /**
         * Location for the cell end.
         *
         * Normally a "cell" is the whole available width in a category.
         *
         * If there are several clustered column-like series available, the whole
         * space is divided between each clustered column, or column stacks.
         *
         * `cellEndLocation` identifies where, within available space, the actual
         * cell ends.
         *
         * This, together with column series' `width` will affect actual width of
         * columns, and thus gaps between them.
         *
         * This will affect category-like axes only, like [[DateAxis]], or
         * [[CategoryAxis]].
         *
         * This is used to limit a space occupied by series like column.
         *
         * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.
         * @param {number} value Cell end (0-1)
         */
        set: function (value) {
            this.setPropertyValue("cellEndLocation", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRenderer.prototype, "inversed", {
        /**
         * @return {boolean} Flip axis?
         */
        get: function () {
            return this.getPropertyValue("inversed");
        },
        /**
         * Indicates if the scale of the axis should be flipped.
         *
         * @param {boolean} value Flip axis?
         */
        set: function (value) {
            this.setPropertyValue("inversed", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRenderer.prototype, "minLabelPosition", {
        /**
         * @return {number} Min label position (0-1)
         */
        get: function () {
            return this.getPropertyValue("minLabelPosition");
        },
        /**
         * Minimum position along the Axis, for labels.
         *
         * Labels, which have their position closer to the start of the Axis, will be
         * automatically hidden.
         *
         * E.g., setting this to 0.05 (5% of total axis length) would hide labels,
         * that would otherwise be drawn very near start of the Axis.
         *
         * This is especially usefull with `inside = true`, or if the chart hasn't
         * got any extra margins.
         *
         * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.
         * @param {number}  value  Min label position (0-1)
         */
        set: function (value) {
            this.setPropertyValue("minLabelPosition", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRenderer.prototype, "maxLabelPosition", {
        /**
         * @return {number} Max label position (0-1)
         */
        get: function () {
            return this.getPropertyValue("maxLabelPosition");
        },
        /**
         * Maximum position along the Axis, for labels.
         *
         * Labels, which have their position closer to the and of the Axis, will be
         * automatically hidden.
         *
         * E.g., setting this to 0.95 (95% of total axis length) would hide labels,
         * that would otherwise be drawn very near end of the Axis.
         *
         * This is especially usefull with `inside = true`, or if the chart hasn't
         * got any extra margins.
         *
         * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.
         * @param {number}  value  Max label position (0-1)
         */
        set: function (value) {
            this.setPropertyValue("maxLabelPosition", value, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Copies all settings and related items from another object of the same
     * type.
     *
     * @param {this}  source  Source object
     */
    AxisRenderer.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        this.grid.template.copyFrom(source.grid.template);
        this.ticks.template.copyFrom(source.ticks.template);
        this.labels.template.copyFrom(source.labels.template);
        this.axisFills.template.copyFrom(source.axisFills.template);
        this.line.copyFrom(source.line);
        this.baseGrid.copyFrom(source.baseGrid);
    };
    return AxisRenderer;
}(__WEBPACK_IMPORTED_MODULE_0__core_Container__["a" /* Container */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_8__core_Registry__["b" /* registry */].registeredClasses["AxisRenderer"] = AxisRenderer;
//# sourceMappingURL=AxisRenderer.js.map

/***/ }),
/* 66 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AxisRendererX; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__AxisRenderer__ = __webpack_require__(65);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_elements_WavedLine__ = __webpack_require__(75);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_elements_WavedRectangle__ = __webpack_require__(102);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__ = __webpack_require__(6);
/**
 * Module, defining Axis Renderer for vertical axes.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */








/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * A renderer for horizontal axis.
 *
 * @see {@link IAxisRendererEvents} for a list of available events
 * @see {@link IAxisRendererAdapters} for a list of available Adapters
 */
var AxisRendererX = /** @class */ (function (_super) {
    __extends(AxisRendererX, _super);
    /**
     * Constructor.
     *
     * @param {Axis} axis Related axis
     */
    function AxisRendererX() {
        var _this = _super.call(this) || this;
        _this.className = "AxisRendererX";
        _this.minGridDistance = 120;
        _this.opposite = false;
        _this.rotation = 0;
        _this.width = Object(__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__["c" /* percent */])(100);
        _this.labels.template.horizontalCenter = "middle";
        _this.applyTheme();
        return _this;
    }
    /**
    * @ignore
    */
    AxisRendererX.prototype.setAxis = function (axis) {
        _super.prototype.setAxis.call(this, axis);
        axis.layout = "vertical";
    };
    /**
     * Called when rendered is attached to an Axis, as well as a property of
     * Axis that might affect the appearance is updated.
     *
     * E.g. `axis.opposite`, `axis.inside`, etc.
     *
     * This method is called **before** draw, so that any related setting
     * changed in this method can be changed.
     *
     * @todo Description (review)
     * @ignore Exclude from docs
     */
    AxisRendererX.prototype.processRenderer = function () {
        _super.prototype.processRenderer.call(this);
        // can not do this in init, as axis is set later
        var axis = this.axis;
        if (axis) {
            axis.width = Object(__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__["c" /* percent */])(100);
            // @todo Is thi sneeded?
            this.line;
            var title = axis.title;
            title.rotation = 0;
            title.align = "center";
            if (this.opposite) {
                this.line.toFront();
                title.toBack();
            }
            else {
                title.toFront();
                this.line.toBack();
            }
        }
    };
    /**
     * Updates some of the Axis tooltip's visual properties, related to
     * rendering of the Axis.
     *
     * @todo Description (review)
     * @ignore Exclude from docs
     */
    AxisRendererX.prototype.updateTooltip = function () {
        var axis = this.axis;
        if (axis) {
            var bigNum = 1000;
            var bbx = this.line.pixelX;
            var bby = this.line.pixelY;
            var bbw = this.measuredWidth;
            var bbh = bigNum;
            // top
            if (this.opposite) {
                if (!this.inside) {
                    bby = -bigNum;
                    bbh = bigNum;
                }
            }
            // bottom
            else {
                if (this.inside) {
                    bby = -bigNum;
                    bbh = bigNum;
                }
            }
            this.axis.updateTooltip("vertical", { x: bbx, y: bby, width: bbw, height: bbh });
        }
    };
    /**
     * Updates and positions a label element.
     *
     * @ignore Exclude from docs
     * @param {AxisLabel}  label        Label element
     * @param {number}     position     Starting position
     * @param {number}     endPosition  Ending position
     */
    AxisRendererX.prototype.updateLabelElement = function (label, position, endPosition) {
        position = position + (endPosition - position) * label.location;
        var point = this.positionToPoint(position);
        label.isMeasured = !label.inside;
        if (!this.opposite && label.inside) {
            label.verticalCenter = "bottom";
        }
        this.positionItem(label, point);
        this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);
    };
    Object.defineProperty(AxisRendererX.prototype, "axisLength", {
        /**
         * Returns actual length of the Axis, in pixels.
         *
         * @return {number} Length (px)
         */
        get: function () {
            var axis = this.axis;
            return axis.measuredWidth - axis.pixelPaddingRight - axis.pixelPaddingLeft;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Converts relative position on axis to point coordinates.
     *
     * @param  {number}  position  Position (0-1)
     * @return {IPoint}            Point
     */
    AxisRendererX.prototype.positionToPoint = function (position) {
        return { x: this.positionToCoordinate(position), y: 0 };
    };
    /**
     * Converts a point at specific coordinates to a relative position (0-1)
     * on the axis.
     *
     * @param  {IPoint}  point  Point
     * @return {number}         Position (0-1)
     */
    AxisRendererX.prototype.pointToPosition = function (point) {
        return this.coordinateToPosition(point.x);
    };
    /**
     * [getPositionRangePath description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {number}  startPosition  Starting position
     * @param  {number}  endPosition    End position
     * @return {string}                 SVG path
     */
    AxisRendererX.prototype.getPositionRangePath = function (startPosition, endPosition) {
        var x1 = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["fitToRange"](this.positionToCoordinate(startPosition), 0, this.axisLength);
        var x2 = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["fitToRange"](this.positionToCoordinate(endPosition), 0, this.axisLength);
        var w = Math.abs(x2 - x1);
        var h = this.getHeight();
        var x = Math.min(x1, x2);
        var y = 0;
        return __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["rectToPath"]({
            x: x,
            y: y,
            width: w,
            height: h
        }, true);
    };
    /**
     * Updates and positions an axis break element.
     *
     * @ignore Exclude from docs
     * @param {AxisBreak} axisBreak Break element
     */
    AxisRendererX.prototype.updateBreakElement = function (axisBreak) {
        _super.prototype.updateBreakElement.call(this, axisBreak);
        var startLine = axisBreak.startLine;
        var endLine = axisBreak.endLine;
        var fillShape = axisBreak.fillShape;
        var startPoint = axisBreak.startPoint;
        var endPoint = axisBreak.endPoint;
        var y1 = axisBreak.pixelMarginLeft;
        var y2 = this.getHeight() - axisBreak.pixelMarginTop - axisBreak.pixelMarginBottom;
        startPoint.x = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["fitToRange"](startPoint.x, -1, this.pixelWidth + 1);
        endPoint.x = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["fitToRange"](endPoint.x, -1, this.pixelWidth + 1);
        if (startPoint.x == endPoint.x && (startPoint.x < 0 || startPoint.x > this.pixelWidth)) {
            axisBreak.fillShape.__disabled = true;
        }
        else {
            axisBreak.fillShape.__disabled = false;
        }
        startLine.y = y1;
        startLine.width = 0;
        startLine.height = y2;
        endLine.y = y1;
        endLine.width = 0;
        endLine.height = y2;
        fillShape.height = y2;
        fillShape.width = Math.abs(endPoint.x - startPoint.x);
        fillShape.y = y1;
        fillShape.x = startPoint.x;
    };
    /**
     * Updates and positions a grid element.
     *
     * @ignore Exclude from docs
     * @param {Grid}    grid         Grid element
     * @param {number}  position     Starting position
     * @param {number}  endPosition  End position
     */
    AxisRendererX.prototype.updateGridElement = function (grid, position, endPosition) {
        position = position + (endPosition - position) * grid.location;
        var point = this.positionToPoint(position);
        if (grid.element) {
            grid.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["moveTo"]({ x: 0, y: 0 }) + __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["lineTo"]({ x: 0, y: this.getHeight() }) });
        }
        this.positionItem(grid, point);
        this.toggleVisibility(grid, position, 0, 1);
    };
    /**
     * Updates and positions a tick element.
     *
     * @ignore Exclude from docs
     * @param {AxisTick}  tick         Tick element
     * @param {number}    position     Starting position
     * @param {number}    endPosition  End position
     */
    AxisRendererX.prototype.updateTickElement = function (tick, position, endPosition) {
        position = position + (endPosition - position) * tick.location;
        var point = this.positionToPoint(position);
        var tickLength = tick.length;
        if (this.opposite) {
            point.y = this.pixelHeight;
            tickLength *= (tick.inside ? 1 : -1);
        }
        else {
            tickLength *= (tick.inside ? -1 : 1);
        }
        tick.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["moveTo"]({ x: 0, y: 0 }) + __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["lineTo"]({ x: 0, y: tickLength }) });
        this.positionItem(tick, point);
        this.toggleVisibility(tick, position, 0, 1);
    };
    /**
     * Updates and positions the axis line element.
     *
     * @ignore Exclude from docs
     */
    AxisRendererX.prototype.updateAxisLine = function () {
        var element = this.line.element;
        if (element) {
            element.attr({ "d": __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["moveTo"]({ x: 0, y: 0 }) + __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["lineTo"]({ x: this.axisLength, y: 0 }) });
        }
    };
    /**
     * Updates and positions the base grid element.
     *
     * @ignore Exclude from docs
     */
    AxisRendererX.prototype.updateBaseGridElement = function () {
        _super.prototype.updateBaseGridElement.call(this);
        var axis = this.axis;
        var h = this.getHeight();
        var w = this.getWidth();
        var baseGrid = this.baseGrid;
        var x = axis.basePoint.x;
        if (x < 0 || x > w) {
            baseGrid.hide(0);
        }
        else {
            var y = __WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__["spritePointToSprite"]({ x: 0, y: 0 }, this.gridContainer, baseGrid.parent).y;
            baseGrid.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["moveTo"]({ x: 0, y: 0 }) + __WEBPACK_IMPORTED_MODULE_6__core_rendering_Path__["lineTo"]({ x: 0, y: h }) });
            baseGrid.moveTo({ x: x, y: y });
            baseGrid.show(0);
        }
    };
    /**
     * Creates visual elements for and axis break.
     *
     * @ignore Exclude from docs
     * @param {AxisBreak} axisBreak Axis break
     */
    AxisRendererX.prototype.createBreakSprites = function (axisBreak) {
        axisBreak.startLine = new __WEBPACK_IMPORTED_MODULE_1__core_elements_WavedLine__["a" /* WavedLine */]();
        axisBreak.endLine = new __WEBPACK_IMPORTED_MODULE_1__core_elements_WavedLine__["a" /* WavedLine */]();
        var wavedRectangle = new __WEBPACK_IMPORTED_MODULE_2__core_elements_WavedRectangle__["a" /* WavedRectangle */]();
        wavedRectangle.setWavedSides(false, true, false, true);
        axisBreak.fillShape = wavedRectangle;
    };
    return AxisRendererX;
}(__WEBPACK_IMPORTED_MODULE_0__AxisRenderer__["a" /* AxisRenderer */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_3__core_Registry__["b" /* registry */].registeredClasses["AxisRendererX"] = AxisRendererX;
//# sourceMappingURL=AxisRendererX.js.map

/***/ }),
/* 67 */,
/* 68 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_core_System__ = __webpack_require__(34);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "System", function() { return __WEBPACK_IMPORTED_MODULE_0__internal_core_System__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "getSystem", function() { return __WEBPACK_IMPORTED_MODULE_0__internal_core_System__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_core_Base__ = __webpack_require__(14);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "BaseObject", function() { return __WEBPACK_IMPORTED_MODULE_1__internal_core_Base__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "BaseObjectEvents", function() { return __WEBPACK_IMPORTED_MODULE_1__internal_core_Base__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_core_Component__ = __webpack_require__(32);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Component", function() { return __WEBPACK_IMPORTED_MODULE_2__internal_core_Component__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__internal_core_Container__ = __webpack_require__(4);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Container", function() { return __WEBPACK_IMPORTED_MODULE_3__internal_core_Container__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__internal_core_DataItem__ = __webpack_require__(37);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "DataItem", function() { return __WEBPACK_IMPORTED_MODULE_4__internal_core_DataItem__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__internal_core_Sprite__ = __webpack_require__(10);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Sprite", function() { return __WEBPACK_IMPORTED_MODULE_5__internal_core_Sprite__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__internal_core_SpriteEvents__ = __webpack_require__(119);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SpriteEventDispatcher", function() { return __WEBPACK_IMPORTED_MODULE_6__internal_core_SpriteEvents__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__internal_core_SpriteState__ = __webpack_require__(70);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SpriteState", function() { return __WEBPACK_IMPORTED_MODULE_7__internal_core_SpriteState__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__internal_core_Registry__ = __webpack_require__(0);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "registry", function() { return __WEBPACK_IMPORTED_MODULE_8__internal_core_Registry__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Registry", function() { return __WEBPACK_IMPORTED_MODULE_8__internal_core_Registry__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__internal_core_Options__ = __webpack_require__(44);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "options", function() { return __WEBPACK_IMPORTED_MODULE_9__internal_core_Options__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__internal_core_data_CSVParser__ = __webpack_require__(95);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "CSVParser", function() { return __WEBPACK_IMPORTED_MODULE_10__internal_core_data_CSVParser__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__internal_core_data_DataLoader__ = __webpack_require__(131);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "DataLoader", function() { return __WEBPACK_IMPORTED_MODULE_11__internal_core_data_DataLoader__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "dataLoader", function() { return __WEBPACK_IMPORTED_MODULE_11__internal_core_data_DataLoader__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__internal_core_data_DataParser__ = __webpack_require__(96);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "DataParser", function() { return __WEBPACK_IMPORTED_MODULE_12__internal_core_data_DataParser__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__internal_core_data_DataSource__ = __webpack_require__(130);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "DataSource", function() { return __WEBPACK_IMPORTED_MODULE_13__internal_core_data_DataSource__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__internal_core_data_JSONParser__ = __webpack_require__(97);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "JSONParser", function() { return __WEBPACK_IMPORTED_MODULE_14__internal_core_data_JSONParser__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__internal_core_defs_SVGDefaults__ = __webpack_require__(118);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SVGDefaults", function() { return __WEBPACK_IMPORTED_MODULE_15__internal_core_defs_SVGDefaults__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__internal_core_elements_Button__ = __webpack_require__(52);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Button", function() { return __WEBPACK_IMPORTED_MODULE_16__internal_core_elements_Button__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__internal_core_elements_Circle__ = __webpack_require__(47);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Circle", function() { return __WEBPACK_IMPORTED_MODULE_17__internal_core_elements_Circle__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__internal_core_elements_Ellipse__ = __webpack_require__(138);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Ellipse", function() { return __WEBPACK_IMPORTED_MODULE_18__internal_core_elements_Ellipse__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__internal_core_elements_Image__ = __webpack_require__(204);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Image", function() { return __WEBPACK_IMPORTED_MODULE_19__internal_core_elements_Image__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__internal_core_elements_Label__ = __webpack_require__(23);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Label", function() { return __WEBPACK_IMPORTED_MODULE_20__internal_core_elements_Label__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__internal_core_elements_Line__ = __webpack_require__(45);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Line", function() { return __WEBPACK_IMPORTED_MODULE_21__internal_core_elements_Line__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__internal_core_elements_Popup__ = __webpack_require__(91);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Popup", function() { return __WEBPACK_IMPORTED_MODULE_22__internal_core_elements_Popup__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__internal_core_elements_Modal__ = __webpack_require__(92);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Modal", function() { return __WEBPACK_IMPORTED_MODULE_23__internal_core_elements_Modal__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__internal_core_elements_PointedRectangle__ = __webpack_require__(139);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "PointedRectangle", function() { return __WEBPACK_IMPORTED_MODULE_24__internal_core_elements_PointedRectangle__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__internal_core_elements_PointedShape__ = __webpack_require__(140);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "PointedShape", function() { return __WEBPACK_IMPORTED_MODULE_25__internal_core_elements_PointedShape__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__internal_core_elements_Polyarc__ = __webpack_require__(205);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Polyarc", function() { return __WEBPACK_IMPORTED_MODULE_26__internal_core_elements_Polyarc__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__internal_core_elements_Polygon__ = __webpack_require__(206);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Polygon", function() { return __WEBPACK_IMPORTED_MODULE_27__internal_core_elements_Polygon__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__internal_core_elements_Polyline__ = __webpack_require__(77);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Polyline", function() { return __WEBPACK_IMPORTED_MODULE_28__internal_core_elements_Polyline__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__internal_core_elements_Polyspline__ = __webpack_require__(104);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Polyspline", function() { return __WEBPACK_IMPORTED_MODULE_29__internal_core_elements_Polyspline__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__internal_core_elements_Preloader__ = __webpack_require__(142);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Preloader", function() { return __WEBPACK_IMPORTED_MODULE_30__internal_core_elements_Preloader__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__internal_core_elements_Rectangle__ = __webpack_require__(64);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Rectangle", function() { return __WEBPACK_IMPORTED_MODULE_31__internal_core_elements_Rectangle__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__internal_core_elements_ResizeButton__ = __webpack_require__(143);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ResizeButton", function() { return __WEBPACK_IMPORTED_MODULE_32__internal_core_elements_ResizeButton__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_33__internal_core_elements_RoundedRectangle__ = __webpack_require__(29);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "RoundedRectangle", function() { return __WEBPACK_IMPORTED_MODULE_33__internal_core_elements_RoundedRectangle__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_34__internal_core_elements_Scrollbar__ = __webpack_require__(78);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Scrollbar", function() { return __WEBPACK_IMPORTED_MODULE_34__internal_core_elements_Scrollbar__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_35__internal_core_elements_Slider__ = __webpack_require__(207);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Slider", function() { return __WEBPACK_IMPORTED_MODULE_35__internal_core_elements_Slider__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_36__internal_core_elements_Slice__ = __webpack_require__(48);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Slice", function() { return __WEBPACK_IMPORTED_MODULE_36__internal_core_elements_Slice__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_37__internal_core_elements_TextLink__ = __webpack_require__(144);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "TextLink", function() { return __WEBPACK_IMPORTED_MODULE_37__internal_core_elements_TextLink__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_38__internal_core_elements_Tooltip__ = __webpack_require__(58);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Tooltip", function() { return __WEBPACK_IMPORTED_MODULE_38__internal_core_elements_Tooltip__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_39__internal_core_elements_Trapezoid__ = __webpack_require__(146);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Trapezoid", function() { return __WEBPACK_IMPORTED_MODULE_39__internal_core_elements_Trapezoid__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_40__internal_core_elements_Triangle__ = __webpack_require__(105);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Triangle", function() { return __WEBPACK_IMPORTED_MODULE_40__internal_core_elements_Triangle__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_41__internal_core_elements_WavedCircle__ = __webpack_require__(147);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "WavedCircle", function() { return __WEBPACK_IMPORTED_MODULE_41__internal_core_elements_WavedCircle__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_42__internal_core_elements_WavedLine__ = __webpack_require__(75);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "WavedLine", function() { return __WEBPACK_IMPORTED_MODULE_42__internal_core_elements_WavedLine__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_43__internal_core_elements_WavedRectangle__ = __webpack_require__(102);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "WavedRectangle", function() { return __WEBPACK_IMPORTED_MODULE_43__internal_core_elements_WavedRectangle__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_44__internal_core_elements_ZoomOutButton__ = __webpack_require__(148);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ZoomOutButton", function() { return __WEBPACK_IMPORTED_MODULE_44__internal_core_elements_ZoomOutButton__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_45__internal_core_elements_PlayButton__ = __webpack_require__(208);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "PlayButton", function() { return __WEBPACK_IMPORTED_MODULE_45__internal_core_elements_PlayButton__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_46__internal_core_elements_3d_Cone__ = __webpack_require__(149);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Cone", function() { return __WEBPACK_IMPORTED_MODULE_46__internal_core_elements_3d_Cone__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_47__internal_core_elements_3d_Rectangle3D__ = __webpack_require__(151);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Rectangle3D", function() { return __WEBPACK_IMPORTED_MODULE_47__internal_core_elements_3d_Rectangle3D__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_48__internal_core_elements_3d_Slice3D__ = __webpack_require__(152);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Slice3D", function() { return __WEBPACK_IMPORTED_MODULE_48__internal_core_elements_3d_Slice3D__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_49__internal_core_export_Export__ = __webpack_require__(127);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Export", function() { return __WEBPACK_IMPORTED_MODULE_49__internal_core_export_Export__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_50__internal_core_export_ExportMenu__ = __webpack_require__(128);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ExportMenu", function() { return __WEBPACK_IMPORTED_MODULE_50__internal_core_export_ExportMenu__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_51__internal_core_formatters_DateFormatter__ = __webpack_require__(57);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "DateFormatter", function() { return __WEBPACK_IMPORTED_MODULE_51__internal_core_formatters_DateFormatter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_52__internal_core_formatters_DurationFormatter__ = __webpack_require__(126);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "DurationFormatter", function() { return __WEBPACK_IMPORTED_MODULE_52__internal_core_formatters_DurationFormatter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_53__internal_core_formatters_NumberFormatter__ = __webpack_require__(125);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "NumberFormatter", function() { return __WEBPACK_IMPORTED_MODULE_53__internal_core_formatters_NumberFormatter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_54__internal_core_formatters_TextFormatter__ = __webpack_require__(56);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "TextFormatter", function() { return __WEBPACK_IMPORTED_MODULE_54__internal_core_formatters_TextFormatter__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "getTextFormatter", function() { return __WEBPACK_IMPORTED_MODULE_54__internal_core_formatters_TextFormatter__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_55__internal_core_interaction_Inertia__ = __webpack_require__(124);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Inertia", function() { return __WEBPACK_IMPORTED_MODULE_55__internal_core_interaction_Inertia__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_56__internal_core_interaction_Interaction__ = __webpack_require__(24);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Interaction", function() { return __WEBPACK_IMPORTED_MODULE_56__internal_core_interaction_Interaction__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "getInteraction", function() { return __WEBPACK_IMPORTED_MODULE_56__internal_core_interaction_Interaction__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_57__internal_core_interaction_InteractionKeyboardObject__ = __webpack_require__(123);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "InteractionKeyboardObject", function() { return __WEBPACK_IMPORTED_MODULE_57__internal_core_interaction_InteractionKeyboardObject__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_58__internal_core_interaction_InteractionObject__ = __webpack_require__(121);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "InteractionObject", function() { return __WEBPACK_IMPORTED_MODULE_58__internal_core_interaction_InteractionObject__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_59__internal_core_interaction_InteractionObjectEvents__ = __webpack_require__(122);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "InteractionObjectEventDispatcher", function() { return __WEBPACK_IMPORTED_MODULE_59__internal_core_interaction_InteractionObjectEvents__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_60__internal_core_interaction_Mouse__ = __webpack_require__(43);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "MouseCursorStyle", function() { return __WEBPACK_IMPORTED_MODULE_60__internal_core_interaction_Mouse__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_61__internal_core_rendering_AMElement__ = __webpack_require__(74);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AMElement", function() { return __WEBPACK_IMPORTED_MODULE_61__internal_core_rendering_AMElement__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_62__internal_core_rendering_Group__ = __webpack_require__(137);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Group", function() { return __WEBPACK_IMPORTED_MODULE_62__internal_core_rendering_Group__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_63__internal_core_rendering_Paper__ = __webpack_require__(103);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Paper", function() { return __WEBPACK_IMPORTED_MODULE_63__internal_core_rendering_Paper__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_64__internal_core_rendering_Smoothing__ = __webpack_require__(46);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Tension", function() { return __WEBPACK_IMPORTED_MODULE_64__internal_core_rendering_Smoothing__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Basis", function() { return __WEBPACK_IMPORTED_MODULE_64__internal_core_rendering_Smoothing__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_65__internal_core_rendering_SVGContainer__ = __webpack_require__(94);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SVGContainer", function() { return __WEBPACK_IMPORTED_MODULE_65__internal_core_rendering_SVGContainer__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_66__internal_core_rendering_fills_ColorModifier__ = __webpack_require__(150);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ColorModifier", function() { return __WEBPACK_IMPORTED_MODULE_66__internal_core_rendering_fills_ColorModifier__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_67__internal_core_rendering_fills_LinearGradient__ = __webpack_require__(36);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "LinearGradient", function() { return __WEBPACK_IMPORTED_MODULE_67__internal_core_rendering_fills_LinearGradient__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_68__internal_core_rendering_fills_LinearGradientModifier__ = __webpack_require__(106);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "LinearGradientModifier", function() { return __WEBPACK_IMPORTED_MODULE_68__internal_core_rendering_fills_LinearGradientModifier__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_69__internal_core_rendering_fills_LinePattern__ = __webpack_require__(209);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "LinePattern", function() { return __WEBPACK_IMPORTED_MODULE_69__internal_core_rendering_fills_LinePattern__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_70__internal_core_rendering_fills_Pattern__ = __webpack_require__(73);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Pattern", function() { return __WEBPACK_IMPORTED_MODULE_70__internal_core_rendering_fills_Pattern__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_71__internal_core_rendering_fills_RadialGradient__ = __webpack_require__(120);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "RadialGradient", function() { return __WEBPACK_IMPORTED_MODULE_71__internal_core_rendering_fills_RadialGradient__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_72__internal_core_rendering_fills_RectPattern__ = __webpack_require__(210);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "RectPattern", function() { return __WEBPACK_IMPORTED_MODULE_72__internal_core_rendering_fills_RectPattern__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_73__internal_core_rendering_filters_ColorizeFilter__ = __webpack_require__(211);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ColorizeFilter", function() { return __WEBPACK_IMPORTED_MODULE_73__internal_core_rendering_filters_ColorizeFilter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_74__internal_core_rendering_filters_DesaturateFilter__ = __webpack_require__(108);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "DesaturateFilter", function() { return __WEBPACK_IMPORTED_MODULE_74__internal_core_rendering_filters_DesaturateFilter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_75__internal_core_rendering_filters_DropShadowFilter__ = __webpack_require__(145);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "DropShadowFilter", function() { return __WEBPACK_IMPORTED_MODULE_75__internal_core_rendering_filters_DropShadowFilter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_76__internal_core_rendering_filters_BlurFilter__ = __webpack_require__(212);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "BlurFilter", function() { return __WEBPACK_IMPORTED_MODULE_76__internal_core_rendering_filters_BlurFilter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_77__internal_core_rendering_filters_Filter__ = __webpack_require__(28);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Filter", function() { return __WEBPACK_IMPORTED_MODULE_77__internal_core_rendering_filters_Filter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_78__internal_core_rendering_filters_FocusFilter__ = __webpack_require__(153);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "FocusFilter", function() { return __WEBPACK_IMPORTED_MODULE_78__internal_core_rendering_filters_FocusFilter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_79__internal_core_rendering_filters_LightenFilter__ = __webpack_require__(107);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "LightenFilter", function() { return __WEBPACK_IMPORTED_MODULE_79__internal_core_rendering_filters_LightenFilter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_80__internal_core_responsive_Responsive__ = __webpack_require__(132);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Responsive", function() { return __WEBPACK_IMPORTED_MODULE_80__internal_core_responsive_Responsive__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_81__internal_core_utils_Adapter__ = __webpack_require__(18);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "GlobalAdapter", function() { return __WEBPACK_IMPORTED_MODULE_81__internal_core_utils_Adapter__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "globalAdapter", function() { return __WEBPACK_IMPORTED_MODULE_81__internal_core_utils_Adapter__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Adapter", function() { return __WEBPACK_IMPORTED_MODULE_81__internal_core_utils_Adapter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_82__internal_core_utils_Animation__ = __webpack_require__(22);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Animation", function() { return __WEBPACK_IMPORTED_MODULE_82__internal_core_utils_Animation__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "animate", function() { return __WEBPACK_IMPORTED_MODULE_82__internal_core_utils_Animation__["c"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_83__internal_core_utils_AsyncPending__ = __webpack_require__(41);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "nextFrame", function() { return __WEBPACK_IMPORTED_MODULE_83__internal_core_utils_AsyncPending__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "readFrame", function() { return __WEBPACK_IMPORTED_MODULE_83__internal_core_utils_AsyncPending__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "writeFrame", function() { return __WEBPACK_IMPORTED_MODULE_83__internal_core_utils_AsyncPending__["f"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "whenIdle", function() { return __WEBPACK_IMPORTED_MODULE_83__internal_core_utils_AsyncPending__["e"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "triggerIdle", function() { return __WEBPACK_IMPORTED_MODULE_83__internal_core_utils_AsyncPending__["d"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_84__internal_core_utils_Cache__ = __webpack_require__(90);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Cache", function() { return __WEBPACK_IMPORTED_MODULE_84__internal_core_utils_Cache__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "cache", function() { return __WEBPACK_IMPORTED_MODULE_84__internal_core_utils_Cache__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_85__internal_core_utils_Color__ = __webpack_require__(15);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Color", function() { return __WEBPACK_IMPORTED_MODULE_85__internal_core_utils_Color__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "color", function() { return __WEBPACK_IMPORTED_MODULE_85__internal_core_utils_Color__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "isColor", function() { return __WEBPACK_IMPORTED_MODULE_85__internal_core_utils_Color__["d"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "castColor", function() { return __WEBPACK_IMPORTED_MODULE_85__internal_core_utils_Color__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_86__internal_core_utils_ColorSet__ = __webpack_require__(59);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ColorSet", function() { return __WEBPACK_IMPORTED_MODULE_86__internal_core_utils_ColorSet__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_87__internal_core_utils_InterfaceColorSet__ = __webpack_require__(9);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "InterfaceColorSet", function() { return __WEBPACK_IMPORTED_MODULE_87__internal_core_utils_InterfaceColorSet__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_88__internal_core_utils_Dictionary__ = __webpack_require__(16);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "DictionaryDisposer", function() { return __WEBPACK_IMPORTED_MODULE_88__internal_core_utils_Dictionary__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Dictionary", function() { return __WEBPACK_IMPORTED_MODULE_88__internal_core_utils_Dictionary__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "DictionaryTemplate", function() { return __WEBPACK_IMPORTED_MODULE_88__internal_core_utils_Dictionary__["c"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_89__internal_core_utils_Disposer__ = __webpack_require__(11);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Disposer", function() { return __WEBPACK_IMPORTED_MODULE_89__internal_core_utils_Disposer__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "MultiDisposer", function() { return __WEBPACK_IMPORTED_MODULE_89__internal_core_utils_Disposer__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "MutableValueDisposer", function() { return __WEBPACK_IMPORTED_MODULE_89__internal_core_utils_Disposer__["d"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "CounterDisposer", function() { return __WEBPACK_IMPORTED_MODULE_89__internal_core_utils_Disposer__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_90__internal_core_utils_DOM__ = __webpack_require__(19);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "StyleRule", function() { return __WEBPACK_IMPORTED_MODULE_90__internal_core_utils_DOM__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "StyleClass", function() { return __WEBPACK_IMPORTED_MODULE_90__internal_core_utils_DOM__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "getElement", function() { return __WEBPACK_IMPORTED_MODULE_90__internal_core_utils_DOM__["m"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "addClass", function() { return __WEBPACK_IMPORTED_MODULE_90__internal_core_utils_DOM__["f"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "removeClass", function() { return __WEBPACK_IMPORTED_MODULE_90__internal_core_utils_DOM__["q"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "blur", function() { return __WEBPACK_IMPORTED_MODULE_90__internal_core_utils_DOM__["h"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "focus", function() { return __WEBPACK_IMPORTED_MODULE_90__internal_core_utils_DOM__["l"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "outerHTML", function() { return __WEBPACK_IMPORTED_MODULE_90__internal_core_utils_DOM__["o"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "isElement", function() { return __WEBPACK_IMPORTED_MODULE_90__internal_core_utils_DOM__["n"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "copyAttributes", function() { return __WEBPACK_IMPORTED_MODULE_90__internal_core_utils_DOM__["j"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "fixPixelPerfect", function() { return __WEBPACK_IMPORTED_MODULE_90__internal_core_utils_DOM__["k"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ready", function() { return __WEBPACK_IMPORTED_MODULE_90__internal_core_utils_DOM__["p"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_91__internal_core_utils_EventDispatcher__ = __webpack_require__(30);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "EventDispatcher", function() { return __WEBPACK_IMPORTED_MODULE_91__internal_core_utils_EventDispatcher__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "TargetedEventDispatcher", function() { return __WEBPACK_IMPORTED_MODULE_91__internal_core_utils_EventDispatcher__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_92__internal_core_utils_Iterator__ = __webpack_require__(3);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ListIterator", function() { return __WEBPACK_IMPORTED_MODULE_92__internal_core_utils_Iterator__["ListIterator"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "min", function() { return __WEBPACK_IMPORTED_MODULE_92__internal_core_utils_Iterator__["min"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "max", function() { return __WEBPACK_IMPORTED_MODULE_92__internal_core_utils_Iterator__["max"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "join", function() { return __WEBPACK_IMPORTED_MODULE_92__internal_core_utils_Iterator__["join"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_93__internal_core_utils_Keyboard__ = __webpack_require__(39);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Keyboard", function() { return __WEBPACK_IMPORTED_MODULE_93__internal_core_utils_Keyboard__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "keyboard", function() { return __WEBPACK_IMPORTED_MODULE_93__internal_core_utils_Keyboard__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_94__internal_core_utils_Language__ = __webpack_require__(31);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Language", function() { return __WEBPACK_IMPORTED_MODULE_94__internal_core_utils_Language__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_95__internal_core_utils_List__ = __webpack_require__(5);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "IndexedIterable", function() { return __WEBPACK_IMPORTED_MODULE_95__internal_core_utils_List__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ListGrouper", function() { return __WEBPACK_IMPORTED_MODULE_95__internal_core_utils_List__["d"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ListDisposer", function() { return __WEBPACK_IMPORTED_MODULE_95__internal_core_utils_List__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "List", function() { return __WEBPACK_IMPORTED_MODULE_95__internal_core_utils_List__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ListTemplate", function() { return __WEBPACK_IMPORTED_MODULE_95__internal_core_utils_List__["e"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_96__internal_core_utils_Morpher__ = __webpack_require__(141);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Morpher", function() { return __WEBPACK_IMPORTED_MODULE_96__internal_core_utils_Morpher__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_97__internal_core_utils_Order__ = __webpack_require__(72);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "reverse", function() { return __WEBPACK_IMPORTED_MODULE_97__internal_core_utils_Order__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "or", function() { return __WEBPACK_IMPORTED_MODULE_97__internal_core_utils_Order__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_98__internal_core_utils_Percent__ = __webpack_require__(7);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Percent", function() { return __WEBPACK_IMPORTED_MODULE_98__internal_core_utils_Percent__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "percent", function() { return __WEBPACK_IMPORTED_MODULE_98__internal_core_utils_Percent__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "isPercent", function() { return __WEBPACK_IMPORTED_MODULE_98__internal_core_utils_Percent__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_99__internal_core_utils_SortedList__ = __webpack_require__(71);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "OrderedList", function() { return __WEBPACK_IMPORTED_MODULE_99__internal_core_utils_SortedList__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SortedList", function() { return __WEBPACK_IMPORTED_MODULE_99__internal_core_utils_SortedList__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "OrderedListTemplate", function() { return __WEBPACK_IMPORTED_MODULE_99__internal_core_utils_SortedList__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SortedListTemplate", function() { return __WEBPACK_IMPORTED_MODULE_99__internal_core_utils_SortedList__["d"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_100__internal_core_utils_Strings__ = __webpack_require__(35);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "PX", function() { return __WEBPACK_IMPORTED_MODULE_100__internal_core_utils_Strings__["l"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "STRING", function() { return __WEBPACK_IMPORTED_MODULE_100__internal_core_utils_Strings__["m"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "NUMBER", function() { return __WEBPACK_IMPORTED_MODULE_100__internal_core_utils_Strings__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "DATE", function() { return __WEBPACK_IMPORTED_MODULE_100__internal_core_utils_Strings__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "DURATION", function() { return __WEBPACK_IMPORTED_MODULE_100__internal_core_utils_Strings__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "PLACEHOLDER", function() { return __WEBPACK_IMPORTED_MODULE_100__internal_core_utils_Strings__["d"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "PLACEHOLDER2", function() { return __WEBPACK_IMPORTED_MODULE_100__internal_core_utils_Strings__["e"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "PLACEHOLDER3", function() { return __WEBPACK_IMPORTED_MODULE_100__internal_core_utils_Strings__["f"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "PLACEHOLDER4", function() { return __WEBPACK_IMPORTED_MODULE_100__internal_core_utils_Strings__["g"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "PLACEHOLDER5", function() { return __WEBPACK_IMPORTED_MODULE_100__internal_core_utils_Strings__["h"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_101__internal_core_utils_Type__ = __webpack_require__(1);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "isNaN", function() { return __WEBPACK_IMPORTED_MODULE_101__internal_core_utils_Type__["isNaN"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "checkString", function() { return __WEBPACK_IMPORTED_MODULE_101__internal_core_utils_Type__["checkString"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "checkBoolean", function() { return __WEBPACK_IMPORTED_MODULE_101__internal_core_utils_Type__["checkBoolean"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "checkNumber", function() { return __WEBPACK_IMPORTED_MODULE_101__internal_core_utils_Type__["checkNumber"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "checkObject", function() { return __WEBPACK_IMPORTED_MODULE_101__internal_core_utils_Type__["checkObject"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "castString", function() { return __WEBPACK_IMPORTED_MODULE_101__internal_core_utils_Type__["castString"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "castNumber", function() { return __WEBPACK_IMPORTED_MODULE_101__internal_core_utils_Type__["castNumber"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "isString", function() { return __WEBPACK_IMPORTED_MODULE_101__internal_core_utils_Type__["isString"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "isNumber", function() { return __WEBPACK_IMPORTED_MODULE_101__internal_core_utils_Type__["isNumber"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "isObject", function() { return __WEBPACK_IMPORTED_MODULE_101__internal_core_utils_Type__["isObject"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "isArray", function() { return __WEBPACK_IMPORTED_MODULE_101__internal_core_utils_Type__["isArray"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_102__internal_core_utils_Validatable__ = __webpack_require__(93);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Validatable", function() { return __WEBPACK_IMPORTED_MODULE_102__internal_core_utils_Validatable__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_103__internal_core_rendering_Path__ = __webpack_require__(8);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "path", function() { return __WEBPACK_IMPORTED_MODULE_103__internal_core_rendering_Path__; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_104__internal_core_utils_Colors__ = __webpack_require__(42);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "colors", function() { return __WEBPACK_IMPORTED_MODULE_104__internal_core_utils_Colors__; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_105__internal_core_utils_Ease__ = __webpack_require__(25);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "ease", function() { return __WEBPACK_IMPORTED_MODULE_105__internal_core_utils_Ease__; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_106__internal_core_utils_Math__ = __webpack_require__(2);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "math", function() { return __WEBPACK_IMPORTED_MODULE_106__internal_core_utils_Math__; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_107__internal_core_utils_Number__ = __webpack_require__(55);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "number", function() { return __WEBPACK_IMPORTED_MODULE_107__internal_core_utils_Number__; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_108__internal_core_utils_Object__ = __webpack_require__(13);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "object", function() { return __WEBPACK_IMPORTED_MODULE_108__internal_core_utils_Object__; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_109__internal_core_utils_String__ = __webpack_require__(69);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "string", function() { return __WEBPACK_IMPORTED_MODULE_109__internal_core_utils_String__; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_110__internal_core_utils_Time__ = __webpack_require__(154);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "time", function() { return __WEBPACK_IMPORTED_MODULE_110__internal_core_utils_Time__; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_111__internal_core_utils_Utils__ = __webpack_require__(6);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "utils", function() { return __WEBPACK_IMPORTED_MODULE_111__internal_core_utils_Utils__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "iter", function() { return __WEBPACK_IMPORTED_MODULE_92__internal_core_utils_Iterator__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "type", function() { return __WEBPACK_IMPORTED_MODULE_101__internal_core_utils_Type__; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_112__internal_core_utils_Instance__ = __webpack_require__(155);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return __WEBPACK_IMPORTED_MODULE_112__internal_core_utils_Instance__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "createFromConfig", function() { return __WEBPACK_IMPORTED_MODULE_112__internal_core_utils_Instance__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "useTheme", function() { return __WEBPACK_IMPORTED_MODULE_112__internal_core_utils_Instance__["d"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "unuseTheme", function() { return __WEBPACK_IMPORTED_MODULE_112__internal_core_utils_Instance__["c"]; });
/**
 * This module houses all core/framework functionality and is required for
 * all charting components to work
 */
/**
 * Elements: core
 */










/**
 * Elements: data
 */






/**
 * Elements: elements
 */






























/**
 * Elements: 3d
 */



/**
 * Elements: export
 */


/**
 * Elements: formatters
 */




/**
 * Elements: interaction
 */






/**
 * Elements: rendering
 */





/**
 * Elements: fills
 */







/**
 * Elements: filters
 */







/**
 * Elements: responsive
 */

/**
 * Elements: utils
 */






















/**
 * Functions: rendering
 */


/**
 * Functions: utils
 */






















//# sourceMappingURL=core.js.map

/***/ }),
/* 69 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["order"] = order;
/* harmony export (immutable) */ __webpack_exports__["repeat"] = repeat;
/**
 * ============================================================================
 * COMPARING FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Comparing function used for ordering.
 *
 * @ignore Exclude from docs
 * @todo Use localeCompare
 * @param  {string}    a  Item 1
 * @param  {string}    b  Item 2
 * @return {Ordering}     Result
 */
function order(a, b) {
    if (a === b) {
        return 0;
    }
    else if (a < b) {
        return -1;
    }
    else {
        return 1;
    }
}
/**
 * ============================================================================
 * OTHER FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Repeats a `string` number of times as set in `amount`.
 *
 * @ignore Exclude from docs
 * @todo Make this faster
 * @param  {string}  string  Source string
 * @param  {number}  amount  Number of times to repeat string
 * @return {string}          New string
 */
function repeat(string, amount) {
    return new Array(amount + 1).join(string);
}
//# sourceMappingURL=String.js.map

/***/ }),
/* 70 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SpriteState; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Adapter__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__rendering_filters_Filter__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Color__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_Ease__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_Object__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils_Type__ = __webpack_require__(1);
/**
 * Module contains functionality related to [[Sprite]] states.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */










/**
 * Defines a state for [[Sprite]].
 *
 * A "state" is a special object that has all the same properties as the
 * [[Sprite]] of the same type, and which can be used to quickly apply a set
 * of property values. (set state)
 *
 * When [[Sprite]] (or any object that extends Sprite) is created it creates a
 * "default" state. You can modify the "default" state so that when the Sprite
 * returns to default state certain properties are added.
 *
 * Default state can be accessed using Sprite's `defaultState` getter.
 *
 * ```TypeScript
 * sprite.defaultState.properties.fillOpacity = 0.5;
 * ```
 * ```JavaScript
 * sprite.defaultState.properties.fillOpacity = 0.5;
 * ```
 * ```JSON
 * {
 *   // ...
 *   "defaultState": {
 *     "properties": {
 *       "fillOpacity": 0.5
 *     }
 *   }
 * }
 * ```
 *
 * If Sprite is "hoverable", it automatically adds a "hover" state, which is
 * applied when it has a cursor over it.
 *
 * ```TypeScript
 * let hoverstate = sprite.states.create("hover");
 * hoverstate.properties.fillOpacity = 1;
 * ```
 * ```JavaScript
 * var hoverstate = sprite.states.create("hover");
 * hoverstate.properties.fillOpacity = 1;
 * ```
 * ```JSON
 * {
 *   // ...
 *   "states": {
 *     "hover": {
 *       "properties": {
 *         "fillOpacity": 0.5
 *       }
 *     }
 *   }
 * }
 * ```
 *
 * The above will automatically apply "hover" state when the Sprite is hovered,
 * thus will set its `fillOpacity` property to 1, and will reset it to 0.5 when
 * it's no longer hovered.
 *
 * Every object that inherits from [[Sprite]] can and will add their own
 * properties to the available list.
 *
 * User can create their own states, and apply them as needed:
 *
 * ```TypeScript
 * let myCustomState = sprite.states.create("mystate");
 * myCustomState.properties.fillOpacity = 0.5;
 * myCustomState.properties.strokeOpacity = 0.8;
 * sprite.setState("mystate");
 * ```
 * ```JavaScript
 * var myCustomState = sprite.states.create("mystate");
 * myCustomState.properties.fillOpacity = 0.5;
 * myCustomState.properties.strokeOpacity = 0.8;
 * sprite.setState("mystate");
 * ```
 *
 * @see {@link https://www.amcharts.com/docs/v4/concepts/states/}
 * @important
 */
var SpriteState = /** @class */ (function (_super) {
    __extends(SpriteState, _super);
    /**
     * Constructor
     */
    function SpriteState() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * Holds Adapter.
         *
         * @type {Adapter<Sprite, SpriteAdapters>}
         */
        _this.adapter = new __WEBPACK_IMPORTED_MODULE_1__utils_Adapter__["a" /* Adapter */](_this);
        /**
         * Duration of the transition to this state. 0 means instantenous transition.
         * Any number means the [[Sprite]] will transit smoothly to this state,
         * animating all animatable properties.
         *
         * @default 0
         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations
         * @type {number}
         */
        _this.transitionDuration = 0;
        /**
         * Easing function to use when transitioning to this state.
         *
         * @default cubicOut
         * @see {@link Ease}
         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations
         * @type {(number) => number}
         */
        _this.transitionEasing = __WEBPACK_IMPORTED_MODULE_7__utils_Ease__["cubicOut"];
        /**
         * Collection of properties and their values that should be applied to [[Sprite]]
         * when switching to this State.
         *
         * The property values set on a [[SpriteState]] will override the ones set
         * directly on a [[Sprite]].
         *
         * @type {Dictionary<string, any>}
         */
        _this.properties = {};
        /**
         * A collection of key/value pairs that can be used to bind specific Sprite
         * properties to [[DataItem]].
         *
         * For example: `fill` property can be bound to `myCustomColor` field in
         * DataItem. The Sprite will automatically get the value for `fill` from its
         * DataItem.
         *
         * SpriteState-specific binding will override binding set directly on
         * [[Sprite]]. I.e. you can make Sprite use different fill color on hover by
         * adding a `fill` binding to a different DataItem key for Sprite's "hover"
         * state object.
         *
         * @see {@link Sprite}
         * @type {Object}
         */
        _this.propertyFields = {};
        //public propertyFields: Dictionary<keyof this["_properties"], string> = new Dictionary<keyof this["_properties"], string>();;
        /**
         * A list of [[Filter]] elements to be applied to the relative [[Sprite]]
         * when switching to this State.
         *
         * @param {ListTemplate<Filter>}
         */
        _this.filters = new __WEBPACK_IMPORTED_MODULE_2__utils_List__["e" /* ListTemplate */](new __WEBPACK_IMPORTED_MODULE_3__rendering_filters_Filter__["a" /* Filter */]());
        /**
         * Identifies if this object is a "template" and should not be treated as
         * real object that is drawn or actually used in the chart.
         *
         * @type {boolean}
         */
        _this.isTemplate = false;
        _this.className = "SpriteState";
        // Make filter list disposable
        _this._disposers.push(new __WEBPACK_IMPORTED_MODULE_2__utils_List__["c" /* ListDisposer */](_this.filters));
        // Decorate adapter with events so that we can apply its settings whenever
        // it is modified
        _this.adapter.events.on("insert", function (ev) {
            _this[ev.newValue.key] = _this[ev.newValue.key];
        });
        _this.adapter.events.on("remove", function (ev) {
            _this[ev.newValue.key] = _this[ev.newValue.key];
        });
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Returns [[Sprite]] element's property value.
     *
     * Will check if there are any bindings with [[DataItem]] and if there are
     * any method callbacks set up for the specific property.
     *
     * @param  {Properties}  propertyName  Property name
     * @return {any}                       Property value
     */
    SpriteState.prototype.getPropertyValue = function (propertyName) {
        var propValue = this.properties[propertyName];
        var sprite = this.sprite;
        if (sprite) {
            var fieldName = this.propertyFields[propertyName];
            if (__WEBPACK_IMPORTED_MODULE_9__utils_Type__["hasValue"](fieldName)) {
                if (sprite.dataItem) {
                    propValue = sprite.dataItem.dataContext[fieldName];
                }
            }
            // Apply adapters
            // If the value itself is undefined, we're going to pass in Sprite's
            // value to adapters
            // @todo get rid of <any>
            if (!__WEBPACK_IMPORTED_MODULE_9__utils_Type__["hasValue"](propValue)) {
                var spriteValue = sprite.getPropertyValue(propertyName);
                propValue = this.adapter.apply(propertyName, sprite.getPropertyValue(propertyName));
                if (propValue == spriteValue) {
                    propValue = undefined;
                }
            }
            else {
                propValue = this.adapter.apply(propertyName, propValue);
            }
            /*let method = this.propertyMethods.getKey(propertyName);
            if (method) {
                propValue = method(sprite, propertyName);
            }*/
        }
        return propValue;
    };
    /**
     * Copies all property and style values from another [[SpriteState]] object.
     *
     * @param {SpriteState}  source  Source [[SpriteState]]
     */
    SpriteState.prototype.copyFrom = function (source) {
        if (source != this) {
            this.transitionDuration = source.transitionDuration;
            this.transitionEasing = source.transitionEasing;
            __WEBPACK_IMPORTED_MODULE_6__utils_Utils__["copyProperties"](source.properties, this.properties);
            __WEBPACK_IMPORTED_MODULE_6__utils_Utils__["copyProperties"](source.propertyFields, this.propertyFields);
            this.filters.copyFrom(source.filters);
            this.adapter.copyFrom(source.adapter);
        }
    };
    Object.defineProperty(SpriteState.prototype, "allValues", {
        /**
         * Returns all values that should be applied by the SpriteState.
         *
         * It takes adapters into account.
         *
         * @ignore Exclude from docs
         * @return {ISpriteProperties} Properties
         * @todo Add adapter values
         * @todo proper type this["_properties"]
         */
        get: function () {
            var _this = this;
            // Init return value
            var res = {};
            // Apply adapters to all values
            __WEBPACK_IMPORTED_MODULE_8__utils_Object__["each"](this.properties, function (prop, value) {
                res[prop] = _this.getPropertyValue(prop);
            });
            // Cycle through all adapters and add values for missing properties
            var keys = this.adapter.keys();
            for (var x in keys) {
                var prop = keys[x];
                var value = this.getPropertyValue(prop);
                res[prop] = value;
            }
            // Cycle through all property fileds and add values for missing properties
            var propertyFields = this.propertyFields;
            for (var prop in propertyFields) {
                var value = this.getPropertyValue(prop);
                res[prop] = value;
            }
            return res;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Resets the State to initial state - no values or Filters applied.
     */
    SpriteState.prototype.reset = function () {
        this.properties = {};
        this.filters.clear();
    };
    /**
     * Processes JSON-based config before it is applied to the object.
     *
     * @ignore Exclude from docs
     * @param {object}  config  Config
     */
    SpriteState.prototype.processConfig = function (config) {
        if (__WEBPACK_IMPORTED_MODULE_9__utils_Type__["hasValue"](config) && __WEBPACK_IMPORTED_MODULE_9__utils_Type__["hasValue"](config["properties"])) {
            __WEBPACK_IMPORTED_MODULE_8__utils_Object__["each"](config["properties"], function (key, value) {
                if (__WEBPACK_IMPORTED_MODULE_9__utils_Type__["isString"](value)) {
                    if (value.match(/^[0-9.\-]+\%$/)) {
                        config["properties"][key] = Object(__WEBPACK_IMPORTED_MODULE_5__utils_Percent__["c" /* percent */])(__WEBPACK_IMPORTED_MODULE_9__utils_Type__["toNumber"](value));
                    }
                    else if (value.match(/^\#[0-9abcdef]{3,}$/i)) {
                        config["properties"][key] = Object(__WEBPACK_IMPORTED_MODULE_4__utils_Color__["e" /* toColor */])(value);
                    }
                }
            });
        }
        _super.prototype.processConfig.call(this, config);
    };
    return SpriteState;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["a" /* BaseObject */]));

//# sourceMappingURL=SpriteState.js.map

/***/ }),
/* 71 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return OrderedList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return SortedList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return OrderedListTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return SortedListTemplate; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EventDispatcher__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Array__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Type__ = __webpack_require__(1);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * Ordered list contains values of any type in an indexed array.
 */
var OrderedList = /** @class */ (function () {
    /**
     * Constructor
     *
     * @param {Array<T>}  initial  Inital list of values to add to list
     */
    function OrderedList(initial) {
        /**
         * Holds list values.
         *
         * @type {Array<T>}
         */
        this._values = [];
        /**
         * Event dispatcher.
         *
         * @type {EventDispatcher<AMEvent<this, ISortedListEvents<T>>>}
         */
        this.events = new __WEBPACK_IMPORTED_MODULE_0__EventDispatcher__["a" /* EventDispatcher */]();
        if (initial != null) {
            this.setAll(initial);
        }
    }
    Object.defineProperty(OrderedList.prototype, "values", {
        /**
         * All items of the list.
         *
         * Do not modify the list directly. Rather use `insert()` and `remove()`
         * methods.
         *
         * @return {Array<T>} List values
         */
        get: function () {
            return this._values;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Inserts a value into list item array.
     *
     * @param {T}  value  Value
     */
    OrderedList.prototype._insert = function (value) {
        this._values.push(value);
    };
    Object.defineProperty(OrderedList.prototype, "length", {
        /**
         * Number of items in the list.
         *
         * @readonly
         * @return {number} Length
         */
        get: function () {
            return this._values.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns the index of the specific `value`.
     *
     * -1 if not found.
     *
     * @param  {T}       value  Value
     * @return {number}        Index
     */
    OrderedList.prototype.indexOf = function (value) {
        return __WEBPACK_IMPORTED_MODULE_1__Array__["g" /* indexOf */](this._values, value);
    };
    /**
     * Checks if list contains the `value`.
     *
     * @param  {T}        value  Value
     * @return {boolean}         In the list?
     */
    OrderedList.prototype.contains = function (value) {
        return this.indexOf(value) !== -1;
    };
    /**
     * Returns an item at specific `index`.
     *
     * @param  {number}  index  Index
     * @return {T}              Item
     */
    OrderedList.prototype.getIndex = function (index) {
        return this._values[index];
    };
    Object.defineProperty(OrderedList.prototype, "first", {
        /**
         * First item in the list.
         *
         * @return {T} Item
         */
        get: function () {
            return this._values[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OrderedList.prototype, "last", {
        /**
         * Last item in the list.
         *
         * @return {T} Item
         */
        get: function () {
            return this._values[this._values.length - 1];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Inserts a value into list.
     *
     * @param {T}  value  Value
     */
    OrderedList.prototype.insert = function (value) {
        this._insert(value);
        if (this.events.isEnabled("insert")) {
            this.events.dispatchImmediately("insert", {
                type: "insert",
                target: this,
                newValue: value
            });
        }
    };
    /**
     * Removes an item with the `value` from the list.
     *
     * @param {T}  value  Value
     */
    OrderedList.prototype.remove = function (value) {
        var index = this.indexOf(value);
        if (index !== -1) {
            var oldValue = this._values[index];
            __WEBPACK_IMPORTED_MODULE_1__Array__["l" /* removeIndex */](this._values, index);
            if (this.events.isEnabled("remove")) {
                this.events.dispatchImmediately("remove", {
                    type: "remove",
                    target: this,
                    oldValue: oldValue
                });
            }
        }
    };
    /**
     * Sets multiple items to the list.
     *
     * All current items are removed.
     *
     * @param {Array<T>}  newArray  New items
     */
    OrderedList.prototype.setAll = function (newArray) {
        var _this = this;
        var oldArray = __WEBPACK_IMPORTED_MODULE_1__Array__["b" /* copy */](this._values);
        this._values.length = 0;
        __WEBPACK_IMPORTED_MODULE_1__Array__["c" /* each */](newArray, function (value) {
            _this._insert(value);
        });
        if (this.events.isEnabled("remove")) {
            __WEBPACK_IMPORTED_MODULE_1__Array__["c" /* each */](oldArray, function (x) {
                _this.events.dispatchImmediately("remove", {
                    type: "remove",
                    target: _this,
                    oldValue: x
                });
            });
        }
        if (this.events.isEnabled("insert")) {
            __WEBPACK_IMPORTED_MODULE_1__Array__["c" /* each */](this._values, function (x) {
                _this.events.dispatchImmediately("insert", {
                    type: "insert",
                    target: _this,
                    newValue: x
                });
            });
        }
    };
    /**
     * Removes all items from the list.
     */
    OrderedList.prototype.clear = function () {
        this.setAll([]);
    };
    /**
     * Returns part of the list between `start` and `end` indexes, as a new
     * [[OrderedList]].
     *
     * @param  {number}          start  Start index
     * @param  {number}          end    End index
     * @return {OrderedList<T>}         Items in range
     */
    OrderedList.prototype.slice = function (start, end) {
        var out = new OrderedList();
        out._values = this._values.slice(start, end);
        return out;
    };
    /**
     * Finds a closest available index to the `value` in specified direction.
     *
     * @ignore exclude from docs
     * @param  {number}                      value      value to search for
     * @param  {function}                    fn         A callback function that returns value of the item
     * @param  {"left" | "right" |  "any" }  direction  Direciton
     * @return {number}                                 Index
     */
    OrderedList.prototype.findClosestIndex = function (value, fn, direction) {
        if (direction === void 0) { direction = "any"; }
        // Init temporary values
        var closestIndex = -1;
        var closestValue;
        var closestDifference;
        var i = 0;
        __WEBPACK_IMPORTED_MODULE_2__Iterator__["eachContinue"](this.iterator(), function (element) {
            var item = fn(element);
            // Exact match?
            if (item === value) {
                // Found exact value - don't bother searching further
                closestIndex = i;
                return false;
            }
            // Calc difference
            if (direction === "any") {
                var difference = Math.abs(value - item);
                if (!__WEBPACK_IMPORTED_MODULE_3__Type__["hasValue"](closestDifference) || (closestDifference > difference)) {
                    closestIndex = i;
                    closestValue = item;
                    closestDifference = difference;
                }
            }
            else if (direction === "left" && (item < value)) {
                if (!__WEBPACK_IMPORTED_MODULE_3__Type__["hasValue"](closestValue) || (closestValue < item)) {
                    closestIndex = i;
                    closestValue = item;
                }
            }
            else if (direction === "right" && (item > value)) {
                if (!__WEBPACK_IMPORTED_MODULE_3__Type__["hasValue"](closestValue) || (closestValue > item)) {
                    closestIndex = i;
                    closestValue = item;
                }
            }
            ++i;
            return true;
        });
        // Found nothing?
        if (closestIndex === -1) {
            if (direction === "left") {
                // Use First one
                closestIndex = 0;
            }
            else if (direction === "right") {
                // Use last item
                closestIndex = this.length - 1;
            }
        }
        return closestIndex;
    };
    /**
     * Returns a list iterator.
     *
     * @return {Iterator} Iterator
     */
    OrderedList.prototype.iterator = function () {
        return __WEBPACK_IMPORTED_MODULE_2__Iterator__["fromArray"](this._values);
    };
    /**
     * Returns an ES6 iterator for the list.
     */
    OrderedList.prototype[Symbol.iterator] = function () {
        var length, i;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    length = this._values.length;
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < length)) return [3 /*break*/, 4];
                    return [4 /*yield*/, this._values[i]];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    ++i;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    };
    /**
     * Calls `f` for each element in the list.
     */
    OrderedList.prototype.each = function (f) {
        __WEBPACK_IMPORTED_MODULE_1__Array__["c" /* each */](this._values, f);
    };
    return OrderedList;
}());

/**
 * A list where all items are ordered according to specific ordering function,
 * which is passed in via constructor parameter, when creating an instance of
 * [[SortedList]].
 */
var SortedList = /** @class */ (function (_super) {
    __extends(SortedList, _super);
    /**
     * Constructor.
     *
     * @param {T) => Ordering}  sort  Ordering function
     */
    function SortedList(sort) {
        var _this = _super.call(this) || this;
        _this._ordering = sort;
        return _this;
    }
    /**
     * Inserts item into the list.
     *
     * @param {T}  value  Item
     */
    SortedList.prototype._insert = function (value) {
        var index = __WEBPACK_IMPORTED_MODULE_1__Array__["f" /* getSortedIndex */](this._values, this._ordering, value).index;
        __WEBPACK_IMPORTED_MODULE_1__Array__["h" /* insertIndex */](this._values, index, value);
    };
    /**
     * Returns index of the item in list if found.
     *
     * -1 if item is not in the list.
     *
     * @param  {T}       value  Item to search for
     * @return {number}         Index
     */
    SortedList.prototype.indexOf = function (value) {
        var _a = __WEBPACK_IMPORTED_MODULE_1__Array__["f" /* getSortedIndex */](this._values, this._ordering, value), found = _a.found, index = _a.index;
        if (found) {
            return index;
        }
        else {
            return -1;
        }
    };
    /**
     * [udpate description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param {T} value [description]
     */
    SortedList.prototype.update = function (value) {
        // @todo test this
        var index = __WEBPACK_IMPORTED_MODULE_1__Array__["g" /* indexOf */](this._values, value);
        // @todo throw an error if it doesn't exist ?
        if (index !== -1) {
            var last = this._values.length - 1;
            // Check if the current ordering is correct
            if (!((index === 0 || this._ordering(this._values[index - 1], value) < 0) &&
                (index === last || this._ordering(value, this._values[index + 1]) < 0))) {
                __WEBPACK_IMPORTED_MODULE_1__Array__["l" /* removeIndex */](this._values, index);
                this._insert(value);
            }
        }
    };
    return SortedList;
}(OrderedList));

/**
 * A version of a [[OrderedList]] that has a "template".
 *
 * A template is an instance of an object, that can be used to create new
 * elements in the list without actually needing to create instances for those.
 *
 * When new element is created in the list, e.g. by calling its `create()`
 * method, an exact copy of the element is created (including properties and
 * other attributes), inserted into the list and returned.
 */
var OrderedListTemplate = /** @class */ (function (_super) {
    __extends(OrderedListTemplate, _super);
    /**
     * Constructor
     *
     * @param {T} t Template object
     */
    function OrderedListTemplate(t) {
        var _this = _super.call(this) || this;
        _this.template = t;
        return _this;
    }
    Object.defineProperty(OrderedListTemplate.prototype, "template", {
        /**
         * @return {T} Template object
         */
        get: function () {
            return this._template;
        },
        /**
         * A "template" object to copy all properties from when creating new list
         * items.
         *
         * @param {T}  v  Template object
         */
        set: function (v) {
            v.isTemplate = true;
            this._template = v;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Copies all elements from other list.
     *
     * @param {OrderedListTemplate}  source  Source list
     */
    OrderedListTemplate.prototype.copyFrom = function (source) {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_2__Iterator__["each"](source.iterator(), function (value) {
            _this.insert(value.clone());
        });
    };
    /**
     * Returns part of the list, starting at `start` and ending at `end` indexes,
     * as a new [[OrderedListTemplate]].
     *
     * @param  {number}                  start  Start index
     * @param  {number}                  end    End index
     * @return {OrderedListTemplate<T>}         New list
     */
    OrderedListTemplate.prototype.slice = function (start, end) {
        var out = new OrderedListTemplate(this.template);
        out._values = this._values.slice(start, end);
        return out;
    };
    OrderedListTemplate.prototype.create = function (make) {
        var clone = (make != null
            ? new make()
            : this.template.clone());
        this.insert(clone);
        return clone;
    };
    return OrderedListTemplate;
}(OrderedList));

/**
 * A version of a [[SortedList]] that has a "template".
 *
 * A template is an instance of an object, that can be used to create new
 * elements in the list without actually needing to create instances for those.
 *
 * When new element is created in the list, e.g. by calling its `create()`
 * method, an exact copy of the element is created (including properties and
 * other attributes), inserted into the list and returned.
 */
var SortedListTemplate = /** @class */ (function (_super) {
    __extends(SortedListTemplate, _super);
    /**
     * Constructor
     *
     * @param {T}         t     Template object
     * @param {function}  sort  Ordering function
     */
    function SortedListTemplate(t, sort) {
        var _this = _super.call(this, sort) || this;
        _this.template = t;
        return _this;
    }
    Object.defineProperty(SortedListTemplate.prototype, "template", {
        /**
         * @return {T} Template object
         */
        get: function () {
            return this._template;
        },
        /**
         * A "template" object to copy all properties from when creating new list
         * items.
         *
         * @param {T}  v  Template object
         */
        set: function (v) {
            v.isTemplate = true;
            this._template = v;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Copies all elements from other list.
     *
     * @param {SortedListTemplate}  source  Source list
     */
    SortedListTemplate.prototype.copyFrom = function (source) {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_2__Iterator__["each"](source.iterator(), function (value) {
            _this.insert(value.clone());
        });
    };
    SortedListTemplate.prototype.create = function (make) {
        var clone = (make != null
            ? new make()
            : this.template.clone());
        this.insert(clone);
        return clone;
    };
    return SortedListTemplate;
}(SortedList));

//# sourceMappingURL=SortedList.js.map

/***/ }),
/* 72 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = reverse;
/* harmony export (immutable) */ __webpack_exports__["a"] = or;
/**
 * A collection of functions for ordering.
 */
/**
 * [reverse description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {Ordering}  a  [description]
 * @return {Ordering}     [description]
 */
function reverse(a) {
    switch (a) {
        case 0:
            return 0;
        case -1:
            return 1;
        case 1:
            return -1;
    }
}
/**
 * [or description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param  {Ordering}  a  Item 1
 * @param  {Ordering}  b  Item 2
 * @return {Ordering}     [description]
 */
function or(a, b) {
    if (a === 0) {
        return b;
    }
    else {
        return a;
    }
}
//# sourceMappingURL=Order.js.map

/***/ }),
/* 73 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Pattern; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__System__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Animation__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_InterfaceColorSet__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_Object__ = __webpack_require__(13);
/**
 * Pattern module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */








;
/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Base class to define patterns.
 */
var Pattern = /** @class */ (function (_super) {
    __extends(Pattern, _super);
    //public propertyValues = new Dictionary<PatternProperties, any>();
    /**
     * Constructor
     */
    function Pattern() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * List of elements the pattern consists of.
         *
         * @type {List<AMElement>}
         */
        _this._elements = new __WEBPACK_IMPORTED_MODULE_2__utils_List__["b" /* List */]();
        /**
         * A storage for Filter property/value pairs.
         *
         * @ignore Exclude from docs
         * @see {@link PatternProperties}
         * @type {PatternProperties}
         */
        _this.properties = {};
        _this.className = "Pattern";
        // Set defaults
        _this.width = 10;
        _this.height = 10;
        _this.x = 0;
        _this.y = 0;
        _this.patternUnits = "userSpaceOnUse";
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_5__utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        _this.backgroundFill = interfaceColors.getFor("background");
        _this.backgroundOpacity = 0;
        _this.fillOpacity = 1;
        _this.fill = interfaceColors.getFor("alternativeBackground");
        _this.stroke = interfaceColors.getFor("alternativeBackground");
        _this.strokeOpacity = 1;
        _this.strokeWidth = 1;
        _this.shapeRendering = "crispEdges";
        _this.rotation = 0;
        // Create main group to store pattern elements inelements
        _this.element = _this.paper.addGroup("pattern");
        _this.id = "pattern-" + __WEBPACK_IMPORTED_MODULE_4__Registry__["b" /* registry */].getUniqueId();
        _this.element.attr({ "id": _this.id });
        _this._disposers.push(_this.element);
        // Make elements disposable
        _this._disposers.push(new __WEBPACK_IMPORTED_MODULE_2__utils_List__["c" /* ListDisposer */](_this._elements));
        // Request again to trigger getter/setter code
        _this.patternUnits = _this.patternUnits;
        _this.width = _this.width;
        _this.height = _this.height;
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the pattern.
     */
    Pattern.prototype.draw = function () {
        var _this = this;
        var patternElement = this.element;
        if (patternElement) {
            patternElement.removeChildNodes();
            var background = this.paper.add("rect");
            background.attr({ "width": this.width, "height": this.height, "shape-rendering": "crispEdges", "fill": this.backgroundFill.hex, "fill-opacity": this.backgroundOpacity, "stroke": this.backgroundFill.hex, "stroke-opacity": this.backgroundOpacity });
            patternElement.add(background);
            patternElement.attr({ "x": this.x, "y": this.y, "width": this.width, "height": this.height, "stroke": this.stroke.hex, "fill": this.fill.hex, "fill-opacity": this.fillOpacity, "stroke-opacity": this.strokeOpacity, "stroke-width": this.strokeWidth, "shape-rendering": this.shapeRendering, "patternUnits": this.patternUnits });
            __WEBPACK_IMPORTED_MODULE_6__utils_Iterator__["each"](this._elements.iterator(), function (element) {
                element.rotation = _this.rotation;
                _this.element.add(element);
            });
        }
    };
    /**
     * Animate pattern properties.
     *
     * @see {@link Animation}
     * @param  {IAnimationOptions[] | IAnimationOptions}  animationOptions  Animation options
     * @param  {number}                                   duration          Duration (ms)
     * @param  {(number) => number}                       easing            Easing function
     * @return {Animation}                                                  Animation instance
     */
    Pattern.prototype.animate = function (animationOptions, duration, easing) {
        return new __WEBPACK_IMPORTED_MODULE_3__utils_Animation__["a" /* Animation */](this, animationOptions, duration, easing).start();
    };
    /**
     * Adds an element to the pattern.
     *
     * @param {AMElement}  element  Element
     */
    Pattern.prototype.addElement = function (element) {
        this._elements.push(element);
        this._disposers.push(element);
    };
    /**
     * Remove an element from the pattern.
     *
     * @param {AMElement}  element  Element
     */
    Pattern.prototype.removeElement = function (element) {
        this._elements.removeValue(element);
        this.removeDispose(element);
    };
    Object.defineProperty(Pattern.prototype, "fillOpacity", {
        /**
         * @return {number} Opacity (0-1)
         */
        get: function () {
            return this.properties["fillOpacity"];
        },
        /**
         * Pattern fill opacity. (0-1)
         *
         * @param {number}  value  Opacity (0-1)
         */
        set: function (value) {
            this.properties["fillOpacity"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pattern.prototype, "fill", {
        /**
         * @return {Color} Fill color
         */
        get: function () {
            return this.properties["fill"];
        },
        /**
         * Fill color of the pattern.
         *
         * @param {Color}  value  Fill color
         */
        set: function (value) {
            this.properties["fill"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pattern.prototype, "backgroundFill", {
        /**
         * @return {Color} Background color
         */
        get: function () {
            return this.properties["backgroundFill"];
        },
        /**
         * Pattern background fill color.
         *
         * @param {Color}  value  Background color
         */
        set: function (value) {
            this.properties["backgroundFill"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pattern.prototype, "backgroundOpacity", {
        /**
         * @return {number} Background opacity (0-1)
         */
        get: function () {
            return this.properties["backgroundOpacity"];
        },
        /**
         * Pattern backgorund opacity. (0-1)
         *
         * @param {number}  value  Background opacity (0-1)
         */
        set: function (value) {
            this.properties["backgroundOpacity"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pattern.prototype, "stroke", {
        /**
         * @return {Color} Color
         */
        get: function () {
            return this.properties["stroke"];
        },
        /**
         * Pattern stroke (border) color.
         *
         * @param {Color}  value  Color
         */
        set: function (value) {
            this.properties["stroke"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pattern.prototype, "strokeOpacity", {
        /**
         * @return {number} Opacity (0-1)
         */
        get: function () {
            return this.properties["strokeOpacity"];
        },
        /**
         * Pattern stroke opacity. (0-1)
         *
         * @param {number}  value  Opacity (0-1)
         */
        set: function (value) {
            this.properties["strokeOpacity"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pattern.prototype, "strokeWidth", {
        /**
         * @return {number} Stroke thickness (px)
         */
        get: function () {
            return this.properties["strokeWidth"];
        },
        /**
         * Pattern stroke thickness in pixels.
         *
         * @param {number}  value  Stroke thickness (px)
         */
        set: function (value) {
            this.properties["strokeWidth"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pattern.prototype, "shapeRendering", {
        get: function () {
            return this.properties["shapeRendering"];
        },
        /**
         * Shape rendering
         * @param {ShapeRendering} value [description]
         */
        set: function (value) {
            this.properties["shapeRendering"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pattern.prototype, "rotation", {
        /**
         * @return {number} Rotation
         */
        get: function () {
            return this.properties["rotation"];
        },
        /**
         * Pattern rotation in degrees.
         *
         * @param {number}  value  Rotation
         */
        set: function (value) {
            this.properties["rotation"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pattern.prototype, "patternUnits", {
        /**
         * @return {"userSpaceOnUse" | "objectBoundingBox"} Units
         */
        get: function () {
            return this.properties["patternUnits"];
        },
        /**
         * Pattern measuring units.
         *
         * Available options: "userSpaceOnUse" | "objectBoundingBox".
         *
         * @param {"userSpaceOnUse" | "objectBoundingBox"}  value  Units
         */
        set: function (value) {
            this.properties["patternUnits"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pattern.prototype, "width", {
        /**
         * @return {number} Width (px)
         */
        get: function () {
            return this.properties["width"];
        },
        /**
         * Pattern width in pixels.
         *
         * @param {number}  value  Width (px)
         */
        set: function (value) {
            this.properties["width"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pattern.prototype, "height", {
        /**
         * @return {number} Height (px)
         */
        get: function () {
            return this.properties["height"];
        },
        /**
         * Pattern height in pixels.
         *
         * @param {number} value Height (px)
         */
        set: function (value) {
            this.properties["height"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pattern.prototype, "x", {
        /**
         * @return {number} X (px)
         */
        get: function () {
            return this.properties["x"];
        },
        /**
         * X position. (pixels)
         *
         * @param {number} value X (px)
         */
        set: function (value) {
            this.properties["x"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pattern.prototype, "y", {
        /**
         * @return {number} Y (px)
         */
        get: function () {
            return this.properties["y"];
        },
        /**
         * Y position. (px)
         *
         * @param {number} value Y (px)
         */
        set: function (value) {
            this.properties["y"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pattern.prototype, "paper", {
        /**
         * @ignore Exclude from docs
         * @return {Paper} Paper
         */
        get: function () {
            if (this._paper) {
                return this._paper;
            }
            return Object(__WEBPACK_IMPORTED_MODULE_1__System__["b" /* getSystem */])().ghostPaper;
        },
        /**
         * [[Paper]] instance to draw pattern in.
         *
         * @ignore Exclude from docs
         * @param {Paper}  paper  Paper
         */
        set: function (paper) {
            if (this._paper != paper) {
                this._paper = paper;
                this.draw();
                paper.appendDef(this.element);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Copies properties from another Pattern instance.
     *
     * @param {this}  source  Source pattern
     */
    Pattern.prototype.copyFrom = function (source) {
        var _this = this;
        _super.prototype.copyFrom.call(this, source);
        __WEBPACK_IMPORTED_MODULE_7__utils_Object__["each"](source.properties, function (key, value) {
            _this[key] = value;
        });
    };
    Object.defineProperty(Pattern.prototype, "animations", {
        /**
         * A list of animations currently running on the patter.
         *
         * @ignore Exclude from docs
         * @return {Array<Animation>} Animation list
         */
        get: function () {
            if (!this._animations) {
                this._animations = [];
                this._disposers.push(new __WEBPACK_IMPORTED_MODULE_3__utils_Animation__["b" /* AnimationDisposer */](this._animations));
            }
            return this._animations;
        },
        enumerable: true,
        configurable: true
    });
    return Pattern;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["a" /* BaseObject */]));

//# sourceMappingURL=Pattern.js.map

/***/ }),
/* 74 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AMElement; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_DOM__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Type__ = __webpack_require__(1);
/**
 * [[AMElement]] represents any SVG element and related functionality.
 */


/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * A base class for all SVG elements. Provides low-level DOM functionality.
 *
 * All visual elements extend this class.
 */
var AMElement = /** @class */ (function () {
    /**
     * Constructor creates a new element or uses the one that was passed in.
     *
     * @param {string | SVGSVGElement} element Element reference node type
     */
    function AMElement(element) {
        /**
         * Indicates if the element was already disposed.
         *
         * @type {boolean}
         */
        this._isDisposed = false;
        /**
         * Current X coordinate.
         *
         * @type {number}
         */
        this._x = 0;
        /**
         * Current Y coordinate.
         *
         * @type {number}
         */
        this._y = 0;
        /**
         * Current rotation.
         *
         * @type {number}
         */
        this._rotation = 0;
        /**
         * Current scale.
         *
         * @type {number}
         */
        this._scale = 1;
        if (typeof element === "string") {
            this.node = document.createElementNS(__WEBPACK_IMPORTED_MODULE_0__utils_DOM__["a" /* SVGNS */], element);
        }
        else {
            this.node = element;
        }
    }
    /**
     * Removes element's node from DOM.
     */
    AMElement.prototype.removeNode = function () {
        if (this.node) {
            if (this.node.parentNode) {
                this.node.parentNode.removeChild(this.node);
            }
        }
    };
    Object.defineProperty(AMElement.prototype, "transformString", {
        /**
         * Returns `transform` attribute of the element.
         *
         * @ignore Exclude from docs
         * @return {string} Transform attribute value
         */
        get: function () {
            if (this.node) {
                return this.node.getAttribute("transform");
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Appply position, rotation and scale properties via elemen's `transform`
     * property
     *
     * @ignore Exclude from docs
     */
    AMElement.prototype.transform = function () {
        var transfromString = "";
        transfromString += "translate(" + this._x + "," + this._y + ")";
        if (this._scale != 1) {
            transfromString += ((transfromString ? " " : "") + "scale(" + this._scale + ")");
        }
        if (this._rotation != 0) {
            transfromString += ((transfromString ? " " : "") + "rotate(" + this._rotation + ")");
        }
        this.node.setAttribute("transform", transfromString);
    };
    /**
     * Returns bounding box of the element.
     *
     * ATTENTION: Bounding box calculations are extremely costly so should be
     * used sparingly and cached whenever possible.
     *
     * @return {IRectangle} Bounding rectangle
     */
    AMElement.prototype.getBBox = function () {
        var bbox = {
            width: 0,
            height: 0,
            x: 0,
            y: 0
        };
        if (this.node) {
            // FF would fail if getBBox() is called without node added to parent
            if (this.node.parentNode) {
                try { // again for ff. TODO: check if this doesn't slow down
                    var svgbbox = this.node.getBBox();
                    bbox.x = svgbbox.x;
                    bbox.y = svgbbox.y;
                    bbox.width = svgbbox.width;
                    bbox.height = svgbbox.height;
                }
                catch (err) {
                }
            }
        }
        return bbox;
    };
    /**
     * Moves the element to new coordinates.
     *
     * @param {number}  x  Target X
     * @param {number}  y  Target Y
     */
    AMElement.prototype.moveTo = function (point) {
        if (point) {
            var x = point.x;
            var y = point.y;
            if ((this._x != x && __WEBPACK_IMPORTED_MODULE_1__utils_Type__["isNumber"](x)) || (this._y != y && __WEBPACK_IMPORTED_MODULE_1__utils_Type__["isNumber"](y))) {
                this._x = x;
                this._y = y;
                this.transform();
            }
        }
    };
    Object.defineProperty(AMElement.prototype, "content", {
        /**
         * Returns element's contents as SVG markup.
         *
         * @return {string} Contents
         */
        get: function () {
            // @todo Do not use `innerHTML` as this is not reliable and will not work on all browsers
            return this.node.innerHTML || "";
        },
        /**
         * Element's SVG contents.
         *
         * @param {string} value Contents
         */
        set: function (value) {
            // @todo Do not use `innerHTML` as this is not reliable and will not work on all browsers
            this.node.innerHTML = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AMElement.prototype, "textContent", {
        /**
         * @return {string} Text contents
         */
        get: function () {
            return this.node.textContent || "";
        },
        /**
         * Text contents of the SVG element.
         *
         * @param {string} value Text contents
         */
        set: function (value) {
            this.node.textContent = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AMElement.prototype, "x", {
        /**
         * @return {number} X coordinate (px)
         */
        get: function () {
            return this._x;
        },
        /**
         * Element's X position in pixels.
         *
         * @param {number}  value  X coordinate (px)
         */
        set: function (value) {
            if (this._x != value && __WEBPACK_IMPORTED_MODULE_1__utils_Type__["isNumber"](value)) {
                this._x = value;
                this.transform();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AMElement.prototype, "y", {
        /**
         * @return {number} Y coordinate (px)
         */
        get: function () {
            return this._y;
        },
        /**
         * Element's Y position in pixels.
         *
         * @param {number} value Y coordinate (px)
         */
        set: function (value) {
            if (this._y != value && __WEBPACK_IMPORTED_MODULE_1__utils_Type__["isNumber"](value)) {
                this._y = value;
                this.transform();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AMElement.prototype, "rotation", {
        /**
         * @return {number} Rotation
         */
        get: function () {
            return this._rotation;
        },
        /**
         * Element's rotation in degrees.
         *
         * @param {number} value Rotation
         */
        set: function (angle) {
            if (this._rotation != angle) {
                this._rotation = angle;
                this.transform();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AMElement.prototype, "scale", {
        /**
         * @return {number} Scale
         */
        get: function () {
            return this._scale;
        },
        /**
         * Element's scale where 1 is original size.
         *
         * Setting to 0.5 will reduce element's size by 50%, 2 will make element
         * twice as large, etc.
         *
         * @param {number} value Scale
         */
        set: function (value) {
            if (this._scale != value) {
                this._scale = value;
                this.transform();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Removes an attribute from element.
     *
     * @param {string}  attribute  Attribute to remove
     */
    AMElement.prototype.removeAttr = function (attribute) {
        this.node.removeAttribute(attribute);
    };
    /**
     * Sets a set of attributes on a element.
     *
     * @param  {ISVGAttribute}  attributes  An object with attribute names (key) and values
     * @return {AMElement}                  The same element
     */
    AMElement.prototype.attr = function (attributes) {
        for (var attributeName in attributes) {
            if (!__WEBPACK_IMPORTED_MODULE_1__utils_Type__["hasValue"](attributes[attributeName])) {
                this.node.removeAttribute(attributeName);
            }
            else {
                this.node.setAttribute(attributeName, attributes[attributeName]);
            }
        }
        return this;
    };
    /**
     * Returns a value of a node attribute.
     *
     * @param  {string}  attribute  Attribute name
     * @return {string}             Attribute value
     */
    AMElement.prototype.getAttr = function (attribute) {
        return this.node.getAttribute(attribute);
    };
    /**
     * Sets a single attribute of the element's node using namesspace.
     *
     * @param  {string}     ns         Namespace
     * @param  {string}     attribute  Attribute
     * @param  {string}     value      Value
     * @return {AMElement}             The same element
     */
    AMElement.prototype.attrNS = function (ns, attribute, value) {
        this.node.setAttributeNS(ns, attribute, value);
        return this;
    };
    /**
     * Returns a namespaced attribute value from node.
     *
     * @param  {string}  ns         Namespace
     * @param  {string}  attribute  Attribute
     * @return {string}             Attribute value
     */
    AMElement.prototype.getAttrNS = function (ns, attribute) {
        return this.node.getAttributeNS(ns, attribute);
    };
    /**
     * Removes `style` attribute from node.
     *
     * @param {string}  attribute  Attribute to remove
     */
    AMElement.prototype.removeStyle = function (attribute) {
        // @todo Review because it's a bit messy and maybe not needed (pratically not used)
        delete this.node.style[attribute];
    };
    /**
     * Returns style attribute value.
     *
     * @param  {string}  attribute  Style attribute value
     * @return {string}             Attribute value
     */
    AMElement.prototype.getStyle = function (attribute) {
        // @todo Review because it's a bit messy and maybe not needed (pratically not used)
        return this.node.style[attribute];
    };
    /**
     * Adds style attributes to element's node.
     *
     * @param  {Object}     attributes  Object containing attribute: value pairs
     * @return {AMElement}              The same element
     */
    AMElement.prototype.addStyle = function (attributes) {
        // @todo Review because it's a bit messy and maybe not needed (pratically not used)
        for (var attributeName in attributes) {
            if (!__WEBPACK_IMPORTED_MODULE_1__utils_Type__["hasValue"](attributes[attributeName])) {
                this.removeStyle(attributeName);
            }
            else {
                this.node.style[attributeName] = attributes[attributeName];
            }
        }
        return this;
    };
    /**
     * Adds a class to element.
     *
     * @param {string}  name  Class name
     */
    AMElement.prototype.addClass = function (name) {
        __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["f" /* addClass */](this.node, name);
    };
    /**
     * Removes a class from element.
     *
     * @param {string} name Class name
     */
    AMElement.prototype.removeClass = function (name) {
        __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["q" /* removeClass */](this.node, name);
    };
    /**
     * Sets a class name on element.
     *
     * @param {string}  name  Class name
     */
    AMElement.prototype.setClass = function (name) {
        this.node.setAttribute("class", name);
    };
    /**
     * Removes all element's child nodes, basically leaving it empty.
     */
    AMElement.prototype.removeChildNodes = function () {
        // remove all children
        while (this.node.childNodes.length > 0) {
            this.node.removeChild(this.node.firstChild);
        }
    };
    /**
     * Was this element already been disposed?
     *
     * @return {boolean} Disposed?
     */
    AMElement.prototype.isDisposed = function () {
        return this._isDisposed;
    };
    /**
     * Disposes element.
     */
    AMElement.prototype.dispose = function () {
        this.removeNode();
    };
    return AMElement;
}());

//# sourceMappingURL=AMElement.js.map

/***/ }),
/* 75 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return WavedLine; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Line__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Color__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__rendering_Smoothing__ = __webpack_require__(46);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__rendering_Path__ = __webpack_require__(8);
/**
 * Functionality for drawing waved lines.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Draws a waved line.
 *
 * @see {@link IWavedLineEvents} for a list of available events
 * @see {@link IWavedLineAdapters} for a list of available Adapters
 */
var WavedLine = /** @class */ (function (_super) {
    __extends(WavedLine, _super);
    /**
     * Constructor
     */
    function WavedLine() {
        var _this = _super.call(this) || this;
        _this.className = "WavedLine";
        _this.element = _this.paper.add("path");
        _this.waveLength = 16;
        _this.waveHeight = 4;
        _this.tension = 0.8;
        _this.pixelPerfect = false;
        _this.fill = Object(__WEBPACK_IMPORTED_MODULE_1__utils_Color__["c" /* color */])();
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the waved line.
     *
     * @ignore Exclude from docs
     */
    WavedLine.prototype.draw = function () {
        //super.draw();
        var p1 = { x: this.x1, y: this.y1 };
        var p2 = { x: this.x2, y: this.y2 };
        var d = __WEBPACK_IMPORTED_MODULE_3__rendering_Path__["moveTo"](p1) + Object(__WEBPACK_IMPORTED_MODULE_2__rendering_Smoothing__["c" /* wavedLine */])(p1, p2, this.waveLength, this.waveHeight, this.tension, true);
        this.element.attr({ "d": d });
    };
    Object.defineProperty(WavedLine.prototype, "waveLength", {
        /**
         * @return {number} Wave length (px)
         */
        get: function () {
            return this.getPropertyValue("waveLength");
        },
        /**
         * Wave length in pixels.
         *
         * @default 16
         * @param {number}  value  Wave length (px)
         */
        set: function (value) {
            this.setPropertyValue("waveLength", value);
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WavedLine.prototype, "waveHeight", {
        /**
         * @return {number} Wave height (px)
         */
        get: function () {
            return this.getPropertyValue("waveHeight");
        },
        /**
         * Wave height in pixels.
         *
         * @default 4
         * @param {number}  value  Wave height (px)
         */
        set: function (value) {
            this.setPropertyValue("waveHeight", value);
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WavedLine.prototype, "tension", {
        /**
         * @return {number} Tension
         */
        get: function () {
            return this.getPropertyValue("tension");
        },
        /**
         * Tension of the wave.
         *
         * @default 0.8
         * @param {number}  value  Tension
         */
        set: function (value) {
            this.setPropertyValue("tension", value);
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    return WavedLine;
}(__WEBPACK_IMPORTED_MODULE_0__Line__["a" /* Line */]));

//# sourceMappingURL=WavedLine.js.map

/***/ }),
/* 76 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AxisLabelCircular; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__AxisLabel__ = __webpack_require__(100);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_Type__ = __webpack_require__(1);
/**
 * Axis Label module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Use to create labels on circular axis.
 *
 * @see {@link IAxisLabelCircularEvents} for a list of available events
 * @see {@link IAxisLabelCircularAdapters} for a list of available Adapters
 */
var AxisLabelCircular = /** @class */ (function (_super) {
    __extends(AxisLabelCircular, _super);
    /**
     * Constructor
     */
    function AxisLabelCircular() {
        var _this = _super.call(this) || this;
        _this.className = "AxisLabelCircular";
        _this.padding(0, 0, 0, 0);
        _this.location = 0.5;
        _this.radius = 0;
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(AxisLabelCircular.prototype, "relativeRotation", {
        /**
         * @return {number} Rotation angle
         */
        get: function () {
            return this.getPropertyValue("relativeRotation");
        },
        /**
         * Relative rotation of the label.
         *
         * It is an angle to circle. In case 90, labels will be positioned like rays
         * of light, if 0 - positione along the circle.
         *
         * @param {number} value Rotation angle
         */
        set: function (value) {
            this.setPropertyValue("relativeRotation", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisLabelCircular.prototype, "radius", {
        /**
         * @return {number} Distance (px)
         */
        get: function () {
            return this.getPropertyValue("radius");
        },
        /**
         * Distance from axis circle to label in pixels.
         *
         * @param {number} value Distance (px)
         */
        set: function (value) {
            // No percent here, as it would be quite complicated to calculate radius
            // of a chart together with axis label radius
            this.setPropertyValue("radius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * [fixPoint description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {IPoint}  point       Label affixation point
     * @param  {number}  axisRadius  Distance from point (px)
     * @return {IPoint}              [description]
     */
    AxisLabelCircular.prototype.fixPoint = function (point, axisRadius) {
        var angle = __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["DEGREES"] * Math.atan2(point.y, point.x);
        if (this.invalid) {
            this.validate(); //@todo" check if we need this
        }
        var sign = 1;
        if (this.inside) {
            sign = -1;
        }
        var relativeRotation = this.relativeRotation;
        // we don't use valign for labels because then they would jump while animating. instead we modify dy depending on a y position
        // this math makes dy to be 1 at the top of the circle, 0.5 at the middle and 1 at the bottom
        // @todo with this math doesn't work well with inside = true
        this.dy = -this.measuredHeight * (1 - (point.y + axisRadius) / (2 * axisRadius));
        // simmilar with dx
        this.dx = -this.measuredWidth * (1 - (point.x + axisRadius) / (2 * axisRadius));
        var labelRadius = this.radius * sign;
        if (__WEBPACK_IMPORTED_MODULE_3__core_utils_Type__["isNumber"](relativeRotation)) {
            this.rotation = relativeRotation + angle + 90;
            var pixelWidth = this.bbox.width;
            var pixelHeight = this.bbox.height;
            var dH = __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["sin"](relativeRotation) / 2;
            var dW = __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["cos"](relativeRotation) / 2;
            var rotation = this.rotation;
            this.dx = pixelHeight * dH * __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["sin"](rotation) - pixelWidth * dW * __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["cos"](rotation);
            this.dy = -pixelHeight * dH * __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["cos"](rotation) - pixelWidth * dW * __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["sin"](rotation);
            var pixelPaddingBottom = this.pixelPaddingBottom;
            var pixelPaddingTop = this.pixelPaddingTop;
            var pixelPaddingLeft = this.pixelPaddingLeft;
            var pixelPaddingRight = this.pixelPaddingRight;
            if (!this.inside) {
                labelRadius += (pixelHeight + pixelPaddingBottom + pixelPaddingTop) * __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["cos"](relativeRotation) + (pixelWidth + pixelPaddingLeft + pixelPaddingRight) * __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["sin"](relativeRotation);
            }
            else {
                labelRadius -= (pixelPaddingBottom + pixelPaddingTop) * __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["cos"](relativeRotation) + (pixelPaddingLeft + pixelPaddingRight) * __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["sin"](relativeRotation);
            }
        }
        point.x += __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["cos"](angle) * labelRadius;
        point.y += __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["sin"](angle) * labelRadius;
        return point;
    };
    return AxisLabelCircular;
}(__WEBPACK_IMPORTED_MODULE_0__AxisLabel__["a" /* AxisLabel */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["b" /* registry */].registeredClasses["AxisLabelCircular"] = AxisLabelCircular;
//# sourceMappingURL=AxisLabelCircular.js.map

/***/ }),
/* 77 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Polyline; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Color__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__rendering_Path__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Math__ = __webpack_require__(2);
/**
 * Polyline module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Draws a polyline.
 *
 * @see {@link IPolylineEvents} for a list of available events
 * @see {@link IPolylineAdapters} for a list of available Adapters
 */
var Polyline = /** @class */ (function (_super) {
    __extends(Polyline, _super);
    /**
     * Constructor
     */
    function Polyline() {
        var _this = _super.call(this) || this;
        _this.className = "Polyline";
        _this.element = _this.paper.add("path");
        _this.shapeRendering = "auto";
        _this.fill = Object(__WEBPACK_IMPORTED_MODULE_1__utils_Color__["c" /* color */])();
        _this.strokeOpacity = 1;
        _this.applyTheme();
        return _this;
    }
    /**
     * Creats and adds an SVG path for the arc.
     *
     * @ignore Exclude from docs
     */
    Polyline.prototype.makePath = function () {
        this._distance = 0;
        var segments = this.segments;
        if (segments && segments.length > 0) {
            var path = "";
            for (var i = 0; i < segments.length; i++) {
                var points = segments[i];
                if (points.length > 0) {
                    path += __WEBPACK_IMPORTED_MODULE_3__rendering_Path__["moveTo"](points[0]);
                    for (var p = 1; p < points.length; p++) {
                        var point = points[p];
                        path += __WEBPACK_IMPORTED_MODULE_3__rendering_Path__["lineTo"](point);
                        this._distance += __WEBPACK_IMPORTED_MODULE_4__utils_Math__["getDistance"](points[p - 1], point);
                    }
                }
            }
            this.element.attr({ "d": path });
        }
        this._realSegments = segments;
    };
    Object.defineProperty(Polyline.prototype, "segments", {
        /**
         * @return {IPoint[]} Segments
         */
        get: function () {
            return this.getPropertyValue("segments");
        },
        /**
         * A list of segment coordinates for the multi-part line.
         *
         * @todo Example
         * @param {IPoint[][]}  segments  Segments
         */
        set: function (segments) {
            this.setPropertyValue("segments", segments);
            this.makePath();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Polyline.prototype, "distance", {
        /**
         * [distance description]
         *
         * @todo Description
         * @return {number} [description]
         */
        get: function () {
            return this._distance;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Converts relative position along the line (0-1) into pixel coordinates.
     *
     * @param  {number}             position  Position (0-1)
     * @return {IOrientationPoint}            Coordinates
     */
    Polyline.prototype.positionToPoint = function (position) {
        var deltaAngle = 0;
        if (position < 0) {
            position = Math.abs(position);
            deltaAngle = 180;
        }
        var segments = this._realSegments;
        if (segments) {
            var totalDistance = this.distance;
            var currentDistance = 0;
            var distanceAB = void 0;
            var positionA = 0;
            var positionB = 0;
            var pointA = void 0;
            var pointB = void 0;
            for (var s = 0; s < segments.length; s++) {
                var points = segments[s];
                if (points.length > 1) {
                    for (var p = 1; p < points.length; p++) {
                        pointA = points[p - 1];
                        pointB = points[p];
                        positionA = currentDistance / totalDistance;
                        distanceAB = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["getDistance"](pointA, pointB);
                        currentDistance += distanceAB;
                        positionB = currentDistance / totalDistance;
                        if (positionA <= position && positionB > position) {
                            s = segments.length;
                            break;
                        }
                    }
                }
            }
            var positionAB = (position - positionA) / (positionB - positionA);
            var midPoint = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["getMidPoint"](pointA, pointB, positionAB);
            return { x: midPoint.x, y: midPoint.y, angle: deltaAngle + __WEBPACK_IMPORTED_MODULE_4__utils_Math__["getAngle"](pointA, pointB) };
        }
        return { x: 0, y: 0, angle: 0 };
    };
    return Polyline;
}(__WEBPACK_IMPORTED_MODULE_0__Sprite__["a" /* Sprite */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__Registry__["b" /* registry */].registeredClasses["Polyline"] = Polyline;
//# sourceMappingURL=Polyline.js.map

/***/ }),
/* 78 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Scrollbar; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__elements_ResizeButton__ = __webpack_require__(143);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__elements_Button__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__interaction_Interaction__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__interaction_Mouse__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__elements_RoundedRectangle__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_Keyboard__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_utils_InterfaceColorSet__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils_Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__utils_Ease__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__utils_Type__ = __webpack_require__(1);
/**
 * Provides functionality used to build scrollbars.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */













;
/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Scrollbar is a generic control allowing to select a range of values or pan
 * the selection.
 *
 * @see {@link IScrollbarEvents} for a list of available events
 * @see {@link IScrollbarAdapters} for a list of available Adapters
 */
var Scrollbar = /** @class */ (function (_super) {
    __extends(Scrollbar, _super);
    /**
     * Construtor
     */
    function Scrollbar() {
        var _this = _super.call(this) || this;
        /**
         * A value of previously selected lower value, used for doubleclick function.
         *
         * @type {number}
         */
        _this._prevStart = 0;
        /**
         * A value of previously selected upper value, used for doubleclick function.
         *
         * @type {number}
         */
        _this._prevEnd = 1;
        /**
         * Indicates if the Scrollbar is currently "busy" (animating and or
         * performing zoom by user interaction).
         *
         * @type {boolean}
         */
        _this._isBusy = false;
        /**
         * [_skipRangeEvents description]
         *
         * @todo Description
         * @type {boolean}
         */
        _this._skipRangeEvents = false;
        /**
         * Update the selection when dragging the grips.
         *
         * If set to `false` selection will be updated only when the grip is
         * released.
         *
         * @default true
         * @type {boolean}
         */
        _this.updateWhileMoving = true;
        _this.className = "Scrollbar";
        _this.minHeight = 12;
        _this.minWidth = 12;
        _this.animationDuration = 0;
        _this.animationEasing = __WEBPACK_IMPORTED_MODULE_11__utils_Ease__["cubicOut"];
        _this.margin(10, 10, 10, 10);
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_8__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        // background is also container as it might contain graphs, grid, etc
        var background = _this.background;
        background.cornerRadius(10, 10, 10, 10);
        background.fill = interfaceColors.getFor("fill");
        background.fillOpacity = 0.5;
        _this.startGrip = new __WEBPACK_IMPORTED_MODULE_1__elements_ResizeButton__["a" /* ResizeButton */]();
        _this.endGrip = new __WEBPACK_IMPORTED_MODULE_1__elements_ResizeButton__["a" /* ResizeButton */]();
        // Default orientation...
        // ... is set in `applyInternalDefaults()` because it accesses `language`
        // and should only be started to access when parent is set
        // Set events
        _this.events.on("transformed", _this.updateThumb, _this);
        // Initial positions
        _this.start = 0;
        _this.end = 1;
        // Set roles
        _this.role = "scrollbar";
        _this.thumb.role = "slider";
        _this.thumb.readerLive = "polite";
        _this.startGrip.role = "slider";
        _this.endGrip.role = "slider";
        // otherwise range changed wont' be registered
        _this.events.once("inited", function () {
            _this._previousStart = undefined;
            _this.dispatchRangeChange();
        });
        _this.hideGrips = false;
        _this.applyTheme();
        return _this;
    }
    /**
     * Sets defaults that instantiate some objects that rely on parent, so they
     * cannot be set in constructor.
     */
    Scrollbar.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);
        if (!this._orientation) {
            this.orientation = "horizontal";
        }
        // Set screen reader tetxt accordingly
        if (this.orientation === "horizontal") {
            if (!__WEBPACK_IMPORTED_MODULE_12__utils_Type__["hasValue"](this.readerTitle)) {
                this.readerTitle = this.language.translate("Use TAB to select grip buttons or left and right arrows to change selection");
            }
            if (!__WEBPACK_IMPORTED_MODULE_12__utils_Type__["hasValue"](this.thumb.readerDescription)) {
                this.thumb.readerDescription = this.language.translate("Use left and right arrows to move selection");
            }
            if (!__WEBPACK_IMPORTED_MODULE_12__utils_Type__["hasValue"](this.startGrip.readerDescription)) {
                this.startGrip.readerDescription = this.language.translate("Use left and right arrows to move left selection");
            }
            if (!__WEBPACK_IMPORTED_MODULE_12__utils_Type__["hasValue"](this.endGrip.readerDescription)) {
                this.endGrip.readerDescription = this.language.translate("Use left and right arrows to move right selection");
            }
        }
        else {
            if (!__WEBPACK_IMPORTED_MODULE_12__utils_Type__["hasValue"](this.readerTitle)) {
                this.readerTitle = this.language.translate("Use TAB select grip buttons or up and down arrows to change selection");
            }
            if (!__WEBPACK_IMPORTED_MODULE_12__utils_Type__["hasValue"](this.thumb.readerDescription)) {
                this.thumb.readerDescription = this.language.translate("Use up and down arrows to move selection");
            }
            if (!__WEBPACK_IMPORTED_MODULE_12__utils_Type__["hasValue"](this.startGrip.readerDescription)) {
                this.startGrip.readerDescription = this.language.translate("Use up and down arrows to move upper selection");
            }
            if (!__WEBPACK_IMPORTED_MODULE_12__utils_Type__["hasValue"](this.endGrip.readerDescription)) {
                this.endGrip.readerDescription = this.language.translate("Use up and down arrows to move lower selection");
            }
        }
    };
    /**
     * Validates the layout of the scrollbar's elements.
     *
     * @ignore Exclude from docs
     */
    Scrollbar.prototype.validateLayout = function () {
        this.updateSize();
        _super.prototype.validateLayout.call(this);
        //this.background.paddingTop = this.paddingTop;
        //this.background.paddingBottom = this.paddingBottom;
        //this.background.paddingLeft = this.paddingLeft;
        //this.background.paddingRight = this.paddingRight;
        // when size changes, need to update extremes
        this.updateExtremes();
    };
    /**
     * Update background for the scrollbar.
     *
     * @ignore Exclude from docs
     */
    Scrollbar.prototype.processBackground = function () {
        _super.prototype.processBackground.call(this);
        var background = this.background;
        background.clickable = true;
        background.events.on("hit", this.handleBgHit, this);
    };
    /**
     * Zooms to the particular place when clicked/tapped on the scrollbar
     * background.
     *
     * @ignore Exclude from docs
     * @param {ISpriteEvents["hit"]}  event  Event
     */
    Scrollbar.prototype.handleBgHit = function (event) {
        this.makeBusy();
        var point = event.spritePoint;
        var thumb = this.thumb;
        if (this.orientation == "horizontal") {
            var thumbX = point.x - thumb.pixelWidth / 2;
            thumbX = __WEBPACK_IMPORTED_MODULE_10__utils_Math__["fitToRange"](thumbX, 0, this.innerWidth - thumb.pixelWidth);
            this._thumbAnimation = thumb.animate({ property: "x", to: thumbX }, this.animationDuration, this.animationEasing);
        }
        else {
            var thumbY = point.y - thumb.pixelHeight / 2;
            thumbY = __WEBPACK_IMPORTED_MODULE_10__utils_Math__["fitToRange"](thumbY, 0, this.innerHeight - thumb.pixelHeight);
            this._thumbAnimation = thumb.animate({ property: "y", to: thumbY }, this.animationDuration, this.animationEasing);
        }
        if (this.animationDuration > 0) {
            this._thumbAnimation.events.on("animationended", this.makeUnbusy, this);
        }
        else {
            this._thumb.validate();
            this.makeUnbusy();
        }
    };
    /**
     * Set scrollbar as busy. (currently zooming)
     *
     * @ignore Exclude from docs
     */
    Scrollbar.prototype.makeBusy = function () {
        this._isBusy = true;
        this._skipRangeEvents = false;
        if (this._unbusyTimeout) {
            this.removeDispose(this._unbusyTimeout);
        }
        this._unbusyTimeout = null;
        this.stopAnimations();
    };
    /**
     * Stops all animations, currently playing for the scrollbar.
     *
     * @ignore Exclude from docs
     */
    Scrollbar.prototype.stopAnimations = function () {
        if (this._thumbAnimation) {
            this._thumbAnimation.stop(true);
        }
        if (this._zoomAnimation) {
            this._zoomAnimation.stop(true);
        }
    };
    /**
     * Cancels "busy" status of the Scrollbar.
     *
     * @ignore Exclude from docs
     */
    Scrollbar.prototype.makeUnbusy = function () {
        /**
         * We cannot make Scrollbar not busy right after release, because then axes
         * will take over controll and Scrollbar will start to animate.
         * Theorethically, it's not right to set timeout by `animationDuration`,
         * however we can not know all the durations of elements we scroll, so we
         * assume that animation duration will be the same as
         * `interpolationDuration` or `rangeChange` duration.
         */
        this._unbusyTimeout = this.setTimeout(this.makeUnbusyReal.bind(this), this.animationDuration * 1.1);
    };
    /**
     * [makeUnbusyReal description]
     *
     * @todo Description
     * @ignore Exclude from docs
     */
    Scrollbar.prototype.makeUnbusyReal = function () {
        this._usingGrip = undefined;
        this._isBusy = false;
        if (!this.updateWhileMoving) {
            this.dispatchRangeChange();
        }
    };
    /**
     * Disptatches rangechanged event if it really changed
     *
     * @ignore Exclude from docs
     */
    Scrollbar.prototype.dispatchRangeChange = function () {
        if (this._previousEnd != this.end || this._previousStart != this.start) {
            this._previousStart = this.start;
            this._previousEnd = this.end;
            this.dispatch("rangechanged");
        }
    };
    /**
     * Updates the "thumb" element. A draggable element between the grips.
     */
    Scrollbar.prototype.updateThumb = function () {
        if (!this.parent) {
            return;
        }
        var thumb = this.thumb;
        var start = this.start;
        var end = this.end;
        var startGrip = this.startGrip;
        var endGrip = this.endGrip;
        if (this.orientation == "horizontal") {
            var innerWidth_1 = this.innerWidth;
            thumb.width = innerWidth_1 * (end - start);
            thumb.maxX = innerWidth_1 - thumb.pixelWidth;
            thumb.x = start * innerWidth_1;
            startGrip.moveTo({ x: thumb.pixelX, y: 0 }, undefined, undefined, true); // overrides dragging
            endGrip.moveTo({ x: thumb.pixelX + thumb.pixelWidth, y: 0 }, undefined, undefined, true);
            startGrip.readerTitle = this.language.translate("From %1", undefined, this.adapter.apply("positionValue", {
                value: Math.round(start * 100) + "%",
                position: start
            }).value);
            endGrip.readerTitle = this.language.translate("To %1", undefined, this.adapter.apply("positionValue", {
                value: Math.round(end * 100) + "%",
                position: end
            }).value);
        }
        else {
            var innerHeight_1 = this.innerHeight;
            thumb.height = innerHeight_1 * (end - start);
            thumb.maxY = innerHeight_1 - thumb.pixelHeight;
            thumb.y = (1 - end) * innerHeight_1;
            startGrip.moveTo({ x: 0, y: thumb.pixelY + thumb.pixelHeight }, undefined, undefined, true);
            endGrip.moveTo({ x: 0, y: thumb.pixelY }, undefined, undefined, true);
            startGrip.readerTitle = this.language.translate("To %1", undefined, this.adapter.apply("positionValue", {
                value: Math.round((1 - start) * 100) + "%",
                position: (1 - start)
            }).value);
            endGrip.readerTitle = this.language.translate("From %1", undefined, this.adapter.apply("positionValue", {
                value: Math.round((1 - end) * 100) + "%",
                position: (1 - end)
            }).value);
        }
        // Add accessibility
        thumb.readerTitle = this.language.translate("From %1 to %2", undefined, this.adapter.apply("positionValue", {
            value: Math.round(start * 100) + "%",
            position: start
        }).value, this.adapter.apply("positionValue", {
            value: Math.round(end * 100) + "%",
            position: end
        }).value);
        if (!this._skipRangeEvents && this.updateWhileMoving) {
            this.dispatchRangeChange();
        }
    };
    /**
     * Updates extremes of the scrollbar.
     */
    Scrollbar.prototype.updateExtremes = function () {
        var orientation = this.orientation;
        var minX = 0;
        var minY = 0;
        var maxX = 0;
        var maxY = 0;
        if (orientation == "horizontal") {
            maxX = this.innerWidth;
            minY = maxY = this.innerHeight / 2;
        }
        else {
            maxY = this.innerHeight;
            minX = maxX = this.innerWidth / 2;
        }
        var startGrip = this.startGrip;
        startGrip.minX = minX;
        startGrip.maxX = maxX;
        startGrip.minY = minY;
        startGrip.maxY = maxY;
        var endGrip = this.endGrip;
        endGrip.minX = minX;
        endGrip.maxX = maxX;
        endGrip.minY = minY;
        endGrip.maxY = maxY;
        var thumb = this.thumb;
        thumb.minX = minX;
        thumb.maxX = maxX;
        thumb.minY = minY;
        thumb.maxY = maxY;
    };
    /**
     * Updates size of the scrollbar.
     */
    Scrollbar.prototype.updateSize = function () {
        var orientation = this.orientation;
        var startGrip = this.startGrip;
        if (startGrip) {
            startGrip.orientation = orientation;
        }
        if (this.endGrip) {
            this.endGrip.orientation = orientation;
        }
        var thumb = this.thumb;
        if (thumb) {
            if (orientation == "horizontal") {
                if (!__WEBPACK_IMPORTED_MODULE_12__utils_Type__["isNumber"](this._pixelWidth)) {
                    this.width = Object(__WEBPACK_IMPORTED_MODULE_9__utils_Percent__["c" /* percent */])(100);
                }
                // this teorethically might be wrong, if user indeed sets height of a horizontal scrollbar in percent
                // however without this height might be equal to 100% if previous orientation was set to horizontal
                // so this is ok solution, in case user really wants to have scrollbar height set in percent,
                // he should do this after orientation.
                if (__WEBPACK_IMPORTED_MODULE_12__utils_Type__["hasValue"](this.percentHeight)) {
                    this.height = this.minHeight;
                }
                thumb.height = this.innerHeight;
                thumb.verticalCenter = "middle";
                thumb.horizontalCenter = "left";
            }
            else {
                if (!__WEBPACK_IMPORTED_MODULE_12__utils_Type__["isNumber"](this._pixelHeight)) {
                    this.height = Object(__WEBPACK_IMPORTED_MODULE_9__utils_Percent__["c" /* percent */])(100);
                }
                // same as above with percentHeight
                if (__WEBPACK_IMPORTED_MODULE_12__utils_Type__["hasValue"](this.percentWidth)) {
                    this.width = this.minWidth;
                }
                thumb.width = this.innerWidth;
                thumb.verticalCenter = "top";
                thumb.horizontalCenter = "middle";
            }
        }
    };
    Object.defineProperty(Scrollbar.prototype, "start", {
        /**
         * @return {number} Position (0-1)
         */
        get: function () {
            return Math.min(this.getPosition(this._start), this.getPosition(this._end));
        },
        /**
         * ==========================================================================
         * POSITIONS
         * ==========================================================================
         * @hidden
         */
        /**
         * Relative position (0-1) of the start grip.
         *
         * @param {number}  position  Position (0-1)
         */
        set: function (position) {
            if (!this._isBusy) {
                this.__start = position;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scrollbar.prototype, "__start", {
        /**
         * @return {number} [description]
         */
        get: function () {
            return this._start;
        },
        /**
         * [__start description]
         *
         * @todo Description
         * @param {number} position [description]
         */
        set: function (position) {
            this._start = this.getPosition(position);
            this.updateThumb();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scrollbar.prototype, "end", {
        /**
         * @return {number} Position (0-1)
         */
        get: function () {
            return Math.max(this.getPosition(this._start), this.getPosition(this._end));
        },
        /**
         * Relative position (0-1) of the end grip.
         *
         * @param {number}  position  Position (0-1)
         */
        set: function (position) {
            if (!this._isBusy) {
                this.__end = position;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scrollbar.prototype, "__end", {
        /**
         * @return {number} [description]
         */
        get: function () {
            return this._end;
        },
        /**
         * [__end description]
         *
         * @todo Description
         * @param {number} position [description]
         */
        set: function (position) {
            this._end = this.getPosition(position);
            this.updateThumb();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scrollbar.prototype, "range", {
        /**
         * Current selection range.
         *
         * @readonly
         * @return {IRange} Range
         */
        get: function () {
            return { start: this.start, end: this.end, priority: this._usingGrip };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Disables range change events.
     *
     * @ignore Exclude from docs
     */
    Scrollbar.prototype.skipRangeEvents = function () {
        if (!this._isBusy) {
            this._skipRangeEvents = true;
        }
    };
    /**
     * [fixRange description]
     *
     * @todo Description
     * @ignore Exclude from docs
     * @param {IRange}  range  Range
     */
    Scrollbar.prototype.fixRange = function (range) {
        if (range.start != __WEBPACK_IMPORTED_MODULE_10__utils_Math__["round"](this._start, 2) || range.end != __WEBPACK_IMPORTED_MODULE_10__utils_Math__["round"](this._end, 2)) {
            this._start = range.start;
            this._end = range.end;
            this._skipRangeEvents = true;
            this.updateThumb();
            this._skipRangeEvents = false;
            this.thumb.validate();
        }
    };
    /**
     * [getPosition description]
     *
     * @todo Description
     * @param  {number}  position  [description]
     * @return {number}            [description]
     */
    Scrollbar.prototype.getPosition = function (position) {
        return __WEBPACK_IMPORTED_MODULE_10__utils_Math__["fitToRange"](__WEBPACK_IMPORTED_MODULE_10__utils_Math__["round"](position, 4), 0, 1);
    };
    Object.defineProperty(Scrollbar.prototype, "orientation", {
        /**
         * @return {Orientation} Orientation
         */
        get: function () {
            return this._orientation;
        },
        /**
         * ==========================================================================
         * MISC
         * ==========================================================================
         * @hidden
         */
        /**
         * Orientation of the scrollbar.
         *
         * Available options: "horizontal" (default) and "vertical".
         *
         * @default "horizontal"
         * @param {Orientation}  value  Orientation
         */
        set: function (value) {
            this._orientation = value;
            // Set mouse cursors and screen reader tetxt accordingly
            if (value === "horizontal") {
                // Mouse styles
                this.startGrip.cursorOverStyle = __WEBPACK_IMPORTED_MODULE_4__interaction_Mouse__["a" /* MouseCursorStyle */].horizontalResize;
                this.endGrip.cursorOverStyle = __WEBPACK_IMPORTED_MODULE_4__interaction_Mouse__["a" /* MouseCursorStyle */].horizontalResize;
                // Reader text
                /*this.readerTitle = this.language.translate("Use TAB to select grip buttons or left and right arrows to change selection");
                this.thumb.readerDescription = this.language.translate("Use left and right arrows to move selection");
                this.startGrip.readerDescription = this.language.translate("Use left and right arrows to move left selection");
                this.endGrip.readerDescription = this.language.translate("Use left and right arrows to move right selection");*/
            }
            else {
                // Mouse styles
                this.startGrip.cursorOverStyle = __WEBPACK_IMPORTED_MODULE_4__interaction_Mouse__["a" /* MouseCursorStyle */].verticalResize;
                this.endGrip.cursorOverStyle = __WEBPACK_IMPORTED_MODULE_4__interaction_Mouse__["a" /* MouseCursorStyle */].verticalResize;
                // Reader text
                /*this.readerTitle = this.language.translate("Use TAB select grip buttons or up and down arrows to change selection");
                this.thumb.readerDescription = this.language.translate("Use up and down arrows to move selection");
                this.startGrip.readerDescription = this.language.translate("Use up and down arrows to move upper selection");
                this.endGrip.readerDescription = this.language.translate("Use up and down arrows to move lower selection");*/
            }
            this.updateByOrientation();
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @ignore
     */
    Scrollbar.prototype.updateByOrientation = function () {
    };
    Object.defineProperty(Scrollbar.prototype, "startGrip", {
        /**
         * @return {ResizeButton} Grip element
         */
        get: function () {
            return this._startGrip;
        },
        /**
         * ==========================================================================
         * GRIPS
         * ==========================================================================
         * @hidden
         */
        /**
         * Start grip element. (button)
         *
         * @param {ResizeButton}  button  Grip element
         */
        set: function (button) {
            if (this._startGrip) {
                this.removeDispose(this._startGrip);
            }
            this._startGrip = button;
            this.processGrip(button);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scrollbar.prototype, "endGrip", {
        /**
         * @return {ResizeButton} Grip element
         */
        get: function () {
            return this._endGrip;
        },
        /**
         * End grip element. (button)
         *
         * @param {ResizeButton}  button  Grip element
         */
        set: function (button) {
            if (this._endGrip) {
                this.removeDispose(this._endGrip);
            }
            this._endGrip = button;
            this.processGrip(button);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Decorates the grip button with properties and events.
     *
     * @ignore Exclude from docs
     * @param {ResizeButton} button Grip button
     */
    Scrollbar.prototype.processGrip = function (button) {
        button.parent = this;
        button.isMeasured = false;
        button.hoverable = true;
        button.focusable = true;
        // Set button defaults
        button.showSystemTooltip = true;
        button.zIndex = 100;
        button.events.on("drag", this.handleGripDrag, this);
        button.events.on("dragstop", this.makeUnbusy, this);
        button.events.on("down", this.makeBusy, this);
        this._disposers.push(button);
    };
    /**
     * Updates positions of related elements after grip element is dragged.
     *
     * @ignore Exclude from docs
     * @param {AMEvent<ResizeButton, ISpriteEvents>["drag"]}  event  Event
     */
    Scrollbar.prototype.handleGripDrag = function (event) {
        this.makeBusy();
        if (event.target === this._startGrip) {
            this._usingGrip = "start";
        }
        else {
            this._usingGrip = "end";
        }
        if (this.orientation == "horizontal") {
            this._start = this.startGrip.pixelX / this.innerWidth;
            this._end = this.endGrip.pixelX / this.innerWidth;
        }
        else {
            this._start = 1 - this.startGrip.pixelY / this.innerHeight;
            this._end = 1 - this.endGrip.pixelY / this.innerHeight;
        }
        this.updateThumb();
    };
    Object.defineProperty(Scrollbar.prototype, "thumb", {
        /**
         * @return {RoundedRectangle} Thumb element
         */
        get: function () {
            if (!this._thumb) {
                // Create scrollbar controls (setters will handle adding disposers)
                var thumb = new __WEBPACK_IMPORTED_MODULE_2__elements_Button__["a" /* Button */]();
                thumb.background.cornerRadius(10, 10, 10, 10);
                thumb.padding(0, 0, 0, 0);
                this.thumb = thumb;
            }
            return this._thumb;
        },
        /**
         * A "thumb" element.
         *
         * It's a draggable square space between the grips, that can be used to
         * pan the seleciton.
         *
         * @param {RoundedRectangle}  thumb  Thumb element
         */
        set: function (thumb) {
            var _this = this;
            if (thumb) {
                if (this._thumb) {
                    this.removeDispose(this._thumb);
                }
                this._thumb = thumb;
                thumb.parent = this;
                thumb.isMeasured = false;
                thumb.inert = true;
                thumb.draggable = true;
                thumb.clickable = true;
                thumb.hoverable = true;
                thumb.focusable = true;
                // TODO remove closures ?
                // Add events
                // Add cursor styles to thumb
                thumb.cursorOverStyle = __WEBPACK_IMPORTED_MODULE_4__interaction_Mouse__["a" /* MouseCursorStyle */].grab;
                thumb.cursorDownStyle = __WEBPACK_IMPORTED_MODULE_4__interaction_Mouse__["a" /* MouseCursorStyle */].grabbing;
                thumb.events.on("dragstart", this.makeBusy, this);
                thumb.events.on("dragstop", this.makeUnbusy, this);
                thumb.events.on("positionchanged", this.handleThumbPosition, this);
                thumb.events.on("sizechanged", this.handleThumbPosition, this);
                thumb.events.on("doublehit", this.handleDoubleClick, this);
                // Add event for space and ENTER to toggle full zoom out and back
                // (same as doubleclick)
                this._disposers.push(Object(__WEBPACK_IMPORTED_MODULE_3__interaction_Interaction__["b" /* getInteraction */])().body.events.on("keyup", function (ev) {
                    if (__WEBPACK_IMPORTED_MODULE_7__utils_Keyboard__["b" /* keyboard */].isKey(ev.event, ["space", "enter"]) && _this.thumb.isFocused) {
                        ev.event.preventDefault();
                        _this.handleDoubleClick();
                    }
                }));
                this._disposers.push(this._thumb);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Zooms-in and out the selection on double-click of the thumb.
     *
     * @ignore Exclude from docs
     */
    Scrollbar.prototype.handleDoubleClick = function () {
        this.makeBusy();
        var newStart = 0;
        var newEnd = 1;
        if (this.start != 0 || this.end != 1) {
            this._prevStart = this.start;
            this._prevEnd = this.end;
        }
        else {
            newStart = this._prevStart;
            newEnd = this._prevEnd;
        }
        this._zoomAnimation = this.animate([{ property: "__start", to: newStart }, { property: "__end", to: newEnd }], this.animationDuration, this.animationEasing);
        if (this.animationDuration > 0) {
            this._zoomAnimation.events.on("animationended", this.makeUnbusy, this);
        }
        else {
            this.makeUnbusy();
        }
    };
    /**
     * Updates positions of other elements when thumb is moved.
     *
     * @ignore Exclude from docs
     */
    Scrollbar.prototype.handleThumbPosition = function () {
        var thumb = this.thumb;
        if (this.orientation == "horizontal") {
            var innerWidth_2 = this.innerWidth;
            var w = thumb.innerWidth;
            var x = thumb.pixelX;
            this._start = x / innerWidth_2;
            this._end = (x + w) / innerWidth_2;
            this.updateThumb();
        }
        else {
            var innerHeight_2 = this.innerHeight;
            var h = thumb.innerHeight;
            var y = thumb.pixelY;
            this._start = 1 - (y + h) / innerHeight_2;
            this._end = 1 - y / innerHeight_2;
            this.updateThumb();
        }
    };
    /**
     * Creates a background element for the scrollbar.
     *
     * @ignore Exclude from docs
     * @return {RoundedRectangle} Background
     */
    Scrollbar.prototype.createBackground = function () {
        return new __WEBPACK_IMPORTED_MODULE_5__elements_RoundedRectangle__["a" /* RoundedRectangle */]();
    };
    Object.defineProperty(Scrollbar.prototype, "hideGrips", {
        /**
         * @return {boolean} Show only on hover?
         */
        get: function () {
            return this._hideGrips;
        },
        /**
         * Use this property to set whether grips should be always visible (`false`),
         * or they should just appear on scrollbar hover (`true`).
         *
         * @param {boolean}  value  Show only on hover?
         */
        set: function (value) {
            var _this = this;
            this._hideGrips = value;
            if (this._overDisposer) {
                this.removeDispose(this._overDisposer);
            }
            if (this._outDisposer) {
                this.removeDispose(this._outDisposer);
            }
            if (value) {
                this._overDisposer = this.events.on("over", function () {
                    _this.startGrip.show();
                    _this.endGrip.show();
                });
                this._outDisposer = this.events.on("out", function () {
                    _this.startGrip.hide();
                    _this.endGrip.hide();
                });
                this.startGrip.hide();
                this.endGrip.hide();
            }
            else {
                this.startGrip.show();
                this.endGrip.show();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scrollbar.prototype, "animationDuration", {
        /**
         * @return {PointerOrientation} Orientation
         */
        get: function () {
            return this.getPropertyValue("animationDuration");
        },
        /**
         * Duration in milliseconds of scrollbar animation (happens when user clicks on a background of a scrollbar)
         * @default 0
         * @param {number} value number
         */
        set: function (value) {
            this.setPropertyValue("animationDuration", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scrollbar.prototype, "animationEasing", {
        /**
         * @return {Function}
         */
        get: function () {
            return this.getPropertyValue("animationEasing");
        },
        /**
         * Animation easing function.
         * @todo: review description and default
         * @default $ease.cubicOut
         * @param {Function}  value (value: number) => number
         */
        set: function (value) {
            this.setPropertyValue("animationEasing", value);
        },
        enumerable: true,
        configurable: true
    });
    return Scrollbar;
}(__WEBPACK_IMPORTED_MODULE_0__Container__["a" /* Container */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_6__Registry__["b" /* registry */].registeredClasses["Scrollbar"] = Scrollbar;
//# sourceMappingURL=Scrollbar.js.map

/***/ }),
/* 79 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_charts_types_GaugeChart__ = __webpack_require__(213);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "GaugeChartDataItem", function() { return __WEBPACK_IMPORTED_MODULE_0__internal_charts_types_GaugeChart__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "GaugeChart", function() { return __WEBPACK_IMPORTED_MODULE_0__internal_charts_types_GaugeChart__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_charts_types_RadarChart__ = __webpack_require__(157);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "RadarChartDataItem", function() { return __WEBPACK_IMPORTED_MODULE_1__internal_charts_types_RadarChart__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "RadarChart", function() { return __WEBPACK_IMPORTED_MODULE_1__internal_charts_types_RadarChart__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_charts_types_XYChart__ = __webpack_require__(60);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "XYChartDataItem", function() { return __WEBPACK_IMPORTED_MODULE_2__internal_charts_types_XYChart__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "XYChart", function() { return __WEBPACK_IMPORTED_MODULE_2__internal_charts_types_XYChart__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__internal_charts_types_SerialChart__ = __webpack_require__(109);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SerialChartDataItem", function() { return __WEBPACK_IMPORTED_MODULE_3__internal_charts_types_SerialChart__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SerialChart", function() { return __WEBPACK_IMPORTED_MODULE_3__internal_charts_types_SerialChart__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__internal_charts_types_PieChart3D__ = __webpack_require__(214);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "PieChart3DDataItem", function() { return __WEBPACK_IMPORTED_MODULE_4__internal_charts_types_PieChart3D__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "PieChart3D", function() { return __WEBPACK_IMPORTED_MODULE_4__internal_charts_types_PieChart3D__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__internal_charts_types_PieChart__ = __webpack_require__(166);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "PieChartDataItem", function() { return __WEBPACK_IMPORTED_MODULE_5__internal_charts_types_PieChart__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "PieChart", function() { return __WEBPACK_IMPORTED_MODULE_5__internal_charts_types_PieChart__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__internal_charts_types_FlowDiagram__ = __webpack_require__(115);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "FlowDiagramDataItem", function() { return __WEBPACK_IMPORTED_MODULE_6__internal_charts_types_FlowDiagram__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "FlowDiagram", function() { return __WEBPACK_IMPORTED_MODULE_6__internal_charts_types_FlowDiagram__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__internal_charts_types_SankeyDiagram__ = __webpack_require__(169);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SankeyDiagramDataItem", function() { return __WEBPACK_IMPORTED_MODULE_7__internal_charts_types_SankeyDiagram__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SankeyDiagram", function() { return __WEBPACK_IMPORTED_MODULE_7__internal_charts_types_SankeyDiagram__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__internal_charts_types_ChordDiagram__ = __webpack_require__(215);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ChordDiagramDataItem", function() { return __WEBPACK_IMPORTED_MODULE_8__internal_charts_types_ChordDiagram__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ChordDiagram", function() { return __WEBPACK_IMPORTED_MODULE_8__internal_charts_types_ChordDiagram__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__internal_charts_types_TreeMap__ = __webpack_require__(217);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "TreeMapDataItem", function() { return __WEBPACK_IMPORTED_MODULE_9__internal_charts_types_TreeMap__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "TreeMap", function() { return __WEBPACK_IMPORTED_MODULE_9__internal_charts_types_TreeMap__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__internal_charts_types_XYChart3D__ = __webpack_require__(218);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "XYChart3DDataItem", function() { return __WEBPACK_IMPORTED_MODULE_10__internal_charts_types_XYChart3D__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "XYChart3D", function() { return __WEBPACK_IMPORTED_MODULE_10__internal_charts_types_XYChart3D__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__internal_charts_Chart__ = __webpack_require__(86);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ChartDataItem", function() { return __WEBPACK_IMPORTED_MODULE_11__internal_charts_Chart__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Chart", function() { return __WEBPACK_IMPORTED_MODULE_11__internal_charts_Chart__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__internal_charts_Legend__ = __webpack_require__(117);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "LegendDataItem", function() { return __WEBPACK_IMPORTED_MODULE_12__internal_charts_Legend__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Legend", function() { return __WEBPACK_IMPORTED_MODULE_12__internal_charts_Legend__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "LegendSettings", function() { return __WEBPACK_IMPORTED_MODULE_12__internal_charts_Legend__["c"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__internal_charts_elements_HeatLegend__ = __webpack_require__(219);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "HeatLegend", function() { return __WEBPACK_IMPORTED_MODULE_13__internal_charts_elements_HeatLegend__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__internal_charts_series_Series__ = __webpack_require__(61);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SeriesDataItem", function() { return __WEBPACK_IMPORTED_MODULE_14__internal_charts_series_Series__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Series", function() { return __WEBPACK_IMPORTED_MODULE_14__internal_charts_series_Series__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__internal_charts_series_XYSeries__ = __webpack_require__(82);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "XYSeriesDataItem", function() { return __WEBPACK_IMPORTED_MODULE_15__internal_charts_series_XYSeries__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "XYSeries", function() { return __WEBPACK_IMPORTED_MODULE_15__internal_charts_series_XYSeries__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__internal_charts_series_LineSeries__ = __webpack_require__(113);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "LineSeriesDataItem", function() { return __WEBPACK_IMPORTED_MODULE_16__internal_charts_series_LineSeries__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "LineSeries", function() { return __WEBPACK_IMPORTED_MODULE_16__internal_charts_series_LineSeries__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__internal_charts_series_LineSeriesSegment__ = __webpack_require__(162);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "LineSeriesSegment", function() { return __WEBPACK_IMPORTED_MODULE_17__internal_charts_series_LineSeriesSegment__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__internal_charts_series_CandlestickSeries__ = __webpack_require__(220);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "CandlestickSeriesDataItem", function() { return __WEBPACK_IMPORTED_MODULE_18__internal_charts_series_CandlestickSeries__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "CandlestickSeries", function() { return __WEBPACK_IMPORTED_MODULE_18__internal_charts_series_CandlestickSeries__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__internal_charts_series_ColumnSeries__ = __webpack_require__(50);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ColumnSeriesDataItem", function() { return __WEBPACK_IMPORTED_MODULE_19__internal_charts_series_ColumnSeries__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ColumnSeries", function() { return __WEBPACK_IMPORTED_MODULE_19__internal_charts_series_ColumnSeries__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__internal_charts_series_StepLineSeries__ = __webpack_require__(221);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "StepLineSeriesDataItem", function() { return __WEBPACK_IMPORTED_MODULE_20__internal_charts_series_StepLineSeries__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "StepLineSeries", function() { return __WEBPACK_IMPORTED_MODULE_20__internal_charts_series_StepLineSeries__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__internal_charts_series_RadarSeries__ = __webpack_require__(161);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "RadarSeriesDataItem", function() { return __WEBPACK_IMPORTED_MODULE_21__internal_charts_series_RadarSeries__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "RadarSeries", function() { return __WEBPACK_IMPORTED_MODULE_21__internal_charts_series_RadarSeries__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__internal_charts_series_RadarColumnSeries__ = __webpack_require__(222);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "RadarColumnSeriesDataItem", function() { return __WEBPACK_IMPORTED_MODULE_22__internal_charts_series_RadarColumnSeries__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "RadarColumnSeries", function() { return __WEBPACK_IMPORTED_MODULE_22__internal_charts_series_RadarColumnSeries__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__internal_charts_series_PieSeries__ = __webpack_require__(114);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "PieSeriesDataItem", function() { return __WEBPACK_IMPORTED_MODULE_23__internal_charts_series_PieSeries__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "PieSeries", function() { return __WEBPACK_IMPORTED_MODULE_23__internal_charts_series_PieSeries__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__internal_charts_series_PieTick__ = __webpack_require__(167);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "PieTick", function() { return __WEBPACK_IMPORTED_MODULE_24__internal_charts_series_PieTick__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__internal_charts_series_PieSeries3D__ = __webpack_require__(168);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "PieSeries3DDataItem", function() { return __WEBPACK_IMPORTED_MODULE_25__internal_charts_series_PieSeries3D__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "PieSeries3D", function() { return __WEBPACK_IMPORTED_MODULE_25__internal_charts_series_PieSeries3D__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__internal_charts_series_TreeMapSeries__ = __webpack_require__(175);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "TreeMapSeriesDataItem", function() { return __WEBPACK_IMPORTED_MODULE_26__internal_charts_series_TreeMapSeries__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "TreeMapSeries", function() { return __WEBPACK_IMPORTED_MODULE_26__internal_charts_series_TreeMapSeries__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__internal_charts_series_ColumnSeries3D__ = __webpack_require__(178);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ColumnSeries3DDataItem", function() { return __WEBPACK_IMPORTED_MODULE_27__internal_charts_series_ColumnSeries3D__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ColumnSeries3D", function() { return __WEBPACK_IMPORTED_MODULE_27__internal_charts_series_ColumnSeries3D__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__internal_charts_series_ConeSeries__ = __webpack_require__(223);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ConeSeriesDataItem", function() { return __WEBPACK_IMPORTED_MODULE_28__internal_charts_series_ConeSeries__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ConeSeries", function() { return __WEBPACK_IMPORTED_MODULE_28__internal_charts_series_ConeSeries__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__internal_charts_axes_Axis__ = __webpack_require__(80);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AxisDataItem", function() { return __WEBPACK_IMPORTED_MODULE_29__internal_charts_axes_Axis__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Axis", function() { return __WEBPACK_IMPORTED_MODULE_29__internal_charts_axes_Axis__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__internal_charts_axes_Grid__ = __webpack_require__(99);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Grid", function() { return __WEBPACK_IMPORTED_MODULE_30__internal_charts_axes_Grid__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__internal_charts_axes_AxisTick__ = __webpack_require__(134);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AxisTick", function() { return __WEBPACK_IMPORTED_MODULE_31__internal_charts_axes_AxisTick__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__internal_charts_axes_AxisLabel__ = __webpack_require__(100);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AxisLabel", function() { return __WEBPACK_IMPORTED_MODULE_32__internal_charts_axes_AxisLabel__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_33__internal_charts_axes_AxisLine__ = __webpack_require__(133);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AxisLine", function() { return __WEBPACK_IMPORTED_MODULE_33__internal_charts_axes_AxisLine__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_34__internal_charts_axes_AxisFill__ = __webpack_require__(98);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AxisFill", function() { return __WEBPACK_IMPORTED_MODULE_34__internal_charts_axes_AxisFill__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_35__internal_charts_axes_AxisRenderer__ = __webpack_require__(65);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AxisRenderer", function() { return __WEBPACK_IMPORTED_MODULE_35__internal_charts_axes_AxisRenderer__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_36__internal_charts_axes_AxisBreak__ = __webpack_require__(81);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AxisBreak", function() { return __WEBPACK_IMPORTED_MODULE_36__internal_charts_axes_AxisBreak__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_37__internal_charts_axes_ValueAxis__ = __webpack_require__(38);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ValueAxisDataItem", function() { return __WEBPACK_IMPORTED_MODULE_37__internal_charts_axes_ValueAxis__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ValueAxis", function() { return __WEBPACK_IMPORTED_MODULE_37__internal_charts_axes_ValueAxis__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_38__internal_charts_axes_CategoryAxis__ = __webpack_require__(62);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "CategoryAxisDataItem", function() { return __WEBPACK_IMPORTED_MODULE_38__internal_charts_axes_CategoryAxis__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "CategoryAxis", function() { return __WEBPACK_IMPORTED_MODULE_38__internal_charts_axes_CategoryAxis__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_39__internal_charts_axes_CategoryAxisBreak__ = __webpack_require__(158);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "CategoryAxisBreak", function() { return __WEBPACK_IMPORTED_MODULE_39__internal_charts_axes_CategoryAxisBreak__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_40__internal_charts_axes_DateAxis__ = __webpack_require__(111);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "DateAxisDataItem", function() { return __WEBPACK_IMPORTED_MODULE_40__internal_charts_axes_DateAxis__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "DateAxis", function() { return __WEBPACK_IMPORTED_MODULE_40__internal_charts_axes_DateAxis__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_41__internal_charts_axes_DateAxisBreak__ = __webpack_require__(159);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "DateAxisBreak", function() { return __WEBPACK_IMPORTED_MODULE_41__internal_charts_axes_DateAxisBreak__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_42__internal_charts_axes_ValueAxisBreak__ = __webpack_require__(110);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ValueAxisBreak", function() { return __WEBPACK_IMPORTED_MODULE_42__internal_charts_axes_ValueAxisBreak__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_43__internal_charts_axes_AxisRendererX__ = __webpack_require__(66);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AxisRendererX", function() { return __WEBPACK_IMPORTED_MODULE_43__internal_charts_axes_AxisRendererX__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_44__internal_charts_axes_AxisRendererY__ = __webpack_require__(40);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AxisRendererY", function() { return __WEBPACK_IMPORTED_MODULE_44__internal_charts_axes_AxisRendererY__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_45__internal_charts_axes_AxisRendererRadial__ = __webpack_require__(164);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AxisRendererRadial", function() { return __WEBPACK_IMPORTED_MODULE_45__internal_charts_axes_AxisRendererRadial__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_46__internal_charts_axes_AxisLabelCircular__ = __webpack_require__(76);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AxisLabelCircular", function() { return __WEBPACK_IMPORTED_MODULE_46__internal_charts_axes_AxisLabelCircular__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_47__internal_charts_axes_AxisRendererCircular__ = __webpack_require__(116);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AxisRendererCircular", function() { return __WEBPACK_IMPORTED_MODULE_47__internal_charts_axes_AxisRendererCircular__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_48__internal_charts_axes_AxisFillCircular__ = __webpack_require__(135);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AxisFillCircular", function() { return __WEBPACK_IMPORTED_MODULE_48__internal_charts_axes_AxisFillCircular__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_49__internal_charts_axes_GridCircular__ = __webpack_require__(136);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "GridCircular", function() { return __WEBPACK_IMPORTED_MODULE_49__internal_charts_axes_GridCircular__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_50__internal_charts_axes_AxisRendererX3D__ = __webpack_require__(176);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AxisRendererX3D", function() { return __WEBPACK_IMPORTED_MODULE_50__internal_charts_axes_AxisRendererX3D__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_51__internal_charts_axes_AxisRendererY3D__ = __webpack_require__(177);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AxisRendererY3D", function() { return __WEBPACK_IMPORTED_MODULE_51__internal_charts_axes_AxisRendererY3D__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_52__internal_charts_elements_Tick__ = __webpack_require__(101);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Tick", function() { return __WEBPACK_IMPORTED_MODULE_52__internal_charts_elements_Tick__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_53__internal_charts_elements_Bullet__ = __webpack_require__(49);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Bullet", function() { return __WEBPACK_IMPORTED_MODULE_53__internal_charts_elements_Bullet__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_54__internal_charts_elements_LabelBullet__ = __webpack_require__(171);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "LabelBullet", function() { return __WEBPACK_IMPORTED_MODULE_54__internal_charts_elements_LabelBullet__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_55__internal_charts_elements_CircleBullet__ = __webpack_require__(224);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "CircleBullet", function() { return __WEBPACK_IMPORTED_MODULE_55__internal_charts_elements_CircleBullet__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_56__internal_charts_elements_XYChartScrollbar__ = __webpack_require__(225);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "XYChartScrollbar", function() { return __WEBPACK_IMPORTED_MODULE_56__internal_charts_elements_XYChartScrollbar__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_57__internal_charts_elements_ClockHand__ = __webpack_require__(165);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ClockHand", function() { return __WEBPACK_IMPORTED_MODULE_57__internal_charts_elements_ClockHand__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_58__internal_charts_elements_FlowDiagramNode__ = __webpack_require__(83);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "FlowDiagramNode", function() { return __WEBPACK_IMPORTED_MODULE_58__internal_charts_elements_FlowDiagramNode__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_59__internal_charts_elements_FlowDiagramLink__ = __webpack_require__(84);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "FlowDiagramLink", function() { return __WEBPACK_IMPORTED_MODULE_59__internal_charts_elements_FlowDiagramLink__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_60__internal_charts_elements_SankeyNode__ = __webpack_require__(170);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SankeyNode", function() { return __WEBPACK_IMPORTED_MODULE_60__internal_charts_elements_SankeyNode__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_61__internal_charts_elements_SankeyLink__ = __webpack_require__(172);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SankeyLink", function() { return __WEBPACK_IMPORTED_MODULE_61__internal_charts_elements_SankeyLink__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_62__internal_charts_elements_ChordNode__ = __webpack_require__(173);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ChordNode", function() { return __WEBPACK_IMPORTED_MODULE_62__internal_charts_elements_ChordNode__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_63__internal_charts_elements_ChordLink__ = __webpack_require__(174);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ChordLink", function() { return __WEBPACK_IMPORTED_MODULE_63__internal_charts_elements_ChordLink__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_64__internal_charts_elements_NavigationBar__ = __webpack_require__(226);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "NavigationBarDataItem", function() { return __WEBPACK_IMPORTED_MODULE_64__internal_charts_elements_NavigationBar__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "NavigationBar", function() { return __WEBPACK_IMPORTED_MODULE_64__internal_charts_elements_NavigationBar__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_65__internal_charts_elements_Column__ = __webpack_require__(51);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Column", function() { return __WEBPACK_IMPORTED_MODULE_65__internal_charts_elements_Column__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_66__internal_charts_elements_Candlestick__ = __webpack_require__(180);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Candlestick", function() { return __WEBPACK_IMPORTED_MODULE_66__internal_charts_elements_Candlestick__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_67__internal_charts_elements_RadarColumn__ = __webpack_require__(181);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "RadarColumn", function() { return __WEBPACK_IMPORTED_MODULE_67__internal_charts_elements_RadarColumn__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_68__internal_charts_elements_Column3D__ = __webpack_require__(179);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Column3D", function() { return __WEBPACK_IMPORTED_MODULE_68__internal_charts_elements_Column3D__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_69__internal_charts_elements_ConeColumn__ = __webpack_require__(182);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ConeColumn", function() { return __WEBPACK_IMPORTED_MODULE_69__internal_charts_elements_ConeColumn__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_70__internal_charts_cursors_XYCursor__ = __webpack_require__(112);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "XYCursor", function() { return __WEBPACK_IMPORTED_MODULE_70__internal_charts_cursors_XYCursor__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_71__internal_charts_cursors_Cursor__ = __webpack_require__(160);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Cursor", function() { return __WEBPACK_IMPORTED_MODULE_71__internal_charts_cursors_Cursor__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_72__internal_charts_cursors_RadarCursor__ = __webpack_require__(163);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "RadarCursor", function() { return __WEBPACK_IMPORTED_MODULE_72__internal_charts_cursors_RadarCursor__["a"]; });
/**
 * Module: gauge
 */
/**
 * Elements: types
 */











/**
 * Elements: charts
 */



/**
 * Elements: series
 */















/**
 * Elements: axes
 */























/**
 * Elements: elements
 */


















/**
 * Elements: cursors
 */



//# sourceMappingURL=charts.js.map

/***/ }),
/* 80 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return AxisDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return AxisItemLocation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Axis; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Component__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_DataItem__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__AxisBreak__ = __webpack_require__(81);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_elements_Label__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_elements_Tooltip__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_SortedList__ = __webpack_require__(71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_utils_Disposer__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__core_utils_InterfaceColorSet__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__core_utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__core_utils_Utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__core_utils_Number__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__core_utils_Array__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__core_utils_Type__ = __webpack_require__(1);
/**
 * Base class for all Axis
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

















/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[Axis]].
 *
 * @see {@link DataItem}
 */
var AxisDataItem = /** @class */ (function (_super) {
    __extends(AxisDataItem, _super);
    /**
     * Constructor
     */
    function AxisDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "AxisDataItem";
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(AxisDataItem.prototype, "grid", {
        /**
         * @return {Grid} Grid element
         */
        get: function () {
            if (!this._grid) {
                var component = this.component;
                if (component) {
                    this.grid = component.renderer.grid.create();
                }
            }
            return this._grid;
        },
        /**
         * A [[Grid]] element associated with this data item.
         *
         * If there is no grid element associated with data item, a new one is
         * created and returned.
         *
         * @param {Grid}  grid  Grid element
         */
        set: function (grid) {
            if (this._grid && this._grid != grid) {
                __WEBPACK_IMPORTED_MODULE_15__core_utils_Array__["k" /* remove */](this.sprites, this._grid);
                this._grid.dataItem = undefined;
            }
            if (grid) {
                if (grid.dataItem && grid.dataItem != this) {
                    __WEBPACK_IMPORTED_MODULE_15__core_utils_Array__["k" /* remove */](grid.dataItem.sprites, grid);
                    grid.dataItem.grid = undefined;
                }
                grid.__disabled = false;
                this.addSprite(grid);
            }
            this._grid = grid;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Override to cancel super call for data element validation.
     */
    AxisDataItem.prototype.validateDataElements = function () {
    };
    Object.defineProperty(AxisDataItem.prototype, "tick", {
        /**
         * @return {AxisTick} Tick element
         */
        get: function () {
            if (!this._tick) {
                var component = this.component;
                if (component) {
                    this.tick = component.renderer.ticks.create();
                }
            }
            return this._tick;
        },
        /**
         * An [[AxisTick]] element associated with this data item.
         *
         * If there is no tick element associated with data item, a new one is
         * created and returned.
         *
         * @param {AxisTick}  tick  Tick element
         */
        set: function (tick) {
            if (this._tick && this._tick != tick) {
                __WEBPACK_IMPORTED_MODULE_15__core_utils_Array__["k" /* remove */](this.sprites, this._tick);
                this._tick.dataItem = undefined;
            }
            if (tick) {
                if (tick.dataItem && tick.dataItem != this) {
                    __WEBPACK_IMPORTED_MODULE_15__core_utils_Array__["k" /* remove */](tick.dataItem.sprites, tick);
                    tick.dataItem.tick = undefined;
                }
                tick.__disabled = false;
                this.addSprite(tick);
            }
            this._tick = tick;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisDataItem.prototype, "label", {
        /**
         * @return {AxisLabel} Label element
         */
        get: function () {
            if (!this._label) {
                var component = this.component;
                if (component) {
                    this.label = component.renderer.labels.create();
                }
            }
            return this._label;
        },
        /**
         * An [[AxisLabel]] element associated with this data item.
         *
         * If there is no label element associated with data item, a new one is
         * created and returned.
         *
         * @param {AxisLabel} label Label element
         */
        set: function (label) {
            if (this._label && this._label != label) {
                __WEBPACK_IMPORTED_MODULE_15__core_utils_Array__["k" /* remove */](this.sprites, this._label);
                this._label.dataItem = undefined;
            }
            if (label) {
                if (label.dataItem && label.dataItem != this) {
                    __WEBPACK_IMPORTED_MODULE_15__core_utils_Array__["k" /* remove */](label.dataItem.sprites, label);
                    label.dataItem.label = undefined;
                }
                label.__disabled = false;
                this.addSprite(label);
            }
            this._label = label;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisDataItem.prototype, "axisFill", {
        /**
         * @return {AxisFill} Label element
         */
        get: function () {
            if (!this._axisFill) {
                var component = this.component;
                if (component) {
                    this.axisFill = component.renderer.axisFills.create();
                }
            }
            return this._axisFill;
        },
        /**
         * An [[AxisFill]] associated element with this data item.
         *
         * If there is no fill element associated with data item, a new one is
         * created and returned.
         *
         * @param {AxisFill} label Label element
         */
        set: function (axisFill) {
            if (this._axisFill && this._axisFill != axisFill) {
                __WEBPACK_IMPORTED_MODULE_15__core_utils_Array__["k" /* remove */](this.sprites, this._axisFill);
                this._axisFill.dataItem = undefined;
            }
            if (axisFill) {
                if (axisFill.dataItem && axisFill.dataItem != this) {
                    __WEBPACK_IMPORTED_MODULE_15__core_utils_Array__["k" /* remove */](axisFill.dataItem.sprites, axisFill);
                    axisFill.dataItem.axisFill = undefined;
                }
                axisFill.__disabled = false;
                axisFill.axis = this.component;
                this.addSprite(axisFill);
            }
            this._axisFill = axisFill;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisDataItem.prototype, "text", {
        /**
         * @return {string} Text label
         */
        get: function () {
            return this._text;
        },
        /**
         * Text to be used as data item's label.
         *
         * @param {string} text Text label
         */
        set: function (text) {
            this._text = text;
            if (this._label) { // do not use getter, it will create unwanted instances!
                this._label.text = text;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisDataItem.prototype, "mask", {
        /**
         * Data item's mask.
         *
         * @return {AxisFill} Mask
         */
        get: function () {
            return this._mask;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisDataItem.prototype, "contents", {
        /**
         * Returns a [[Container]] to place all visual elements, related to data item
         * in.
         *
         * If there is no Container, a new one is created.
         *
         * @return {Container} Contents container
         */
        get: function () {
            if (!this._contents) {
                var contents = new __WEBPACK_IMPORTED_MODULE_1__core_Container__["a" /* Container */]();
                this.addSprite(contents);
                contents.isMeasured = false;
                this._contents = contents;
                var component = this.component;
                if (component) {
                    var mask = component.renderer.axisFills.create();
                    mask.axis = component;
                    this.addSprite(mask);
                    this._mask = mask;
                    contents.mask = mask;
                }
            }
            return this._contents;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisDataItem.prototype, "axisBreak", {
        /**
         * @return {AxisBreak} Axis break
         */
        get: function () {
            return this._axisBreak;
        },
        /**
         * An [[AxisBreak]] this data item falls within.
         *
         * @param {AxisBreak} axisBreak Axis break
         */
        set: function (axisBreak) {
            if (this._axisBreak) {
                this._axisBreak.dataItems.removeValue(this);
            }
            if (axisBreak) {
                axisBreak.dataItems.push(this);
            }
            this._axisBreak = axisBreak;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Re-draws the element.
     *
     * @ignore Exclude from docs
     */
    AxisDataItem.prototype.validate = function () {
        if (this.component) {
            this.component.validateDataElement(this);
        }
    };
    /**
     * Appends data item's elements to the parent [[Container]].
     *
     * @ignore Exclude from docs
     */
    AxisDataItem.prototype.appendChildren = function () {
        if (this.component) {
            this.component.appendDataItem(this);
        }
    };
    /**
     * Ordering function used in JSON setup.
     *
     * @param  {string}  a  Item A
     * @param  {string}  b  Item B
     * @return {Ordering}   Order
     */
    AxisDataItem.prototype.configOrder = function (a, b) {
        if (a == b) {
            return 0;
        }
        else if (a == "language") {
            return -1;
        }
        else if (b == "language") {
            return 1;
        }
        else if (a == "component") {
            return -1;
        }
        else if (b == "component") {
            return 1;
        }
        else {
            return 0;
        }
    };
    /**
     * Checks if data item has particular property set.
     *
     * @param  {string}   prop  Property name
     * @return {boolean}        Property set?
     */
    AxisDataItem.prototype.hasProperty = function (prop) {
        return prop == "component" ? true : _super.prototype.hasProperty.call(this, prop);
    };
    return AxisDataItem;
}(__WEBPACK_IMPORTED_MODULE_2__core_DataItem__["a" /* DataItem */]));

/**
 * ============================================================================
 * REQUISITES
 * ============================================================================
 * @hidden
 */
/**
 * Defines named positions for data item's location within [[Axis]].
 */
var AxisItemLocation;
(function (AxisItemLocation) {
    AxisItemLocation[AxisItemLocation["Start"] = 0] = "Start";
    AxisItemLocation[AxisItemLocation["Middle"] = 0.5] = "Middle";
    AxisItemLocation[AxisItemLocation["End"] = 1] = "End";
})(AxisItemLocation || (AxisItemLocation = {}));
/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * A base class for all Axis elements.
 *
 * @see {@link IAxisEvents} for a list of available Events
 * @see {@link IAxisAdapters} for a list of available Adapters
 */
var Axis = /** @class */ (function (_super) {
    __extends(Axis, _super);
    /**
     * Constructor
     */
    function Axis() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * Number of Grid elements on the axis.
         *
         * @type {number}
         */
        _this._gridCount = 5;
        /**
         * A list of [[XYSeries]] that are using this Axis.
         *
         * @type {List<XYSeries>}
         */
        _this._series = new __WEBPACK_IMPORTED_MODULE_7__core_utils_List__["b" /* List */]();
        /**
         * Holds reference to a function that accepts a DataItem and its index as
         * parameters.
         *
         * It can either return a fill opacity for a fill, or manipulate data item
         * directly, to create various highlighting scenarios.
         *
         * For example, you can set it up to highlight only weekends on a
         * [[DateAxis]].
         *
         * @param {AxisDataItem} dataItem [description]
         * @param {number}       index    [description]
         */
        _this.fillRule = function (dataItem, index) {
            if (!__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](index)) {
                index = dataItem.index;
            }
            if (index / 2 == Math.round(index / 2)) {
                dataItem.axisFill.__disabled = true;
                dataItem.axisFill.opacity = 0;
            }
            else {
                dataItem.axisFill.opacity = 1;
                dataItem.axisFill.__disabled = false;
            }
        };
        _this.className = "Axis";
        _this.shouldClone = false;
        _this.cursorTooltipEnabled = true;
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_10__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        // Create title
        _this.title = new __WEBPACK_IMPORTED_MODULE_4__core_elements_Label__["a" /* Label */]();
        _this.title.shouldClone = false;
        _this._disposers.push(_this.title);
        // Data item iterator
        _this._dataItemsIterator = new __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["ListIterator"](_this.dataItems, function () { return _this.dataItems.create(); });
        _this._dataItemsIterator.createNewItems = true;
        // Create tooltip
        var tooltip = new __WEBPACK_IMPORTED_MODULE_5__core_elements_Tooltip__["a" /* Tooltip */]();
        _this._disposers.push(tooltip);
        tooltip.label.padding(5, 10, 5, 10);
        tooltip.background.pointerLength = 5;
        tooltip.fitPointerToBounds = true;
        tooltip.filters.clear();
        // Create background element for the tooltip
        var background = tooltip.background;
        background.cornerRadius = 0;
        background.fill = interfaceColors.getFor("alternativeBackground");
        background.stroke = background.fill;
        background.strokeWidth = 1;
        background.fillOpacity = 1;
        tooltip.label.fill = interfaceColors.getFor("alternativeText");
        _this.tooltip = tooltip;
        _this.applyTheme();
        return _this;
    }
    /**
     * Returns a new/empty DataItem of the type appropriate for this object.
     *
     * @see {@link DataItem}
     * @return {AxisDataItem} Data Item
     */
    Axis.prototype.createDataItem = function () {
        return new AxisDataItem();
    };
    /**
     * Invalidates layout.
     *
     * @ignore Exclude from docs
     */
    Axis.prototype.invalidateLayout = function () {
        _super.prototype.invalidateLayout.call(this);
        // this puts series after axis in invalidation order also makes series update it's data items in case widht/height of a series is not 100%
        __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["each"](this.series.iterator(), function (series) {
            series.invalidateLayout();
        });
    };
    /**
     * Recalculates the number of grid items on the axis.
     */
    Axis.prototype.updateGridCount = function () {
        if (this.renderer) {
            this._gridCount = this.axisLength / this.renderer.minGridDistance;
        }
    };
    /**
     * Redraws the element.
     *
     * @ignore Exclude from docs
     */
    Axis.prototype.validateLayout = function () {
        this.axisFullLength = this.axisLength / (this.end - this.start);
        _super.prototype.validateLayout.call(this);
        this.updateGridCount();
        this.renderer.updateAxisLine();
        this.renderer.updateBaseGridElement();
        if (this._prevLength != this.axisLength) {
            this.dispatchImmediately("lengthchanged");
            this._prevLength = this.axisLength;
        }
    };
    /**
     * Initializes Axis' renderer.
     *
     * @ignore Exclude from docs
     */
    Axis.prototype.initRenderer = function () {
        if (this.renderer) {
            this.renderer.processRenderer();
        }
    };
    /**
     * Appends data items.
     *
     * Does nothing on a base Axis.
     */
    Axis.prototype.appendDataItems = function () {
        // void
    };
    /**
     * Adds a data item to the Axis.
     *
     * @param {this["_dataItem"]} dataItem Data item
     */
    Axis.prototype.appendDataItem = function (dataItem) {
        _super.prototype.appendDataItem.call(this, dataItem);
        var renderer = this.renderer;
        dataItem.tick.parent = renderer;
        dataItem.label.parent = renderer;
        dataItem.grid.parent = renderer.gridContainer;
        dataItem.axisFill.parent = renderer.gridContainer;
    };
    /**
     * Redraws Axis' related items.
     *
     * @ignore Exclude from docs
     */
    Axis.prototype.validate = function () {
        _super.prototype.validate.call(this);
        this.axisFullLength = this.axisLength / (this.end - this.start);
        this.validateAxisRanges();
        this.validateBreaks();
    };
    /**
     * Redars Axis ranges.
     *
     * @ignore Exclude from docs
     */
    Axis.prototype.validateAxisRanges = function () {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["each"](this.axisRanges.iterator(), function (axisRange) {
            _this.appendDataItem(axisRange);
            _this.validateDataElement(axisRange);
            axisRange.grid.validate();
            axisRange.tick.validate();
            axisRange.axisFill.validate();
        });
    };
    /**
     * Invalidates all axis breaks, so they are redrawn.
     *
     * @ignore Exclude from docs
     */
    Axis.prototype.validateBreaks = function () {
        __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["each"](this.axisBreaks.iterator(), function (axisBreak) {
            axisBreak.invalidate();
        });
    };
    /**
     * Associates an Axis break with this Axis, after it is inserted into
     * `axisBreaks`.
     *
     * @ignore Exclude from docs
     * @param {IListEvents<AxisBreak>["insert"]} event Event
     */
    Axis.prototype.processBreak = function (event) {
        var axisBreak = event.newValue;
        axisBreak.parent = this.renderer.breakContainer;
        axisBreak.axis = this;
    };
    /**
     * Registers a [[XYSeries]] element with this Axis.
     *
     * Returns a [[Disposer]] for all events, added to Series for watching
     * changes in Axis, and vice versa.
     * @ignore
     * @param  {XYSeries}     series  Series
     * @return {IDisposer}          Event disposer
     */
    Axis.prototype.registerSeries = function (series) {
        var _this = this;
        this.series.moveValue(series);
        return new __WEBPACK_IMPORTED_MODULE_8__core_utils_Disposer__["c" /* MultiDisposer */]([
            new __WEBPACK_IMPORTED_MODULE_8__core_utils_Disposer__["b" /* Disposer */](function () {
                _this.series.removeValue(series);
            }),
            this.events.on("lengthchanged", series.invalidate, series) //,
            // TODO should these be disposed of ?
            //series.events.on("datavalidated", this.processSeriesDataItems, this),
            //series.events.on("visibilitychanged", this.processSeriesDataItems, this),
            //series.events.on("hidden", this.processSeriesDataItems, this)
        ]);
    };
    Object.defineProperty(Axis.prototype, "renderer", {
        /**
         * @return {T} Renderer
         */
        get: function () {
            return this._renderer;
        },
        /**
         * An [[AxisRenderer]] to be used to render this Axis.
         *
         * Please note that most of the settings, related to Axis' appearance are set
         * via its renderer. Not directly on the Axis.
         *
         * E.g.:
         *
         * ```TypeScript
         * axis.renderer.inside = true;
         * axis.renderer.minLabelPosition = 0.1;
         * axis.renderer.maxLabelPosition = 0.9;
         * ```
         * ```JavaScript
         * axis.renderer.inside = true;
         * axis.renderer.minLabelPosition = 0.1;
         * axis.renderer.maxLabelPosition = 0.9;
         * ```
         *
         * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/} for more info
         * @param {T}  renderer  Renderer
         */
        set: function (renderer) {
            this._renderer = renderer;
            renderer.chart = this.chart;
            renderer.axis = this;
            renderer.parent = this;
            this.title.parent = this; // we add title to axis and set layout in renderer to avoid one extra container, as otherwise axis container would be used for holding renderer only
            this.initRenderer();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Converts a relative position to angle. (for circular axes)
     *
     * @param  {number} position Position (0-1)
     * @return {number}          Angle
     */
    Axis.prototype.positionToAngle = function (position) {
        return this.renderer.positionToAngle(position);
    };
    /**
     * Converts pixel coordinates to a relative position. (0-1)
     *
     * @param {IPoint}   point  Coorinates (px)
     * @return {number}         Position (0-1)
     */
    Axis.prototype.pointToPosition = function (point) {
        return this.renderer.pointToPosition(point);
    };
    /**
     * [getAnyRangePath description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {any}     start  [description]
     * @param  {any}     end    [description]
     * @return {string}         [description]
     */
    Axis.prototype.getAnyRangePath = function (start, end) {
        return this.renderer.getPositionRangePath(start, end);
    };
    /**
     * Converts any positional parameter to a relative position on axis.
     *
     * @todo Description (review)
     * @param  {any}     value  Pisition
     * @return {number}         Position (0-1)
     */
    Axis.prototype.anyToPosition = function (value) {
        return 0;
    };
    /**
     * Converts any positional parameter to a relative position on axis.
     *
     * @todo Description (review)
     * @param  {any}     value  Pisition
     * @return {IOrientationPoint}  Orientation point
     */
    Axis.prototype.anyToPoint = function (value) {
        return { x: 0, y: 0, angle: 0 };
    };
    /**
     * [getPositionRangePath description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {number} startPosition [description]
     * @param  {number} endPosition   [description]
     * @return {string}               [description]
     */
    Axis.prototype.getPositionRangePath = function (startPosition, endPosition) {
        return this.renderer.getPositionRangePath(startPosition, endPosition);
    };
    Object.defineProperty(Axis.prototype, "axisLength", {
        /**
         * Actual axis length in pixels.
         *
         * @return {number} Axis length (px)
         */
        get: function () {
            return this.renderer.axisLength;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Axis.prototype, "cursorTooltipEnabled", {
        /**
         * @return {boolean} Display tooltip?
         */
        get: function () {
            return this._cursorTooltipEnabled;
        },
        /**
         * Indicates if axis should display a tooltip for chart's cursor.
         *
         * @param {boolean} value Display tooltip?
         */
        set: function (value) {
            this._cursorTooltipEnabled = value;
            if (value && this.renderer) {
                this.renderer.updateTooltip();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Shows Axis tooltip at specific relative position within Axis. (0-1)
     *
     * @param {number} position Position (0-1)
     */
    Axis.prototype.showTooltipAtPosition = function (position) {
        var tooltip = this._tooltip;
        position = this.toAxisPosition(position);
        var renderer = this.renderer;
        if (tooltip) {
            //@todo: think of how to solve this better
            if (tooltip && !tooltip.parent) {
                tooltip.parent = this.tooltipContainer;
            }
            var tooltipLocation = renderer.tooltipLocation;
            var startPosition = this.getCellStartPosition(position);
            var endPosition = this.getCellEndPosition(position);
            position = startPosition + (endPosition - startPosition) * tooltipLocation;
            position = __WEBPACK_IMPORTED_MODULE_12__core_utils_Math__["fitToRange"](position, this.start, this.end);
            var startPoint = renderer.positionToPoint(startPosition);
            var endPoint = renderer.positionToPoint(endPosition);
            // save values so cursor could use them
            this.currentItemStartPoint = startPoint;
            this.currentItemEndPoint = endPoint;
            if (renderer.fullWidthTooltip) {
                tooltip.width = endPoint.x - startPoint.x;
                tooltip.height = endPoint.y - startPoint.y;
            }
            var point = renderer.positionToPoint(position);
            var globalPoint = __WEBPACK_IMPORTED_MODULE_13__core_utils_Utils__["spritePointToSvg"](point, this.renderer.line);
            tooltip.text = this.getTooltipText(position);
            tooltip.pointTo(globalPoint);
            tooltip.show();
            if (!this.cursorTooltipEnabled) {
                tooltip.hide(0);
            }
        }
    };
    /**
     * Converts relative position (0-1) to Axis position with zoom level and
     * inversed taken into account.
     *
     * @param  {number} position Global position (0-1)
     * @return {number}          Position within Axis (0-1)
     */
    Axis.prototype.toAxisPosition = function (position) {
        position = position * (this.end - this.start);
        if (this.renderer.inversed) {
            position = this.end - position;
        }
        else {
            position = this.start + position;
        }
        return position;
    };
    /**
     * Returns text to be used for cursor's Axis tooltip.
     *
     * This is a placeholder to override for extending classes.
     *
     * @ignore Exclude from docs
     * @param  {number}  position  Position coordinate (px)
     * @return {string}            Label text
     */
    Axis.prototype.getTooltipText = function (position) {
        return;
    };
    /**
     * Updates Axis' tooltip's position and possibly size, and pointer (stem)
     * place.
     *
     * @ignore Exclude from docs
     * @param {PointerOrientation}  pointerOrientation  Pointer (stem) orientation
     * @param {IRectangle}          boundingRectangle   A rectangle for tooltip to fit within
     */
    Axis.prototype.updateTooltip = function (pointerOrientation, boundingRectangle) {
        var tooltip = this._tooltip;
        if (tooltip) {
            tooltip.pointerOrientation = pointerOrientation;
            tooltip.setBounds(__WEBPACK_IMPORTED_MODULE_13__core_utils_Utils__["spriteRectToSvg"](boundingRectangle, this.renderer.line));
        }
    };
    /**
     * [roundPosition description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {number}            position  Relative position
     * @param  {AxisItemLocation}  location  Location on axis
     * @return {number}                      Rounded position
     */
    Axis.prototype.roundPosition = function (position, location) {
        return position;
    };
    /**
     * [getCellStartPosition description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {number} position [description]
     * @return {number}          [description]
     */
    Axis.prototype.getCellStartPosition = function (position) {
        return position;
    };
    /**
     * [getCellEndPosition description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {number} position [description]
     * @return {number}          [description]
     */
    Axis.prototype.getCellEndPosition = function (position) {
        return position;
    };
    Object.defineProperty(Axis.prototype, "axisRanges", {
        /**
         * A list of axis ranges for this Axis.
         *
         * @return {ListTemplate} Axis ranges
         */
        get: function () {
            if (!this._axisRanges) {
                var dataItem = this.createDataItem();
                this._axisRanges = new __WEBPACK_IMPORTED_MODULE_7__core_utils_List__["e" /* ListTemplate */](dataItem);
                this._axisRanges.events.on("insert", this.processAxisRange, this);
                this._disposers.push(new __WEBPACK_IMPORTED_MODULE_7__core_utils_List__["c" /* ListDisposer */](this._axisRanges));
            }
            return this._axisRanges;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Decorates an axis range after it has been added to the axis range list.
     *
     * @param {IListEvents<AxisDataItem>["insert"]} event Event
     */
    Axis.prototype.processAxisRange = function (event) {
        var axisRange = event.newValue;
        axisRange.component = this;
        axisRange.isRange = true;
    };
    Object.defineProperty(Axis.prototype, "axisBreaks", {
        /**
         * A list of axis breaks on this Axis.
         *
         * @return {SortedListTemplate} Axis breaks.
         */
        get: function () {
            if (!this._axisBreaks) {
                this._axisBreaks = new __WEBPACK_IMPORTED_MODULE_6__core_utils_SortedList__["d" /* SortedListTemplate */](this.createAxisBreak(), function (a, b) {
                    return __WEBPACK_IMPORTED_MODULE_14__core_utils_Number__["order"](a.adjustedStartValue, b.adjustedStartValue);
                });
                this._axisBreaks.events.on("insert", this.processBreak, this);
                this._disposers.push(new __WEBPACK_IMPORTED_MODULE_7__core_utils_List__["c" /* ListDisposer */](this._axisBreaks));
            }
            return this._axisBreaks;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates a new axis break.
     *
     * @return {this["_axisBreak"]} Axis break
     */
    Axis.prototype.createAxisBreak = function () {
        return new __WEBPACK_IMPORTED_MODULE_3__AxisBreak__["a" /* AxisBreak */]();
    };
    Object.defineProperty(Axis.prototype, "series", {
        /**
         * A list of Series currently associated with this Axis.
         *
         * @return {List<XYSeries>} Series
         */
        get: function () {
            if (!this._series) {
                this._series = new __WEBPACK_IMPORTED_MODULE_7__core_utils_List__["b" /* List */]();
            }
            return this._series;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Processes Series' data items.
     *
     * This is a placeholder to override for extending classes.
     *
     * @ignore Exclude from docs
     */
    Axis.prototype.processSeriesDataItems = function () {
    };
    /**
     * Processes Series' single data item.
     *
     * This is a placeholder to override for extending classes.
     *
     * @ignore Exclude from docs
     * @param {XYSeriesDataItem} dataItem Data item
     */
    Axis.prototype.processSeriesDataItem = function (dataItem) {
    };
    /**
     * Post-processes Serie's data items.
     *
     * This is a placeholder to override for extending classes.
     *
     * @ignore Exclude from docs
     */
    Axis.prototype.postProcessSeriesDataItems = function () {
    };
    /**
     * Post-processes Serie's single data item.
     *
     * This is a placeholder to override for extending classes.
     *
     * @ignore Exclude from docs
     * @param {XYSeriesDataItem} dataItem Data item
     */
    Axis.prototype.postProcessSeriesDataItem = function (dataItem) {
    };
    //
    /**
     * Updates Axis based on all Series that might influence it.
     *
     * Called by Series after Series data is validated.
     *
     * This is a placeholder to override for extending classes.
     *
     * @ignore Exclude from docs
     */
    Axis.prototype.updateAxisBySeries = function () {
    };
    /**
     * Hides unused data items.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     */
    Axis.prototype.hideUnusedDataItems = function () {
        // hide all unused
        var dataItemsIterator = this._dataItemsIterator;
        dataItemsIterator.createNewItems = false;
        __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["each"](dataItemsIterator.iterator(), function (dataItem) {
            dataItem.__disabled = true;
        });
        dataItemsIterator.clear();
        dataItemsIterator.createNewItems = true;
    };
    /**
     * Returns a Series' data item that corresponds to specific position on Axis.
     *
     * This is a placeholder to override for extending classes.
     *
     * @ignore Exclude from docs
     * @param  {Series}          series    Series
     * @param  {number}          position  Position (0-1)
     * @return {XYSeriesDataItem}            Data item
     */
    Axis.prototype.getSeriesDataItem = function (series, position) {
        return;
    };
    /**
     * Returns an angle that corresponds to specific angle.
     *
     * This is a placeholder to override for extending classes.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     * @param  {XYSeriesDataItem}  dataItem  Data item
     * @param  {string}          key       ???
     * @param  {number}          location  Location
     * @param  {string}          stackKey  ???
     * @return {number}                    Angle
     */
    Axis.prototype.getAngle = function (dataItem, key, location, stackKey) {
        return;
    };
    /**
     * [getX description]
     *
     * This is a placeholder to override for extending classes.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     * @param  {XYSeriesDataItem} dataItem [description]
     * @param  {string}         key      [description]
     * @param  {number}         location [description]
     * @param  {string}         stackKey [description]
     * @return {number}                  [description]
     */
    Axis.prototype.getX = function (dataItem, key, location, stackKey) {
        return;
    };
    /**
     * [getY description]
     *
     * This is a placeholder to override for extending classes.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     * @param  {XYSeriesDataItem} dataItem [description]
     * @param  {string}         key      [description]
     * @param  {number}         location [description]
     * @param  {string}         stackKey [description]
     * @return {number}                  [description]
     */
    Axis.prototype.getY = function (dataItem, key, location, stackKey) {
        return;
    };
    Object.defineProperty(Axis.prototype, "basePoint", {
        /**
         * [basePoint description]
         *
         * @ignore Exclude from docs
         * @todo Description (review)
         * @return {IPoint} Base point coordinates
         */
        get: function () {
            return { x: 0, y: 0 };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * [dataChangeUpdate description]
     *
     * This is a placeholder to override for extending classes.
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    Axis.prototype.dataChangeUpdate = function () {
    };
    /**
     * Removes axis breaks that fall between `min` and `max` (???)
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     * @param  {number}  min  Start value
     * @param  {number}  max  End value
     * @return {number}       Spread o
     */
    Axis.prototype.adjustDifference = function (min, max) {
        var difference = max - min;
        if (__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](difference)) {
            __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["eachContinue"](this.axisBreaks.iterator(), function (axisBreak) {
                var startValue = axisBreak.adjustedStartValue;
                var endValue = axisBreak.adjustedEndValue;
                if (__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](startValue) && __WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](endValue)) {
                    // breaks are sorted, we don't need go further anymore
                    if (startValue > max) {
                        return false;
                    }
                    if (endValue >= min) {
                        if (__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](startValue) && __WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isNumber"](endValue)) {
                            var breakSize = axisBreak.breakSize;
                            var intersection = __WEBPACK_IMPORTED_MODULE_12__core_utils_Math__["intersection"]({ start: startValue, end: endValue }, { start: min, end: max });
                            if (intersection) {
                                difference -= (intersection.end - intersection.start) * (1 - breakSize);
                            }
                        }
                    }
                    return true;
                }
            });
            return difference;
        }
    };
    /**
     * Checks if specific value falls within a break.
     *
     * Returns [[AxisBreak]] the value falls into.
     *
     * @param  {number}     value  Value to check
     * @return {AxisBreak}         Axis break
     */
    Axis.prototype.isInBreak = function (value) {
        return __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["find"](this.axisBreaks.iterator(), function (axisBreak) {
            return value >= axisBreak.adjustedStartValue &&
                value <= axisBreak.adjustedEndValue;
        });
    };
    /**
     * [fixAxisBreaks description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    Axis.prototype.fixAxisBreaks = function () {
        var _this = this;
        var axisBreaks = this.axisBreaks;
        if (axisBreaks.length > 0) {
            // first make sure that startValue is <= end value
            // This needs to make a copy of axisBreaks because it mutates the list while traversing
            // TODO very inefficient
            __WEBPACK_IMPORTED_MODULE_15__core_utils_Array__["c" /* each */](__WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["toArray"](axisBreaks.iterator()), function (axisBreak) {
                var startValue = __WEBPACK_IMPORTED_MODULE_12__core_utils_Math__["min"](axisBreak.startValue, axisBreak.endValue);
                var endValue = __WEBPACK_IMPORTED_MODULE_12__core_utils_Math__["max"](axisBreak.startValue, axisBreak.endValue);
                axisBreak.adjustedStartValue = startValue;
                axisBreak.adjustedEndValue = endValue;
                _this.axisBreaks.update(axisBreak);
            });
            var firstAxisBreak = axisBreaks.first;
            var previousEndValue_1 = Math.min(firstAxisBreak.startValue, firstAxisBreak.endValue);
            // process breaks
            // TODO does this need to call axisBreaks.update ?
            __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["each"](this.axisBreaks.iterator(), function (axisBreak) {
                var startValue = axisBreak.adjustedStartValue;
                var endValue = axisBreak.adjustedEndValue;
                // breaks can't overlap
                // if break starts before previous break ends
                if (startValue < previousEndValue_1) {
                    startValue = previousEndValue_1;
                    if (endValue < previousEndValue_1) {
                        endValue = previousEndValue_1;
                    }
                }
                axisBreak.adjustedStartValue = startValue;
                axisBreak.adjustedEndValue = endValue;
            });
        }
    };
    Object.defineProperty(Axis.prototype, "startIndex", {
        /**
         * @ignore Exclude from docs
         * @return {number} [description]
         */
        get: function () {
            return 0;
        },
        /**
         * We need start/end indexes of axes to be 0 - `dataItems.length`.
         *
         * Yes, also for category axis, this helps to avoid jumping of categories
         * while scrolling and does not do a lot of extra work as we use
         * protected `_startIndex` and `_endIndex` when working with items.
         *
         * @hidden
         */
        /**
         * [startIndex description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @param {number} value [description]
         */
        set: function (value) {
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Axis.prototype, "endIndex", {
        /**
         * @ignore Exclude from docs
         * @return {number} [description]
         */
        get: function () {
            return this.dataItems.length;
        },
        /**
         * [endIndex description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @param {number} value [description]
         */
        set: function (value) {
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns a formatted label based on position.
     *
     * Individual axis types should override this method to generate a label
     * that is relevant to axis type.
     *
     * @param  {number}  position  Relative position on axis (0-1)
     * @return {string}            Position label
     */
    Axis.prototype.getPositionLabel = function (position) {
        return Math.round(position * 100) + "%x";
    };
    Object.defineProperty(Axis.prototype, "chart", {
        /**
         * @return {Chart} Chart
         */
        get: function () {
            return this._chart;
        },
        /**
         * A Chart this Axis belongs to.
         *
         * @param {Chart}  value  Chart
         */
        set: function (value) {
            this._chart = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates a data item for a Series range.
     *
     * @param  {XYSeries}  series  Target Series
     * @return {this}            Range data item
     */
    Axis.prototype.createSeriesRange = function (series) {
        var range = this.createDataItem();
        range.component = this;
        series.axisRanges.push(range);
        return range;
    };
    /**
     * Copies all properties and related data from a different instance of Axis.
     *
     * @param {this} source Source Axis
     */
    Axis.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        if (this.renderer) {
            this.renderer.copyFrom(source.renderer);
        }
        if (source.title) {
            this.title = source.title.clone();
        }
    };
    /**
     * Resets internal iterator.
     */
    Axis.prototype.resetIterators = function () {
        this._dataItemsIterator.reset();
    };
    /**
     * Processes JSON-based config before it is applied to the object.
     *
     * @ignore Exclude from docs
     * @param {object}  config  Config
     */
    Axis.prototype.processConfig = function (config) {
        if (config) {
            // Set up axis ranges
            if (__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["hasValue"](config.axisRanges) && __WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isArray"](config.axisRanges)) {
                for (var i = 0, len = config.axisRanges.length; i < len; i++) {
                    var range = config.axisRanges[i];
                    // If `series` is set, we know it's a series range
                    if (__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["hasValue"](range["series"])) {
                        if (__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__["isString"](range["series"])) {
                            if (this.map.hasKey(range["series"])) {
                                //range["series"] = this.map.getKey(range["series"]);
                                config.axisRanges[i] = this.createSeriesRange(this.map.getKey(range["series"]));
                                delete (range["series"]);
                                config.axisRanges[i].config = range;
                            }
                        }
                    }
                }
            }
        }
        _super.prototype.processConfig.call(this, config);
    };
    return Axis;
}(__WEBPACK_IMPORTED_MODULE_0__core_Component__["a" /* Component */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_9__core_Registry__["b" /* registry */].registeredClasses["Axis"] = Axis;
__WEBPACK_IMPORTED_MODULE_9__core_Registry__["b" /* registry */].registeredClasses["AxisDataItem"] = AxisDataItem;
//# sourceMappingURL=Axis.js.map

/***/ }),
/* 81 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AxisBreak; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_utils_Disposer__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_elements_WavedLine__ = __webpack_require__(75);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_Color__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__ = __webpack_require__(9);
/**
 * Axis break module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */







/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Base class to define "breaks" on axes.
 *
 * @see {@link IAxisBreakEvents} for a list of available events
 * @see {@link IAxisBreakAdapters} for a list of available Adapters
 * @important
 */
var AxisBreak = /** @class */ (function (_super) {
    __extends(AxisBreak, _super);
    /**
     * Constructor
     */
    function AxisBreak() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * Reference to parent Axis.
         *
         * @type {MutableValueDisposer}
         */
        _this._axis = new __WEBPACK_IMPORTED_MODULE_1__core_utils_Disposer__["d" /* MutableValueDisposer */]();
        /**
         * A list of axis data items which fall within this break.
         *
         * @type {List<AxisDataItem>}
         */
        _this.dataItems = new __WEBPACK_IMPORTED_MODULE_3__core_utils_List__["b" /* List */]();
        _this.className = "AxisBreak";
        // Set defaults
        _this.breakSize = 0.01;
        _this.marginLeft = -5;
        _this.marginRight = -5;
        _this.marginTop = -5;
        _this.marginBottom = -5;
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        // Create elements
        // (these won't be used actually, just for setting properties)
        var fillShape = new __WEBPACK_IMPORTED_MODULE_2__core_elements_WavedLine__["a" /* WavedLine */]();
        fillShape.fill = interfaceColors.getFor("background");
        fillShape.stroke = Object(__WEBPACK_IMPORTED_MODULE_5__core_utils_Color__["c" /* color */])();
        fillShape.fillOpacity = 0.9;
        fillShape.zIndex = 0;
        _this._fillShape = fillShape;
        var startLine = new __WEBPACK_IMPORTED_MODULE_2__core_elements_WavedLine__["a" /* WavedLine */]();
        startLine.fill = Object(__WEBPACK_IMPORTED_MODULE_5__core_utils_Color__["c" /* color */])();
        startLine.stroke = interfaceColors.getFor("grid");
        startLine.strokeOpacity = 0.3;
        startLine.zIndex = 1;
        _this._startLine = startLine;
        var endLine = new __WEBPACK_IMPORTED_MODULE_2__core_elements_WavedLine__["a" /* WavedLine */]();
        endLine.fill = Object(__WEBPACK_IMPORTED_MODULE_5__core_utils_Color__["c" /* color */])();
        endLine.stroke = Object(__WEBPACK_IMPORTED_MODULE_5__core_utils_Color__["c" /* color */])("#000000"); // interfaceColors.getFor("grid");
        endLine.strokeOpacity = 0.3;
        endLine.zIndex = 2;
        _this._endLine = endLine;
        _this._disposers.push(_this._axis);
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(AxisBreak.prototype, "startLine", {
        /**
         * @return {IWavedShape} Element
         */
        get: function () {
            return this._startLine;
        },
        /**
         * An element used for the starting line of the break.
         *
         * @param {IWavedShape}  sprite  Element
         */
        set: function (sprite) {
            if (this._startLine) {
                this._startLine.dispose();
            }
            this._startLine = sprite;
            this.addBreakSprite(sprite);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisBreak.prototype, "endLine", {
        /**
         * @return {IWavedShape} Element
         */
        get: function () {
            return this._endLine;
        },
        /**
         * An element used for the end line of the break.
         *
         * @param {IWavedShape} sprite Element
         */
        set: function (sprite) {
            if (this._endLine) {
                this._endLine.dispose();
            }
            this._endLine = sprite;
            this.addBreakSprite(sprite);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisBreak.prototype, "fillShape", {
        /**
         * @return {IWavedShape} Element
         */
        get: function () {
            return this._fillShape;
        },
        /**
         * An element used for fill of the break.
         *
         * @param {IWavedShape} sprite Element
         */
        set: function (sprite) {
            if (this._fillShape) {
                this._fillShape.dispose();
            }
            this._fillShape = sprite;
            this.addBreakSprite(sprite);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Adds a break element (e.g. lines, fill) to the break, which is
     * [[Container]].
     *
     * @ignore Exclude from docs
     * @param {IWavedShape} sprite Element to add
     */
    AxisBreak.prototype.addBreakSprite = function (sprite) {
        sprite.parent = this;
        sprite.isMeasured = false;
        this._disposers.push(sprite);
    };
    Object.defineProperty(AxisBreak.prototype, "axis", {
        /**
         * @return {Axis} Axis
         */
        get: function () {
            return this._axis.get();
        },
        /**
         * An Axis this Break is associated with.
         *
         * @param {Axis}  axis  Axis
         */
        set: function (axis) {
            if (this._axis.get() !== axis) {
                this._axis.set(axis, axis.renderer.gridContainer.events.on("transformed", this.invalidate, this));
                axis.renderer.createBreakSprites(this);
                // this can't go to copyFrom, as axis is set later
                var breakTemplate = axis.axisBreaks.template;
                this.startLine.copyFrom(breakTemplate.startLine);
                this.endLine.copyFrom(breakTemplate.endLine);
                this.fillShape.copyFrom(breakTemplate.fillShape);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisBreak.prototype, "breakSize", {
        /**
         * @return {number} [description]
         */
        get: function () {
            return this.getPropertyValue("breakSize");
        },
        /**
         * [breakSize description]
         *
         * @todo Description
         * @param {number} value [description]
         */
        set: function (value) {
            if (this.setPropertyValue("breakSize", value)) {
                if (this.axis) {
                    this.axis.invalidateDataRange();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisBreak.prototype, "startPoint", {
        /**
         * Returns pixel coordinates of axis break's start.
         *
         * @return {IPoint} Start point
         */
        get: function () {
            var renderer = this.axis.renderer;
            if (renderer) {
                return renderer.positionToPoint(this.startPosition);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisBreak.prototype, "endPoint", {
        /**
         * Returns pixel coordinates of axis break's end.
         *
         * @return {IPoint} End point
         */
        get: function () {
            var renderer = this.axis.renderer;
            if (renderer) {
                return renderer.positionToPoint(this.endPosition);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisBreak.prototype, "startPosition", {
        /**
         * Returns a relative position at which axis break starts.
         *
         * This is a calculated position, meaning it shows relative position of the
         * break after break is applied.
         *
         * @return {number} Start position
         */
        get: function () {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisBreak.prototype, "endPosition", {
        /**
         * Returns a relative position at which axis break ends.
         *
         * This is a calculated position, meaning it shows relative position of the
         * break after break is applied.
         *
         * @return {number} End position
         */
        get: function () {
            return;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Draws the axis break.
     *
     * @ignore Exclude from docs
     */
    AxisBreak.prototype.draw = function () {
        _super.prototype.draw.call(this);
        if (this.axis) {
            var renderer = this.axis.renderer;
            renderer.updateBreakElement(this);
        }
    };
    Object.defineProperty(AxisBreak.prototype, "startValue", {
        /**
         * @return {number} Starting value
         */
        get: function () {
            return this.getPropertyValue("startValue");
        },
        /**
         * A starting value for the break.
         *
         * @param {number}  value  Starting value
         */
        set: function (value) {
            if (this.setPropertyValue("startValue", value)) {
                if (this.axis) {
                    this.axis.invalidateDataRange();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisBreak.prototype, "endValue", {
        /**
         * @return {number} End value
         */
        get: function () {
            return this.getPropertyValue("endValue");
        },
        /**
         * An end value for the break.
         *
         * @param {number}  value  End value
         */
        set: function (value) {
            if (this.setPropertyValue("endValue", value)) {
                if (this.axis) {
                    this.axis.invalidateDataRange();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    return AxisBreak;
}(__WEBPACK_IMPORTED_MODULE_0__core_Container__["a" /* Container */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_4__core_Registry__["b" /* registry */].registeredClasses["AxisBreak"] = AxisBreak;
//# sourceMappingURL=AxisBreak.js.map

/***/ }),
/* 82 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return XYSeriesDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return XYSeries; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Series__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__axes_ValueAxis__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_utils_Disposer__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__axes_CategoryAxis__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__axes_DateAxis__ = __webpack_require__(111);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__core_utils_Utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__core_utils_Type__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__core_utils_Array__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__core_rendering_Path__ = __webpack_require__(8);
/**
 * XY series module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */














/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[XYSeries]].
 *
 * @see {@link DataItem}
 */
var XYSeriesDataItem = /** @class */ (function (_super) {
    __extends(XYSeriesDataItem, _super);
    /**
     * Constructor
     */
    function XYSeriesDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "XYSeriesDataItem";
        _this.values.valueX = { stack: 0 };
        _this.values.valueY = { stack: 0 };
        _this.values.openValueX = {};
        _this.values.openValueY = {};
        _this.values.dateX = {};
        _this.values.dateY = {};
        _this.values.openDateX = {};
        _this.values.openDateY = {};
        _this.setLocation("dateX", 0.5, 0);
        _this.setLocation("dateY", 0.5, 0);
        _this.setLocation("categoryX", 0.5, 0);
        _this.setLocation("categoryY", 0.5, 0);
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(XYSeriesDataItem.prototype, "valueX", {
        /**
         * @return {number} Value
         */
        get: function () {
            return this.values.valueX.value;
        },
        /**
         * Item's numeric value on X value axis.
         *
         * @param {number}  value  Value
         */
        set: function (value) {
            this.setValue("valueX", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYSeriesDataItem.prototype, "valueY", {
        /**
         * @return {number} Value
         */
        get: function () {
            return this.values.valueY.value;
        },
        /**
         * Item's numeric value on Y value axis.
         *
         * @param {number}  value  Value
         */
        set: function (value) {
            this.setValue("valueY", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYSeriesDataItem.prototype, "dateX", {
        /**
         * @return {Date} Date
         */
        get: function () {
            return this.getDate("dateX");
        },
        /**
         * Item's date value on X date-based axis.
         *
         * @param {Date}  date  Date
         */
        set: function (date) {
            this.setDate("dateX", date);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYSeriesDataItem.prototype, "dateY", {
        /**
         * @return {Date} Date
         */
        get: function () {
            return this.getDate("dateY");
        },
        /**
         * Item's date value on Y date-based axis.
         *
         * @param {Date}  date  Date
         */
        set: function (date) {
            this.setDate("dateY", date);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYSeriesDataItem.prototype, "categoryX", {
        /**
         * @return {string} Category
         */
        get: function () {
            return this.categories.categoryX;
        },
        /**
         * Item's category on X category axis.
         *
         * @param {string}  category  Category
         */
        set: function (category) {
            this.setCategory("categoryX", category);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYSeriesDataItem.prototype, "categoryY", {
        /**
         * @return {string} Category
         */
        get: function () {
            return this.categories.categoryY;
        },
        /**
         * Item's category on Y category axis.
         *
         * @param {string}  category  Category
         */
        set: function (category) {
            this.setCategory("categoryY", category);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYSeriesDataItem.prototype, "openValueX", {
        /**
         * @return {number} Value
         */
        get: function () {
            return this.values.openValueX.value;
        },
        /**
         * Item's open numeric value on X value axis.
         *
         * @param {number}  value  Value
         */
        set: function (value) {
            this.setValue("openValueX", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYSeriesDataItem.prototype, "openValueY", {
        /**
         * @return {number} Value
         */
        get: function () {
            return this.values.openValueY.value;
        },
        /**
         * Item's open numeric value on Y value axis.
         *
         * @param {number}  value  Value
         */
        set: function (value) {
            this.setValue("openValueY", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYSeriesDataItem.prototype, "openDateX", {
        /**
         * @return {Date} Date
         */
        get: function () {
            return this.getDate("openDateX");
        },
        /**
         * Item's open date value on X date-based axis.
         *
         * @param {Date}  date  Date
         */
        set: function (date) {
            this.setDate("openDateX", date);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYSeriesDataItem.prototype, "openDateY", {
        /**
         * @return {Date} Date
         */
        get: function () {
            return this.getDate("openDateY");
        },
        /**
         * Item's open date value on Y date-based axis.
         *
         * @param {Date}  date  Date
         */
        set: function (date) {
            this.setDate("openDateY", date);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYSeriesDataItem.prototype, "openCategoryX", {
        /**
         * @return {string} Category
         */
        get: function () {
            return this.categories.openCategoryX;
        },
        /**
         * Item's open category on X category axis.
         *
         * @param {string}  category  Category
         */
        set: function (category) {
            this.setProperty("openCategoryX", category);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYSeriesDataItem.prototype, "openCategoryY", {
        /**
         * @return {string} Category
         */
        get: function () {
            return this.categories.openCategoryY;
        },
        /**
         * Item's open category on Y category axis.
         *
         * @param {string}  category  Category
         */
        set: function (category) {
            this.setProperty("openCategoryY", category);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Return smallest value out of all item's value fields.
     *
     * @ignore Exclude from docs
     * @param  {string[]}  fields      Fields to check in
     * @param  {boolean}   working     Include working (temporary) values
     * @param  {number}    stackValue  If item is in a stack, the value item starts as
     * @return {number}                Value
     */
    XYSeriesDataItem.prototype.getMin = function (fields, working, stackValue) {
        var _this = this;
        //if (this.visible) {  // dumped because of non smooth zooming
        var min;
        if (!__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isNumber"](stackValue)) {
            stackValue = 0;
        }
        __WEBPACK_IMPORTED_MODULE_12__core_utils_Array__["c" /* each */](fields, function (field) {
            var value;
            if (working) {
                value = _this.getWorkingValue(field);
            }
            else {
                value = _this.getValue(field);
            }
            value += stackValue;
            if (value < min || !__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isNumber"](min)) {
                min = value;
            }
        });
        return min;
        //}
    };
    /**
     * Return biggest value out of all item's value fields.
     *
     * @ignore Exclude from docs
     * @param  {string[]}  fields      Fields to check in
     * @param  {boolean}   working     Include working (temporary) values
     * @param  {number}    stackValue  If item is in a stack, the value item starts as
     * @return {number}                Value
     */
    XYSeriesDataItem.prototype.getMax = function (fields, working, stackValue) {
        var _this = this;
        //if (this.visible) { // dumped because of non smooth zooming
        var max;
        if (!__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isNumber"](stackValue)) {
            stackValue = 0;
        }
        __WEBPACK_IMPORTED_MODULE_12__core_utils_Array__["c" /* each */](fields, function (field) {
            var value;
            if (working) {
                value = _this.getWorkingValue(field);
            }
            else {
                value = _this.getValue(field);
            }
            value += stackValue;
            if (value > max || !__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isNumber"](max)) {
                max = value;
            }
        });
        return max;
        //}
    };
    return XYSeriesDataItem;
}(__WEBPACK_IMPORTED_MODULE_0__Series__["b" /* SeriesDataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Defines Series for [[XYChart]].
 *
 * @see {@link IXYSeriesEvents} for a list of available Events
 * @see {@link IXYSeriesAdapters} for a list of available Adapters
 * @todo Example
 * @important
 */
var XYSeries = /** @class */ (function (_super) {
    __extends(XYSeries, _super);
    /**
     * Constructor
     */
    function XYSeries() {
        var _this = _super.call(this) || this;
        /**
         * X axis the series is attached to.
         *
         * @type {MutableValueDisposer}
         */
        _this._xAxis = new __WEBPACK_IMPORTED_MODULE_4__core_utils_Disposer__["d" /* MutableValueDisposer */]();
        /**
         * Y axis the series is attached to.
         *
         * @type {MutableValueDisposer}
         */
        _this._yAxis = new __WEBPACK_IMPORTED_MODULE_4__core_utils_Disposer__["d" /* MutableValueDisposer */]();
        _this.className = "XYSeries";
        _this.isMeasured = false;
        _this.mainContainer.mask = new __WEBPACK_IMPORTED_MODULE_1__core_Sprite__["a" /* Sprite */]();
        _this.mainContainer.mask.element = _this.paper.add("path");
        _this.stacked = false;
        _this.tooltip.pointerOrientation = "horizontal";
        _this.tooltip.events.on("hidden", function () {
            _this.returnBulletDefaultState();
        });
        _this._disposers.push(_this._xAxis);
        _this._disposers.push(_this._yAxis);
        _this.applyTheme();
        return _this;
    }
    /**
     * Sets defaults that instantiate some objects that rely on parent, so they
     * cannot be set in constructor.
     */
    XYSeries.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);
        if (!__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["hasValue"](this.readerTitle)) {
            this.readerTitle = this.language.translate("X/Y Series");
        }
    };
    /**
     * Returns a new/empty DataItem of the type appropriate for this object.
     *
     * @see {@link DataItem}
     * @return {XYSeriesDataItem} Data Item
     */
    XYSeries.prototype.createDataItem = function () {
        return new XYSeriesDataItem();
    };
    /**
     * (Re)validates the series' data.
     *
     * @ignore Exclude from docs
     */
    XYSeries.prototype.validateData = function () {
        this.defineFields();
        _super.prototype.validateData.call(this);
        if (!__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["hasValue"](this.dataFields[this._xField]) || !__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["hasValue"](this.dataFields[this._yField])) {
            throw Error("Data fields for series \"" + (this.name ? this.name : this.uid) + "\" are not properly defined.");
        }
    };
    /**
     * Processes data item.
     *
     * @param {XYSeriesDataItem}  dataItem     Data item
     * @param {Object}            dataContext  Raw data
     * @param {number}            index        Index of the data item
     */
    XYSeries.prototype.processDataItem = function (dataItem, dataContext) {
        try {
            _super.prototype.processDataItem.call(this, dataItem, dataContext);
            dataItem.events.disable();
            this.xAxis.processSeriesDataItem(dataItem);
            this.yAxis.processSeriesDataItem(dataItem);
            dataItem.events.enable();
            this.setInitialWorkingValues(dataItem);
        }
        catch (e) {
            this._chart.raiseCriticalError(e);
        }
    };
    /**
     * Inits data item's working values.
     *
     * @param {this["_dataItem"]}  dataItem  Data item
     * @param {number}             index     Data item's index
     */
    XYSeries.prototype.setInitialWorkingValues = function (dataItem) {
    };
    /**
     * Sets up which data fields to use for data access.
     */
    XYSeries.prototype.defineFields = function () {
        var xAxis = this.xAxis;
        var yAxis = this.yAxis;
        var xAxisFieldName = xAxis.axisFieldName;
        var xField = (xAxisFieldName + "X");
        var xOpenField = ("open" + __WEBPACK_IMPORTED_MODULE_10__core_utils_Utils__["capitalize"](xAxisFieldName) + "X");
        var yAxisFieldName = yAxis.axisFieldName;
        var yField = (yAxisFieldName + "Y");
        var yOpenField = ("open" + __WEBPACK_IMPORTED_MODULE_10__core_utils_Utils__["capitalize"](yAxisFieldName) + "Y");
        this._xField = xField;
        this._yField = yField;
        if (this.dataFields[xOpenField]) {
            this._xOpenField = xOpenField;
        }
        if (this.dataFields[yOpenField]) {
            this._yOpenField = yOpenField;
        }
        if (!this.dataFields[yOpenField] && this.baseAxis == this.yAxis) {
            this._yOpenField = yField;
        }
        if (!this.dataFields[this._xOpenField] && this.baseAxis == this.xAxis) {
            this._xOpenField = xField;
        }
        if (this.stacked && this.baseAxis == this.xAxis) {
            this._xOpenField = xField;
        }
        if (this.stacked && this.baseAxis == this.yAxis) {
            this._yOpenField = yField;
        }
        if ((this.xAxis instanceof __WEBPACK_IMPORTED_MODULE_5__axes_CategoryAxis__["a" /* CategoryAxis */]) && (this.yAxis instanceof __WEBPACK_IMPORTED_MODULE_5__axes_CategoryAxis__["a" /* CategoryAxis */])) {
            if (!this._yOpenField) {
                this._yOpenField = yField;
            }
        }
        this._xValueFields = [];
        this._yValueFields = [];
        this.addValueField(this.xAxis, this._xValueFields, this._xField);
        this.addValueField(this.xAxis, this._xValueFields, this._xOpenField);
        this.addValueField(this.yAxis, this._yValueFields, this._yField);
        this.addValueField(this.yAxis, this._yValueFields, this._yOpenField);
    };
    /**
     * [axis description]
     *
     * @todo Description
     * @param {Axis}        axis    Axis
     * @param {Array<Key>}  fields  Fields (?)
     * @param {Key}         field   Field
     */
    XYSeries.prototype.addValueField = function (axis, fields, field) {
        if (axis instanceof __WEBPACK_IMPORTED_MODULE_2__axes_ValueAxis__["a" /* ValueAxis */]) {
            if (__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["hasValue"](this.dataFields[field]) && fields.indexOf(field) == -1) {
                fields.push(field);
            }
        }
    };
    /**
     * Sets category field from the category axis.
     *
     * User might set field for category axis only, but not for series. In such
     * case, we take field value from axis and set it for series.
     *
     * @param {Key}           field  Field
     * @param {CategoryAxis}  axis   Axis
     */
    XYSeries.prototype.setCategoryAxisField = function (field, axis) {
        if (!__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["hasValue"](this.dataFields[field])) {
            this.dataFields[field] = axis.dataFields.category;
        }
    };
    /**
     * Sets date field from the date axis.
     *
     * User might set field for category axis only, but not for series. In such
     * case, we take field value from axis and set it for series.
     *
     * @param {Key}       field  Field
     * @param {DateAxis}  axis   Axis
     */
    XYSeries.prototype.setDateAxisField = function (field, axis) {
        if (!__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["hasValue"](this.dataFields[field])) {
            this.dataFields[field] = axis.dataFields.date;
        }
    };
    /**
     * Performs after-draw tasks, e.g. creates masks.
     */
    XYSeries.prototype.afterDraw = function () {
        _super.prototype.afterDraw.call(this);
        this.createMask();
    };
    /**
     * Create a mask for the series.
     *
     * @ignore Exclude from docs
     */
    XYSeries.prototype.createMask = function () {
        // this mask from which we cut out ranges. does not work well if ranges overlap.
        if (this.mainContainer.mask) {
            var path_1 = this.getMaskPath();
            // @todo: this approach won't work well on circluar or other non x/y axes
            __WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__["each"](this.axisRanges.iterator(), function (range) {
                if (range.axisFill.fillPath) {
                    range.axisFill.validate();
                    path_1 += range.axisFill.fillPath;
                }
            });
            this.mainContainer.mask.element.attr({ "d": path_1 });
        }
    };
    /**
     * Returns an SVG path to use as series mask.
     *
     * @return {string} SVG path
     */
    XYSeries.prototype.getMaskPath = function () {
        return __WEBPACK_IMPORTED_MODULE_13__core_rendering_Path__["rectToPath"]({
            x: 0,
            y: 0,
            width: this.xAxis.axisLength,
            height: this.yAxis.axisLength
        });
    };
    /**
     * Returns axis data field to use.
     *
     * @param  {Axis}    axis  Axis
     * @return {string}        Field name
     */
    XYSeries.prototype.getAxisField = function (axis) {
        if (axis == this.xAxis) {
            return this.xField;
        }
        if (axis == this.yAxis) {
            return this.yField;
        }
    };
    /**
     * Validates data items.
     *
     * @ignore Exclude from docs
     */
    XYSeries.prototype.validateDataItems = function () {
        // this helps date axis to check which baseInterval we should use
        this.xAxis.updateAxisBySeries();
        this.yAxis.updateAxisBySeries();
        _super.prototype.validateDataItems.call(this);
        this.xAxis.postProcessSeriesDataItems();
        this.yAxis.postProcessSeriesDataItems();
    };
    /**
     * Validates data range.
     *
     * @ignore Exclude from docs
     */
    XYSeries.prototype.validateDataRange = function () {
        if (this.xAxis.dataRangeInvalid) {
            this.xAxis.validateDataRange();
        }
        if (this.yAxis.dataRangeInvalid) {
            this.yAxis.validateDataRange();
        }
        _super.prototype.validateDataRange.call(this);
    };
    /**
     * (Re)validates the whole series, effectively causing it to redraw.
     *
     * @ignore Exclude from docs
     */
    XYSeries.prototype.validate = function () {
        if (this.xAxis.invalid) {
            this.xAxis.validate();
        }
        if (this.yAxis.invalid) {
            this.yAxis.validate();
        }
        this._showBullets = true;
        var minBulletDistance = this.minBulletDistance;
        if (__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isNumber"](minBulletDistance)) {
            if (this.baseAxis.axisLength / (this.endIndex - this.startIndex) < minBulletDistance) {
                this._showBullets = false;
            }
        }
        _super.prototype.validate.call(this);
    };
    Object.defineProperty(XYSeries.prototype, "xAxis", {
        /**
         * @return {Axis} Axis
         */
        get: function () {
            if (!this._xAxis.get()) {
                var axis = this.chart.xAxes.getIndex(0);
                if (!axis) {
                    throw Error("There are no X axes on chart.");
                }
                this.xAxis = axis;
            }
            return this._xAxis.get();
        },
        /**
         * X axis the series is attached to.
         *
         * @param {Axis}  axis  Axis
         */
        set: function (axis) {
            var oldAxis = this._xAxis.get();
            if (oldAxis != axis) {
                if (oldAxis) {
                    this.dataItemsByAxis.removeKey(oldAxis.uid);
                    // TODO why is this here ?
                    this._xAxis.dispose();
                    // temp @todo: why it is not disposed?
                    oldAxis.series.removeValue(this);
                }
                this._xAxis.set(axis, axis.registerSeries(this));
                this.dataItemsByAxis.setKey(axis.uid, new __WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__["a" /* Dictionary */]());
                this.invalidateData();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYSeries.prototype, "yAxis", {
        /**
         * @return {Axis} Axis
         */
        get: function () {
            if (!this._yAxis.get()) {
                var axis = this.chart.yAxes.getIndex(0);
                if (!axis) {
                    throw Error("There are no Y axes on chart.");
                }
                this.yAxis = axis;
            }
            return this._yAxis.get();
        },
        /**
         * Y axis the series is attached to.
         *
         * @param {Axis}  axis  Axis
         */
        set: function (axis) {
            var oldAxis = this._yAxis.get();
            if (oldAxis != axis) {
                if (oldAxis) {
                    this.dataItemsByAxis.removeKey(oldAxis.uid);
                    // TODO why is this here ?
                    this._yAxis.dispose();
                    // temp @todo: why it is not disposed?
                    oldAxis.series.removeValue(this);
                }
                this._yAxis.set(axis, axis.registerSeries(this));
                this.dataItemsByAxis.setKey(axis.uid, new __WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__["a" /* Dictionary */]());
                this.invalidateData();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYSeries.prototype, "baseAxis", {
        /**
         * @return {Axis} Axis
         */
        get: function () {
            if (!this._baseAxis) {
                if (this.yAxis instanceof __WEBPACK_IMPORTED_MODULE_6__axes_DateAxis__["a" /* DateAxis */]) {
                    this._baseAxis = this.yAxis;
                }
                if (this.xAxis instanceof __WEBPACK_IMPORTED_MODULE_6__axes_DateAxis__["a" /* DateAxis */]) {
                    this._baseAxis = this.xAxis;
                }
                if (this.yAxis instanceof __WEBPACK_IMPORTED_MODULE_5__axes_CategoryAxis__["a" /* CategoryAxis */]) {
                    this._baseAxis = this.yAxis;
                }
                if (this.xAxis instanceof __WEBPACK_IMPORTED_MODULE_5__axes_CategoryAxis__["a" /* CategoryAxis */]) {
                    this._baseAxis = this.xAxis;
                }
                if (!this._baseAxis) {
                    this._baseAxis = this.xAxis;
                }
            }
            return this._baseAxis;
        },
        /**
         * The main (base) axis.
         *
         * This is the axis that series fills will go to, or grow animations will
         * happen from.
         *
         * @param {Axis}  value  Axis
         */
        set: function (value) {
            this._baseAxis = value;
            this.invalidateDataRange();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Processes values after data items' were added.
     *
     * @ignore Exclude from docs
     * @param {OrderedListTemplate<this["_dataItem"]>}  dataItems  Data items
     */
    XYSeries.prototype.processValues = function (working) {
        // todo: if this is stacked, ensure that series to which this one can be stacked are processed before.
        _super.prototype.processValues.call(this, working);
        var dataItems = this.dataItems;
        var minX = Infinity;
        var maxX = -Infinity;
        var minY = Infinity;
        var maxY = -Infinity;
        var startIndex = this.startIndex;
        var endIndex = this.endIndex;
        for (var i = startIndex; i < endIndex; i++) {
            var dataItem = dataItems.getIndex(i);
            this.getStackValue(dataItem, working);
            var stackX = dataItem.getValue("valueX", "stack");
            var stackY = dataItem.getValue("valueY", "stack");
            minX = __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["min"](dataItem.getMin(this._xValueFields, working, stackX), minX);
            minY = __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["min"](dataItem.getMin(this._yValueFields, working, stackY), minY);
            maxX = __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["max"](dataItem.getMax(this._xValueFields, working, stackX), maxX);
            maxY = __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["max"](dataItem.getMax(this._yValueFields, working, stackY), maxY);
        }
        // this is mainly for value axis to calculate total and perecent.total of each series category
        this.xAxis.processSeriesDataItems();
        this.yAxis.processSeriesDataItems();
        var xAxisId = this.xAxis.uid;
        var yAxisId = this.yAxis.uid;
        if (!working) {
            if (this._tmin.getKey(xAxisId) != minX || this._tmax.getKey(xAxisId) != maxX || this._tmin.getKey(yAxisId) != minY || this._tmax.getKey(yAxisId) != maxY) {
                this._tmin.setKey(xAxisId, minX);
                this._tmax.setKey(xAxisId, maxX);
                this._tmin.setKey(yAxisId, minY);
                this._tmax.setKey(yAxisId, maxY);
                this.dispatchImmediately("extremeschanged");
            }
        }
        if (this._smin.getKey(xAxisId) != minX || this._smax.getKey(xAxisId) != maxX || this._smin.getKey(yAxisId) != minY || this._smax.getKey(yAxisId) != maxY) {
            this._smin.setKey(xAxisId, minX);
            this._smax.setKey(xAxisId, maxX);
            this._smin.setKey(yAxisId, minY);
            this._smax.setKey(yAxisId, maxY);
            if (this.appeared) {
                this.dispatchImmediately("selectionextremeschanged");
            }
        }
    };
    /**
     * Shows series tooltip at specific position.
     *
     * @ignore Exclude from docs
     * @param {number}  xPosition  X
     * @param {number}  yPosition  Y
     */
    XYSeries.prototype.showTooltipAtPosition = function (xPosition, yPosition) {
        var dataItem;
        if (this.visible && !this.isHiding) {
            var xAxis = this._xAxis.get();
            var yAxis = this._yAxis.get();
            if (xAxis == this.baseAxis) {
                dataItem = xAxis.getSeriesDataItem(this, xAxis.toAxisPosition(xPosition));
            }
            if (yAxis == this.baseAxis) {
                dataItem = yAxis.getSeriesDataItem(this, yAxis.toAxisPosition(yPosition));
            }
            this.returnBulletDefaultState(dataItem);
            if (dataItem) {
                this.updateLegendValue(dataItem);
                this.tooltipDataItem = dataItem;
                // todo: add tooltipXField and tooltipYField.
                var tooltipXField = this.tooltipXField;
                var tooltipYField = this.tooltipYField;
                var tooltipPoint = this.getPoint(dataItem, tooltipXField, tooltipYField, dataItem.locations[tooltipXField], dataItem.locations[tooltipYField]);
                if (tooltipPoint) {
                    this.tooltipX = tooltipPoint.x;
                    this.tooltipY = tooltipPoint.y;
                    if (this._prevTooltipDataItem != dataItem) {
                        this.dispatchImmediately("tooltipshownat", {
                            type: "tooltipshownat",
                            target: this,
                            dataItem: dataItem
                        });
                        try {
                            for (var _a = __values(dataItem.bullets), _b = _a.next(); !_b.done; _b = _a.next()) {
                                var a = _b.value;
                                var bullet = a[1];
                                bullet.setState("hover");
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        this._prevTooltipDataItem = dataItem;
                    }
                    if (this.showTooltip()) {
                        return __WEBPACK_IMPORTED_MODULE_10__core_utils_Utils__["spritePointToSvg"]({ x: tooltipPoint.x, y: tooltipPoint.y }, this);
                    }
                    return;
                }
            }
        }
        this.hideTooltip();
        var e_1, _c;
    };
    /**
     * returns default state to bullets when tooltip is shown at some other data item or hidden
     *
     * @ignore Exclude from docs
     */
    XYSeries.prototype.returnBulletDefaultState = function (dataItem) {
        if (this._prevTooltipDataItem && this._prevTooltipDataItem != dataItem) {
            try {
                for (var _a = __values(this._prevTooltipDataItem.bullets), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var a = _b.value;
                    var bullet = a[1];
                    bullet.setState("default");
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        var e_2, _c;
    };
    /**
     * Positions series bullet.
     *
     * @ignore Exclude from docs
     * @param {Bullet}  bullet  Bullet
     */
    XYSeries.prototype.positionBullet = function (bullet) {
        _super.prototype.positionBullet.call(this, bullet);
        var dataItem = bullet.dataItem;
        // use series xField/yField if bullet doesn't have fields set
        var xField = bullet.xField;
        if (!__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["hasValue"](xField)) {
            xField = this.xField;
        }
        var yField = bullet.yField;
        if (!__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["hasValue"](yField)) {
            yField = this.yField;
        }
        if ((this.xAxis instanceof __WEBPACK_IMPORTED_MODULE_2__axes_ValueAxis__["a" /* ValueAxis */] && !dataItem.hasValue([xField])) || (this.yAxis instanceof __WEBPACK_IMPORTED_MODULE_2__axes_ValueAxis__["a" /* ValueAxis */] && !dataItem.hasValue([yField]))) {
            bullet.visible = false;
        }
        else {
            var bulletLocationX = this.getBulletLocationX(bullet, xField);
            var bulletLocationY = this.getBulletLocationX(bullet, yField);
            var point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);
            if (point) {
                var x = point.x;
                var y = point.y;
                if (__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isNumber"](bullet.locationX) && this.xOpenField != this.xField) {
                    var openX = this.xAxis.getX(dataItem, this.xOpenField);
                    x = x - (x - openX) * bullet.locationX;
                }
                if (__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isNumber"](bullet.locationY) && this.yOpenField != this.yField) {
                    var openY = this.yAxis.getY(dataItem, this.yOpenField);
                    y = y - (y - openY) * bullet.locationY;
                }
                bullet.moveTo({ x: x, y: y });
            }
            else {
                bullet.visible = false;
            }
        }
    };
    /**
    * returns bullet x location
    * @ignore
    */
    XYSeries.prototype.getBulletLocationX = function (bullet, field) {
        var bulletLocation = bullet.locationX;
        var dataItem = bullet.dataItem;
        if (!__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isNumber"](bulletLocation)) {
            bulletLocation = dataItem.workingLocations[field];
        }
        return bulletLocation;
    };
    /**
    * returns bullet x location
    * @ignore
    */
    XYSeries.prototype.getBulletLocationY = function (bullet, field) {
        var bulletLocation = bullet.locationY;
        var dataItem = bullet.dataItem;
        if (!__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isNumber"](bulletLocation)) {
            bulletLocation = dataItem.workingLocations[field];
        }
        return bulletLocation;
    };
    Object.defineProperty(XYSeries.prototype, "stacked", {
        /**
         * @return {boolean} Can be stacked?
         */
        get: function () {
            return this.getPropertyValue("stacked");
        },
        /**
         * Can items from this series be included into stacks?
         *
         * @default false
         * @param {boolean}  stacked  Can be stacked?
         */
        set: function (stacked) {
            this.setPropertyValue("stacked", stacked, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Shows hidden series.
     *
     * @param  {number}     duration  Duration of reveal animation (ms)
     * @return {Animation}            Animation
     */
    XYSeries.prototype.show = function (duration) {
        var _this = this;
        var animation = _super.prototype.show.call(this, duration);
        var fields;
        if (this.xAxis instanceof __WEBPACK_IMPORTED_MODULE_2__axes_ValueAxis__["a" /* ValueAxis */] && this.xAxis != this.baseAxis) {
            fields = this._xValueFields;
        }
        if (this.yAxis instanceof __WEBPACK_IMPORTED_MODULE_2__axes_ValueAxis__["a" /* ValueAxis */] && this.yAxis != this.baseAxis) {
            fields = this._yValueFields;
        }
        var startIndex = this.startIndex;
        var endIndex = this.endIndex;
        __WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__["each"](__WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__["indexed"](this.dataItems.iterator()), function (a) {
            var interpolationDuration = _this.interpolationDuration;
            if (__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isNumber"](duration)) {
                interpolationDuration = duration;
            }
            var i = a[0];
            var dataItem = a[1];
            var delay = 0;
            if (_this.sequencedInterpolation) {
                delay = _this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);
            }
            animation = dataItem.show(interpolationDuration, delay, fields);
        });
        return animation;
    };
    /**
     * Hides series.
     *
     * @param  {number}     duration  Duration of hiding animation (ms)
     * @return {Animation}            Animation
     */
    XYSeries.prototype.hide = function (duration) {
        var _this = this;
        var animation = _super.prototype.hide.call(this, duration);
        var fields;
        var value;
        var xAxis = this.xAxis;
        if (xAxis instanceof __WEBPACK_IMPORTED_MODULE_2__axes_ValueAxis__["a" /* ValueAxis */] && xAxis != this.baseAxis) {
            fields = this._xValueFields;
            // animate to zero if 0 is within zoomMin/zoomMax
            if (this.stacked || (xAxis.minZoomed < 0 && xAxis.maxZoomed > 0)) {
                value = 0;
            }
            else {
                value = xAxis.min;
            }
        }
        var yAxis = this.yAxis;
        if (yAxis instanceof __WEBPACK_IMPORTED_MODULE_2__axes_ValueAxis__["a" /* ValueAxis */] && yAxis != this.baseAxis) {
            fields = this._yValueFields;
            // animate to zero if 0 is within zoomMin/zoomMax
            if (this.stacked || (yAxis.minZoomed < 0 && yAxis.maxZoomed > 0)) {
                value = 0;
            }
            else {
                value = yAxis.min;
            }
        }
        //if ($type.hasValue(fields)) {
        var startIndex = this.startIndex;
        var endIndex = this.endIndex;
        __WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__["each"](__WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__["indexed"](this.dataItems.iterator()), function (a) {
            var i = a[0];
            var dataItem = a[1];
            var delay = 0;
            var interpolationDuration = _this.interpolationDuration;
            if (__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isNumber"](duration)) {
                interpolationDuration = duration;
            }
            if (animation && !animation.isDisposed() && interpolationDuration == 0 && animation.duration > 0) {
                animation.events.once("animationended", function () {
                    dataItem.hide(0, 0, value, fields);
                });
            }
            else {
                if (_this.sequencedInterpolation) {
                    delay = _this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);
                }
                dataItem.hide(interpolationDuration, delay, value, fields);
            }
        });
        //}
        return animation;
    };
    /**
     * Updates series appearance when working value changes.
     */
    XYSeries.prototype.handleDataItemWorkingValueChange = function (event) {
        _super.prototype.handleDataItemWorkingValueChange.call(this, event);
        // to calculate stack values
        var axisSeries = this.baseAxis.series;
        __WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__["each"](axisSeries.iterator(), function (series) {
            if (series.stacked) {
                series.invalidateProcessedData();
            }
        });
    };
    /**
     * [getStackValue description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param {this["_dataItem"]}  dataItem  Data item
     */
    XYSeries.prototype.getStackValue = function (dataItem, working) {
        var _this = this;
        // todo: here wer stack x and y values only. question is - what should we do with other values, like openX, openY?
        // if this series is not stacked or new stack begins, return.
        if (!this.stacked) {
            return;
        }
        else {
            // it might seem that it's better to go through base axis series, but we do not maintain the same order as in chart.series there.
            var chart = this.chart;
            var index = chart.series.indexOf(this);
            var field_1;
            if (this.xAxis != this.baseAxis && this.xAxis instanceof __WEBPACK_IMPORTED_MODULE_2__axes_ValueAxis__["a" /* ValueAxis */]) {
                field_1 = this.xField;
            }
            if (this.yAxis != this.baseAxis && this.yAxis instanceof __WEBPACK_IMPORTED_MODULE_2__axes_ValueAxis__["a" /* ValueAxis */]) {
                field_1 = this.yField;
            }
            __WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__["eachContinue"](chart.series.range(0, index).backwards().iterator(), function (prevSeries) {
                // stacking is only possible if both axes are the same
                if (prevSeries.xAxis == _this.xAxis && prevSeries.yAxis == _this.yAxis) {
                    // saving value
                    prevSeries.stackedSeries = _this;
                    var prevDataItem = prevSeries.dataItems.getIndex(dataItem.index); // indexes should match
                    if (prevDataItem.hasValue(_this._xValueFields) && prevDataItem.hasValue(_this._yValueFields)) {
                        var value = dataItem.getValue(field_1);
                        var prevValue = void 0;
                        if (working) {
                            prevValue = prevDataItem.getWorkingValue(field_1) + prevDataItem.getValue(field_1, "stack");
                        }
                        else {
                            prevValue = prevDataItem.getValue(field_1) + prevDataItem.getValue(field_1, "stack");
                        }
                        if ((value >= 0 && prevValue >= 0) || (value < 0 && prevValue < 0)) {
                            //dataItem.events.disable();
                            dataItem.setCalculatedValue(field_1, prevValue, "stack");
                            //dataItem.events.enable();
                            return false;
                        }
                    }
                    else if (!prevSeries.stacked) {
                        return false;
                    }
                }
                return true;
            });
        }
    };
    Object.defineProperty(XYSeries.prototype, "xField", {
        /**
         * [xField description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @return {string} [description]
         */
        get: function () {
            return this._xField;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYSeries.prototype, "yField", {
        /**
         * [yField description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @return {string} [description]
         */
        get: function () {
            return this._yField;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYSeries.prototype, "xOpenField", {
        /**
         * [xOpenField description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @return {string} [description]
         */
        get: function () {
            return this._xOpenField;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYSeries.prototype, "yOpenField", {
        /**
         * [yOpenField description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @return {string} [description]
         */
        get: function () {
            return this._yOpenField;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYSeries.prototype, "tooltipXField", {
        /**
         * @ignore Exclude from docs
         * @todo Description
         * @return {string} [description]
         */
        get: function () {
            if (this._tooltipXField) {
                return this._tooltipXField;
            }
            return this._xField;
        },
        /**
         * [tooltipXField description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @param {string} value [description]
         */
        set: function (value) {
            this._tooltipXField = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYSeries.prototype, "tooltipYField", {
        /**
         * @ignore Exclude from docs
         * @todo Description
         * @return {string} [description]
         */
        get: function () {
            if (this._tooltipYField) {
                return this._tooltipYField;
            }
            return this._yField;
        },
        /**
         * [tooltipYField description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @param {string} value [description]
         */
        set: function (value) {
            this._tooltipYField = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns lowest value in the series for the specific axis.
     *
     * @ignore Exclude from docs
     * @param  {ValueAxis}  axis  Axis
     * @return {number}           value
     */
    XYSeries.prototype.min = function (axis) {
        return this._tmin.getKey(axis.uid);
    };
    /**
     * Returns highest value in the series for the specific axis.
     *
     * @ignore Exclude from docs
     * @param  {ValueAxis}  axis  Axis
     * @return {number}           value
     */
    XYSeries.prototype.max = function (axis) {
        return this._tmax.getKey(axis.uid);
    };
    /**
     * Returns lowest value in the series for the specific axis within current
     * selection.
     *
     * @ignore Exclude from docs
     * @param  {ValueAxis}  axis  Axis
     * @return {number}           value
     */
    XYSeries.prototype.selectionMin = function (axis) {
        var value = this._smin.getKey(axis.uid);
        if (!__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isNumber"](value)) {
            value = this.min(axis);
        }
        return value;
    };
    /**
     * Returns highest value in the series for the specific axis within current
     * selection.
     *
     * @ignore Exclude from docs
     * @param  {ValueAxis}  axis  Axis
     * @return {number}           value
     */
    XYSeries.prototype.selectionMax = function (axis) {
        var value = this._smax.getKey(axis.uid);
        if (!__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isNumber"](value)) {
            value = this.max(axis);
        }
        return value;
    };
    /**
     * Processes JSON-based config before it is applied to the object.
     *
     * @ignore Exclude from docs
     * @param {object}  config  Config
     */
    XYSeries.prototype.processConfig = function (config) {
        if (config) {
            // Set up axes
            if (__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["hasValue"](config.xAxis) && __WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isString"](config.xAxis) && this.map.hasKey(config.xAxis)) {
                config.xAxis = this.map.getKey(config.xAxis);
            }
            if (__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["hasValue"](config.yAxis) && __WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isString"](config.yAxis) && this.map.hasKey(config.yAxis)) {
                config.yAxis = this.map.getKey(config.yAxis);
            }
            // Set up axis ranges
            if (__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["hasValue"](config.axisRanges) && __WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isArray"](config.axisRanges)) {
                for (var i = 0, len = config.axisRanges.length; i < len; i++) {
                    var range = config.axisRanges[i];
                    if (!__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["hasValue"](range.type)) {
                        range.type = "AxisDataItem";
                    }
                    if (__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["hasValue"](range.axis) && __WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isString"](range.axis) && this.map.hasKey(range.axis)) {
                        range.component = this.map.getKey(range.axis);
                    }
                    else if (__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["hasValue"](range.component) && __WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isString"](range.component) && this.map.hasKey(range.component)) {
                        range.component = this.map.getKey(range.component);
                    }
                }
            }
            // Parse date fields based on the series fields
            if (!__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["hasValue"](config.dataFields) || !__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isObject"](config.dataFields)) {
                throw Error("`dataFields` is not set for series [" + this.name + "]");
            }
        }
        _super.prototype.processConfig.call(this, config);
    };
    /**
     * [getPoint description]
     *
     * @todo Description
     * @param {XYSeriesDataItem}  dataItem   [description]
     * @param {string}          xKey       [description]
     * @param {string}          yKey       [description]
     * @param {number}          locationX  [description]
     * @param {number}          locationY  [description]
     * @param {string}          stackKeyX  [description]
     * @param {string}          stackKeyY  [description]
     */
    XYSeries.prototype.getPoint = function (dataItem, xKey, yKey, locationX, locationY, stackKeyX, stackKeyY) {
        var x = this.xAxis.getX(dataItem, xKey, locationX);
        var y = this.yAxis.getY(dataItem, yKey, locationY);
        x = __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["fitToRange"](x, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.
        y = __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["fitToRange"](y, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.
        return { x: x, y: y };
    };
    return XYSeries;
}(__WEBPACK_IMPORTED_MODULE_0__Series__["a" /* Series */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_7__core_Registry__["b" /* registry */].registeredClasses["XYSeries"] = XYSeries;
__WEBPACK_IMPORTED_MODULE_7__core_Registry__["b" /* registry */].registeredClasses["XYSeriesDataItem"] = XYSeriesDataItem;
//# sourceMappingURL=XYSeries.js.map

/***/ }),
/* 83 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FlowDiagramNode; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_InterfaceColorSet__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_String__ = __webpack_require__(69);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_Order__ = __webpack_require__(72);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_utils_Number__ = __webpack_require__(55);
/**
 * FlowDiagramNode module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */








/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a node in a Flow Diagram.
 *
 * A Flow node is a block with a value, which represents its size on the
 * diagram.
 *
 * Nodes are connected via [[FlowLink]] elements.
 *
 * @see {@link IFlowDiagramNodeEvents} for a list of available events
 * @see {@link IFlowDiagramNodeAdapters} for a list of available Adapters
 * @important
 */
var FlowDiagramNode = /** @class */ (function (_super) {
    __extends(FlowDiagramNode, _super);
    /**
     * Constructor
     */
    function FlowDiagramNode() {
        var _this = _super.call(this) || this;
        _this.className = "FlowDiagramNode";
        _this.isMeasured = false;
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_3__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        _this.background.fill = interfaceColors.getFor("alternativeBackground");
        _this.background.fillOpacity = 1;
        _this.pixelPerfect = false;
        _this.background.pixelPerfect = false;
        _this.draggable = true;
        _this.inert = true;
        _this.events.on("positionchanged", _this.invalidateLinks, _this);
        _this.events.on("sizechanged", _this.invalidateLinks, _this);
        return _this;
    }
    /**
     * Marks node as invalid, for redrawal in the next update cycle.
     *
     * @ignore Exclude from docs
     */
    FlowDiagramNode.prototype.validate = function () {
        _super.prototype.validate.call(this);
        this.invalidateLinks();
    };
    /**
     * Invalidates all links, attached to this node.
     *
     * @ignore Exclude from docs
     */
    FlowDiagramNode.prototype.invalidateLinks = function () {
        var _this = this;
        this.outgoingDataItems.each(function (dataItem) {
            var link = dataItem.link;
            if (link.colorMode == "fromNode") {
                link.fill = link.dataItem.fromNode.color;
            }
            if (link.colorMode == "gradient") {
                link.fill = link.gradient;
                link.stroke = link.gradient;
                var stop_1 = link.gradient.stops.getIndex(0);
                if (stop_1) {
                    stop_1.color = _this.color;
                    link.gradient.validate();
                }
            }
        });
        this.incomingDataItems.each(function (dataItem) {
            var link = dataItem.link;
            if (link.colorMode == "toNode") {
                link.fill = link.dataItem.toNode.color;
            }
            if (link.colorMode == "gradient") {
                link.fill = link.gradient;
                link.stroke = link.gradient;
                var stop_2 = link.gradient.stops.getIndex(1);
                if (stop_2) {
                    stop_2.color = _this.color;
                    link.gradient.validate();
                }
            }
        });
    };
    Object.defineProperty(FlowDiagramNode.prototype, "incomingDataItems", {
        /**
         * List of incoming items (links).
         *
         * @readonly
         * @return {List<FlowDiagramDataItem>} Incoming items
         */
        get: function () {
            var _this = this;
            if (!this._incomingDataItems) {
                var incomingDataItems = new __WEBPACK_IMPORTED_MODULE_1__core_utils_List__["b" /* List */]();
                incomingDataItems.events.on("insert", function () {
                    if (_this.chart.sortBy == "name") {
                        _this._incomingSorted = __WEBPACK_IMPORTED_MODULE_4__core_utils_Iterator__["sort"](_this._incomingDataItems.iterator(), function (x, y) { return __WEBPACK_IMPORTED_MODULE_5__core_utils_String__["order"](x.fromName, y.fromName); });
                    }
                    else if (_this.chart.sortBy == "value") {
                        _this._incomingSorted = __WEBPACK_IMPORTED_MODULE_4__core_utils_Iterator__["sort"](_this._incomingDataItems.iterator(), function (x, y) { return __WEBPACK_IMPORTED_MODULE_6__core_utils_Order__["b" /* reverse */](__WEBPACK_IMPORTED_MODULE_7__core_utils_Number__["order"](x.value, y.value)); });
                    }
                    else {
                        _this._incomingSorted = _this._incomingDataItems.iterator();
                    }
                }, this);
                this._incomingDataItems = incomingDataItems;
            }
            return this._incomingDataItems;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlowDiagramNode.prototype, "outgoingDataItems", {
        /**
         * List of outgoing items (links).
         *
         * @readonly
         * @return {List<FlowDiagramDataItem>} Outgoing items
         */
        get: function () {
            var _this = this;
            if (!this._outgoingDataItems) {
                var outgoingDataItems = new __WEBPACK_IMPORTED_MODULE_1__core_utils_List__["b" /* List */]();
                outgoingDataItems.events.on("insert", function () {
                    if (_this.chart.sortBy == "name") {
                        _this._outgoingSorted = __WEBPACK_IMPORTED_MODULE_4__core_utils_Iterator__["sort"](_this._outgoingDataItems.iterator(), function (x, y) { return __WEBPACK_IMPORTED_MODULE_5__core_utils_String__["order"](x.fromName, y.fromName); });
                    }
                    else if (_this.chart.sortBy == "value") {
                        _this._outgoingSorted = __WEBPACK_IMPORTED_MODULE_4__core_utils_Iterator__["sort"](_this._outgoingDataItems.iterator(), function (x, y) { return __WEBPACK_IMPORTED_MODULE_6__core_utils_Order__["b" /* reverse */](__WEBPACK_IMPORTED_MODULE_7__core_utils_Number__["order"](x.value, y.value)); });
                    }
                    else {
                        _this._outgoingSorted = _this._outgoingDataItems.iterator();
                    }
                }, this);
                this._outgoingDataItems = outgoingDataItems;
            }
            return this._outgoingDataItems;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlowDiagramNode.prototype, "name", {
        /**
         * @return {string} Name
         */
        get: function () {
            return this.getPropertyValue("name");
        },
        /**
         * A name of the node.
         *
         * @param {string}  value  Name
         */
        set: function (value) {
            this.setPropertyValue("name", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlowDiagramNode.prototype, "value", {
        /**
         * @return {number} Value
         */
        get: function () {
            return this.getPropertyValue("value");
        },
        /**
         * Node's numeric value.
         *
         * @param {number}  value  Value
         */
        set: function (value) {
            this.setPropertyValue("value", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlowDiagramNode.prototype, "color", {
        /**
         * @return {Color} Color
         */
        get: function () {
            return this.getPropertyValue("color");
        },
        /**
         * Node's color.
         *
         * @param {Color}  value  Color
         */
        set: function (value) {
            this.setPropertyValue("color", value, true);
            this.background.fill = value;
            this.fill = value;
        },
        enumerable: true,
        configurable: true
    });
    return FlowDiagramNode;
}(__WEBPACK_IMPORTED_MODULE_0__core_Container__["a" /* Container */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__core_Registry__["b" /* registry */].registeredClasses["FlowDiagramNode"] = FlowDiagramNode;
//# sourceMappingURL=FlowDiagramNode.js.map

/***/ }),
/* 84 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FlowDiagramLink; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_rendering_fills_LinearGradient__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__elements_Bullet__ = __webpack_require__(49);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_Color__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_elements_Polyline__ = __webpack_require__(77);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_elements_Line__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_utils_InterfaceColorSet__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__core_utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__core_utils_Type__ = __webpack_require__(1);
/**
 * FlowDiagramLink module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */












/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * This class creates a link (waved color-filled line) between two nodes in a
 * Flow Diagram.
 *
 * @see {@link IFlowDiagramLinkEvents} for a list of available events
 * @see {@link IFlowDiagramLinkAdapters} for a list of available Adapters
 * @important
 */
var FlowDiagramLink = /** @class */ (function (_super) {
    __extends(FlowDiagramLink, _super);
    /**
     * Constructor
     */
    function FlowDiagramLink() {
        var _this = _super.call(this) || this;
        /**
         * A gradiend instance that is used to provided colored gradient fills for
         * the Flow link.
         *
         * @type {LinearGradient}
         */
        _this.gradient = new __WEBPACK_IMPORTED_MODULE_2__core_rendering_fills_LinearGradient__["a" /* LinearGradient */]();
        _this.className = "FlowDiagramLink";
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_9__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        _this.maskBullets = false;
        _this.colorMode = "fromNode";
        _this.layout = "none";
        _this.isMeasured = false;
        _this.startAngle = 0;
        _this.endAngle = 0;
        _this.strokeOpacity = 0;
        // this is very important, otherwise the container will be shifted
        _this.verticalCenter = "none";
        _this.horizontalCenter = "none";
        _this.tooltipText = "{fromName}→{toName}:{value.value}";
        _this.tooltipLocation = 0.5;
        _this.link = _this.createChild(__WEBPACK_IMPORTED_MODULE_0__core_Sprite__["a" /* Sprite */]);
        _this.link.shouldClone = false;
        _this.link.element = _this.paper.add("path");
        _this.fillOpacity = 0.2;
        _this.fill = interfaceColors.getFor("alternativeBackground");
        _this.bulletsContainer = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__core_Container__["a" /* Container */]);
        _this.bulletsContainer.shouldClone = false;
        _this.bulletsContainer.layout = "none";
        _this.bulletsMask = _this.createChild(__WEBPACK_IMPORTED_MODULE_0__core_Sprite__["a" /* Sprite */]);
        _this.bulletsMask.shouldClone = false;
        _this.bulletsMask.element = _this.paper.add("path");
        _this.applyTheme();
        return _this;
    }
    /**
     * Positions bullets
     * @ignore
     */
    FlowDiagramLink.prototype.positionBullets = function () {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_10__core_utils_Iterator__["each"](this.bullets.iterator(), function (bullet) {
            bullet.parent = _this.bulletsContainer;
            _this.positionBullet(bullet);
        });
    };
    /**
     * Positions bullets at relative bullet.locationX position on the link.
     * @ignore
     */
    FlowDiagramLink.prototype.positionBullet = function (bullet) {
        var location = bullet.locationX;
        if (!__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isNumber"](location)) {
            location = bullet.locationY;
        }
        if (!__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isNumber"](location)) {
            location = 0.5;
        }
        var point = this.middleLine.positionToPoint(location);
        bullet.moveTo(point);
        var rotationField = bullet.propertyFields.rotation;
        var angle;
        if (bullet.dataItem) {
            var dataContext = bullet.dataItem.dataContext;
            angle = dataContext[rotationField];
        }
        if (!__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isNumber"](angle)) {
            angle = point.angle;
        }
        bullet.rotation = angle;
    };
    Object.defineProperty(FlowDiagramLink.prototype, "startAngle", {
        /**
         * @return {number} Start angle
         */
        get: function () {
            return this.getPropertyValue("startAngle");
        },
        /**
         * [startAngle description]
         *
         * @todo Description
         * @param {number}  value  Start angle
         */
        set: function (value) {
            this.setPropertyValue("startAngle", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlowDiagramLink.prototype, "endAngle", {
        /**
         * @return {number} End angle
         */
        get: function () {
            return this.getPropertyValue("endAngle");
        },
        /**
         * [endAngle description]
         *
         * @todo Description
         * @param {number}  value  End angle
         */
        set: function (value) {
            this.setPropertyValue("endAngle", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlowDiagramLink.prototype, "colorMode", {
        /**
         * @type {"solid" | "gradient"} Fill mode
         */
        get: function () {
            return this.getPropertyValue("colorMode");
        },
        /**
         * Should link be filled with a solid color, color of from node, color of toNode or gradient between node colors.
         * Some of the links, like ChordLink does not support gradiens well.
         *
         * @param {"solid" | "gradient" | "fromNode" | "toNode"}  value  Fill mode
         */
        set: function (value) {
            if (value == "gradient") {
                this.fill = this.gradient;
                this.stroke = this.gradient;
            }
            this.setPropertyValue("colorMode", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlowDiagramLink.prototype, "maskBullets", {
        /**
         * @return {boolean} mask bullets value
         */
        get: function () {
            return this.getPropertyValue("maskBullets");
        },
        /**
         * Should link bullets be masked or not
         *
         * @param {boolean}  value
         * @default false;
         */
        set: function (value) {
            this.setPropertyValue("maskBullets", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlowDiagramLink.prototype, "tooltipLocation", {
        /**
         * @type {number} tooltip location value
         */
        get: function () {
            return this.getPropertyValue("tooltipLocation");
        },
        /**
         * Relative location of a tooltip.
         * @default 0.5
         *
         * @param {number} value
         */
        set: function (value) {
            this.setPropertyValue("tooltipLocation", value, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Adds color steps in the link gradient.
     *
     * @param {Color | Pattern | LinearGradient | RadialGradient}  value  Fill option
     */
    FlowDiagramLink.prototype.setFill = function (value) {
        _super.prototype.setFill.call(this, value);
        if (value instanceof __WEBPACK_IMPORTED_MODULE_5__core_utils_Color__["a" /* Color */]) {
            this.gradient.stops.clear();
            this.gradient.addColor(value);
            this.gradient.addColor(value);
        }
    };
    /**
     * Updates bounding box based on element dimension settings.
     *
     * @ignore Exclude from docs
     */
    FlowDiagramLink.prototype.measureElement = function () {
    };
    Object.defineProperty(FlowDiagramLink.prototype, "bullets", {
        /**
         * List of bullets
         *
         * @return {ListTemplate<Bullet>} [description]
         */
        get: function () {
            var _this = this;
            if (!this._bullets) {
                this._bullets = new __WEBPACK_IMPORTED_MODULE_6__core_utils_List__["e" /* ListTemplate */](new __WEBPACK_IMPORTED_MODULE_4__elements_Bullet__["a" /* Bullet */]());
                this._bullets.events.on("insert", function (event) {
                    event.newValue.events.on("propertychanged", function (event) {
                        if (event.property == "locationX" || event.property == "locationY") {
                            _this.positionBullet(event.target);
                        }
                    });
                });
            }
            return this._bullets;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Copies properties from another [[FlowDiagramLink]].
     *
     * @param {FlowDiagramLink}  source  Source link
     */
    FlowDiagramLink.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        this.bullets.copyFrom(source.bullets);
        var middleLine = this.middleLine;
        if (middleLine) {
            if (middleLine instanceof __WEBPACK_IMPORTED_MODULE_8__core_elements_Line__["a" /* Line */] && source.middleLine instanceof __WEBPACK_IMPORTED_MODULE_8__core_elements_Line__["a" /* Line */]) {
                middleLine.copyFrom(source.middleLine);
            }
            if (middleLine instanceof __WEBPACK_IMPORTED_MODULE_7__core_elements_Polyline__["a" /* Polyline */] && source.middleLine instanceof __WEBPACK_IMPORTED_MODULE_7__core_elements_Polyline__["a" /* Polyline */]) {
                middleLine.copyFrom(source.middleLine);
            }
        }
        this.link.copyFrom(source.link);
    };
    /**
     * @ignore Exclude from docs
     * @return {number} Tooltip X (px)
     */
    FlowDiagramLink.prototype.getTooltipX = function () {
        if (this.middleLine) {
            return this.middleLine.positionToPoint(this.tooltipLocation).x;
        }
    };
    /**
     * @ignore Exclude from docs
     * @return {number} Tooltip Y (px)
     */
    FlowDiagramLink.prototype.getTooltipY = function () {
        if (this.middleLine) {
            return this.middleLine.positionToPoint(this.tooltipLocation).y;
        }
    };
    return FlowDiagramLink;
}(__WEBPACK_IMPORTED_MODULE_1__core_Container__["a" /* Container */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_3__core_Registry__["b" /* registry */].registeredClasses["FlowDiagramLink"] = FlowDiagramLink;
//# sourceMappingURL=FlowDiagramLink.js.map

/***/ }),
/* 85 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_themes_animated__ = __webpack_require__(227);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return __WEBPACK_IMPORTED_MODULE_0__internal_themes_animated__["a"]; });

//# sourceMappingURL=animated.js.map

/***/ }),
/* 86 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return ChartDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Chart; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Component__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_elements_Label__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_DataItem__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__ = __webpack_require__(1);
/**
 * [[Chart]] class provides base functionality for all chart types to inherit.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */









/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[Chart]].
 *
 * @see {@link DataItem}
 */
var ChartDataItem = /** @class */ (function (_super) {
    __extends(ChartDataItem, _super);
    /**
     * Constructor
     */
    function ChartDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "ChartDataItem";
        _this.applyTheme();
        return _this;
    }
    return ChartDataItem;
}(__WEBPACK_IMPORTED_MODULE_5__core_DataItem__["a" /* DataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * A base class for all Charts.
 *
 * @see {@link IChartEvents} for a list of available Events
 * @see {@link IChartAdapters} for a list of available Adapters
 */
var Chart = /** @class */ (function (_super) {
    __extends(Chart, _super);
    /**
     * Constructor
     */
    function Chart() {
        var _this = 
        // Init
        _super.call(this) || this;
        _this.className = "Chart";
        // Create a list of titles
        _this.titles = new __WEBPACK_IMPORTED_MODULE_2__core_utils_List__["e" /* ListTemplate */](new __WEBPACK_IMPORTED_MODULE_4__core_elements_Label__["a" /* Label */]());
        // Chart component is also a container. it holds _chartAndLegendCont and titles
        _this.width = Object(__WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__["c" /* percent */])(100);
        _this.height = Object(__WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__["c" /* percent */])(100);
        _this.layout = "vertical";
        // Chart and legend
        var chartAndLegendContainer = _this.createChild(__WEBPACK_IMPORTED_MODULE_3__core_Container__["a" /* Container */]);
        chartAndLegendContainer.shouldClone = false;
        chartAndLegendContainer.layout = "vertical";
        chartAndLegendContainer.width = Object(__WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__["c" /* percent */])(100);
        chartAndLegendContainer.height = Object(__WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__["c" /* percent */])(100);
        _this.chartAndLegendContainer = chartAndLegendContainer;
        // Chart container holds all the elements of a chart, extept titles and legend
        var chartContainer = chartAndLegendContainer.createChild(__WEBPACK_IMPORTED_MODULE_3__core_Container__["a" /* Container */]);
        chartContainer.shouldClone = false;
        chartContainer.width = Object(__WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__["c" /* percent */])(100);
        chartContainer.height = Object(__WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__["c" /* percent */])(100);
        _this.chartContainer = chartContainer;
        // hides everything on first frame and shows only on second. helps to avoid technical flickering
        chartAndLegendContainer.visible = false;
        chartAndLegendContainer.events.once("validated", function () {
            __WEBPACK_IMPORTED_MODULE_1__core_Registry__["b" /* registry */].events.once("enterframe", function () {
                chartAndLegendContainer.visible = true;
            });
        });
        // Add title list events to apply certain formatting options and to make
        // the chart reference them as accessible screen reader labels
        _this.titles.events.on("insert", function (label) {
            _this.processTitle(label);
            _this.updateReaderTitleReferences();
        }, _this);
        _this.titles.events.on("remove", function (label) {
            _this.updateReaderTitleReferences();
        }, _this);
        // Accessibility
        // It seems we can't set focusable on the whole chart because it seems to
        // mess up the whole focus event system - getting a focus on an inside
        // object also trigger focus on parent
        //this.focusable = true;
        _this.role = "region";
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Sets defaults that instantiate some objects that rely on parent, so they
     * cannot be set in constructor.
     */
    Chart.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);
        if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["hasValue"](this.readerTitle)) {
            this.readerTitle = this.language.translate("Chart");
        }
    };
    /**
     * Initiates drawing of the chart.
     *
     * @ignore Exclude from docs
     */
    Chart.prototype.draw = function () {
        this.fixLayout();
        _super.prototype.draw.call(this);
    };
    /**
     * Updates legend's hierarchy based on the position.
     */
    Chart.prototype.fixLayout = function () {
        var legend = this.legend;
        if (legend) {
            var chartAndLegendContainer = this.chartAndLegendContainer;
            switch (legend.position) {
                case "left":
                    chartAndLegendContainer.layout = "horizontal";
                    if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](legend.width)) {
                        legend.width = 200;
                    }
                    //legend.maxWidth = legend.width;
                    legend.toBack();
                    break;
                case "right":
                    chartAndLegendContainer.layout = "horizontal";
                    if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](legend.width)) {
                        legend.width = 200;
                    }
                    //legend.maxWidth = legend.width;
                    legend.toFront();
                    break;
                case "top":
                    chartAndLegendContainer.layout = "vertical";
                    legend.maxWidth = undefined;
                    legend.toBack();
                    break;
                case "bottom":
                    chartAndLegendContainer.layout = "vertical";
                    legend.maxWidth = undefined;
                    legend.toFront();
            }
        }
    };
    /**
     * Setups the legend to use the chart's data.
     */
    Chart.prototype.feedLegend = function () {
        // Nothing here. This method is provided only as a "placeholder" for
        // extending classes to override
    };
    /**
     * Adds a new title to the chart when it is inserted into chart's titles
     * list.
     * @param  {IListEvents<Label>["insert"]}  event  An event object which is triggered when inserting into titles list
     * @return {Label}                               Label object
     */
    Chart.prototype.processTitle = function (event) {
        var title = event.newValue;
        title.parent = this;
        title.toBack();
        title.align = "center";
        // Need to explicitly apply the `id` attribute so it can be referenced by
        // `aria-labelledby`
        title.uidAttr();
        return title;
    };
    /**
     * Checks if chart has any title elements. If it does, we will use them in an
     * `aria-labelledby` attribute so that screen readers can use them to properly
     * describe the chart when it is focused or hovered.
     *
     * @ignore Exclude from docs
     */
    Chart.prototype.updateReaderTitleReferences = function () {
        if (this.titles.length) {
            var titleIds_1 = [];
            __WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__["each"](this.titles.iterator(), function (title) {
                titleIds_1.push(title.uid);
            });
            this.setSVGAttribute({ "aria-labelledby": titleIds_1.join(" ") });
        }
        else {
            this.removeSVGAttribute("aria-labelledby");
        }
    };
    Object.defineProperty(Chart.prototype, "legend", {
        /**
         * @return {Legend} Legend
         */
        get: function () {
            return this._legend;
        },
        /**
         * Holds the instance of chart's [[Leged]].
         *
         * @see {@link https://www.amcharts.com/docs/v4/concepts/legend/} for more information about legends
         * @param {Legend} Legend
         */
        set: function (legend) {
            this.setLegend(legend);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Prepares the legend instance for use in this chart.
     *
     * @param {Legend}  legend  Legend
     */
    Chart.prototype.setLegend = function (legend) {
        var _this = this;
        if (this._legend != legend) {
            if (this._legend) {
                this.removeDispose(this._legend);
            }
            this._legend = legend;
            if (legend) {
                this._disposers.push(legend);
                // Set legend options
                legend.parent = this.chartAndLegendContainer;
                legend.events.on("propertychanged", function (event) {
                    if (event.property == "position" || event.property == "width") {
                        _this.fixLayout();
                    }
                });
            }
            this.feedLegend();
        }
    };
    /**
     * Processes JSON-based config before it is applied to the object.
     *
     * @ignore Exclude from docs
     * @param {object}  config  Config
     */
    Chart.prototype.processConfig = function (config) {
        if (config) {
            // Set up legend
            if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["hasValue"](config.legend) && !__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["hasValue"](config.legend.type)) {
                config.legend.type = "Legend";
            }
        }
        _super.prototype.processConfig.call(this, config);
    };
    return Chart;
}(__WEBPACK_IMPORTED_MODULE_0__core_Component__["a" /* Component */]));

//# sourceMappingURL=Chart.js.map

/***/ }),
/* 87 */,
/* 88 */,
/* 89 */,
/* 90 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Cache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return cache; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Dictionary__ = __webpack_require__(16);
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Represents object cache.
 *
 * @ignore Exclude from docs
 * @todo Better storage
 * @todo TTL logging
 * @todo Garbage collector
 */
var Cache = /** @class */ (function () {
    function Cache() {
        /**
         * Storage for cache items.
         *
         * @type {Object}
         */
        this._storage = new __WEBPACK_IMPORTED_MODULE_0__Dictionary__["a" /* Dictionary */]();
        /**
         * Default TTL in milliseconds.
         *
         * @type {number}
         */
        this.ttl = 1000;
    }
    /**
     * Caches or updates cached value, resets TTL.
     *
     * @param {string}  owner  An id of the object that owns this cache
     * @param {string}  key    Index key
     * @param {A}       value  Value
     */
    Cache.prototype.set = function (owner, key, value) {
        // Create if storage does not exist for this owner
        var ownerStorage = this._storage.insertKeyIfEmpty(owner, function () { return new __WEBPACK_IMPORTED_MODULE_0__Dictionary__["a" /* Dictionary */](); });
        // Create cache item
        var item = {
            "touched": new Date().getTime(),
            "ttl": this.ttl,
            "value": value
        };
        // Set
        ownerStorage.setKey(key, item);
    };
    /**
     * Rerturns cached item, respecting TTL.
     *
     * @param  {string}  owner  An id of the object that owns this cache
     * @param  {string}  key    Index key
     * @return {A}              Value, or `undefined` if not set
     */
    Cache.prototype.get = function (owner, key) {
        // 		 || ypeof this._storage[owner][key] === "undefined" || this._storage[owner][key].expired === true) {
        if (this._storage.hasKey(owner)) {
            var ownerStorage = this._storage.getKey(owner);
            if (ownerStorage.hasKey(key)) {
                var cacheItem = ownerStorage.getKey(key);
                return cacheItem.expired === true ? undefined : cacheItem.value;
            }
            else {
                return undefined;
            }
        }
        else {
            return undefined;
        }
    };
    /**
     * Clears cache for specific owner or everything.
     *
     * @param {string} owner Owner to clear cache for
     */
    Cache.prototype.clear = function (owner) {
        if (owner) {
            this._storage.removeKey(owner);
        }
        else {
            this._storage.clear();
        }
    };
    return Cache;
}());

/**
 * ============================================================================
 * GLOBAL INSTANCE
 * ============================================================================
 * @hidden
 */
/**
 * A global instance of cache. Use this instance to cache any values.
 *
 * @ignore Exclude from docs
 */
var cache = new Cache();
//# sourceMappingURL=Cache.js.map

/***/ }),
/* 91 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Popup; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__PopupCSS__ = __webpack_require__(201);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Adapter__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Base__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__interaction_Interaction__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Keyboard__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Disposer__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Type__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_Object__ = __webpack_require__(13);
/**
 * Popup class is used to display information over chart area.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */








/**
 * Shows an HTML popup which covers window or a chart area.
 *
 * @todo Positioning over whole window
 */
var Popup = /** @class */ (function (_super) {
    __extends(Popup, _super);
    /**
     * Constructor
     */
    function Popup() {
        var _this = _super.call(this) || this;
        /**
         * Adapter.
         *
         * @type {Adapter<Popup, IPopupAdapters>}
         */
        _this.adapter = new __WEBPACK_IMPORTED_MODULE_1__utils_Adapter__["a" /* Adapter */](_this);
        /**
         * Holds references to various HTML elements, Popup consists of.
         */
        _this._elements = {};
        /**
         * Holdes Interaction objects for various Popup's elements.
         */
        _this._IOs = {};
        /**
         * Contents of popup window.
         *
         * @type {string}
         */
        _this._content = "";
        /**
         * Title of the popup window.
         *
         * @type {string}
         */
        _this._title = "";
        /**
         * Prefix to apply to class names for popup elements.
         *
         * @type {string}
         */
        _this._classPrefix = "ampopup";
        /**
         * If set to `true` [[Popup]] will use default styles.
         *
         * @type {boolean}
         */
        _this._defaultStyles = true;
        /**
         * If set to `true` [[Popup]] will dim out all chart content behind it by
         * showing a semi-transparent fill. (curtain)
         *
         * @type {boolean}
         */
        _this._showCurtain = false;
        /**
         * Indicates whether popup can be dragged.
         *
         * @type {boolean}
         */
        _this._draggable = true;
        /**
         * Horizontal position of the content window.
         *
         * @type {Align}
         */
        _this._align = "center";
        /**
         * Vertical position of the content window.
         *
         * @type {VerticalAlign}
         */
        _this._verticalAlign = "middle";
        /**
         * Shift in position of the element. (used for dragging)
         *
         * @type {number}
         */
        _this._shift = {
            x: 0,
            y: 0
        };
        /**
         * Temporary shift in position of the element. (used for dragging)
         *
         * @type {number}
         */
        _this._tempShift = {
            x: 0,
            y: 0
        };
        /**
         * A title for screen readers. It is very highly recommended to set that title
         * so that people using screen reader tools can get an immediate summary of
         * the information in the popup.
         *
         * @type {string}
         */
        _this.readerTitle = "";
        /**
         * Is popup closable?
         *
         * @type {boolean}
         */
        _this._closable = true;
        /**
         * Was CSS already loaded?
         *
         * @type {boolean}
         */
        _this._cssLoaded = false;
        /**
         * Identifies if this object is a "template" and should not be treated as
         * real object that is drawn or actually used in the chart.
         *
         * @type {boolean}
         */
        _this.isTemplate = false;
        /**
         * Indicates if the element was already sized and should not be measured for
         * sized again, saving some precious resources.
         *
         * @type {boolean}
         */
        _this._sized = false;
        _this.className = "Popup";
        return _this;
    }
    /**
     * Shows popup window.
     */
    Popup.prototype.show = function () {
        if (this.container) {
            if (this._elements.wrapper) {
                this.container.appendChild(this._elements.wrapper);
            }
            if (this._elements.curtain) {
                this.container.appendChild(this._elements.curtain);
            }
            this.positionElement();
        }
    };
    /**
     * Hides popup window.
     */
    Popup.prototype.hide = function () {
        if (this._elements.wrapper) {
            if (this._elements.wrapper.parentElement) {
                this._elements.wrapper.parentElement.removeChild(this._elements.wrapper);
            }
        }
        if (this._elements.curtain) {
            if (this._elements.curtain.parentElement) {
                this._elements.curtain.parentElement.removeChild(this._elements.curtain);
            }
        }
        this._releasePointers();
    };
    /**
     * Destroy (dispose) popup.
     */
    Popup.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.hide();
    };
    /**
     * Positions content element in the center of popup based on its actual size.
     *
     * @ignore Exclude from docs
     */
    Popup.prototype.positionElement = function (forceResize) {
        var _this = this;
        if (forceResize === void 0) { forceResize = true; }
        if (!this._elements.wrapper) {
            return;
        }
        setTimeout(function () {
            if (forceResize || !_this._sized) {
                _this._elements.wrapper.style.opacity = "0.01";
                _this._elements.wrapper.style.left = "0";
                _this._elements.wrapper.style.top = "0";
                // Size the element, but only for the first time
                if (!_this._elements.wrapper.style.width) {
                    var bbox = _this._elements.wrapper.getBoundingClientRect();
                    _this._elements.wrapper.style.width = bbox.width + "px";
                    _this._elements.wrapper.style.height = bbox.height + "px";
                }
                _this._sized = true;
            }
            setTimeout(function () {
                var bbox;
                if ((forceResize || !_this._sized) && _this._bbox) {
                    bbox = _this._bbox;
                }
                else {
                    bbox = _this._elements.wrapper.getBoundingClientRect();
                    _this._elements.wrapper.style.opacity = "";
                }
                // Set horizontal positioning
                switch (_this.align) {
                    case "left":
                        _this._elements.wrapper.style.left = "0";
                        _this._elements.wrapper.style.right = "auto";
                        _this._elements.wrapper.style.marginLeft = (_this._shift.x + _this._tempShift.x).toString();
                        break;
                    case "center":
                        _this._elements.wrapper.style.left = "50%";
                        _this._elements.wrapper.style.right = "auto";
                        _this._elements.wrapper.style.marginLeft = (Math.round(-bbox.width / 2) + (_this._shift.x + _this._tempShift.x)) + "px";
                        break;
                    case "right":
                        _this._elements.wrapper.style.left = "auto";
                        _this._elements.wrapper.style.right = "0";
                        _this._elements.wrapper.style.marginLeft = (_this._shift.x + _this._tempShift.x).toString();
                        break;
                    default:
                        _this._elements.wrapper.style.left = _this.toStyle(_this.left) || "auto";
                        _this._elements.wrapper.style.right = _this.toStyle(_this.right) || "auto";
                        _this._elements.wrapper.style.marginLeft = (_this._shift.x + _this._tempShift.x).toString();
                        break;
                }
                // Set vertical positioning
                switch (_this.verticalAlign) {
                    case "top":
                        _this._elements.wrapper.style.top = "0";
                        _this._elements.wrapper.style.bottom = "auto";
                        _this._elements.wrapper.style.marginTop = (_this._shift.y + _this._tempShift.y).toString();
                        break;
                    case "middle":
                        _this._elements.wrapper.style.top = "50%";
                        _this._elements.wrapper.style.bottom = "auto";
                        _this._elements.wrapper.style.marginTop = (Math.round(-bbox.height / 2) + (_this._shift.y + _this._tempShift.y)).toString() + "px";
                        break;
                    case "bottom":
                        _this._elements.wrapper.style.top = "auto";
                        _this._elements.wrapper.style.bottom = "0";
                        _this._elements.wrapper.style.marginTop = (_this._shift.y + _this._tempShift.y).toString();
                        break;
                    default:
                        _this._elements.wrapper.style.top = _this.toStyle(_this.top) || "auto";
                        _this._elements.wrapper.style.bottom = _this.toStyle(_this.bottom) || "auto";
                        _this._elements.wrapper.style.marginTop = (_this._shift.y + _this._tempShift.y).toString();
                        break;
                }
            }, 1);
        }, 1);
    };
    Popup.prototype.setupDragging = function () {
        var _this = this;
        if (this.draggable) {
            if (!this._IOs.wrapper.events.has("drag")) {
                this._IOs.wrapper.events.on("drag", function (ev) {
                    _this._tempShift.x = ev.shift.x;
                    _this._tempShift.y = ev.shift.y;
                    _this.positionElement(false);
                });
            }
            if (!this._IOs.wrapper.events.has("dragstop")) {
                this._IOs.wrapper.events.on("dragstop", function (ev) {
                    _this._shift.x += _this._tempShift.x;
                    _this._shift.y += _this._tempShift.y;
                    _this._tempShift.x = 0;
                    _this._tempShift.y = 0;
                    _this.positionElement(false);
                });
            }
        }
        else {
            // @todo Remove events
        }
    };
    Popup.prototype.toStyle = function (value) {
        if (!__WEBPACK_IMPORTED_MODULE_6__utils_Type__["hasValue"](value)) {
            return null;
        }
        else if (__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isNumber"](value)) {
            return "" + value + "px";
        }
        else {
            return value.toString();
        }
    };
    Object.defineProperty(Popup.prototype, "classPrefix", {
        /**
         * A prefix that is applied to class names of various popup elements.
         *
         * @return {string} Class name prefix
         */
        get: function () {
            return this.adapter.apply("classPrefix", this._classPrefix);
        },
        /**
         * @param {string} value Class name prefix
         */
        set: function (value) {
            this._classPrefix = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Popup.prototype, "content", {
        /**
         * @return {string} Popup content
         */
        get: function () {
            return this.adapter.apply("content", this._content);
        },
        /**
         * Popup content.
         *
         * Popup content can be any valid HTML, including CSS.
         *
         * @param {string} value Popup content
         */
        set: function (value) {
            if (this._content != value) {
                this._content = value;
                if (!this._elements.content) {
                    this.createContentElement();
                }
                this._elements.content.innerHTML = value;
                this.positionElement();
            }
        },
        enumerable: true,
        configurable: true
    });
    Popup.prototype.getClassNames = function () {
        return this.adapter.apply("classNames", {
            wrapperClass: this.classPrefix + "",
            titleClass: this.classPrefix + "-title",
            contentClass: this.classPrefix + "-content",
            curtainClass: this.classPrefix + "-curtain",
            closeClass: this.classPrefix + "-close"
        });
    };
    /**
     * Creates content element.
     */
    Popup.prototype.createContentElement = function () {
        // Check if it's created already
        if (this._elements.wrapper) {
            return;
        }
        // Get class names for popup elements
        var classNames = this.getClassNames();
        // Create content element
        var wrapper = document.createElement("div");
        wrapper.className = classNames.contentClass;
        wrapper.style.opacity = "0.01";
        // Create close button
        var close = document.createElement("a");
        close.className = classNames.closeClass;
        // Content title
        var title = document.createElement("div");
        title.innerHTML = this.title;
        title.className = classNames.titleClass;
        if (!this.title) {
            title.style.display = "none";
        }
        // Content div
        var content = document.createElement("div");
        content.innerHTML = this.content;
        // Set up events for content
        this._IOs.wrapper = Object(__WEBPACK_IMPORTED_MODULE_3__interaction_Interaction__["b" /* getInteraction */])().getInteraction(wrapper);
        this._disposers.push(this._IOs.wrapper);
        // Set hover/out events
        this._IOs.wrapper.events.on("over", this._disablePointers, this);
        this._IOs.wrapper.events.on("out", this._releasePointers, this);
        // Create an InteractionObject for close
        this._IOs.close = Object(__WEBPACK_IMPORTED_MODULE_3__interaction_Interaction__["b" /* getInteraction */])().getInteraction(close);
        this._disposers.push(this._IOs.close);
        // Hide close for now
        close.style.visibility = "hidden";
        // Add accessible stuff
        wrapper.setAttribute("role", "dialog");
        wrapper.setAttribute("aria-label", this.adapter.apply("readerTitle", this.readerTitle));
        // Add to wrapper
        wrapper.appendChild(close);
        wrapper.appendChild(title);
        wrapper.appendChild(content);
        this.container.appendChild(wrapper);
        // Save for later access
        this._elements.wrapper = wrapper;
        this._elements.content = content;
        this._elements.title = title;
        // Load CSS
        if (this.defaultStyles) {
            this.loadDefaultCSS();
        }
        // Create curtain as well
        this.createCurtainElement();
        // Apply events
        this._applyEvents();
        // Draggable?
        this.setupDragging();
    };
    Object.defineProperty(Popup.prototype, "title", {
        /**
         * @return {string} Popup content
         */
        get: function () {
            return this.adapter.apply("title", this._title);
        },
        /**
         * Popup ttile.
         *
         * Popup title can be any valid HTML, including CSS.
         * @param {string} value Popup content
         */
        set: function (value) {
            if (this._title != value) {
                this._title = value;
                if (!this._elements.content) {
                    this.createContentElement();
                }
                this._elements.title.innerHTML = value;
                this.positionElement();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Popup.prototype, "closable", {
        /**
         * @return {boolean} Closable?
         */
        get: function () {
            return this._closable;
        },
        /**
         * Is popup closable?
         *
         * If it is, it can be closed in a number of ways, e.g. by hitting ESC key,
         * clicking curtain, or clicking the close button.
         *
         * If it is not closable, the only way to close it is via `hide()` call.
         *
         * @param {boolean} value Closable?
         */
        set: function (value) {
            if (value !== this._closable) {
                this._closable = value;
                this._applyEvents();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Popup.prototype, "defaultStyles", {
        /**
         * @return {boolean} Use default CSS?
         */
        get: function () {
            return this.adapter.apply("defaultStyles", this._defaultStyles);
        },
        /**
         * Should popup use default CSS?
         *
         * If default CSS is disabled, an external CSS should handle the look of the
         * popup, since it will look quite out of place otherwise.
         *
         * @default true
         * @param {string} Use default CSS?
         */
        set: function (value) {
            if (this._defaultStyles != value) {
                this._defaultStyles = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Popup.prototype, "showCurtain", {
        /**
         * @return {boolean} Show curtain?
         */
        get: function () {
            return this.adapter.apply("showCurtain", this._showCurtain);
        },
        /**
         * Should popup use dim out all content behind it?
         *
         * @default false
         * @param {boolean} Show curtain?
         */
        set: function (value) {
            if (this._showCurtain != value) {
                this._showCurtain = value;
                if (this._elements.curtain) {
                    this._elements.curtain.style.display = value ? "block" : "none";
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates curtain element.
     */
    Popup.prototype.createCurtainElement = function () {
        // Get class names for popup elements
        var classNames = this.getClassNames();
        // Create the curtain
        var curtain = document.createElement("div");
        curtain.className = classNames.curtainClass;
        // Append curtain to wrapper
        this.container.appendChild(curtain);
        // Create an InteractionObject for curtain because we might need to
        // set interactions on it
        this._IOs.curtain = Object(__WEBPACK_IMPORTED_MODULE_3__interaction_Interaction__["b" /* getInteraction */])().getInteraction(curtain);
        // Add Curtain IO to disposers
        this._disposers.push(this._IOs.curtain);
        // Set events to disable underlying interactivity
        this._IOs.curtain.events.on("over", this._disablePointers, this);
        this._IOs.curtain.events.on("out", this._releasePointers, this);
        // Save for later
        this._elements.curtain = curtain;
    };
    Object.defineProperty(Popup.prototype, "draggable", {
        /**
         * @return {boolean} Show curtain?
         */
        get: function () {
            return this.adapter.apply("draggable", this._draggable);
        },
        /**
         * Can the popup be dragged with a pointer?
         *
         * @default false
         * @param {boolean} Show curtain?
         */
        set: function (value) {
            if (this._draggable != value) {
                this._draggable = value;
                this.setupDragging();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Popup.prototype, "align", {
        /**
         * @return {boolean} Horizontal position
         */
        get: function () {
            return this.adapter.apply("align", this._align);
        },
        /**
         * Horizontal positioning of the content window.
         *
         * Available options: "left", "center" (default), "right", and "none".
         *
         * @default "center"
         * @param {Align} Horizontal position
         */
        set: function (value) {
            if (this._align != value) {
                this._align = value;
                this.positionElement();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Popup.prototype, "verticalAlign", {
        /**
         * @return {boolean} Vertical position
         */
        get: function () {
            return this.adapter.apply("verticalAlign", this._verticalAlign);
        },
        /**
         * Vertical positioning of the content window.
         *
         * Available options: "top", "middle" (default), "bottom", and "none".
         *
         * @default "middle"
         * @param {VerticalAlign} Vertical position
         */
        set: function (value) {
            if (this._verticalAlign != value) {
                this._verticalAlign = value;
                this.positionElement();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Popup.prototype, "left", {
        /**
         * @return {boolean} Left
         */
        get: function () {
            return this.adapter.apply("left", this._left);
        },
        /**
         * "left" coordinate of a non-aligned (`align = "none"`) popup.
         *
         * Can be either absolute pixel value, or relative (`Percent`).
         *
         * Setting this property will automatically set `align` to "none".
         *
         * NOTE: The position is relative to the chart container.
         *
         * @param {number | Percent} Left
         */
        set: function (value) {
            if (this.left != value) {
                this._left = value;
                this._align = "none";
                this.positionElement();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Popup.prototype, "right", {
        /**
         * @return {boolean} Right
         */
        get: function () {
            return this.adapter.apply("right", this._right);
        },
        /**
         * "right" coordinate of a non-aligned (`align = "none"`) popup.
         *
         * Can be either absolute pixel value, or relative (`Percent`).
         *
         * Setting this property will automatically set `align` to "none".
         *
         * NOTE: The position is relative to the chart container.
         *
         * @param {number | Percent} Right
         */
        set: function (value) {
            if (this.right != value) {
                this._right = value;
                this._align = "none";
                this.positionElement();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Popup.prototype, "top", {
        /**
         * @return {boolean} Top
         */
        get: function () {
            return this.adapter.apply("top", this._top);
        },
        /**
         * "top" coordinate of a non-aligned (`verticalAlign = "none"`) popup.
         *
         * Can be either absolute pixel value, or relative (`Percent`).
         *
         * Setting this property will automatically set `verticalAlign` to "none".
         *
         * NOTE: The position is relative to the chart container.
         *
         * @param {number | Percent} Top
         */
        set: function (value) {
            if (this.top != value) {
                this._top = value;
                this._verticalAlign = "none";
                this.positionElement();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Popup.prototype, "bottom", {
        /**
         * @return {boolean} Bottom
         */
        get: function () {
            return this.adapter.apply("bottom", this._bottom);
        },
        /**
         * "bottom" coordinate of a non-aligned (`verticalAlign = "none"`) popup.
         *
         * Can be either absolute pixel value, or relative (`Percent`).
         *
         * Setting this property will automatically set `verticalAlign` to "none".
         *
         * NOTE: The position is relative to the chart container.
         *
         * @param {number | Percent} Bottom
         */
        set: function (value) {
            if (this.bottom != value) {
                this._bottom = value;
                this._verticalAlign = "none";
                this.positionElement();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Loads popup CSS.
     *
     * @ignore Exclude from docs
     */
    Popup.prototype.loadDefaultCSS = function () {
        if (!this._cssLoaded) {
            this._disposers.push(Object(__WEBPACK_IMPORTED_MODULE_0__PopupCSS__["a" /* default */])(this.classPrefix));
            __WEBPACK_IMPORTED_MODULE_7__utils_Object__["each"](this._elements, function (key, el) {
                el.style.display = "initial";
            });
            this._cssLoaded = true;
        }
    };
    /**
     * If popup is closable, this method adds various events to popup elements.
     */
    Popup.prototype._applyEvents = function () {
        var _this = this;
        if (this._IOs.close) {
            if (this.closable) {
                this._IOs.close.element.style.visibility = "visible";
                var disposers = [
                    Object(__WEBPACK_IMPORTED_MODULE_3__interaction_Interaction__["b" /* getInteraction */])().body.events.on("keyup", function (ev) {
                        if (__WEBPACK_IMPORTED_MODULE_4__utils_Keyboard__["b" /* keyboard */].isKey(ev.event, "esc") && _this.closable) {
                            _this.hide();
                        }
                    }),
                    this._IOs.close.events.on("hit", function (ev) {
                        _this.hide();
                    })
                ];
                disposers.push(this._IOs.curtain.events.on("hit", function (ev) {
                    if (_this.showCurtain) {
                        _this.hide();
                    }
                }));
                this._disposers.push(new __WEBPACK_IMPORTED_MODULE_5__utils_Disposer__["c" /* MultiDisposer */](disposers));
            }
            else {
                this._IOs.close.element.style.visibility = "hidden";
            }
        }
    };
    /**
     * Disables interactivity on parent chart.
     */
    Popup.prototype._disablePointers = function () {
        this._spriteInteractionsEnabled = this.sprite.interactionsEnabled;
        this.sprite.interactionsEnabled = false;
    };
    /**
     * Releases temporarily disabled pointers on parent chart.
     */
    Popup.prototype._releasePointers = function () {
        if (__WEBPACK_IMPORTED_MODULE_6__utils_Type__["hasValue"](this._spriteInteractionsEnabled)) {
            this.sprite.interactionsEnabled = this._spriteInteractionsEnabled;
            this._spriteInteractionsEnabled = undefined;
        }
    };
    /**
     * Copies all properties and related data from different element.
     *
     * @param {this} object Source element
     */
    Popup.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        this.container = source.container;
        this.sprite = source.sprite;
        this.classPrefix = source.classPrefix;
        this.content = source.content;
        this.title = source.title;
        this.readerTitle = source.readerTitle;
        this.defaultStyles = source.defaultStyles;
        this.showCurtain = source.showCurtain;
        this.align = source.align;
        this.verticalAlign = source.verticalAlign;
        this.left = source.left;
        this.right = source.right;
        this.top = source.top;
        this.bottom = source.bottom;
        this.adapter.copyFrom(source.adapter);
    };
    return Popup;
}(__WEBPACK_IMPORTED_MODULE_2__Base__["a" /* BaseObject */]));

//# sourceMappingURL=Popup.js.map

/***/ }),
/* 92 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Modal; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Popup__ = __webpack_require__(91);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Adapter__ = __webpack_require__(18);
/**
 * Modal class is used to display information over chart area.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * Shows an HTML modal which covers window or a chart area.
 *
 * @todo Positioning over whole window
 */
var Modal = /** @class */ (function (_super) {
    __extends(Modal, _super);
    /**
     * Constructor
     */
    function Modal() {
        var _this = _super.call(this) || this;
        /**
         * Adapter.
         *
         * @type {Adapter<Modal, IModalAdapters>}
         */
        _this.adapter = new __WEBPACK_IMPORTED_MODULE_1__utils_Adapter__["a" /* Adapter */](_this);
        _this.className = "Modal";
        _this.showCurtain = true;
        _this.draggable = false;
        return _this;
    }
    return Modal;
}(__WEBPACK_IMPORTED_MODULE_0__Popup__["a" /* Popup */]));

//# sourceMappingURL=Modal.js.map

/***/ }),
/* 93 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Validatable; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Registry__ = __webpack_require__(0);
/**
 * This module defines a [[Validatable]] class which can be used by all
 * non-[[Sprite]] classes to use system beats to revalidate themselves.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * This module defines a [[Validatable]] class which can be used by all
 * non-[[Sprite]] classes to use system update cycle to revalidate themselves.
 *
 * @ignore Exclude from docs
 */
var Validatable = /** @class */ (function (_super) {
    __extends(Validatable, _super);
    function Validatable() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Is invalid and should be revalidated?
         *
         * @type {boolean}
         */
        _this._invalid = false;
        return _this;
    }
    /**
     * Invalidates the element, so that it can re-validate/redraw itself in the
     * next cycle.
     *
     * @ignore Exclude from docs
     */
    Validatable.prototype.invalidate = function () {
        if (this._invalid === false) {
            this._invalid = true;
            __WEBPACK_IMPORTED_MODULE_1__Registry__["b" /* registry */].events.on("exitframe", this.validate, this);
        }
    };
    /**
     * Validates itself.
     *
     * Most probably the extending class will have an overriding `validate()`
     * method which will do actual work, as well as call this method using
     * `super.validate()`.
     *
     * @ignore Exclude from docs
     */
    Validatable.prototype.validate = function () {
        if (this._invalid === true) {
            this._invalid = false;
            __WEBPACK_IMPORTED_MODULE_1__Registry__["b" /* registry */].events.off("exitframe", this.validate, this);
        }
    };
    return Validatable;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["b" /* BaseObjectEvents */]));

//# sourceMappingURL=Validatable.js.map

/***/ }),
/* 94 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return svgContainers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SVGContainer; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_Utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_DOM__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Array__ = __webpack_require__(12);
/**
 * This functionality is related to the HTML wrapper that houses `<svg>` tag.
 */



/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * A array of all SVG Containers (one SVG container per chart instance).
 *
 * @ignore Exclude from docs
 * @type {Array<SVGContainer>}
 */
var svgContainers = [];
/**
 * A class used to create an HTML wrapper for the SVG contents.
 */
var SVGContainer = /** @class */ (function () {
    /**
     * Constructor
     *
     * * Creates an HTML wrapper for SVG
     */
    function SVGContainer(htmlElement) {
        /**
         * Indicates if this object has already been deleted. Any
         * destruction/disposal code should take this into account when deciding
         * wheter to run potentially costly disposal operations if they already have
         * been run.
         *
         * @type {boolean}
         */
        this._disposed = false;
        /**
         * If this component is in a separate HTML container, `autoResize` means the
         * module will constantly measure container's size and adopt contents to it.
         *
         * @type {Boolean}
         */
        this.autoResize = true;
        // Log parent HTML element
        this.htmlElement = htmlElement;
        // Adds to containers array
        svgContainers.push(this);
        /**
         * Create child div for the container - it will have svg node
         * It might seem that this container is not necessay, however having it solves
         * a problems with mouse position detection and some other.
         */
        var svgContainer = document.createElement("div");
        var style = svgContainer.style;
        style.width = "100%";
        style.height = "100%";
        style.position = "relative";
        htmlElement.appendChild(svgContainer);
        this.SVGContainer = svgContainer;
    }
    /**
     * Measures size of parent HTML element.
     *
     * @ignore Exclude from docs
     */
    SVGContainer.prototype.measure = function () {
        var width = __WEBPACK_IMPORTED_MODULE_0__utils_Utils__["width"](this.htmlElement);
        var height = __WEBPACK_IMPORTED_MODULE_0__utils_Utils__["height"](this.htmlElement);
        if (this.container) {
            if (this.width != width || this.height != height) {
                this.width = width;
                this.height = height;
                var container = this.container;
                container.maxWidth = width;
                container.maxHeight = height;
                __WEBPACK_IMPORTED_MODULE_1__utils_DOM__["k" /* fixPixelPerfect */](this.SVGContainer);
            }
        }
    };
    Object.defineProperty(SVGContainer.prototype, "container", {
        /**
         * @return {Container} Container
         */
        get: function () {
            return this._container;
        },
        /**
         * A [[Container]] element which is placed into container.
         *
         * @param {Container}  container  Container
         */
        set: function (container) {
            this._container = container;
            this.measure();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns if this object has been already been disposed.
     *
     * @return {boolean} Is disposed?
     */
    SVGContainer.prototype.isDisposed = function () {
        return this._disposed;
    };
    /**
     * Removes this container from SVG container list in system, which
     * effectively disables size change monitoring for it.
     */
    SVGContainer.prototype.dispose = function () {
        if (!this._disposed) {
            __WEBPACK_IMPORTED_MODULE_2__utils_Array__["k" /* remove */](svgContainers, this);
        }
    };
    return SVGContainer;
}());

//# sourceMappingURL=SVGContainer.js.map

/***/ }),
/* 95 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CSVParser; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__DataParser__ = __webpack_require__(96);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Type__ = __webpack_require__(1);
/**
 * CSV parser.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * Define possible separators.
 */
var separators = [",", ";", "\t"];
/**
 * A parser for CSV format.
 *
 * @important
 */
var CSVParser = /** @class */ (function (_super) {
    __extends(CSVParser, _super);
    function CSVParser() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Content-type suitable for CSV format.
         *
         * @type {string}
         */
        _this.type = "text/csv";
        /**
         * Parser options.
         *
         * @see {@link ICSVOptions} for description of each option
         * @type {ICSVOptions}
         */
        _this.options = {
            delimiter: "",
            reverse: false,
            skipRows: 0,
            skipEmpty: true,
            useColumnNames: false
        };
        return _this;
    }
    /**
     * Tests if the format is CSV.
     *
     * @param  {string}   data  Source data
     * @return {boolean}        Is it CSV?
     */
    CSVParser.isCSV = function (data) {
        return CSVParser.getDelimiterFromData(data) ? true : false;
    };
    /**
     * Tries to determine a column separator.
     *
     * @param  {string}  data  Source data
     * @return {string}        Separator
     */
    CSVParser.getDelimiterFromData = function (data) {
        // We're going to take first few lines of the CSV with different
        // possible separators and check if it results in same number of columns.
        // If it does, we're going to assume it's a CSV
        var lines = data.split("\n");
        var separator;
        try {
            // TODO replace with iterators
            for (var separators_1 = __values(separators), separators_1_1 = separators_1.next(); !separators_1_1.done; separators_1_1 = separators_1.next()) {
                var sep = separators_1_1.value;
                var columns = 0, lineColums = 0;
                for (var i in lines) {
                    // Get number of columns in a line
                    columns = lines[i].split(sep).length;
                    if (columns > 1) {
                        // More than one column - possible candidate
                        if (lineColums === 0) {
                            // First line
                            lineColums = columns;
                        }
                        else if (columns != lineColums) {
                            // Incorrect number of columns, give up on this separator
                            lineColums = 0;
                            break;
                        }
                    }
                    else {
                        // Not this separator
                        // Not point in continuing
                        lineColums = 0;
                        break;
                    }
                }
                // Check if we have a winner
                if (lineColums) {
                    separator = sep;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (separators_1_1 && !separators_1_1.done && (_a = separators_1.return)) _a.call(separators_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return separator;
        var e_1, _a;
    };
    /**
     * Parses and returns data.
     *
     * @param  {string}  data  Unparsed data
     * @return {any}           Parsed data
     */
    CSVParser.prototype.parse = function (csv) {
        // Check if we have delimiter set
        if (!this.options.delimiter) {
            this.options.delimiter = CSVParser.getDelimiterFromData(csv);
        }
        // Get CSV data as array
        var data = this.CSVToArray(csv, this.options.delimiter);
        // Do we need to cast some fields to numbers?
        var empty = __WEBPACK_IMPORTED_MODULE_1__utils_Type__["hasValue"](this.options.emptyAs);
        var numbers = this.parsableNumbers;
        var dates = this.parsableDates;
        // Init resuling array
        var res = [], cols = [], col, i;
        // First row holds column names?
        if (this.options.useColumnNames) {
            cols = data.shift();
            // Normalize column names
            for (var x = 0; x < cols.length; x++) {
                // trim
                col = cols[x].replace(/^\s+|\s+$/gm, "");
                // Check for empty
                if ("" === col)
                    col = "col" + x;
                cols[x] = col;
            }
            if (0 < this.options.skipRows)
                this.options.skipRows--;
        }
        // Skip rows
        for (i = 0; i < this.options.skipRows; i++)
            data.shift();
        // Iterate through the result set
        var row;
        while ((row = this.options.reverse ? data.pop() : data.shift())) {
            if (this.options.skipEmpty && row.length === 1 && row[0] === "")
                continue;
            var dataPoint = {};
            for (i = 0; i < row.length; i++) {
                col = undefined === cols[i] ? "col" + i : cols[i];
                dataPoint[col] = row[i] === "" ? this.options.emptyAs : row[i];
                // Convert
                if (empty) {
                    row[col] = this.maybeToEmpty(dataPoint[col]);
                }
                if (numbers) {
                    row[col] = this.maybeToNumber(col, dataPoint[col]);
                }
                if (dates) {
                    row[col] = this.maybeToDate(col, dataPoint[col]);
                }
            }
            res.push(dataPoint);
        }
        return res;
    };
    /**
     * Converts CSV into array.
     *
     * The functionality of this function is taken from here:
     * http://www.bennadel.com/blog/1504-ask-ben-parsing-csv-strings-with-javascript-exec-regular-expression-command.htm
     *
     * @param  {string}  data       Source data
     * @param  {string}  delimiter  Column delimiter
     * @return {any[]}              Parsed array
     */
    CSVParser.prototype.CSVToArray = function (data, delimiter) {
        // Check to see if the delimiter is defined. If not,
        // then default to comma.
        delimiter = (delimiter || ',');
        // Create a regular expression to parse the CSV values.
        var objPattern = new RegExp((
        // Delimiters.
        "(\\" + delimiter + "|\\r?\\n|\\r|^)" +
            // Quoted fields.
            "(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" +
            // Standard fields.
            "([^\"\\" + delimiter + "\\r\\n]*))"), "gi");
        // Create an array to hold our data. Give the array
        // a default empty first row.
        var arrData = [
            []
        ];
        // Create an array to hold our individual pattern
        // matching groups.
        var arrMatches = null;
        // Keep looping over the regular expression matches
        // until we can no longer find a match.
        while ((arrMatches = objPattern.exec(data))) {
            // Get the delimiter that was found.
            var strMatchedDelimiter = arrMatches[1];
            // Check to see if the given delimiter has a length
            // (is not the start of string) and if it matches
            // field delimiter. If id does not, then we know
            // that this delimiter is a row delimiter.
            if (strMatchedDelimiter.length &&
                (strMatchedDelimiter !== delimiter)) {
                // Since we have reached a new row of data,
                // add an empty row to our data array.
                arrData.push([]);
            }
            // Now that we have our delimiter out of the way,
            // let's check to see which kind of value we
            // captured (quoted or unquoted).
            var strMatchedValue = void 0;
            if (arrMatches[2]) {
                // We found a quoted value. When we capture
                // this value, unescape any double quotes.
                strMatchedValue = arrMatches[2].replace(new RegExp("\"\"", "g"), "\"");
            }
            else {
                // We found a non-quoted value.
                strMatchedValue = arrMatches[3];
            }
            // Now that we have our value string, let's add
            // it to the data array.
            arrData[arrData.length - 1].push(strMatchedValue);
        }
        // Return the parsed data.
        return (arrData);
    };
    return CSVParser;
}(__WEBPACK_IMPORTED_MODULE_0__DataParser__["a" /* DataParser */]));

//# sourceMappingURL=CSVParser.js.map

/***/ }),
/* 96 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DataParser; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__formatters_DateFormatter__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Type__ = __webpack_require__(1);
/**
 * Data parser module.
 */
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Base class for the data parsers.
 */
var DataParser = /** @class */ (function () {
    function DataParser() {
    }
    /**
     * A "placeholder" function for real parsers to override.
     *
     * @ignore Exclude from docs
     * @param  {string}  data  Source data
     * @return {any}           Parsed data (empty)
     */
    DataParser.prototype.parse = function (data) {
        return [];
    };
    ;
    Object.defineProperty(DataParser.prototype, "parsableNumbers", {
        /**
         * Checks if there are any numeric fields that need to be converted to
         * numbers.
         *
         * @return {boolean} Numeric fields?
         */
        get: function () {
            return this.options.numberFields && (this.options.numberFields.length > 0);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Converts a value to 'number' if it is in `numberFields`.
     *
     * @param  {string}  field  Field name
     * @param  {any}     value  Value
     * @return {any}            Parsed or original value
     */
    DataParser.prototype.maybeToNumber = function (field, value) {
        if (this.options.numberFields.indexOf(field) !== -1) {
            return __WEBPACK_IMPORTED_MODULE_1__utils_Utils__["anyToNumber"](value);
        }
        return value;
    };
    Object.defineProperty(DataParser.prototype, "parsableDates", {
        /**
         * Checks if there are any date fields that need to be converted to `Date`
         * objects.
         *
         * @return {boolean} Date fields?
         */
        get: function () {
            return this.options.dateFields && (this.options.dateFields.length > 0);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Converts a value to `Date` if it is in `dateFields`.
     *
     * @param  {string}  field  Field name
     * @param  {any}     value  Value
     * @return {any}            Parsed or original value
     */
    DataParser.prototype.maybeToDate = function (field, value) {
        if (this.options.dateFields.indexOf(field) !== -1) {
            return this.options.dateFormatter.parse(value, this.dateFormat);
        }
        return value;
    };
    /**
     * Replaces empty value with something else.
     *
     * @param  {any}  value  Source value
     * @return {any}         Source value or replacement
     */
    DataParser.prototype.maybeToEmpty = function (value) {
        if ((!__WEBPACK_IMPORTED_MODULE_2__utils_Type__["hasValue"](value) || value == "") && __WEBPACK_IMPORTED_MODULE_2__utils_Type__["hasValue"](this.options.emptyAs)) {
            return this.options.emptyAs;
        }
        return value;
    };
    Object.defineProperty(DataParser.prototype, "dateFormatter", {
        /**
         * [[DateFormatter]] object for date parsing.
         *
         * If there was not [[DateFormatter]] supplied in parser options, a new one
         * is created.
         *
         * @return {DateFormatter} Date formatter
         * @see {@link DateFormatter}
         */
        get: function () {
            if (!this.options.dateFormatter) {
                this.options.dateFormatter = new __WEBPACK_IMPORTED_MODULE_0__formatters_DateFormatter__["a" /* DateFormatter */];
                if (this.options.dateFormat) {
                    this.options.dateFormat = this.options.dateFormat;
                }
            }
            return this.options.dateFormatter;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataParser.prototype, "dateFormat", {
        /**
         * A date format to use when parsing dates.
         *
         * @return {string} Date format
         * @see {@link DateFormatter}
         */
        get: function () {
            return this.options.dateFormat || this.dateFormatter.dateFormat;
        },
        enumerable: true,
        configurable: true
    });
    return DataParser;
}());

//# sourceMappingURL=DataParser.js.map

/***/ }),
/* 97 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return JSONParser; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__DataParser__ = __webpack_require__(96);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Object__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Type__ = __webpack_require__(1);
/**
 * JSON parser.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



/**
 * A parser for JSON.
 *
 * @important
 */
var JSONParser = /** @class */ (function (_super) {
    __extends(JSONParser, _super);
    function JSONParser() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Content-type suitable for JSON format.
         *
         * @type {string}
         */
        _this.type = "application/json";
        /**
         * Parser options.
         *
         * @see {@link IJSONOptions} for description of each option
         * @type {IJSONOptions}
         */
        _this.options = {};
        return _this;
    }
    /**
     * Tests if the data is valid JSON.
     *
     * @param  {string}   data  Source data
     * @return {boolean}        Is it JSON?
     */
    JSONParser.isJSON = function (data) {
        try {
            // Try parsing JSON
            JSON.parse(data);
            // If we got to this point it means it's a valid JSON
            return true;
        }
        catch (e) {
            return false;
        }
    };
    /**
     * Parses and returns data.
     *
     * @param  {string}  data  Unparsed data
     * @return {any}           Parsed data
     */
    JSONParser.prototype.parse = function (data) {
        var _this = this;
        // Init return
        var res;
        // Try parsing
        try {
            if (__WEBPACK_IMPORTED_MODULE_2__utils_Type__["hasValue"](JSON)) {
                res = JSON.parse(data);
            }
        }
        catch (e) {
            return undefined;
        }
        // Do we need to cast some fields to numbers or dates?
        var empty = __WEBPACK_IMPORTED_MODULE_2__utils_Type__["hasValue"](this.options.emptyAs);
        var numbers = this.parsableNumbers;
        var dates = this.parsableDates;
        if (Array.isArray(res) && (numbers || dates || empty)) {
            var _loop_1 = function (i, len) {
                var row = res[i];
                __WEBPACK_IMPORTED_MODULE_1__utils_Object__["each"](row, function (key, value) {
                    if (empty) {
                        row[key] = _this.maybeToEmpty(row[key]);
                    }
                    if (numbers) {
                        row[key] = _this.maybeToNumber(key, row[key]);
                    }
                    if (dates) {
                        row[key] = _this.maybeToDate(key, row[key]);
                    }
                });
            };
            // Iterate through the data and check if it needs to be converted
            for (var i = 0, len = res.length; i < len; i++) {
                _loop_1(i, len);
            }
        }
        // Convert to array
        //return Array.isArray(res) ? res : [res];
        return res;
    };
    return JSONParser;
}(__WEBPACK_IMPORTED_MODULE_0__DataParser__["a" /* DataParser */]));

//# sourceMappingURL=JSONParser.js.map

/***/ }),
/* 98 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AxisFill; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_InterfaceColorSet__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_Type__ = __webpack_require__(1);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * AxisFill is a base class used to defines fill shapes for various
 * type-specific Axes.
 *
 * Axis fills are used to add fills to specific ranges of those axes.
 *
 * @see {@link IAxisFillEvents} for a list of available events
 * @see {@link IAxisFillAdapters} for a list of available Adapters
 * @important
 */
var AxisFill = /** @class */ (function (_super) {
    __extends(AxisFill, _super);
    /**
     * Constructor.
     *
     * @param {Axis} axis Axis
     */
    function AxisFill(axis) {
        var _this = _super.call(this) || this;
        _this.axis = axis;
        _this.element = _this.paper.add("path");
        _this.className = "AxisFill";
        _this.isMeasured = false;
        _this.location = 0;
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_2__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        _this.fill = interfaceColors.getFor("alternativeBackground");
        _this.fillOpacity = 0;
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the fill element.
     *
     * @ignore Exclude from docs
     */
    AxisFill.prototype.draw = function () {
        _super.prototype.draw.call(this);
        if (this.axis && __WEBPACK_IMPORTED_MODULE_3__core_utils_Type__["isNumber"](this.startPosition) && __WEBPACK_IMPORTED_MODULE_3__core_utils_Type__["isNumber"](this.endPosition)) {
            this.fillPath = this.axis.getPositionRangePath(this.startPosition, this.endPosition);
            this.element.attr({ "d": this.fillPath });
        }
    };
    Object.defineProperty(AxisFill.prototype, "startPosition", {
        /**
         * @return {number} Start position
         */
        get: function () {
            return this.getPropertyValue("startPosition");
        },
        /**
         * An actual starting position of the fill.
         *
         * @param {number}  value  Starting position
         */
        set: function (value) {
            this.setPropertyValue("startPosition", value);
            this.invalidate(); // this is needed as relative position might not change when zooming
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisFill.prototype, "endPosition", {
        /**
         * @return {number} End position
         */
        get: function () {
            return this.getPropertyValue("endPosition");
        },
        /**
         * An actual end position of the fill.
         *
         * @param {number} value End position
         */
        set: function (value) {
            this.setPropertyValue("endPosition", value);
            this.invalidate(); // this is needed as relative position might not change when zooming
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisFill.prototype, "location", {
        /**
         * @return {AxisItemLocation} Location (0-1)
         */
        get: function () {
            return this.getPropertyValue("location");
        },
        /**
         * Relative location of the fill. (0-1)
         *
         * @param {number} value Location (0-1)
         */
        set: function (value) {
            this.setPropertyValue("location", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return AxisFill;
}(__WEBPACK_IMPORTED_MODULE_0__core_Sprite__["a" /* Sprite */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["b" /* registry */].registeredClasses["AxisFill"] = AxisFill;
//# sourceMappingURL=AxisFill.js.map

/***/ }),
/* 99 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Grid; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_Color__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_InterfaceColorSet__ = __webpack_require__(9);
/**
 * A module defining functionality for axis grid elements.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Displays an axis grid line.
 *
 * @see {@link IGridEvents} for a list of available events
 * @see {@link IGridAdapters} for a list of available Adapters
 * @todo Review: container is better, as we'll be able to attach something to the grid, also with 3d charts we might need some additional elements
 * @important
 */
var Grid = /** @class */ (function (_super) {
    __extends(Grid, _super);
    /**
     * Constructor
     */
    function Grid() {
        var _this = _super.call(this) || this;
        _this.className = "Grid";
        _this.element = _this.paper.add("path");
        _this.location = 0.5;
        _this.isMeasured = false;
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_3__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        _this.stroke = interfaceColors.getFor("grid");
        _this.pixelPerfect = true;
        _this.strokeOpacity = 0.15;
        _this.fill = Object(__WEBPACK_IMPORTED_MODULE_2__core_utils_Color__["c" /* color */])(); // "none";
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(Grid.prototype, "location", {
        /**
         * @return {AxisItemLocation} Location (0-1)
         */
        get: function () {
            return this.getPropertyValue("location");
        },
        /**
         * Location within axis cell to place grid line on.
         *
         * * 0 - start
         * * 0.5 - middle
         * * 1 - end
         *
         * @param {AxisItemLocation}  value  Location (0-1)
         */
        set: function (value) {
            this.setPropertyValue("location", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return Grid;
}(__WEBPACK_IMPORTED_MODULE_0__core_Sprite__["a" /* Sprite */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["b" /* registry */].registeredClasses["Grid"] = Grid;
//# sourceMappingURL=Grid.js.map

/***/ }),
/* 100 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AxisLabel; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_elements_Label__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Registry__ = __webpack_require__(0);
/**
 * Axis Label module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Use to create labels on Axis.
 *
 * @see {@link IAxisLabelEvents} for a list of available events
 * @see {@link IAxisLabelAdapters} for a list of available Adapters
 * @important
 */
var AxisLabel = /** @class */ (function (_super) {
    __extends(AxisLabel, _super);
    /**
     * Constructor
     */
    function AxisLabel() {
        var _this = _super.call(this) || this;
        _this.className = "AxisLabel";
        _this.isMeasured = false;
        _this.padding(10, 10, 10, 10);
        _this.renderingFrequency = 1;
        _this.location = 0.5;
        _this.nonScaling = true;
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(AxisLabel.prototype, "location", {
        /**
         * @return {AxisItemLocation} Location (0-1)
         */
        get: function () {
            return this.getPropertyValue("location");
        },
        /**
         * Relative location of the label. (0-1)
         *
         * @param {AxisItemLocation}  value  Location (0-1)
         */
        set: function (value) {
            this.setPropertyValue("location", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisLabel.prototype, "inside", {
        /**
         * Returns if label is set to be drawn inside axis.
         *
         * @return {boolean} Inside?
         */
        get: function () {
            return this.getPropertyValue("inside");
        },
        /**
         * Sets if label should be drawn inside axis.
         *
         * @param {boolean}  value  Inside?
         */
        set: function (value) {
            this.setPropertyValue("inside", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return AxisLabel;
}(__WEBPACK_IMPORTED_MODULE_0__core_elements_Label__["a" /* Label */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["b" /* registry */].registeredClasses["AxisLabel"] = AxisLabel;
//# sourceMappingURL=AxisLabel.js.map

/***/ }),
/* 101 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Tick; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_InterfaceColorSet__ = __webpack_require__(9);
/**
 * Tick module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * A basic Tick class.
 *
 * A tick is a short dash, mainly connecting an object like axis or slice to
 * it's textual label.
 *
 * @see {@link ITickEvents} for a list of available events
 * @see {@link ITickAdapters} for a list of available Adapters
 * @important
 */
var Tick = /** @class */ (function (_super) {
    __extends(Tick, _super);
    /**
     * Constructor
     */
    function Tick() {
        var _this = _super.call(this) || this;
        _this.className = "Tick";
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_2__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        _this.fillOpacity = 0;
        _this.length = 6;
        _this.strokeOpacity = 0.2;
        _this.stroke = interfaceColors.getFor("grid");
        _this.isMeasured = false;
        _this.nonScalingStroke = true;
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(Tick.prototype, "length", {
        /**
         * @return {number} Length (px)
         */
        get: function () {
            if (this.disabled) {
                return 0;
            }
            return this.getPropertyValue("length");
        },
        /**
         * Length of the tick in pixels.
         *
         * @param {number}  value  Length (px)
         */
        set: function (value) {
            this.setPropertyValue("length", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return Tick;
}(__WEBPACK_IMPORTED_MODULE_0__core_Sprite__["a" /* Sprite */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["b" /* registry */].registeredClasses["Tick"] = Tick;
//# sourceMappingURL=Tick.js.map

/***/ }),
/* 102 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return WavedRectangle; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Rectangle__ = __webpack_require__(64);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__rendering_Smoothing__ = __webpack_require__(46);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__rendering_Path__ = __webpack_require__(8);
/**
 * Functionality for drawing rectangles with waved edges.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Draws a rectangle with waved edges.
 *
 * @see {@link IWavedRectangleEvents} for a list of available events
 * @see {@link IWavedRectangleAdapters} for a list of available Adapters
 */
var WavedRectangle = /** @class */ (function (_super) {
    __extends(WavedRectangle, _super);
    /**
     * Constructor
     */
    function WavedRectangle() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * Top waved?
         *
         * @type {boolean}
         */
        _this._twaved = true;
        /**
         * Right side waved?
         *
         * @type {boolean}
         */
        _this._rwaved = true;
        /**
         * Bottom waved?
         *
         * @type {boolean}
         */
        _this._bwaved = true;
        /**
         * Left side waved?
         *
         * @type {boolean}
         */
        _this._lwaved = true;
        _this.className = "WavedRectangle";
        // Add path element
        _this.element = _this.paper.add("path");
        // Set defaults
        _this.waveLength = 16;
        _this.waveHeight = 4;
        _this.tension = 0.8;
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the waved rectangle.
     *
     * @ignore Exclude from docs
     */
    WavedRectangle.prototype.draw = function () {
        _super.prototype.draw.call(this);
        var w = this.pixelWidth;
        var h = this._pixelHeight;
        if (w > 0 && h > 0) {
            var p1 = { x: 0, y: 0 };
            var p2 = { x: w, y: 0 };
            var p3 = { x: w, y: h };
            var p4 = { x: 0, y: h };
            var waveLength = this.waveLength;
            var waveHeight = this.waveHeight;
            var td = "";
            var rd = "";
            var bd = "";
            var ld = "";
            if (this._twaved) {
                td = Object(__WEBPACK_IMPORTED_MODULE_1__rendering_Smoothing__["c" /* wavedLine */])(p1, p2, waveLength, waveHeight, this.tension, true);
            }
            if (this._rwaved) {
                ld = Object(__WEBPACK_IMPORTED_MODULE_1__rendering_Smoothing__["c" /* wavedLine */])(p2, p3, waveLength, waveHeight, this.tension, true);
            }
            if (this._bwaved) {
                bd = Object(__WEBPACK_IMPORTED_MODULE_1__rendering_Smoothing__["c" /* wavedLine */])(p3, p4, waveLength, waveHeight, this.tension, true);
            }
            if (this._rwaved) {
                rd = Object(__WEBPACK_IMPORTED_MODULE_1__rendering_Smoothing__["c" /* wavedLine */])(p4, p1, waveLength, waveHeight, this.tension, true);
            }
            var d = __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["moveTo"](p1) + td + __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["lineTo"](p2) + ld + __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["lineTo"](p3) + bd + __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["lineTo"](p4) + rd + "z";
            this.element.attr({ "d": d });
        }
    };
    Object.defineProperty(WavedRectangle.prototype, "waveLength", {
        /**
         * @return {number} Wave length (px)
         */
        get: function () {
            return this.getPropertyValue("waveLength");
        },
        /**
         * Wave length in pixels.
         *
         * @default 16
         * @param {number}  value  Wave length (px)
         */
        set: function (value) {
            this.setPropertyValue("waveLength", value);
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WavedRectangle.prototype, "waveHeight", {
        /**
         * @return {number} Wave height (px)
         */
        get: function () {
            return this.getPropertyValue("waveHeight");
        },
        /**
         * Wave height in pixels.
         *
         * @default 4
         * @param {number}  value  Wave height (px)
         */
        set: function (value) {
            this.setPropertyValue("waveHeight", value);
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets which side should be waved or not. If particular side is set to
     * `false`, a straight line will be drawn on that side.
     *
     * @param {boolean}  top     Top waved?
     * @param {boolean}  right   Right side waved?
     * @param {boolean}  bottom  Bottom Waved?
     * @param {boolean}  left    Left side waved?
     */
    WavedRectangle.prototype.setWavedSides = function (top, right, bottom, left) {
        this._twaved = top;
        this._lwaved = right;
        this._bwaved = bottom;
        this._rwaved = left;
    };
    /**
     * Updates bounding box based on element dimension settings.
     *
     * @ignore Exclude from docs
     */
    WavedRectangle.prototype.measureElement = function () {
        this.bbox = {
            x: 0,
            y: 0,
            width: this.innerWidth,
            height: this.innerHeight
        };
    };
    Object.defineProperty(WavedRectangle.prototype, "tension", {
        /**
         * @return {number} Tension
         */
        get: function () {
            return this.getPropertyValue("tension");
        },
        /**
         * Tension of the wave.
         *
         * @default 0.8
         * @param {number}  value  Tension
         */
        set: function (value) {
            this.setPropertyValue("tension", value);
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    return WavedRectangle;
}(__WEBPACK_IMPORTED_MODULE_0__Rectangle__["a" /* Rectangle */]));

//# sourceMappingURL=WavedRectangle.js.map

/***/ }),
/* 103 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Paper; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__AMElement__ = __webpack_require__(74);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Group__ = __webpack_require__(137);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_DOM__ = __webpack_require__(19);
/**
 * Paper class just like the white sheet of pressed fiber it draws its name
 * inspiration from is used as a starting point to start a drawing.
 *
 * Before we can start adding elements (drawing) we need to take out a new sheet
 * of paper, or in this instance create a blank SVG element.
 *
 * This class creates such element, as well as implements methods needed to
 * start adding elements to it.
 */
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Paper class which when instantiated will create an SVG element as well as
 * some of the sub-elements like `<desc>`, `<defs>`.
 *
 * Use its methods like `addGroup` and `append` to add elements to the paper.
 */
var Paper = /** @class */ (function () {
    /**
     * Creates main `<svg>` container and related elements.
     *
     * @param {HTMLElement} container A reference to HTML element to create `<svg>` in
     */
    function Paper(container) {
        // Store container reference
        this.container = container;
        // Create SVG element
        var svg = document.createElementNS(__WEBPACK_IMPORTED_MODULE_2__utils_DOM__["a" /* SVGNS */], "svg");
        svg.setAttribute("version", "1.1");
        svg.setAttributeNS(__WEBPACK_IMPORTED_MODULE_2__utils_DOM__["e" /* XMLNS */], "xmlns", __WEBPACK_IMPORTED_MODULE_2__utils_DOM__["a" /* SVGNS */]);
        svg.setAttributeNS(__WEBPACK_IMPORTED_MODULE_2__utils_DOM__["e" /* XMLNS */], "xmlns:xlink", __WEBPACK_IMPORTED_MODULE_2__utils_DOM__["d" /* XLINK */]);
        svg.setAttribute("role", "group");
        this.container.appendChild(svg);
        // Add description
        var desc = document.createElementNS(__WEBPACK_IMPORTED_MODULE_2__utils_DOM__["a" /* SVGNS */], "desc");
        desc.appendChild(document.createTextNode("JavaScript chart by amCharts"));
        svg.appendChild(desc);
        // Add defs
        this.defs = document.createElementNS(__WEBPACK_IMPORTED_MODULE_2__utils_DOM__["a" /* SVGNS */], "defs");
        svg.appendChild(this.defs);
        // Set width and height to fit container
        svg.style.width = "100%";
        svg.style.height = "100%";
        svg.style.overflow = "visible";
        // Store variable
        this.svg = svg;
    }
    /**
     * Creates and returns a new element. Does not attach it to Paper yet.
     *
     * @param  {SVGElementNames}  elementName  Element name
     * @return {AMElement}                     New element
     */
    Paper.prototype.add = function (elementName) {
        return new __WEBPACK_IMPORTED_MODULE_0__AMElement__["a" /* AMElement */](elementName);
    };
    /**
     * Creates and returns a new Group element. Does not attach it to Paper.
     *
     * @param  {SVGElementNames}  groupName  Element name
     * @return {Group}                       New Group
     */
    Paper.prototype.addGroup = function (groupName) {
        return new __WEBPACK_IMPORTED_MODULE_1__Group__["a" /* Group */](groupName);
    };
    /**
     * Appends an element to Paper.
     *
     * @param {AMElement} element Element to append
     */
    Paper.prototype.append = function (element) {
        if (element) {
            this.svg.appendChild(element.node);
        }
    };
    /**
     * Appends an element to `<defs>` block of the Paper.
     *
     * @param {AMElement}  element  Element
     */
    Paper.prototype.appendDef = function (element) {
        if (element) {
            this.defs.appendChild(element.node);
        }
    };
    /**
     * Creates and returns new `<foreignObject>` element. Does not append it to
     * Paper.
     *
     * @return {AMElement} A foreignObject element
     */
    Paper.prototype.foreignObject = function () {
        var element = new __WEBPACK_IMPORTED_MODULE_0__AMElement__["a" /* AMElement */]("foreignObject");
        //this.append(element);
        return element;
    };
    /**
     * Checks if browser supports `<foreignObject>` elements.
     *
     * @return {boolean} Supports `foreignObject`?
     */
    Paper.prototype.supportsForeignObject = function () {
        return document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#Extensibility", "1.1");
    };
    return Paper;
}());

//# sourceMappingURL=Paper.js.map

/***/ }),
/* 104 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Polyspline; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Polyline__ = __webpack_require__(77);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__ = __webpack_require__(8);
/**
 * Polyspline (smoothed line) module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Draws a polysline. (smoothed multi-sigment line)
 *
 * @see {@link IPolysplineEvents} for a list of available events
 * @see {@link IPolysplineAdapters} for a list of available Adapters
 */
var Polyspline = /** @class */ (function (_super) {
    __extends(Polyspline, _super);
    /**
     * Constructor
     */
    function Polyspline() {
        var _this = _super.call(this) || this;
        _this.className = "Polyspline";
        _this.tensionX = 0.5;
        _this.tensionY = 0.5;
        _this.applyTheme();
        return _this;
    }
    /**
     * Creats and adds an SVG path for the arc.
     *
     * @ignore Exclude from docs
     */
    Polyspline.prototype.makePath = function () {
        this._distance = 0;
        var segments = this.segments;
        var tensionX = this.tensionX;
        var tensionY = this.tensionY;
        if (segments && segments.length > 0) {
            var path = "";
            this._realSegments = [];
            for (var i = 0; i < segments.length; i++) {
                var points = segments[i];
                var realPoints = [];
                this._realSegments.push(realPoints);
                if (points.length > 0) {
                    path += __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["moveTo"](points[0]);
                    for (var p = 0; p < points.length - 1; p++) {
                        var p0 = points[p - 1];
                        var p1 = points[p];
                        var p2 = points[p + 1];
                        var p3 = points[p + 2];
                        if (p === 0) {
                            p0 = points[p];
                        }
                        else if (p == points.length - 2) {
                            p3 = points[p + 1];
                        }
                        if (!p3) {
                            p3 = p2;
                        }
                        var controlPointA = __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["getCubicControlPointA"](p0, p1, p2, p3, tensionX, tensionY);
                        var controlPointB = __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["getCubicControlPointB"](p0, p1, p2, p3, tensionX, tensionY);
                        path += __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["cubicCurveTo"](p2, controlPointA, controlPointB);
                        // now split to small segments so that we could have positionToPoint later
                        var stepCount = Math.ceil(__WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["getDistance"](p1, p2)) / 2;
                        var prevPoint = p1;
                        for (var s = 0; s <= stepCount; s++) {
                            var point = __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["getPointOnCubicCurve"](p1, p2, controlPointA, controlPointB, s / stepCount);
                            realPoints.push(point);
                            this._distance += __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["getDistance"](prevPoint, point);
                            //path += $path.lineTo(point);
                            prevPoint = point;
                        }
                    }
                }
            }
            this.element.attr({ "d": path });
        }
    };
    Object.defineProperty(Polyspline.prototype, "tensionX", {
        /**
         * @return {number} Tension
         */
        get: function () {
            return this.getPropertyValue("tensionX");
        },
        /**
         * Horizontal tension for the spline.
         *
         * Used by the line smoothing algorithm.
         *
         * @default 0.5
         * @param {number}  value  Tension
         */
        set: function (value) {
            this.setPropertyValue("tensionX", value);
            this.makePath();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Polyspline.prototype, "tensionY", {
        /**
         * @return {number} Tension
         */
        get: function () {
            return this.getPropertyValue("tensionY");
        },
        /**
         * Vertical tension for the spline.
         *
         * Used by the line smoothing algorithm.
         *
         * @default 0.5
         * @param {number}  value  Tensions
         */
        set: function (value) {
            this.setPropertyValue("tensionY", value, true);
            this.makePath();
        },
        enumerable: true,
        configurable: true
    });
    return Polyspline;
}(__WEBPACK_IMPORTED_MODULE_0__Polyline__["a" /* Polyline */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__Registry__["b" /* registry */].registeredClasses["Polyspline"] = Polyspline;
//# sourceMappingURL=Polyspline.js.map

/***/ }),
/* 105 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Triangle; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__rendering_Path__ = __webpack_require__(8);
/**
 * Functionality for drawing triangles.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Used to draw a triangle.
 *
 * @see {@link ITriangleEvents} for a list of available events
 * @see {@link ITriangleAdapters} for a list of available Adapters
 */
var Triangle = /** @class */ (function (_super) {
    __extends(Triangle, _super);
    /**
     * Constructor
     */
    function Triangle() {
        var _this = _super.call(this) || this;
        _this.className = "Triangle";
        _this.element = _this.paper.add("path");
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the element.
     *
     * @ignore Exclude from docs
     */
    Triangle.prototype.draw = function () {
        _super.prototype.draw.call(this);
        var w = this.pixelWidth;
        var h = this.pixelHeight;
        var path;
        switch (this.direction) {
            case "right":
                path = __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["moveTo"]({ x: 0, y: 0 })
                    + __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["lineTo"]({ x: w, y: h / 2 })
                    + __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["lineTo"]({ x: 0, y: h })
                    + __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["closePath"]();
                break;
            case "left":
                path = __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["moveTo"]({ x: w, y: 0 })
                    + __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["lineTo"]({ x: 0, y: h / 2 })
                    + __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["lineTo"]({ x: w, y: h })
                    + __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["closePath"]();
                break;
            case "bottom":
                path = __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["moveTo"]({ x: 0, y: 0 })
                    + __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["lineTo"]({ x: w, y: 0 })
                    + __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["lineTo"]({ x: w / 2, y: h })
                    + __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["closePath"]();
                break;
            case "top":
                path = __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["moveTo"]({ x: w / 2, y: 0 })
                    + __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["lineTo"]({ x: w, y: h })
                    + __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["lineTo"]({ x: 0, y: h })
                    + __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["closePath"]();
                break;
        }
        this.element.attr({ "d": path });
    };
    Object.defineProperty(Triangle.prototype, "direction", {
        /**
         * Returns direction of a triangle
         *
         * @return {"left" | "right" | "top" | "bottom"} value
         */
        get: function () {
            return this.getPropertyValue("direction");
        },
        /**
         * Sets direction of a triangle
         *
         * @param {"left" | "right" | "top" | "bottom"} value
         */
        set: function (value) {
            this.setPropertyValue("direction", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return Triangle;
}(__WEBPACK_IMPORTED_MODULE_0__Sprite__["a" /* Sprite */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__Registry__["b" /* registry */].registeredClasses["Triangle"] = Triangle;
//# sourceMappingURL=Triangle.js.map

/***/ }),
/* 106 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LinearGradientModifier; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ColorModifier__ = __webpack_require__(150);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__LinearGradient__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Type__ = __webpack_require__(1);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * This class can be used to modify linear gradient steps, changing visual
 * properties like lightness, brightness, opacity of each set.
 *
 * It can also set offsets for each gradient step.
 *
 * E.g. if I want to fill a columns in a column series to be a solid fill from
 * top to 80% of height, then gradually fades out, I can use the following
 * gradient modifier as a `fillModifier`:
 *
 * ```TypeScript
 * let fillModifier = new am4core.LinearGradientModifier();
 * fillModifier.opacities = [1, 1, 0];
 * fillModifier.offsets = [0, 0.8, 1];
 * columnSeries.columns.template.fillModifier = fillModifier;
 * ```
 * ```JavaScript
 * var fillModifier = new am4core.LinearGradientModifier();
 * fillModifier.opacities = [1, 1, 0];
 * fillModifier.offsets = [0, 0.8, 1];
 * columnSeries.columns.template.fillModifier = fillModifier;
 * ```
 * ```JSON
 * "series": [{
 *   "type": "ColumnSeries",
 *   "columns": {
 *     "fillModifier": {
 *       "type": "LinearGradientModifier",
 *       "opacities": [1, 1, 0],
 *       "offsets": [0, 0.8, 1]
 *     }
 *   }
 * }]
 * ```
 */
var LinearGradientModifier = /** @class */ (function (_super) {
    __extends(LinearGradientModifier, _super);
    /**
     * Constructor.
     */
    function LinearGradientModifier() {
        var _this = _super.call(this) || this;
        /**
         * A reference to the gradient instance that this modifier is used for.
         *
         * @type {LinearGradient}
         */
        _this.gradient = new __WEBPACK_IMPORTED_MODULE_1__LinearGradient__["a" /* LinearGradient */]();
        _this.lightnesses = [];
        _this.brightnesses = [];
        _this.opacities = [];
        _this.offsets = [];
        _this.className = "LinearGradientModifier";
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(LinearGradientModifier.prototype, "lightnesses", {
        /**
         * @return {number[]} Lightness values
         */
        get: function () {
            return this._lightnesses;
        },
        /**
         * An array of lightness values for each step.
         *
         * @param {number[]}  value  Lightness values
         */
        set: function (value) {
            this._lightnesses = value;
            this._brightnesses = [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinearGradientModifier.prototype, "brightnesses", {
        /**
         * @return {number[]} Brightness values
         */
        get: function () {
            return this._brightnesses;
        },
        /**
         * An array of brightness values for each step.
         *
         * @param {number[]}  value  Brightness values
         */
        set: function (value) {
            this._brightnesses = value;
            this._lightnesses = [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinearGradientModifier.prototype, "opacities", {
        /**
         * @return {number[]} Opacity values
         */
        get: function () {
            return this._opacities;
        },
        /**
         * An array of opacity values for each step.
         *
         * @param {number[]}  value  Opacity values
         */
        set: function (value) {
            this._opacities = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinearGradientModifier.prototype, "offsets", {
        /**
         * @return {number[]} Offsets
         */
        get: function () {
            return this._offsets;
        },
        /**
         * An array of relative position (0-1) for each step.
         *
         * If not set, all steps will be of equal relative length.
         *
         * @param {number[]}  value  Offsets
         */
        set: function (value) {
            this._offsets = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Modifies the color based on step setting.
     *
     * @ignore Exclude from docs
     * @param  {Color}  value  Source color
     * @return {Color}         A gradient that matches set modification rules
     */
    LinearGradientModifier.prototype.modify = function (value) {
        // Clear current gradient
        this.gradient.clear();
        // Get step count
        var count = 0;
        if (this.opacities) {
            count = __WEBPACK_IMPORTED_MODULE_3__utils_Math__["max"](count, this.opacities.length);
        }
        if (this.lightnesses) {
            count = __WEBPACK_IMPORTED_MODULE_3__utils_Math__["max"](count, this.lightnesses.length);
        }
        if (this.brightnesses) {
            count = __WEBPACK_IMPORTED_MODULE_3__utils_Math__["max"](count, this.brightnesses.length);
        }
        // Init step values
        var opacity = 1, lightness, brightness;
        // Apply steps
        for (var i = 0; i < count; i++) {
            // Take base color
            var color = value;
            // Check if there are any parameters for this step
            if (this.opacities && __WEBPACK_IMPORTED_MODULE_4__utils_Type__["isNumber"](this.opacities[i])) {
                opacity = this.opacities[i];
            }
            if (this.lightnesses && __WEBPACK_IMPORTED_MODULE_4__utils_Type__["isNumber"](this.lightnesses[i])) {
                lightness = this.lightnesses[i];
                brightness = undefined;
            }
            if (this.brightnesses && __WEBPACK_IMPORTED_MODULE_4__utils_Type__["isNumber"](this.brightnesses[i])) {
                brightness = this.brightnesses[i];
                lightness = undefined;
            }
            // Check if we need to brighten/lighten color
            if (__WEBPACK_IMPORTED_MODULE_4__utils_Type__["isNumber"](brightness)) {
                color = value.brighten(this.brightnesses[i]);
            }
            else if (__WEBPACK_IMPORTED_MODULE_4__utils_Type__["isNumber"](lightness)) {
                color = value.lighten(this.lightnesses[i]);
            }
            // Get offset (it's OK if it's undefined)
            var offset = this.offsets[i];
            // Apply step
            this.gradient.addColor(color, opacity, offset);
        }
        return this.gradient;
    };
    LinearGradientModifier.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        this.gradient = source.gradient.clone();
        this._offsets = source.offsets;
        this._brightnesses = source.brightnesses;
        this._lightnesses = source.brightnesses;
        this._opacities = source.opacities;
    };
    return LinearGradientModifier;
}(__WEBPACK_IMPORTED_MODULE_0__ColorModifier__["a" /* ColorModifier */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__Registry__["b" /* registry */].registeredClasses["LinearGradientModifier"] = LinearGradientModifier;
//# sourceMappingURL=LinearGradientModifier.js.map

/***/ }),
/* 107 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LightenFilter; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Filter__ = __webpack_require__(28);
/**
 * Module for "Lighten" filter.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a "Lighten" filter.
 */
var LightenFilter = /** @class */ (function (_super) {
    __extends(LightenFilter, _super);
    /**
     * Constructor
     * * Creates primitve (effect) elements
     * * Sets default properties
     */
    function LightenFilter() {
        var _this = _super.call(this) || this;
        _this.className = "LightenFilter";
        // Create elements
        // NOTE: we do not need to add each individual element to `_disposers`
        // because `filterPrimitives` has an event handler which automatically adds
        // anything added to it to `_disposers`
        _this.feColorMatrix = _this.paper.add("feColorMatrix");
        _this.feColorMatrix.attr({ "type": "matrix" });
        _this.filterPrimitives.push(_this.feColorMatrix);
        // Set default properties
        _this.lightness = 0;
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(LightenFilter.prototype, "lightness", {
        /**
         * @return {number} Lightness (0-1)
         */
        get: function () {
            return this.properties["lightness"];
        },
        /**
         * Lightness. (0-1)
         *
         * @param {number} value Lightness (0-1)
         */
        set: function (value) {
            this.properties["lightness"] = value;
            var v = value + 1;
            this.feColorMatrix.attr({ "values": v + " 0 0 0 0 0 " + v + " 0 0 0 0 0 " + v + " 0 0 0 0 0 1 0" });
        },
        enumerable: true,
        configurable: true
    });
    return LightenFilter;
}(__WEBPACK_IMPORTED_MODULE_0__Filter__["a" /* Filter */]));

//# sourceMappingURL=LightenFilter.js.map

/***/ }),
/* 108 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DesaturateFilter; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Filter__ = __webpack_require__(28);
/**
 * Module for "Desaturate" filter.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creats a "Desaturate" filter
 */
var DesaturateFilter = /** @class */ (function (_super) {
    __extends(DesaturateFilter, _super);
    /**
     * Constructor
     * * Creates primitve (effect) elements
     * * Sets default properties
     */
    function DesaturateFilter() {
        var _this = _super.call(this) || this;
        _this.className = "DesaturateFilter";
        // Create elements
        // NOTE: we do not need to add each individual element to `_disposers`
        // because `filterPrimitives` has an event handler which automatically adds
        // anything added to it to `_disposers`
        _this.feColorMatrix = _this.paper.add("feColorMatrix");
        _this.feColorMatrix.attr({ "type": "saturate" });
        _this.filterPrimitives.push(_this.feColorMatrix);
        // Set default properties
        _this.width = 120;
        _this.height = 120;
        _this.saturation = 0;
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(DesaturateFilter.prototype, "saturation", {
        /**
         * @return {number} Saturation (0-1)
         */
        get: function () {
            return this.properties["saturation"];
        },
        /**
         * Saturation.
         *
         * 0 - completely desaturated.
         * 1 - fully saturated.
         *
         * @param {number}  value  Saturation (0-1)
         * @todo Describe possible values
         */
        set: function (value) {
            this.properties["saturation"] = value;
            this.feColorMatrix.attr({ "values": value.toString() });
        },
        enumerable: true,
        configurable: true
    });
    return DesaturateFilter;
}(__WEBPACK_IMPORTED_MODULE_0__Filter__["a" /* Filter */]));

//# sourceMappingURL=DesaturateFilter.js.map

/***/ }),
/* 109 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return SerialChartDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SerialChart; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Chart__ = __webpack_require__(86);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__series_Series__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_ColorSet__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__ = __webpack_require__(1);
/**
 * Serial chart module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */









/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[SerialChart]].
 *
 * @see {@link DataItem}
 */
var SerialChartDataItem = /** @class */ (function (_super) {
    __extends(SerialChartDataItem, _super);
    /**
     * Constructor
     */
    function SerialChartDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "SerialChartDataItem";
        _this.applyTheme();
        return _this;
    }
    return SerialChartDataItem;
}(__WEBPACK_IMPORTED_MODULE_0__Chart__["b" /* ChartDataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * A base class for all series-based charts, like XY, Pie, etc.
 *
 * Is not useful on its own.
 *
 * @see {@link ISerialChartEvents} for a list of available Events
 * @see {@link ISerialChartAdapters} for a list of available Adapters
 */
var SerialChart = /** @class */ (function (_super) {
    __extends(SerialChart, _super);
    /**
     * Constructor
     */
    function SerialChart() {
        var _this = 
        // Init
        _super.call(this) || this;
        _this.className = "SerialChart";
        _this.colors = new __WEBPACK_IMPORTED_MODULE_5__core_utils_ColorSet__["a" /* ColorSet */]();
        // Create a container for series
        var seriesContainer = _this.chartContainer.createChild(__WEBPACK_IMPORTED_MODULE_2__core_Container__["a" /* Container */]);
        seriesContainer.shouldClone = false;
        seriesContainer.width = Object(__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__["c" /* percent */])(100);
        seriesContainer.height = Object(__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__["c" /* percent */])(100);
        seriesContainer.isMeasured = false;
        seriesContainer.layout = "none";
        _this.seriesContainer = seriesContainer;
        // Create a container for bullets
        var bulletsContainer = _this.chartContainer.createChild(__WEBPACK_IMPORTED_MODULE_2__core_Container__["a" /* Container */]);
        bulletsContainer.shouldClone = false;
        bulletsContainer.width = Object(__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__["c" /* percent */])(100);
        bulletsContainer.height = Object(__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__["c" /* percent */])(100);
        bulletsContainer.isMeasured = false;
        bulletsContainer.layout = "none";
        _this.bulletsContainer = bulletsContainer;
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Sets defaults that instantiate some objects that rely on parent, so they
     * cannot be set in constructor
     */
    SerialChart.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);
        // Add a default screen reader title for accessibility
        // This will be overridden in screen reader if there are any `titles` set
        if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["hasValue"](this.readerTitle)) {
            this.readerTitle = this.language.translate("Serial chart");
        }
    };
    Object.defineProperty(SerialChart.prototype, "series", {
        /**
         * A list of chart's series.
         *
         * @return {List} Chart's series
         */
        get: function () {
            var _this = this;
            if (!this._series) {
                this._series = new __WEBPACK_IMPORTED_MODULE_1__core_utils_List__["e" /* ListTemplate */](this.createSeries());
                this._series.events.on("insert", this.processSeries, this);
                this._series.events.on("remove", function (event) {
                    _this.dataUsers.removeValue(event.oldValue);
                });
            }
            return this._series;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Decorates a new [[Series]] object with required parameters when it is
     * added to the chart.
     *
     * @ignore Exclude from docs
     * @param {IListEvents<Series>["insert"]}  event  Event
     * @todo Consider renaming to "handle*" as it would suit event handler better
     */
    SerialChart.prototype.processSeries = function (event) {
        var series = event.newValue;
        series.chart = this;
        series.parent = this.seriesContainer;
        series.bulletsContainer.parent = this.bulletsContainer;
        this._dataUsers.moveValue(series);
        this.feedLegend();
    };
    /**
     * Setups the legend to use the chart's data.
     */
    SerialChart.prototype.feedLegend = function () {
        var legend = this.legend;
        if (legend) {
            var legendData_1 = [];
            __WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__["each"](this.series.iterator(), function (series) {
                legendData_1.push(series);
            });
            legend.dataFields.name = "name";
            legend.itemContainers.template.propertyFields.disabled = "hiddenInLegend";
            legend.data = legendData_1;
        }
    };
    /**
     * Creates and returns a new Series, suitable for this chart type.
     *
     * @return {this} New series
     */
    SerialChart.prototype.createSeries = function () {
        return new __WEBPACK_IMPORTED_MODULE_3__series_Series__["a" /* Series */]();
    };
    Object.defineProperty(SerialChart.prototype, "colors", {
        /**
         * @return {ColorSet} Color list
         */
        get: function () {
            return this.getPropertyValue("colors");
        },
        /**
         * Chart's color list.
         *
         * This list can be used by a number of serial items, like applying a new
         * color for each Series added. Or, applying a new color for each slice
         * of a Pie chart.
         *
         * Please see [[ColorSet]] for information on how you can set up to generate
         * unique colors.
         *
         * A theme you are using may override default pre-defined colors.
         *
         * @param {ColorSet} value Color list
         */
        set: function (value) {
            this.setPropertyValue("colors", value, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Copies all parameters from another [[SerialChart]].
     *
     * @param {SerialChart} source Source SerialChart
     */
    SerialChart.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        this.series.copyFrom(source.series);
    };
    return SerialChart;
}(__WEBPACK_IMPORTED_MODULE_0__Chart__["a" /* Chart */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_6__core_Registry__["b" /* registry */].registeredClasses["SerialChart"] = SerialChart;
//# sourceMappingURL=SerialChart.js.map

/***/ }),
/* 110 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ValueAxisBreak; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__AxisBreak__ = __webpack_require__(81);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Registry__ = __webpack_require__(0);
/**
 * A module which defines functionality related to Value Axis Break.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Base class to define "breaks" on value axis.
 *
 * A "break" can be used to "cut out" specific ranges of the axis scale, e.g.
 * when comparing columns with relatively similar values, it would make sense
 * to cut out their mid section, so that their tip differences are more
 * prominent.
 *
 * @see {@link IValueAxisBreakEvents} for a list of available events
 * @see {@link IValueAxisBreakAdapters} for a list of available Adapters
 * @important
 */
var ValueAxisBreak = /** @class */ (function (_super) {
    __extends(ValueAxisBreak, _super);
    /**
     * Constructor
     */
    function ValueAxisBreak() {
        var _this = _super.call(this) || this;
        _this.className = "ValueAxisBreak";
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(ValueAxisBreak.prototype, "startPosition", {
        /**
         * Pixel position of the break's start.
         *
         * @return {number} Position (px)
         * @readonly
         */
        get: function () {
            if (this.axis) {
                return this.axis.valueToPosition(this.adjustedStartValue);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValueAxisBreak.prototype, "endPosition", {
        /**
         * Pixel position of the break's end.
         *
         * @return {number} Position (px)
         * @readonly
         */
        get: function () {
            if (this.axis) {
                return this.axis.valueToPosition(this.adjustedEndValue);
            }
        },
        enumerable: true,
        configurable: true
    });
    return ValueAxisBreak;
}(__WEBPACK_IMPORTED_MODULE_0__AxisBreak__["a" /* AxisBreak */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["b" /* registry */].registeredClasses["ValueAxisBreak"] = ValueAxisBreak;
//# sourceMappingURL=ValueAxisBreak.js.map

/***/ }),
/* 111 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return DateAxisDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DateAxis; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ValueAxis__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Axis__ = __webpack_require__(80);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__DateAxisBreak__ = __webpack_require__(159);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__ = __webpack_require__(154);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_utils_Type__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__core_utils_Object__ = __webpack_require__(13);
/**
 * DateAxis module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */











/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines data item for [[DateAxis]].
 *
 * @see {@link DataItem}
 */
var DateAxisDataItem = /** @class */ (function (_super) {
    __extends(DateAxisDataItem, _super);
    /**
     * Constructor
     */
    function DateAxisDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "DateAxisDataItem";
        _this.applyTheme();
        _this.values.date = {};
        _this.values.endDate = {};
        return _this;
    }
    Object.defineProperty(DateAxisDataItem.prototype, "date", {
        /**
         * @return {Date} Date
         */
        get: function () {
            return this.dates["date"];
        },
        /**
         * Date position of the data item.
         *
         * @param {Date}  date  Date
         */
        set: function (date) {
            this.setDate("date", date);
            this.value = date.getTime();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateAxisDataItem.prototype, "startDate", {
        /**
         * @return {Date} Date
         */
        get: function () {
            return this.dates["date"];
        },
        /**
         * Start date.
         *
         * Used for items that span several dates, like [[DateAxisBreak]].
         *
         * @param {Date} date Start date
         */
        set: function (date) {
            this.date = date;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateAxisDataItem.prototype, "endDate", {
        /**
         * @return {Date} End date
         */
        get: function () {
            return this.dates["endDate"];
        },
        /**
         * End date for data item.
         *
         * @param {Date} date End date
         */
        set: function (date) {
            this.setDate("endDate", date);
            this.endValue = date.getTime();
        },
        enumerable: true,
        configurable: true
    });
    return DateAxisDataItem;
}(__WEBPACK_IMPORTED_MODULE_0__ValueAxis__["b" /* ValueAxisDataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Used to create a date/time-based axis for the chart.
 *
 * ```TypeScript
 * // Create the axis
 * let xAxis = chart.xAxes.push(new am4charts.DateAxis());
 *
 * // Set settings
 * xAxis.title.text = "Time";
 * ```
 * ```JavaScript
 * // Create the axis
 * var valueAxis = chart.xAxes.push(new am4charts.DateAxis());
 *
 * // Set settings
 * valueAxis.title.text = "Time";
 * ```
 * ```JSON
 * "xAxes": [{
 *   "type": "DateAxis",
 *   "title": {
 *     "text": "Time"
 *   }
 * }]
 * ```
 *
 * @see {@link IDateAxisEvents} for a list of available Events
 * @see {@link IDateAxisAdapters} for a list of available Adapters
 * @important
 */
var DateAxis = /** @class */ (function (_super) {
    __extends(DateAxis, _super);
    /**
     * Constructor
     */
    function DateAxis() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * [gridIntervals description]
         *
         * @todo Description
         * @type {List<ITimeInterval>}
         */
        _this.gridIntervals = new __WEBPACK_IMPORTED_MODULE_2__core_utils_List__["b" /* List */]();
        /**
         * A collection of date formats to use when formatting different time units
         * on Date/time axis.
         *
         * Actual defaults will depend on the language locale set for the chart.
         *
         * To override format for a specific time unit, say days, you need to set
         * the approperiate key to a format string. E.g.:
         *
         * ```TypeScript
         * axis.dateFormats.setKey("day", "MMMM d, yyyy");
         * ```
         * ```JavaScript
         * axis.dateFormats.setKey("day", "MMMM d, yyyy");
         * ```
         * ```JSON
         * "xAxes": [{
         *   "type": "DateAxis",
         *   "dateFormats": {
         *     "day": "MMMM d, yyyy"
         *   }
         * }]
         * ```
         *
         * @see {@link DateFormatter}
         * @type {Dictionary<TimeUnit, string>}
         */
        _this.dateFormats = new __WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__["a" /* Dictionary */]();
        /**
         * These formats are applied to labels that are first in a larger unit.
         *
         * For example, if we have a DateAxis with days on it, the first day of month
         * indicates a break in month - a start of the bigger period.
         *
         * For those labels, `periodChangeDateFormats` are applied instead of
         * `dateFormats`.
         *
         * This allows us implement convenient structures, like instead of:
         *
         * `Jan 1 - Jan 2 - Jan 3 - ...`
         *
         * We can have:
         *
         * `Jan - 1 - 2 - 3 - ...`
         *
         * This can be disabled by setting `markUnitChange = false`.
         *
         * @type {Dictionary<TimeUnit, string>}
         */
        _this.periodChangeDateFormats = new __WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__["a" /* Dictionary */]();
        /**
         * Use `periodChangeDateFormats` to apply different formats to the first
         * label in bigger time unit.
         *
         * @type {boolean}
         */
        _this._markUnitChange = true;
        /**
         * Make labels for the first label in bigger time unit bold.
         *
         * @type {boolean}
         */
        _this._boldUnitChange = true;
        /**
         * Actual interval (granularity) derived from the actual data.
         *
         * @type {ITimeInterval}
         */
        _this._baseIntervalReal = { timeUnit: "day", count: 1 };
        /**
         * Axis start location.
         *
         * * 0 - Full first cell is shown.
         * * 0.5 - Half of first cell is shown.
         * * 1 - None of the first cell is visible. (you probably don't want that)
         *
         * @param {number} value Location (0-1)
         */
        _this._startLocation = 0;
        /**
         * Axis end location.
         *
         * * 0 - None of the last cell is shown. (don't do that)
         * * 0.5 - Half of the last cell is shown.
         * * 1 - Full last cell is shown.
         *
         * @param {number} value Location (0-1)
         */
        _this._endLocation = 1;
        /**
         * A collection of timestamps of previously processed data items. Used
         * internally to track distance between data items when processing data.
         *
         * @type {Dictionary<string, number>}
         */
        _this._prevSeriesTime = new __WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__["a" /* Dictionary */]();
        /**
         * [_minSeriesDifference description]
         *
         * @todo Description
         * @type {number}
         */
        _this._minSeriesDifference = Number.MAX_VALUE;
        /**
         * A function which applies fills to alternating cells.
         *
         * @todo Description
         * @type {function}
         */
        _this.fillRule = function (dataItem) {
            var value = dataItem.value;
            var axis = dataItem.component;
            var gridInterval = axis._gridInterval;
            var gridDuration = __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["getDuration"](gridInterval.timeUnit, gridInterval.count);
            if (Math.round((value - axis.min) / gridDuration) / 2 == Math.round(Math.round((value - axis.min) / gridDuration) / 2)) {
                dataItem.axisFill.__disabled = true;
            }
            else {
                dataItem.axisFill.__disabled = false;
            }
        };
        _this.className = "DateAxis";
        // Translatable defaults are applied in `applyInternalDefaults()`
        // ...
        // Define default intervals
        // @todo: will this be visible in docs?
        _this.gridIntervals.pushAll([
            { timeUnit: "millisecond", count: 1 },
            { timeUnit: "millisecond", count: 5 },
            { timeUnit: "millisecond", count: 10 },
            { timeUnit: "millisecond", count: 50 },
            { timeUnit: "millisecond", count: 100 },
            { timeUnit: "millisecond", count: 500 },
            { timeUnit: "second", count: 1 },
            { timeUnit: "second", count: 5 },
            { timeUnit: "second", count: 10 },
            { timeUnit: "second", count: 30 },
            { timeUnit: "minute", count: 1 },
            { timeUnit: "minute", count: 5 },
            { timeUnit: "minute", count: 10 },
            { timeUnit: "minute", count: 30 },
            { timeUnit: "hour", count: 1 },
            { timeUnit: "hour", count: 3 },
            { timeUnit: "hour", count: 6 },
            { timeUnit: "hour", count: 12 },
            { timeUnit: "day", count: 1 },
            { timeUnit: "day", count: 2 },
            { timeUnit: "day", count: 3 },
            { timeUnit: "day", count: 4 },
            { timeUnit: "day", count: 5 },
            { timeUnit: "week", count: 1 },
            { timeUnit: "month", count: 1 },
            { timeUnit: "month", count: 2 },
            { timeUnit: "month", count: 3 },
            { timeUnit: "month", count: 6 },
            { timeUnit: "year", count: 1 },
            { timeUnit: "year", count: 2 },
            { timeUnit: "year", count: 5 },
            { timeUnit: "year", count: 10 },
            { timeUnit: "year", count: 50 },
            { timeUnit: "year", count: 100 }
        ]);
        // Set field name
        _this.axisFieldName = "date";
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Sets defaults that instantiate some objects that rely on parent, so they
     * cannot be set in constructor.
     */
    DateAxis.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);
        // Set default date formats
        if (!this.dateFormats.hasKey("millisecond")) {
            this.dateFormats.setKey("millisecond", this.language.translate("_date_millisecond"));
        }
        if (!this.dateFormats.hasKey("second")) {
            this.dateFormats.setKey("second", this.language.translate("_date_second"));
        }
        if (!this.dateFormats.hasKey("minute")) {
            this.dateFormats.setKey("minute", this.language.translate("_date_minute"));
        }
        if (!this.dateFormats.hasKey("hour")) {
            this.dateFormats.setKey("hour", this.language.translate("_date_hour"));
        }
        if (!this.dateFormats.hasKey("day")) {
            this.dateFormats.setKey("day", this.language.translate("_date_day"));
        }
        if (!this.dateFormats.hasKey("week")) {
            this.dateFormats.setKey("week", this.language.translate("_date_day")); // not a mistake
        }
        if (!this.dateFormats.hasKey("month")) {
            this.dateFormats.setKey("month", this.language.translate("_date_month"));
        }
        if (!this.dateFormats.hasKey("year")) {
            this.dateFormats.setKey("year", this.language.translate("_date_year"));
        }
        if (!this.periodChangeDateFormats.hasKey("millisecond")) {
            this.periodChangeDateFormats.setKey("millisecond", this.language.translate("_date_millisecond"));
        }
        if (!this.periodChangeDateFormats.hasKey("second")) {
            this.periodChangeDateFormats.setKey("second", this.language.translate("_date_second"));
        }
        if (!this.periodChangeDateFormats.hasKey("minute")) {
            this.periodChangeDateFormats.setKey("minute", this.language.translate("_date_minute"));
        }
        if (!this.periodChangeDateFormats.hasKey("hour")) {
            this.periodChangeDateFormats.setKey("hour", this.language.translate("_date_hour"));
        }
        if (!this.periodChangeDateFormats.hasKey("day")) {
            this.periodChangeDateFormats.setKey("day", this.language.translate("_date_day"));
        }
        if (!this.periodChangeDateFormats.hasKey("week")) {
            this.periodChangeDateFormats.setKey("week", this.language.translate("_date_day"));
        }
        if (!this.periodChangeDateFormats.hasKey("month")) {
            this.periodChangeDateFormats.setKey("month", this.language.translate("_date_month") + " " + this.language.translate("_date_year"));
        }
    };
    /**
     * Returns a new/empty [[DataItem]] of the type appropriate for this object.
     *
     * @see {@link DataItem}
     * @return {DateAxisDataItem} Data Item
     */
    DateAxis.prototype.createDataItem = function () {
        return new DateAxisDataItem();
    };
    /**
     * Returns a new/empty [[AxisBreak]] of the appropriate type.
     *
     * @return {DateAxisBreak} Axis break
     */
    DateAxis.prototype.createAxisBreak = function () {
        return new __WEBPACK_IMPORTED_MODULE_4__DateAxisBreak__["a" /* DateAxisBreak */]();
    };
    /**
     * Validates Axis' data items.
     *
     * @ignore Exclude from docs
     */
    DateAxis.prototype.validateDataItems = function () {
        // allows to keep selection of the same size
        var start = this.start;
        var end = this.end;
        var periodCount = (this.max - this.min) / this.baseDuration;
        _super.prototype.validateDataItems.call(this);
        this.maxZoomFactor = (this.max - this.min) / this.baseDuration;
        // allows to keep selection of the same size
        var newPeriodCount = (this.max - this.min) / this.baseDuration;
        start = start + (end - start) * (1 - periodCount / newPeriodCount);
        this.zoom({ start: start, end: end }, false, true); // added instantlyto solve zoomout problem when we have axes gaps. @todo: check how this affects maxZoomFactor
    };
    /**
     * Handles process after zoom.
     *
     * @ignore Exclude from docs
     * @todo Does nothing?
     */
    DateAxis.prototype.handleSelectionExtremesChange = function () {
    };
    /**
     * Calculates all positions, related to axis as per current zoom.
     *
     * @ignore Exclude from docs
     */
    DateAxis.prototype.calculateZoom = function () {
        var _this = this;
        _super.prototype.calculateZoom.call(this);
        var gridInterval = this.chooseInterval(0, this.adjustDifference(this._minZoomed, this._maxZoomed), this._gridCount);
        if (__WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["getDuration"](gridInterval.timeUnit, gridInterval.count) < this.baseDuration) {
            gridInterval = __assign({}, this.baseInterval);
        }
        this._gridInterval = gridInterval;
        this._gridDate = __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["round"](new Date(this.min), gridInterval.timeUnit);
        this._nextGridUnit = __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["getNextUnit"](gridInterval.timeUnit);
        // the following is needed to avoid grid flickering while scrolling
        this._intervalDuration = __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["getDuration"](gridInterval.timeUnit, gridInterval.count);
        var count = Math.ceil(this._difference / this._intervalDuration);
        count = Math.floor(this.start * count) - 3; // some extra is needed
        __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["add"](this._gridDate, gridInterval.timeUnit, count * gridInterval.count);
        // tell series start/end
        __WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__["each"](this.series.iterator(), function (series) {
            if (series.baseAxis == _this) {
                var field_1 = series.getAxisField(_this);
                // TODO use $type.castNumber ?
                var startIndex = series.dataItems.findClosestIndex(_this._minZoomed, function (x) { return x[field_1]; }, "left");
                // 1 millisecond is removed so that if only first item is selected, it would not count in the second.
                var endIndex = series.dataItems.findClosestIndex(_this._maxZoomed - 1, function (x) { return x[field_1]; }, "left") + 1;
                series.startIndex = startIndex;
                series.endIndex = endIndex;
            }
        });
    };
    /**
     * (Re)validates data.
     *
     * @ignore Exclude from docs
     */
    DateAxis.prototype.validateData = function () {
        _super.prototype.validateData.call(this);
        if (!__WEBPACK_IMPORTED_MODULE_7__core_utils_Type__["isNumber"](this.baseInterval.count)) {
            this.baseInterval.count = 1;
        }
    };
    /**
     * [dataChangeUpdate description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    DateAxis.prototype.dataChangeUpdate = function () {
        _super.prototype.dataChangeUpdate.call(this);
        this._minSeriesDifference = Number.MAX_VALUE;
        // use day duration if only one item. as this method is called before data is processed, we check data.length and not dataItems.length
        if (this.chart.data.length <= 1) {
            this._minSeriesDifference = __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["getDuration"]("day");
        }
    };
    /**
     * [postProcessSeriesDataItems description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    DateAxis.prototype.postProcessSeriesDataItems = function () {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__["each"](this.series.iterator(), function (series) {
            __WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__["each"](series.dataItems.iterator(), function (dataItem) {
                _this.postProcessSeriesDataItem(dataItem);
            });
        });
        this.addEmptyUnitsBreaks();
    };
    /**
     * [postProcessSeriesDataItem description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param {XYSeriesDataItem} dataItem Data item
     */
    DateAxis.prototype.postProcessSeriesDataItem = function (dataItem) {
        var _this = this;
        // we need to do this for all series data items not only added recently, as baseInterval might change
        var baseInterval = this.baseInterval;
        __WEBPACK_IMPORTED_MODULE_10__core_utils_Object__["each"](dataItem.dates, function (key) {
            //for (let key in dataItem.dates) {
            var date = dataItem.getDate(key);
            var startDate = __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["round"](__WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["copy"](date), baseInterval.timeUnit, baseInterval.count);
            var endDate = __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["add"](__WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["copy"](startDate), baseInterval.timeUnit, baseInterval.count);
            dataItem.setCalculatedValue(key, startDate.getTime(), "open");
            dataItem.setCalculatedValue(key, endDate.getTime(), "close");
            var series = dataItem.component;
            series.dataItemsByAxis.getKey(_this.uid).setKey(startDate.getTime().toString(), dataItem);
        });
    };
    /**
     * Collapses empty stretches of date/time scale by creating [[AxisBreak]]
     * elements for them.
     *
     * Can be used to automatically remove strethes without data, like weekends.
     *
     * No, need to call this manually. It will automatically be done if
     * `skipEmptyPeriods = true`.
     *
     * @ignore Exclude from docs
     */
    DateAxis.prototype.addEmptyUnitsBreaks = function () {
        var _this = this;
        if (this.skipEmptyPeriods && __WEBPACK_IMPORTED_MODULE_7__core_utils_Type__["isNumber"](this.min) && __WEBPACK_IMPORTED_MODULE_7__core_utils_Type__["isNumber"](this.max)) {
            var timeUnit = this.baseInterval.timeUnit;
            var count = this.baseInterval.count;
            this.axisBreaks.clear(); // TODO: what about breaks added by user?
            var date = __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["round"](new Date(this.min), timeUnit, count);
            var axisBreak = void 0;
            var _loop_1 = function () {
                __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["add"](date, timeUnit, count);
                var startTime = date.getTime();
                var startTimeStr = startTime.toString();
                var hasData = __WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__["contains"](this_1.series.iterator(), function (series) {
                    return !!series.dataItemsByAxis.getKey(_this.uid).getKey(startTimeStr);
                });
                // open break if not yet opened
                if (!hasData) {
                    if (!axisBreak) {
                        axisBreak = this_1.axisBreaks.create();
                        axisBreak.startDate = new Date(startTime);
                    }
                }
                else {
                    // close if already opened
                    if (axisBreak) {
                        // close at end time minus one millisecond
                        axisBreak.endDate = new Date(startTime - 1);
                        axisBreak = undefined;
                    }
                }
            };
            var this_1 = this;
            while (date.getTime() < this.max - this.baseDuration) {
                _loop_1();
            }
        }
    };
    /**
     * Updates positioning of Axis breaks after something changes.
     *
     * @ignore Exclude from docs
     */
    DateAxis.prototype.fixAxisBreaks = function () {
        var _this = this;
        _super.prototype.fixAxisBreaks.call(this);
        var axisBreaks = this._axisBreaks;
        __WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__["each"](axisBreaks.iterator(), function (axisBreak) {
            var breakGridCount = _this._gridCount * (Math.min(_this.end, axisBreak.endPosition) - Math.max(_this.start, axisBreak.startPosition)) / (_this.end - _this.start);
            axisBreak.gridInterval = _this.chooseInterval(0, axisBreak.adjustedEndValue - axisBreak.adjustedStartValue, breakGridCount);
            axisBreak.gridDate = __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["round"](new Date(axisBreak.adjustedStartValue), axisBreak.gridInterval.timeUnit);
        });
    };
    /**
     * [getGridDate description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {Date}    date           [description]
     * @param  {number}  intervalCount  [description]
     * @return {Date}                   [description]
     */
    DateAxis.prototype.getGridDate = function (date, intervalCount) {
        var timeUnit = this._gridInterval.timeUnit;
        var realIntervalCount = this._gridInterval.count;
        // round date
        __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["round"](date, timeUnit);
        var prevTimestamp = date.getTime();
        var newDate = __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["copy"](date);
        // modify date by adding intervalcount
        var timestamp = __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["add"](newDate, timeUnit, intervalCount).getTime();
        // if it's axis break, get first rounded date which is not in a break
        var axisBreak = this.isInBreak(timestamp);
        if (axisBreak) {
            newDate = this.getBreaklessDate(axisBreak, this.baseInterval.timeUnit, this.baseInterval.count);
            timestamp = newDate.getTime();
        }
        // get duration between grid lines with break duration removed
        var durationBreaksRemoved = this.adjustDifference(prevTimestamp, timestamp);
        // calculate how many time units fit to this duration
        var countBreaksRemoved = Math.round(durationBreaksRemoved / __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["getDuration"](timeUnit));
        // if less units fit, add one and repeat
        if (countBreaksRemoved < realIntervalCount) {
            return this.getGridDate(date, intervalCount + 1);
        }
        return newDate;
    };
    /**
     * [getBreaklessDate description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {DateAxisBreak}  axisBreak  [description]
     * @param  {TimeUnit}       timeUnit   [description]
     * @param  {number}         count      [description]
     * @return {Date}                      [description]
     */
    DateAxis.prototype.getBreaklessDate = function (axisBreak, timeUnit, count) {
        var date = new Date(axisBreak.endValue);
        __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["round"](date, timeUnit, count);
        __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["add"](date, timeUnit, count);
        var timestamp = date.getTime();
        axisBreak = this.isInBreak(timestamp);
        if (axisBreak) {
            return this.getBreaklessDate(axisBreak, timeUnit, count);
        }
        return date;
    };
    /**
     * (Re)validates all Axis elements.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     */
    DateAxis.prototype.validateAxisElements = function () {
        var _this = this;
        if (__WEBPACK_IMPORTED_MODULE_7__core_utils_Type__["isNumber"](this.max) && __WEBPACK_IMPORTED_MODULE_7__core_utils_Type__["isNumber"](this.min)) {
            this.calculateZoom();
            // first regular items
            var timestamp = this._gridDate.getTime();
            var timeUnit = this._gridInterval.timeUnit;
            var intervalCount = this._gridInterval.count;
            var prevGridDate = __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["copy"](this._gridDate);
            var dataItemsIterator_1 = this._dataItemsIterator;
            this.resetIterators();
            var _loop_2 = function () {
                var date = this_2.getGridDate(new Date(prevGridDate), intervalCount);
                timestamp = date.getTime();
                var endDate = __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["copy"](date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length
                endDate = __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["add"](endDate, timeUnit, intervalCount);
                var format = this_2.dateFormats.getKey(timeUnit);
                if (this_2._markUnitChange && prevGridDate) {
                    if (__WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["checkChange"](date, prevGridDate, this_2._nextGridUnit)) {
                        if (timeUnit !== "year") {
                            format = this_2.periodChangeDateFormats.getKey(timeUnit);
                        }
                    }
                }
                var text = this_2.dateFormatter.format(date, format);
                var dataItem = dataItemsIterator_1.find(function (x) { return x.text === text; });
                //let dataItem = dataItemsIterator.getFirst();
                dataItem.__disabled = false;
                //dataItem.visible = true;
                //this.processDataItem(dataItem);
                this_2.appendDataItem(dataItem);
                dataItem.axisBreak = undefined;
                dataItem.date = date;
                dataItem.endDate = endDate;
                dataItem.text = text;
                prevGridDate = date;
                this_2.validateDataElement(dataItem);
            };
            var this_2 = this;
            while (timestamp <= this._maxZoomed) {
                _loop_2();
            }
            // breaks later
            var renderer_1 = this.renderer;
            __WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__["each"](this.axisBreaks.iterator(), function (axisBreak) {
                if (axisBreak.breakSize > 0) {
                    var timeUnit_1 = axisBreak.gridInterval.timeUnit;
                    var intervalCount_1 = axisBreak.gridInterval.count;
                    // only add grid if gap is bigger then minGridDistance
                    if (__WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["getDistance"](axisBreak.startPoint, axisBreak.endPoint) > renderer_1.minGridDistance) {
                        var timestamp_1 = axisBreak.gridDate.getTime();
                        var prevGridDate_1;
                        var count = 0;
                        var _loop_3 = function () {
                            var date = __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["copy"](axisBreak.gridDate);
                            timestamp_1 = __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["add"](date, timeUnit_1, intervalCount_1 * count).getTime();
                            count++;
                            if (timestamp_1 > axisBreak.adjustedStartValue && timestamp_1 < axisBreak.adjustedEndValue) {
                                var endDate = __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["copy"](date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length
                                endDate = __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["add"](endDate, timeUnit_1, intervalCount_1);
                                var format = _this.dateFormats.getKey(timeUnit_1);
                                if (_this._markUnitChange && prevGridDate_1) {
                                    if (__WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["checkChange"](date, prevGridDate_1, _this._nextGridUnit)) {
                                        if (timeUnit_1 !== "year") {
                                            format = _this.periodChangeDateFormats.getKey(timeUnit_1);
                                        }
                                    }
                                }
                                var text_1 = _this.dateFormatter.format(date, format);
                                var dataItem = dataItemsIterator_1.find(function (x) { return x.text === text_1; });
                                //this.processDataItem(dataItem);
                                _this.appendDataItem(dataItem);
                                dataItem.axisBreak = axisBreak;
                                axisBreak.dataItems.moveValue(dataItem);
                                dataItem.date = date;
                                dataItem.endDate = endDate;
                                dataItem.text = text_1;
                                prevGridDate_1 = date;
                                _this.validateDataElement(dataItem);
                            }
                        };
                        while (timestamp_1 <= axisBreak.adjustedMax) {
                            _loop_3();
                        }
                    }
                }
            });
        }
    };
    /**
     * Validates Axis data item.
     *
     * @ignore Exclude from docs
     * @param {DateAxisDataItem} dataItem Data item
     */
    DateAxis.prototype.validateDataElement = function (dataItem) {
        //super.validateDataElement(dataItem);
        if (__WEBPACK_IMPORTED_MODULE_7__core_utils_Type__["isNumber"](this.max) && __WEBPACK_IMPORTED_MODULE_7__core_utils_Type__["isNumber"](this.min)) {
            var renderer = this.renderer;
            var timestamp = dataItem.value;
            var endTimestamp = dataItem.endValue;
            if (!__WEBPACK_IMPORTED_MODULE_7__core_utils_Type__["isNumber"](endTimestamp)) {
                endTimestamp = timestamp;
            }
            var position = this.valueToPosition(timestamp);
            var endPosition = this.valueToPosition(endTimestamp);
            dataItem.position = position;
            var tick = dataItem.tick;
            if (tick) {
                renderer.updateTickElement(tick, position, endPosition);
            }
            var grid = dataItem.grid;
            if (grid) {
                renderer.updateGridElement(grid, position, endPosition);
            }
            var fill = dataItem.axisFill;
            if (fill) {
                renderer.updateFillElement(fill, position, endPosition);
                if (!dataItem.isRange) {
                    this.fillRule(dataItem);
                }
            }
            var mask = dataItem.mask;
            if (mask) {
                renderer.updateFillElement(mask, position, endPosition);
            }
            var label = dataItem.label;
            if (label) {
                //label.invalidate();
                // when count == 1 this means label represents all the period between grid lines. so we center label because of that.
                // we don't do that through label.location because it would reset the setting
                /// and we do not do that to axis ranges
                if (this._gridInterval.count == 1 && this._gridInterval.timeUnit != "week" && !dataItem.isRange) {
                    position = position + (endPosition - position) / 2;
                    endPosition = position;
                }
                renderer.updateLabelElement(label, position, endPosition);
            }
        }
    };
    Object.defineProperty(DateAxis.prototype, "baseDuration", {
        /**
         * A duration in milliseconds of the `baseInterval`.
         *
         * @return {number} Duration (ms)
         */
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["getDuration"](this.baseInterval.timeUnit, this.baseInterval.count);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Adjusts min/max values.
     *
     * @ignore Exclude from docs.
     * @todo Description (review)
     * @param  {number}       min  Min timestamp
     * @param  {number}       max  Max timestamp
     * @return {IMinMaxStep}       Adjusted min/max step
     */
    DateAxis.prototype.adjustMinMax = function (min, max) {
        return { min: min, max: max, step: this.baseDuration };
    };
    /**
     * Adjusts the minimum timestamp as per cell start location.
     *
     * @param  {number}  value  Value
     * @return {number}         Adjusted value
     */
    DateAxis.prototype.fixMin = function (value) {
        return value + this.baseDuration * this.startLocation;
    };
    /**
     * Adjusts the maximum timestamp as per cell start location.
     *
     * @param  {number}  value  Value
     * @return {number}         Adjusted value
     */
    DateAxis.prototype.fixMax = function (value) {
        return value + this.baseDuration * this.endLocation;
    };
    /**
     * [chooseInterval description]
     *
     * @ignore Exclude from docs.
     * @todo Description
     * @param  {number}         index      [description]
     * @param  {number}         duration   [description]
     * @param  {number}         gridCount  [description]
     * @return {ITimeInterval}             [description]
     */
    DateAxis.prototype.chooseInterval = function (index, duration, gridCount) {
        var gridIntervals = this.gridIntervals;
        var gridInterval = gridIntervals.getIndex(index);
        var intervalDuration = __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["getDuration"](gridInterval.timeUnit, gridInterval.count);
        var lastIndex = gridIntervals.length - 1;
        if (index >= lastIndex) {
            return __assign({}, gridIntervals.getIndex(lastIndex));
        }
        var count = Math.ceil(duration / intervalDuration);
        if (duration < intervalDuration && index > 0) {
            return __assign({}, gridIntervals.getIndex(index - 1));
        }
        if (count <= gridCount) {
            return __assign({}, gridIntervals.getIndex(index));
        }
        else {
            if (index + 1 < gridIntervals.length) {
                return this.chooseInterval(index + 1, duration, gridCount);
            }
            else {
                return __assign({}, gridIntervals.getIndex(index));
            }
        }
    };
    /**
     * Formats the value according to axis' own [[DateFormatter]].
     *
     * @param  {number}  value  Source value
     * @return {string}         Formatted value
     */
    DateAxis.prototype.formatLabel = function (value) {
        return this.dateFormatter.format(value);
    };
    /**
     * Converts a Date to an asbolute pixel position within Axis.
     *
     * @param  {Date}    date  Date
     * @return {number}        Position (px)
     */
    DateAxis.prototype.dateToPosition = function (date) {
        return this.valueToPosition(date.getTime());
    };
    /**
     * Converts a numeric timestamp or a `Date` to a relative position on axis.
     *
     * @param  {Date | number}  date  Date or a timestamp
     * @return {number}               Relative position
     */
    DateAxis.prototype.anyToPosition = function (date) {
        if (date instanceof Date) {
            return this.dateToPosition(date);
        }
        else {
            return this.valueToPosition(date);
        }
    };
    /**
     * Converts date to orientation point (x, y, angle) on axis
     *
     * @param  {Date}  date Date
     * @return {IOrientationPoint} IOrientationPoint
     */
    DateAxis.prototype.dateToPoint = function (date) {
        var position = this.dateToPosition(date);
        var point = this.renderer.positionToPoint(position);
        var angle = this.renderer.positionToAngle(position);
        return { x: point.x, y: point.y, angle: angle };
    };
    /**
     * Converts a numeric value to orientation (x, y, angle) point on axis
     *
     * @param  {number}  value  Value
     * @return {IOrientationPoint}  Orientation point
     */
    DateAxis.prototype.anyToPoint = function (date) {
        if (date instanceof Date) {
            return this.dateToPoint(date);
        }
        else {
            return this.valueToPoint(date);
        }
    };
    /**
     * Converts pixel position within Axis to a corresponding Date.
     *
     * @param  {number}  position  Position (px)
     * @return {Date}              Date
     */
    DateAxis.prototype.positionToDate = function (position) {
        return new Date(this.positionToValue(position));
    };
    /**
     * Returns the X coordinate for series' data item's value.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     * @param  {XYSeriesDataItem}  dataItem  Data item
     * @param  {string}            key       Data field to get value from
     * @param  {number}            location  Location (0-1)
     * @return {number}                      X coordinate (px)
     */
    DateAxis.prototype.getX = function (dataItem, key, location) {
        var value = this.getTimeByLocation(dataItem, key, location);
        //let stack: number = dataItem.getValue("valueX", "stack");
        if (!__WEBPACK_IMPORTED_MODULE_7__core_utils_Type__["isNumber"](value)) {
            value = this.baseValue;
        }
        return this.renderer.positionToPoint(this.valueToPosition(value)).x;
    };
    /**
     * Returns the Y coordinate for series' data item's value.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     * @param  {XYSeriesDataItem}  dataItem  Data item
     * @param  {string}            key       Data field to get value from
     * @param  {number}            location  Location (0-1)
     * @return {number}                      Y coordinate (px)
     */
    DateAxis.prototype.getY = function (dataItem, key, location) {
        var value = this.getTimeByLocation(dataItem, key, location);
        var stack = dataItem.getValue("valueX", "stack");
        if (!__WEBPACK_IMPORTED_MODULE_7__core_utils_Type__["isNumber"](value)) {
            value = this.baseValue;
        }
        return this.renderer.positionToPoint(this.valueToPosition(value + stack)).y;
    };
    /**
     * Returns an angle for series data item.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     * @param  {XYSeriesDataItem}  dataItem  Data item
     * @param  {string}            key       Data field to get value from
     * @param  {number}            location  Location (0-1)
     * @param  {string}            stackKey  Stack ID
     * @return {number}                      Angle
     */
    DateAxis.prototype.getAngle = function (dataItem, key, location, stackKey) {
        var value = this.getTimeByLocation(dataItem, key, location);
        var stack = dataItem.getValue(stackKey, "stack");
        if (!__WEBPACK_IMPORTED_MODULE_7__core_utils_Type__["isNumber"](value)) {
            value = this.baseValue;
        }
        return this.positionToAngle(this.valueToPosition(value + stack));
    };
    /**
     * [getTimeByLocation description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {XYSeriesDataItem}  dataItem  [description]
     * @param  {string}            key       [description]
     * @param  {number}            location  [description]
     * @return {number}                      [description]
     */
    DateAxis.prototype.getTimeByLocation = function (dataItem, key, location) {
        if (!__WEBPACK_IMPORTED_MODULE_7__core_utils_Type__["isNumber"](location)) {
            location = dataItem.workingLocations[key];
            if (!__WEBPACK_IMPORTED_MODULE_7__core_utils_Type__["isNumber"](location)) {
                location = 0;
            }
        }
        var startTime = dataItem.values[key]["open"];
        var endTime = dataItem.values[key]["close"];
        if (__WEBPACK_IMPORTED_MODULE_7__core_utils_Type__["isNumber"](startTime) && __WEBPACK_IMPORTED_MODULE_7__core_utils_Type__["isNumber"](endTime)) {
            return startTime + (endTime - startTime) * location;
        }
    };
    /**
     * Processes a related series' data item.
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param {XYSeriesDataItem}  dataItem  Data item
     */
    DateAxis.prototype.processSeriesDataItem = function (dataItem) {
        var _this = this;
        // this is used to automatically define baseInterval
        var sameItemTime;
        // actually here we should only get dates of this axis. But it's not likely that the chart will have more than one date axis with different baseInterval.
        // So using this approach would mean we'll have the same baseInterval for all date axes. In case user wants different timeIntervals for different date axes, he can manually set baseInterval
        __WEBPACK_IMPORTED_MODULE_10__core_utils_Object__["each"](dataItem.dates, function (key, date) {
            //for (let key in dataItem.dates) {
            //let date: Date = dataItem.dates[key];
            var prevSeriesTime = _this._prevSeriesTime.getKey(key);
            var time = date.getTime();
            // need to check time difference betweend dates of the same data item (for example open/close. they also influence minSeriesDifference)
            if (__WEBPACK_IMPORTED_MODULE_7__core_utils_Type__["isNumber"](sameItemTime)) {
                var difference = Math.abs(time - sameItemTime);
                if (_this._minSeriesDifference > difference) {
                    _this._minSeriesDifference = difference;
                }
            }
            sameItemTime = time;
            var differece = time - prevSeriesTime;
            if (differece > 0) {
                if (_this._minSeriesDifference > differece) {
                    _this._minSeriesDifference = differece;
                }
            }
            _this._prevSeriesTime.setKey(key, time);
        });
    };
    /**
     * [updateAxisBySeries description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    DateAxis.prototype.updateAxisBySeries = function () {
        _super.prototype.updateAxisBySeries.call(this);
        var baseInterval = this.chooseInterval(0, this._minSeriesDifference, 1);
        // handle short months
        if (this._minSeriesDifference >= __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["getDuration"]("day", 27) && baseInterval.timeUnit == "week") {
            baseInterval.timeUnit = "month";
        }
        // handle daylight saving
        if (this._minSeriesDifference >= __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["getDuration"]("hour", 23) && baseInterval.timeUnit == "hour") {
            baseInterval.timeUnit = "day";
        }
        baseInterval.count = 1; // good
        this._baseIntervalReal = baseInterval;
        // no need to invalidate
    };
    Object.defineProperty(DateAxis.prototype, "baseInterval", {
        /**
         * @return {ITimeInterval} Base interval
         */
        get: function () {
            if (this._baseInterval) {
                return this._baseInterval;
            }
            else {
                return this._baseIntervalReal;
            }
        },
        /**
         * A base interval (granularity) of data.
         *
         * Used to indicate what are the base units of your data.
         *
         * For example, if you have a data set that has a data point every 5 minutes,
         * you may want to set this to `{ timeUnit: "minute", count: 5 }`.
         *
         * If not set, the Axis will try to determine the setting by its own, looking
         * at actual data.
         *
         * @param {ITimeInterval} timeInterval base interval
         */
        set: function (timeInterval) {
            this._baseInterval = timeInterval;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateAxis.prototype, "startLocation", {
        /**
         * @return {number} Location (0-1)
         */
        get: function () {
            return this._startLocation;
        },
        /**
         * Axis start location.
         *
         * * 0 - Full first cell is shown.
         * * 0.5 - Half of first cell is shown.
         * * 1 - None of the first cell is visible. (you probably don't want that)
         *
         * @param {number} value Location (0-1)
         */
        set: function (value) {
            if (this._startLocation != value) {
                this._startLocation = value;
                this.invalidate();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateAxis.prototype, "endLocation", {
        /**
         * @return {number} Location (0-1)
         */
        get: function () {
            return this._endLocation;
        },
        /**
         * Axis end location.
         *
         * * 0 - None of the last cell is shown. (don't do that)
         * * 0.5 - Half of the last cell is shown.
         * * 1 - Full last cell is shown.
         *
         * @param {number} value Location (0-1)
         */
        set: function (value) {
            if (this._endLocation != value) {
                this._endLocation = value;
                this.invalidate();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateAxis.prototype, "skipEmptyPeriods", {
        /**
         * @return {boolean} Remove empty stretches of time?
         */
        get: function () {
            return this.getPropertyValue("skipEmptyPeriods");
        },
        /**
         * If enabled, axis will automatically collapse empty (without data points)
         * periods of time, i.e. weekends.
         *
         * An "empty" period is considered a stretch of time in the length of current
         * `baseInterval` without a single data point in it.
         *
         * For each such empty period, axis will automatically create an
         * [[AxisBreak]]. By default they will be invisible. You can still configure
         * them by accessing `axis.breaks.template`.
         *
         * [More info about breaks](https://www.amcharts.com/docs/v4/concepts/axes/#Breaks).
         *
         * Important notes:
         * * If you set this property to `true`, you can not add your custom axis breaks to this axis anymore.
         * * Using this feature affects performance. Use only if you need it.
         * * Setting this to `true` will reset appearance of breaks. If you want to modify appearance, do it *after* you set `skipEmptyPeriods`.
         *
         * @param {boolean}  value  Remove empty stretches of time?
         */
        set: function (value) {
            if (this.setPropertyValue("skipEmptyPeriods", value)) {
                this.invalidateData();
            }
            if (value) {
                var breakTemplate = this.axisBreaks.template;
                breakTemplate.startLine.disabled = true;
                breakTemplate.endLine.disabled = true;
                breakTemplate.fillShape.disabled = true;
                breakTemplate.breakSize = 0;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateAxis.prototype, "tooltipDateFormat", {
        /**
         * @return {string} Date format
         */
        get: function () {
            return this._tooltipDateFormat;
        },
        /**
         * A special date format to apply axis tooltips.
         *
         * Will use same format as for labels, if not set.
         *
         * @param {string}  value  Date format
         */
        set: function (value) {
            if (this._tooltipDateFormat != value) {
                this._tooltipDateFormat = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateAxis.prototype, "markUnitChange", {
        /**
         * @return {boolean} Use different format for period beginning?
         */
        get: function () {
            return this._markUnitChange;
        },
        /**
         * Use `changeDateFormats` to apply different formats to the first label in
         * bigger time unit.
         *
         * @default true
         * @param {boolean}  value  Use different format for period beginning?
         */
        set: function (value) {
            if (this._markUnitChange != value) {
                this._markUnitChange = value;
                this.invalidateData();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateAxis.prototype, "boldUnitChange", {
        /**
         * @return {boolean} Use bold for period beginning?
         */
        get: function () {
            return this._boldUnitChange;
        },
        /**
         * Make labels for the first label in bigger time unit bold.
         *
         * @default true
         * @param {boolean}  value  Use bold for period beginning?
         */
        set: function (value) {
            if (this._boldUnitChange != value) {
                this._boldUnitChange = value;
                this.invalidateData();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns text to show in a tooltip, based on specific relative position within axis.
     *
     * The label will be formatted as per [[DateFormatter]] set for the whole
     * chart, or explicitly for this Axis.
     *
     * @ignore Exclude from docs
     * @param  {number}  position  Position
     * @return {string}            Label (formatted date)
     */
    DateAxis.prototype.getTooltipText = function (position) {
        var text;
        var date = this.positionToDate(position);
        date = __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["round"](date, this.baseInterval.timeUnit, this.baseInterval.count);
        if (__WEBPACK_IMPORTED_MODULE_7__core_utils_Type__["hasValue"](this.tooltipDateFormat)) {
            text = this.dateFormatter.format(date, this.tooltipDateFormat);
        }
        else {
            var dateFormat = this.dateFormats.getKey(this.baseInterval.timeUnit);
            if (dateFormat) {
                text = this.dateFormatter.format(date, dateFormat);
            }
            else {
                text = this.getPositionLabel(position);
            }
        }
        return this.adapter.apply("getTooltipText", text);
    };
    /**
     * Takes an absolute position within axis and adjust it to a specific position within base interval. (cell)
     *
     * @ignore Exclude from docs
     * @param  {number}            position Source position
     * @param  {AxisItemLocation}  location  Location in the cell
     * @return {number}            Adjusted position
     */
    DateAxis.prototype.roundPosition = function (position, location) {
        var baseInterval = this.baseInterval;
        var timeUnit = baseInterval.timeUnit;
        var count = baseInterval.count;
        var date = this.positionToDate(position);
        __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["round"](date, timeUnit, count);
        if (location > 0) {
            __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["add"](date, timeUnit, location);
        }
        if (this.isInBreak(date.getTime())) {
            while (date.getTime() < this.max) {
                __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["add"](date, timeUnit, count);
                if (this.isInBreak(date.getTime())) {
                    break;
                }
            }
        }
        return this.dateToPosition(date);
    };
    /**
     * Returns an relative position of the start of the cell (period), that specific position value falls into.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     * @param  {number}  position  Relative position
     * @return {number}            Cell start relative position
     */
    DateAxis.prototype.getCellStartPosition = function (position) {
        return this.roundPosition(position, 0);
    };
    /**
     * Returns an relative position of the end of the cell (period), that specific position value falls into.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     * @param  {number}  position  Relative position
     * @return {number}            Cell end relative position
     */
    DateAxis.prototype.getCellEndPosition = function (position) {
        return this.roundPosition(position, 1);
        //return this.dateToPosition($time.add(this.positionToDate(this.roundPosition(position, 1)), this.baseInterval.timeUnit, this.baseInterval.count));
    };
    /**
     * Returns a Series data item that corresponds to the specific pixel position
     * of the Axis.
     *
     * @param  {XYSeries}          series    Series
     * @param  {number}            position  Position (px)
     * @return {XYSeriesDataItem}            Data item
     */
    DateAxis.prototype.getSeriesDataItem = function (series, position) {
        var value = this.positionToValue(position);
        var date = __WEBPACK_IMPORTED_MODULE_6__core_utils_Time__["round"](new Date(value), this.baseInterval.timeUnit, this.baseInterval.count);
        var dataItem = series.dataItemsByAxis.getKey(this.uid).getKey(date.getTime().toString());
        // todo:  alternatively we can find closiest here
        return dataItem;
    };
    /**
     * Returns a formatted date based on position in axis scale.
     *
     * @param  {number}  position  Relative position on axis (0-1)
     * @return {string}            Position label
     * @todo Better format recognition
     */
    DateAxis.prototype.getPositionLabel = function (position) {
        var date = this.positionToDate(position);
        return this.dateFormatter.format(date, this.getCurrentLabelFormat());
    };
    /**
     * Returns label date format based on currently used time units
     *
     * @return {string}  Format
     */
    DateAxis.prototype.getCurrentLabelFormat = function () {
        return this.dateFormats.getKey(this._gridInterval ? this._gridInterval.timeUnit : "day");
    };
    /**
     * Initializes an Axis renderer.
     *
     * @ignore Exclude from docs
     */
    DateAxis.prototype.initRenderer = function () {
        _super.prototype.initRenderer.call(this);
        var renderer = this.renderer;
        if (renderer) {
            // Set defaults
            renderer.ticks.template.location = __WEBPACK_IMPORTED_MODULE_1__Axis__["c" /* AxisItemLocation */].Start;
            renderer.grid.template.location = __WEBPACK_IMPORTED_MODULE_1__Axis__["c" /* AxisItemLocation */].Start;
            renderer.labels.template.location = __WEBPACK_IMPORTED_MODULE_1__Axis__["c" /* AxisItemLocation */].Start;
            renderer.baseGrid.disabled = true;
        }
    };
    Object.defineProperty(DateAxis.prototype, "basePoint", {
        /**
         * [basePoint description]
         *
         * @todo Description
         * @return {IPoint} Base point
         */
        get: function () {
            return { x: 0, y: 0 };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Zooms axis to specific Dates.
     *
     * @param {Date}     startDate       Start date
     * @param {Date}     endValue        End date
     * @param {boolean}  skipRangeEvent  Do not invoke events
     * @param {boolean}  instantly       Do not play zoom animations
     */
    DateAxis.prototype.zoomToDates = function (startDate, endDate, skipRangeEvent, instantly) {
        startDate = this.dateFormatter.parse(startDate);
        endDate = this.dateFormatter.parse(endDate);
        this.zoomToValues(startDate.getTime(), endDate.getTime(), skipRangeEvent, instantly);
    };
    return DateAxis;
}(__WEBPACK_IMPORTED_MODULE_0__ValueAxis__["a" /* ValueAxis */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_5__core_Registry__["b" /* registry */].registeredClasses["DateAxis"] = DateAxis;
__WEBPACK_IMPORTED_MODULE_5__core_Registry__["b" /* registry */].registeredClasses["DateAxisDataItem"] = DateAxisDataItem;
//# sourceMappingURL=DateAxis.js.map

/***/ }),
/* 112 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return XYCursor; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Cursor__ = __webpack_require__(160);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_Disposer__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_utils_Color__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_InterfaceColorSet__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_rendering_Path__ = __webpack_require__(8);
/**
 * Cursor for XY chart
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */










/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * A cursor used on [[XYChart]].
 *
 * @see {@link IXYCursorEvents} for a list of available events
 * @see {@link IXYCursorAdapters} for a list of available Adapters
 * @todo Add description, examples
 * @todo Should we allow changing `_generalBehavior`?
 */
var XYCursor = /** @class */ (function (_super) {
    __extends(XYCursor, _super);
    /**
     * Constructor
     */
    function XYCursor() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * Vertical cursor line element.
         *
         * @type {MutableValueDisposer<Sprite>}
         */
        _this._lineX = new __WEBPACK_IMPORTED_MODULE_2__core_utils_Disposer__["d" /* MutableValueDisposer */]();
        /**
         * Horizontal cursor line element.
         *
         * @type {MutableValueDisposer<Sprite>}
         */
        _this._lineY = new __WEBPACK_IMPORTED_MODULE_2__core_utils_Disposer__["d" /* MutableValueDisposer */]();
        /**
         * Horizontal [[Axis]].
         *
         * @type {MutableValueDisposer<Axis>}
         */
        _this._xAxis = new __WEBPACK_IMPORTED_MODULE_2__core_utils_Disposer__["d" /* MutableValueDisposer */]();
        /**
         * Vertical [[Axis]].
         *
         * @type {MutableValueDisposer<Axis>}
         */
        _this._yAxis = new __WEBPACK_IMPORTED_MODULE_2__core_utils_Disposer__["d" /* MutableValueDisposer */]();
        _this.className = "XYCursor";
        // Defaults
        _this.behavior = "zoomX";
        _this.maxPanOut = 0.1;
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_5__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        // Create selection element
        var selection = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__core_Sprite__["a" /* Sprite */]);
        selection.shouldClone = false;
        selection.fillOpacity = 0.2;
        selection.fill = interfaceColors.getFor("alternativeBackground");
        selection.isMeasured = false;
        _this.selection = selection;
        _this._disposers.push(_this.selection);
        // Create cursor's vertical line
        var lineX = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__core_Sprite__["a" /* Sprite */]);
        lineX.shouldClone = false;
        lineX.stroke = interfaceColors.getFor("grid");
        lineX.fill = Object(__WEBPACK_IMPORTED_MODULE_4__core_utils_Color__["c" /* color */])();
        lineX.strokeDasharray = "3,3";
        lineX.isMeasured = false;
        lineX.strokeOpacity = 0.4;
        _this.lineX = lineX;
        _this._disposers.push(_this.lineX);
        // Create cursor's horizontal line
        var lineY = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__core_Sprite__["a" /* Sprite */]);
        lineY.shouldClone = false;
        lineY.stroke = interfaceColors.getFor("grid");
        lineY.fill = Object(__WEBPACK_IMPORTED_MODULE_4__core_utils_Color__["c" /* color */])();
        lineY.strokeDasharray = "3,3";
        lineY.isMeasured = false;
        lineY.strokeOpacity = 0.4;
        _this.lineY = lineY;
        _this._disposers.push(_this.lineY);
        // Add handler for size changes
        _this.events.on("sizechanged", _this.updateSize, _this);
        _this._disposers.push(_this._lineX);
        _this._disposers.push(_this._lineY);
        _this._disposers.push(_this._xAxis);
        _this._disposers.push(_this._yAxis);
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Updates cursor element dimensions on size change.
     *
     * @ignore Exclude from docs
     */
    XYCursor.prototype.updateSize = function () {
        if (this.lineX) {
            this.lineX.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_9__core_rendering_Path__["moveTo"]({ x: 0, y: 0 }) + __WEBPACK_IMPORTED_MODULE_9__core_rendering_Path__["lineTo"]({ x: 0, y: this.innerHeight }) });
        }
        if (this.lineY) {
            this.lineY.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_9__core_rendering_Path__["moveTo"]({ x: 0, y: 0 }) + __WEBPACK_IMPORTED_MODULE_9__core_rendering_Path__["lineTo"]({ x: this.innerWidth, y: 0 }) });
        }
    };
    /**
     * Updates selection dimensions on size change.
     *
     * @ignore Exclude from docs
     */
    XYCursor.prototype.updateSelection = function () {
        if (this._usesSelection) {
            var downPoint = this.downPoint;
            if (downPoint) {
                var point = this.point;
                if (this.lineX) {
                    point.x = this.lineX.pixelX;
                }
                if (this.lineY) {
                    point.y = this.lineY.pixelY;
                }
                var selection = this.selection;
                var x = Math.min(point.x, downPoint.x);
                var y = Math.min(point.y, downPoint.y);
                var w = __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["round"](Math.abs(downPoint.x - point.x), this._positionPrecision);
                var h = __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["round"](Math.abs(downPoint.y - point.y), this._positionPrecision);
                switch (this.behavior) {
                    case "zoomX":
                        y = 0;
                        h = this.pixelHeight;
                        break;
                    case "zoomY":
                        x = 0;
                        w = this.pixelWidth;
                        break;
                    case "selectX":
                        y = 0;
                        h = this.pixelHeight;
                        break;
                    case "selectY":
                        x = 0;
                        w = this.pixelWidth;
                        break;
                }
                selection.x = x;
                selection.y = y;
                selection.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_9__core_rendering_Path__["rectangle"](w, h) });
                selection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle
            }
            else {
                this.selection.hide();
            }
        }
    };
    /**
     *
     * @ignore Exclude from docs
     */
    XYCursor.prototype.fixPoint = function (point) {
        point.x = Math.max(0, point.x);
        point.y = Math.max(0, point.y);
        point.x = Math.min(this.pixelWidth, point.x);
        point.y = Math.min(this.pixelHeight, point.y);
        return point;
    };
    XYCursor.prototype.triggerMoveReal = function (point, triggeredByPointer) {
        _super.prototype.triggerMoveReal.call(this, point, triggeredByPointer);
        this.updateLinePositions(point);
        if (this.downPoint) {
            if (this._generalBehavior == "pan") {
                this.getPanningRanges();
                this.dispatch("panning");
            }
        }
    };
    /**
     *
     * @ignore Exclude from docs
     */
    XYCursor.prototype.updateLinePositions = function (point) {
        point = this.fixPoint(this.point);
        if (this.lineX && this.lineX.visible && !this.xAxis) {
            this.lineX.x = point.x;
        }
        if (this.lineY && this.lineY.visible && !this.yAxis) {
            this.lineY.y = point.y;
        }
        this.updateSelection();
    };
    XYCursor.prototype.triggerDownReal = function (point, triggeredByPointer) {
        if (this.visible && !this.isHiding) {
            if (this.fitsToBounds(point)) {
                this.downPoint = point;
                this.updatePoint(point);
                //this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine
                this.point.x = this.downPoint.x;
                this.point.y = this.downPoint.y;
                var selection = this.selection;
                var selectionX = this.downPoint.x;
                var selectionY = this.downPoint.y;
                if (this._usesSelection) {
                    selection.x = selectionX;
                    selection.y = selectionY;
                    selection.element.attr({ "d": "" });
                    selection.show();
                }
                _super.prototype.triggerDownReal.call(this, point, triggeredByPointer);
            }
            else {
                this.downPoint = undefined;
            }
        }
        else {
            this.downPoint = undefined;
        }
    };
    /**
     * Updates the coordinates of where pointer down event occurred
     * (was pressed).
     */
    XYCursor.prototype.updatePoint = function (point) {
        if (this.lineX) {
            point.x = this.lineX.pixelX;
        }
        if (this.lineY) {
            point.y = this.lineY.pixelY;
        }
    };
    XYCursor.prototype.triggerUpReal = function (point, triggeredByPointer) {
        if (this.downPoint) {
            this.upPoint = point;
            this.updatePoint(this.upPoint);
            this.getRanges();
            if (this.behavior == "selectX" || this.behavior == "selectY" || this.behavior == "selectXY") {
                // void
            }
            else {
                this.selection.hide();
            }
            _super.prototype.triggerUpReal.call(this, point, triggeredByPointer);
        }
        this.downPoint = undefined;
        this.updateSelection();
    };
    /**
     * [getRanges description]
     *
     * @todo Description
     */
    XYCursor.prototype.getPanningRanges = function () {
        var startX = __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["round"](this.downPoint.x / this.innerWidth, 5);
        var startY = __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["round"](this.downPoint.y / this.innerHeight, 5);
        var currentX = __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["round"](this.point.x / this.innerWidth, 5);
        var currentY = __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["round"](this.point.y / this.innerHeight, 5);
        var deltaX = startX - currentX;
        var deltaY = -startY + currentY;
        this.xRange = { start: deltaX, end: 1 + deltaX };
        this.yRange = { start: deltaY, end: 1 + deltaY };
        if (this.behavior == "panX") {
            this.yRange.start = 0;
            this.yRange.end = 1;
        }
        if (this.behavior == "panY") {
            this.xRange.start = 0;
            this.xRange.end = 1;
        }
    };
    /**
     * [getRanges description]
     *
     * @todo Description
     */
    XYCursor.prototype.getRanges = function () {
        if (this.lineX) {
            this.upPoint.x = this.lineX.pixelX;
        }
        if (this.lineY) {
            this.upPoint.y = this.lineY.pixelY;
        }
        // @todo Is this needed?
        this.selection;
        var startX = __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["round"](this.downPoint.x / this.innerWidth, 5);
        var endX = __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["round"]((this.upPoint.x) / this.innerWidth, 5);
        var startY = __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["round"](this.downPoint.y / this.innerHeight, 5);
        var endY = __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["round"]((this.upPoint.y) / this.innerHeight, 5);
        this.xRange = { start: __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["min"](startX, endX), end: __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["max"](startX, endX) };
        this.yRange = { start: __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["min"](startY, endY), end: __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["max"](startY, endY) };
    };
    Object.defineProperty(XYCursor.prototype, "behavior", {
        /**
         * @type {"zoomX" | "zoomY" | "zoomXY" | "selectX" | "selectY" | "selectXY" | "panX" | "panY" | "panXY" | "none"} Bheavior
         */
        get: function () {
            return this.getPropertyValue("behavior");
        },
        /**
         * Cursor's behavior when it's moved with pointer down:
         *
         * * "zoomX" - zooms horizontally;
         * * "zoomY" - zooms vertically;
         * * "zoomXY" - zooms both horizontally and vertically;
         * * "selectX" - selects a range horizontally;
         * * "selectY" - selects a range vertically;
         * * "selectXY" - selects a range both horizontally and vertically;
         * * "panX" - moves (pans) current selection horizontally;
         * * "panY" - moves (pans) current selection vertically;
         * * "panXY" - moves (pans) current selection both horizontally and vertically;
         * * "none" - does nothing with pointer down.
         *
         * E.g. "zoomXY" will mean that pressing a mouse (or touching) over plot area
         * and dragging it will start zooming the chart.
         *
         * @param {"zoomX" | "zoomY" | "zoomXY" | "selectX" | "selectY" | "selectXY" | "panX" | "panY" | "panXY" | "none"} value Bheavior
         */
        set: function (value) {
            this.setPropertyValue("behavior", value, true);
            this._usesSelection = false;
            if (value.indexOf("zoom") != -1) {
                this._generalBehavior = "zoom";
                this._usesSelection = true;
            }
            if (value.indexOf("select") != -1) {
                this._generalBehavior = "select";
                this._usesSelection = true;
            }
            if (value.indexOf("pan") != -1) {
                this._generalBehavior = "pan";
                this._usesSelection = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYCursor.prototype, "fullWidthLineX", {
        /**
         * @return {boolean} Full width?
         */
        get: function () {
            return this.getPropertyValue("fullWidthLineX");
        },
        /**
         * Cursor's horizontal line is expanded to take full width of the related
         * Axis' cell/category.
         *
         * NOTE: this setting will work properly if `xAxis` is set and only in case
         * `xAxis` is [[CategoryAxis]] or [[DateAxis]].
         *
         * @param {boolean} value Full width?
         */
        set: function (value) {
            this.setPropertyValue("fullWidthLineX", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYCursor.prototype, "fullWidthLineY", {
        /**
         * @return {boolean} Full width?
         */
        get: function () {
            return this.getPropertyValue("fullWidthLineY");
        },
        /**
         * Cursor's vertical line is expanded to take full width of the related
         * Axis' cell/category.
         *
         * NOTE: this setting will work properly if `yAxis` is set and only in case
         * `yAxis` is [[CategoryAxis]] or [[DateAxis]].
         *
         * @param {boolean} value Full width?
         */
        set: function (value) {
            this.setPropertyValue("fullWidthLineY", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYCursor.prototype, "maxPanOut", {
        /**
         * @return {number} Full width?
         */
        get: function () {
            return this.getPropertyValue("maxPanOut");
        },
        /**
         * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.
         * This setting specifies relative value by how much we can pan out the plot
         *
         * @param {number} value
         */
        set: function (value) {
            this.setPropertyValue("maxPanOut", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYCursor.prototype, "xAxis", {
        /**
         * @return {Axis} X axis
         */
        get: function () {
            return this._xAxis.get();
        },
        /**
         * A reference to X [[Axis]].
         *
         * An XY cursor can live without `xAxis` set. You set xAxis for cursor when
         * you have axis tooltip enabled and you want cursor line to be at the same
         * position as tooltip.
         *
         * This works with [[CategoryAxis]] and [[DateAxis]] but not with
         * [[ValueAxis]].
         *
         * @todo Description (review)
         * @param {Axis} axis X axis
         */
        set: function (axis) {
            if (this._xAxis.get() != axis) {
                var chart = axis.chart;
                this._xAxis.set(axis, new __WEBPACK_IMPORTED_MODULE_2__core_utils_Disposer__["c" /* MultiDisposer */]([
                    axis.tooltip.events.on("positionchanged", this.handleXTooltipPosition, this),
                    axis.events.on("validated", chart.handleCursorPositionChange, chart)
                ]));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYCursor.prototype, "yAxis", {
        /**
         * @return {Axis} Y Axis
         */
        get: function () {
            return this._yAxis.get();
        },
        /**
         * A reference to Y [[Axis]].
         *
         * An XY cursor can live without `yAxis` set. You set xAxis for cursor when
         * you have axis tooltip enabled and you want cursor line to be at the same
         * position as tooltip.
         *
         * This works with [[CategoryAxis]] and [[DateAxis]] but not with
         * [[ValueAxis]].
         *
         * @todo Description (review)
         * @param {Axis} axis Y axis
         */
        set: function (axis) {
            if (this._yAxis.get() != axis) {
                var chart = axis.chart;
                this._yAxis.set(axis, new __WEBPACK_IMPORTED_MODULE_2__core_utils_Disposer__["c" /* MultiDisposer */]([
                    axis.tooltip.events.on("positionchanged", this.handleYTooltipPosition, this),
                    axis.events.on("validated", chart.handleCursorPositionChange, chart)
                ]));
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Updates Cursor's position when axis tooltip changes position.
     *
     * @ignore Exclude from docs
     * @param {ISpriteEvents["positionchanged"]} event Original Axis event
     */
    XYCursor.prototype.handleXTooltipPosition = function (event) {
        var tooltip = this.xAxis.tooltip;
        var point = __WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__["svgPointToSprite"]({ x: tooltip.pixelX, y: tooltip.pixelY }, this);
        var x = point.x;
        if (this.lineX) {
            this.lineX.x = x;
            if (!this.fitsToBounds(point)) {
                this.hide();
            }
        }
        if (this.xAxis && this.fullWidthLineX) {
            var startPoint = this.xAxis.currentItemStartPoint;
            var endPoint = this.xAxis.currentItemEndPoint;
            if (startPoint && endPoint) {
                this.lineX.x = x;
                var width = endPoint.x - startPoint.x;
                this.lineX.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_9__core_rendering_Path__["rectangle"](width, this.innerHeight, -width / 2) });
            }
        }
    };
    /**
     * Updates Cursor's position when Y axis changes position or scale.
     *
     * @ignore Exclude from docs
     * @param {ISpriteEvents["positionchanged"]} event Original Axis event
     */
    XYCursor.prototype.handleYTooltipPosition = function (event) {
        var tooltip = this.yAxis.tooltip;
        var point = __WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__["svgPointToSprite"]({ x: tooltip.pixelX, y: tooltip.pixelY }, this);
        var y = point.y;
        if (this.lineY) {
            this.lineY.y = y;
            if (!this.fitsToBounds(point)) {
                this.hide();
            }
        }
        if (this.yAxis && this.fullWidthLineY) {
            var startPoint = this.yAxis.currentItemStartPoint;
            var endPoint = this.yAxis.currentItemEndPoint;
            if (startPoint && endPoint) {
                this.lineY.y = y;
                var height = endPoint.y - startPoint.y;
                this.lineY.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_9__core_rendering_Path__["rectangle"](this.innerWidth, height, 0, -height / 2) });
            }
        }
    };
    Object.defineProperty(XYCursor.prototype, "lineX", {
        /**
         * @return {Sprite} Line element
         */
        get: function () {
            return this._lineX.get();
        },
        /**
         * A Line element to use for X axis.
         *
         * @param {Sprite} lineX Line
         */
        set: function (lineX) {
            if (lineX) {
                lineX.element = this.paper.add("path");
                this._lineX.set(lineX, lineX.events.on("positionchanged", this.updateSelection, this));
                lineX.interactionsEnabled = false;
                lineX.parent = this;
            }
            else {
                this._lineX.reset();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYCursor.prototype, "lineY", {
        /**
         * @return {Sprite} Line element
         */
        get: function () {
            return this._lineY.get();
        },
        /**
         * A Line element to use Y axis.
         *
         * @param {Sprite} lineY Line
         */
        set: function (lineY) {
            if (lineY) {
                lineY.element = this.paper.add("path");
                this._lineY.set(lineY, lineY.events.on("positionchanged", this.updateSelection, this));
                lineY.parent = this;
                lineY.interactionsEnabled = false;
            }
            else {
                this._lineY.reset();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYCursor.prototype, "selection", {
        /**
         * @return {Sprite} Selection rectangle
         */
        get: function () {
            return this._selection;
        },
        /**
         * A selection element ([[Sprite]]).
         *
         * @param {Sprite} selection Selection rectangle
         */
        set: function (selection) {
            this._selection = selection;
            if (selection) {
                selection.element = this.paper.add("path");
                selection.parent = this;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Processes JSON-based config before it is applied to the object.
     *
     * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces
     * with real references.
     *
     * @ignore Exclude from docs
     * @param {object}  config  Config
     */
    XYCursor.prototype.processConfig = function (config) {
        if (config) {
            // Set up axes
            if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["hasValue"](config.xAxis) && __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isString"](config.xAxis) && this.map.hasKey(config.xAxis)) {
                config.xAxis = this.map.getKey(config.xAxis);
            }
            if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["hasValue"](config.yAxis) && __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isString"](config.yAxis) && this.map.hasKey(config.yAxis)) {
                config.yAxis = this.map.getKey(config.yAxis);
            }
        }
        _super.prototype.processConfig.call(this, config);
    };
    return XYCursor;
}(__WEBPACK_IMPORTED_MODULE_0__Cursor__["a" /* Cursor */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_3__core_Registry__["b" /* registry */].registeredClasses["XYCursor"] = XYCursor;
//# sourceMappingURL=XYCursor.js.map

/***/ }),
/* 113 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return LineSeriesDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LineSeries; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__XYSeries__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__LineSeriesSegment__ = __webpack_require__(162);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__axes_ValueAxis__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__axes_DateAxis__ = __webpack_require__(111);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_elements_Line__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_elements_Label__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__core_elements_Rectangle__ = __webpack_require__(64);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__core_utils_Object__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__core_utils_Type__ = __webpack_require__(1);
/**
 * Line series module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */














/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[LineSeries]].
 *
 * @see {@link DataItem}
 */
var LineSeriesDataItem = /** @class */ (function (_super) {
    __extends(LineSeriesDataItem, _super);
    /**
     * Constructor
     */
    function LineSeriesDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "LineSeriesDataItem";
        return _this;
    }
    return LineSeriesDataItem;
}(__WEBPACK_IMPORTED_MODULE_0__XYSeries__["b" /* XYSeriesDataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Defines [[Series]] for a line graph.
 *
 * @see {@link ILineSeriesEvents} for a list of available Events
 * @see {@link ILineSeriesAdapters} for a list of available Adapters
 * @todo Example
 * @important
 */
var LineSeries = /** @class */ (function (_super) {
    __extends(LineSeries, _super);
    /**
     * Constructor
     */
    function LineSeries() {
        var _this = _super.call(this) || this;
        /**
         * Minimum distance in pixels between two adjacent points.
         *
         * If the distance is less than this setting, a point is skipped.
         *
         * This allows acceptable performance with huge amounts of data points.
         *
         * @default 0.5
         * @type {number}
         */
        _this.minDistance = 0.5;
        _this.segments = new __WEBPACK_IMPORTED_MODULE_3__core_utils_List__["e" /* ListTemplate */](new __WEBPACK_IMPORTED_MODULE_4__LineSeriesSegment__["a" /* LineSeriesSegment */]());
        _this._segmentsIterator = new __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["ListIterator"](_this.segments, function () { return _this.segments.create(); });
        _this._segmentsIterator.createNewItems = true;
        _this.className = "LineSeries";
        _this.strokeOpacity = 1;
        _this.fillOpacity = 0;
        _this.connect = true;
        _this.tensionX = 1;
        _this.tensionY = 1;
        _this.segmentsContainer = _this.mainContainer.createChild(__WEBPACK_IMPORTED_MODULE_2__core_Container__["a" /* Container */]);
        _this.segmentsContainer.isMeasured = false;
        // line series might have multiple segments and it has a separate sprite for fill and stroke for each segment. So we need to observe all the changes on series and set them on the segments
        // todo: we need list here, otherwise everything will be redrawn event on change of properties like tooltipX or similar.
        // this.addEventListener(SpriteEvent.PROPERTY_CHANGED, this.validateDataElements, false, this);
        _this.bulletsContainer.toFront();
        _this.applyTheme();
        return _this;
    }
    /**
     * Sets defaults that instantiate some objects that rely on parent, so they
     * cannot be set in constructor.
     */
    LineSeries.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);
        if (!__WEBPACK_IMPORTED_MODULE_13__core_utils_Type__["hasValue"](this.readerTitle)) {
            this.readerTitle = this.language.translate("Line Series");
        }
    };
    /**
     * Returns a new/empty DataItem of the type appropriate for this object.
     *
     * @see {@link DataItem}
     * @return {LineSeriesDataItem} Data Item
     */
    LineSeries.prototype.createDataItem = function () {
        return new LineSeriesDataItem();
    };
    /**
     * Inits data item's working values.
     *
     * @param {this["_dataItem"]}  dataItem  Data item
     * @param {number}             index     Data item's index
     */
    LineSeries.prototype.setInitialWorkingValues = function (dataItem) {
        // this makes data items animate when added
        if (this.appeared && this.visible) {
            var yAxis = this._yAxis.get();
            var xAxis = this._xAxis.get();
            var previousDataItem = this.dataItems.getIndex(dataItem.index - 1);
            dataItem.component = this; // as these values are set before, we don't know component yet
            if (this.baseAxis == xAxis) {
                if (yAxis instanceof __WEBPACK_IMPORTED_MODULE_5__axes_ValueAxis__["a" /* ValueAxis */]) {
                    var initialY = yAxis.minZoomed;
                    if (previousDataItem) {
                        initialY = previousDataItem.values["valueY"].workingValue;
                    }
                    // this makes line animate from previous point to newly added point
                    dataItem.setWorkingValue("valueY", initialY, 0);
                    dataItem.setWorkingValue("valueY", dataItem.values.valueY.value);
                    if (xAxis instanceof __WEBPACK_IMPORTED_MODULE_6__axes_DateAxis__["a" /* DateAxis */]) {
                        dataItem.setWorkingLocation("dateX", -0.5, 0); // instantly move it to previous
                        dataItem.setWorkingLocation("dateX", 0.5); // animate to it's location
                    }
                }
            }
            if (this.baseAxis == yAxis) {
                if (xAxis instanceof __WEBPACK_IMPORTED_MODULE_5__axes_ValueAxis__["a" /* ValueAxis */]) {
                    var initialX = xAxis.minZoomed;
                    if (previousDataItem) {
                        initialX = previousDataItem.values["valueX"].workingValue;
                    }
                    dataItem.setWorkingValue("valueX", initialX, 0);
                    dataItem.setWorkingValue("valueX", dataItem.values.valueX.value);
                    if (yAxis instanceof __WEBPACK_IMPORTED_MODULE_6__axes_DateAxis__["a" /* DateAxis */]) {
                        dataItem.setWorkingLocation("dateY", -0.5, 0); // instantly move it to previous
                        dataItem.setWorkingLocation("dateY", 0.5); // animate to it's location
                    }
                }
            }
        }
    };
    /**
     * (Re)validates the whole series, effectively causing it to redraw.
     *
     * @ignore Exclude from docs
     */
    LineSeries.prototype.validate = function () {
        var _this = this;
        _super.prototype.validate.call(this);
        this._segmentsIterator.reset();
        this.openSegment(this._workingStartIndex);
        __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["each"](this.axisRanges.iterator(), function (range) {
            _this.openSegment(0, range);
        });
        // can't use columnsContainer.removeChildren() because with 3d columns we use one container for all columns
        __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["each"](this._segmentsIterator.iterator(), function (segment) {
            segment.__disabled = true;
        });
    };
    /**
     * [sliceData description]
     *
     * @todo Description
     */
    LineSeries.prototype.sliceData = function () {
        var startIndex = this.startIndex;
        var endIndex = this.endIndex;
        // we need extra one item to both sides with values for line series, otherwise the line will not continue out of bounds of the chart while scrolling
        // find first to the left
        // TODO use iterator instead
        for (var i = this.startIndex - 1; i >= 0; i++) {
            var dataItem = this.dataItems.getIndex(i);
            if (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {
                startIndex = i;
                break;
            }
        }
        // find first to the right
        // TODO use iterator instead
        for (var i = this.endIndex; i < this.dataItems.length; i++) {
            var dataItem = this.dataItems.getIndex(i);
            if (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {
                endIndex = i + 1;
                break;
            }
        }
        this._workingStartIndex = startIndex;
        this._workingEndIndex = endIndex;
    };
    /**
     * [openSegment description]
     *
     * @todo Description
     * @param {number}        openIndex  [description]
     * @param {AxisDataItem}  axisRange  [description]
     */
    LineSeries.prototype.openSegment = function (openIndex, axisRange) {
        var points = [];
        var endIndex = this._workingEndIndex;
        var closeIndex;
        var propertiesChanged = false;
        var segment = this._segmentsIterator.getFirst();
        segment.__disabled = false;
        if (axisRange) {
            segment.parent = axisRange.contents;
            __WEBPACK_IMPORTED_MODULE_12__core_utils_Object__["copyProperties"](axisRange.contents, segment, __WEBPACK_IMPORTED_MODULE_1__core_Sprite__["b" /* visualProperties */]);
        }
        else {
            __WEBPACK_IMPORTED_MODULE_12__core_utils_Object__["copyProperties"](this, segment, __WEBPACK_IMPORTED_MODULE_1__core_Sprite__["b" /* visualProperties */]);
            segment.filters.clear();
            segment.parent = this.segmentsContainer;
        }
        for (var i = openIndex; i < endIndex; i++) {
            var dataItem = this.dataItems.getIndex(i);
            if (dataItem.hasProperties) {
                // if this is first item of segment
                if (i == openIndex) {
                    this.updateSegmentProperties(dataItem.properties, segment);
                }
                else {
                    // this time we only need to know if properties changed, so we don't pass segment
                    propertiesChanged = this.updateSegmentProperties(dataItem.properties);
                }
            }
            if (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {
                this.addPoints(points, dataItem, this.xField, this.yField);
            }
            else {
                // if no values in first data item, go to next
                if (i == openIndex) {
                    continue;
                }
                else {
                    var connect = this.connect;
                    // todo: other connect conditions
                    // stop cycle
                    if (!connect) {
                        closeIndex = i;
                        break;
                    }
                }
            }
            closeIndex = i;
            if (propertiesChanged) {
                break;
            }
        }
        this.closeSegment(segment, points, openIndex, closeIndex, axisRange);
    };
    /**
     * [addPoints description]
     *
     * @todo Description
     * @param {IPoint[]}          points    [description]
     * @param {this["_dataItem"]} dataItem  [description]
     * @param {string}            xField    [description]
     * @param {string}            yField    [description]
     * @param {boolean}           backwards [description]
     */
    LineSeries.prototype.addPoints = function (points, dataItem, xField, yField, backwards) {
        var point = this.getPoint(dataItem, xField, yField, dataItem.workingLocations[xField], dataItem.workingLocations[yField]);
        if (!backwards) {
            dataItem.point = point;
        }
        points.push(point);
    };
    /**
     * [closeSegment description]
     *
     * @todo Description
     * @param {LineSeriesSegment} segment    [description]
     * @param {IPoint[]}          points     [description]
     * @param {number}            openIndex  [description]
     * @param {number}            closeIndex [description]
     * @param {AxisDataItem}      axisRange  [description]
     */
    LineSeries.prototype.closeSegment = function (segment, points, openIndex, closeIndex, axisRange) {
        var closePoints = [];
        if (this.dataFields[this._xOpenField] ||
            this.dataFields[this._yOpenField] ||
            this.stacked) {
            for (var i = closeIndex; i >= openIndex; i--) {
                var dataItem = this.dataItems.getIndex(i);
                if (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) { // not sure, this means that open point will only be added if value is also set for this point, but maybe it's ok.
                    this.addPoints(closePoints, dataItem, this.xOpenField, this.yOpenField, true);
                }
            }
        }
        else {
            var baseAxis = this.baseAxis;
            var count = points.length;
            var xAxis = this.xAxis;
            var yAxis = this.yAxis;
            if (baseAxis == xAxis) {
                closePoints.push({ x: points[count - 1].x, y: yAxis.basePoint.y }); // last x
                closePoints.push({ x: points[0].x, y: yAxis.basePoint.y }); // first x
            }
            else {
                closePoints.push({ x: xAxis.basePoint.x, y: points[count - 1].y }); // last y
                closePoints.push({ x: xAxis.basePoint.x, y: points[0].y }); // first y
            }
        }
        this.drawSegment(segment, points, closePoints);
        if (closeIndex < this._workingEndIndex - 1) {
            this.openSegment(closeIndex, axisRange);
        }
    };
    /**
     * Draws the line segment.
     *
     * @param {LineSeriesSegment}  segment     Segment
     * @param {IPoint[]}           points      Segment points
     * @param {IPoint[]}           closePoints Segment close points
     */
    LineSeries.prototype.drawSegment = function (segment, points, closePoints) {
        segment.drawSegment(points, closePoints, this.tensionX, this.tensionY);
    };
    /**
     * Segement will get its colors from `this.dataItem`, as thats how
     * `getPropertyValue()` method works.
     *
     * We pass `lineSeriesDataItem.properties` as item here each time when a flag
     * `hasProperties` is set to `true` on data item (this means it can contain
     * some properties set).
     *
     * @param  {object}             itemProperties  Item properties
     * @param  {LineSeriesSegment}  segment         Segment
     * @return {boolean}                            Properties changed?
     */
    LineSeries.prototype.updateSegmentProperties = function (itemProperties, segment) {
        var changed = false;
        __WEBPACK_IMPORTED_MODULE_12__core_utils_Object__["each"](itemProperties, function (propertyName, value) {
            //for (let propertyName in itemProperties) {
            //let value: any = itemProperties[propertyName];
            if (__WEBPACK_IMPORTED_MODULE_13__core_utils_Type__["hasValue"](value)) {
                if (segment) {
                    if (segment.properties[propertyName] != value) {
                        segment.setPropertyValue(propertyName, value);
                        segment.invalidate(); // because setPropertyValue doesn't do this
                        changed = true;
                    }
                }
                else {
                    changed = true;
                }
            }
        });
        return changed;
    };
    Object.defineProperty(LineSeries.prototype, "connect", {
        /**
         * @return {boolean} Connect?
         */
        get: function () {
            return this.getPropertyValue("connect");
        },
        /**
         * Connect the lines over empty data points?
         *
         * @default true
         * @param {boolean}  value  Connect?
         */
        set: function (value) {
            this.setPropertyValue("connect", value);
            this.invalidateDataRange();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LineSeries.prototype, "tensionX", {
        /**
         * @return {number} Horizontal tension (0-1)
         */
        get: function () {
            return this.getPropertyValue("tensionX");
        },
        /**
         * Horizontal tension setting of the line (0-1).
         *
         * Can be used to create smoothed lines. It works like this:
         *
         * Accepted values are in the range between 0 and 1. The biggest value (1)
         * will mean that the "tension" is very high, so the line is maximally
         * attracted to the points it connects, hence the straight line.
         *
         * Using smaller numbers will "relax" the tension, creating some curving.
         *
         * The smaller the tension setting, the more relaxed the line and the more
         * wide the curve.
         *
         * This setting is for horizontal tension, meaning the curve will bend in
         * such way that it never goes below or above connecting points. To enable
         * vertical bending as well, use `tensionY`.
         *
         * @default 1
         * @param {number}  value  Horizontal tension (0-1)
         */
        set: function (value) {
            this.setPropertyValue("tensionX", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LineSeries.prototype, "tensionY", {
        /**
         * @return {number} Vertical tension (0-1)
         */
        get: function () {
            return this.getPropertyValue("tensionY");
        },
        /**
         * Can be used to create smoothed lines. It works like this:
         *
         * Accepted values are in the range between 0 and 1. The biggest value (1)
         * will mean that the "tension" is very high, so the line is maximally
         * attracted to the points it connects, hence the straight line.
         *
         * Using smaller numbers will "relax" the tension, creating some curving.
         *
         * The smaller the tension setting, the more relaxed the line and the more
         * wide the curve.
         *
         * This setting is for vertical tension, meaning the curve might bend in
         * such way that it will go below or above connected points.
         *
         * Combine this setting with `tensionX` to create beautifully looking
         * smoothed line series.
         *
         * @default 1
         * @param {number}  value  Vertical tension (0-1)
         */
        set: function (value) {
            this.setPropertyValue("tensionY", value, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates elements in related legend container, that mimics the look of this
     * Series.
     *
     * @ignore Exclude from docs
     * @param {Container}  marker  Legend item container
     */
    LineSeries.prototype.createLegendMarker = function (marker) {
        var _this = this;
        var w = marker.pixelWidth;
        var h = marker.pixelHeight;
        marker.disposeChildren();
        var line = marker.createChild(__WEBPACK_IMPORTED_MODULE_8__core_elements_Line__["a" /* Line */]);
        line.shouldClone = false;
        line.copyFrom(this);
        line.x2 = w;
        line.y = h / 2;
        line.visible = true;
        if (this.fillOpacity > 0) {
            var fill = marker.createChild(__WEBPACK_IMPORTED_MODULE_10__core_elements_Rectangle__["a" /* Rectangle */]);
            fill.copyFrom(this);
            fill.width = w;
            fill.height = h;
            fill.y = 0;
            fill.strokeOpacity = 0;
            fill.visible = true;
            line.y = 0;
        }
        __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["eachContinue"](this.bullets.iterator(), function (bullet) {
            if (bullet.copyToLegendMarker) {
                // do not copy bullets with labels
                var hasLabels_1 = false;
                __WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__["each"](bullet.children.iterator(), function (child) {
                    if (child instanceof __WEBPACK_IMPORTED_MODULE_9__core_elements_Label__["a" /* Label */]) {
                        hasLabels_1 = true;
                        return true;
                    }
                });
                if (!hasLabels_1) {
                    var clone = bullet.clone();
                    clone.parent = marker;
                    clone.isMeasured = true;
                    clone.tooltipText = undefined;
                    clone.x = w / 2;
                    if (_this.fillOpacity > 0) {
                        clone.y = 0;
                    }
                    else {
                        clone.y = h / 2;
                    }
                    clone.visible = true;
                    // otherwise will not transit to color after hiding
                    if (!__WEBPACK_IMPORTED_MODULE_13__core_utils_Type__["hasValue"](clone.fill)) {
                        clone.fill = _this.fill;
                    }
                    if (!__WEBPACK_IMPORTED_MODULE_13__core_utils_Type__["hasValue"](clone.stroke)) {
                        clone.stroke = _this.stroke;
                    }
                    return false;
                }
            }
        });
    };
    return LineSeries;
}(__WEBPACK_IMPORTED_MODULE_0__XYSeries__["a" /* XYSeries */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_7__core_Registry__["b" /* registry */].registeredClasses["LineSeries"] = LineSeries;
__WEBPACK_IMPORTED_MODULE_7__core_Registry__["b" /* registry */].registeredClasses["LineSeriesDataItem"] = LineSeriesDataItem;
//# sourceMappingURL=LineSeries.js.map

/***/ }),
/* 114 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return PieSeriesDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PieSeries; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Series__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_elements_Slice__ = __webpack_require__(48);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__axes_AxisLabelCircular__ = __webpack_require__(76);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__PieTick__ = __webpack_require__(167);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_ColorSet__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__core_utils_Ease__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__core_utils_Type__ = __webpack_require__(1);
/**
 * Defines Pie Chart Series.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */












/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
//@todo: sequenced?
/**
 * Defines a [[DataItem]] for [[PieSeries]].
 *
 * @see {@link DataItem}
 */
var PieSeriesDataItem = /** @class */ (function (_super) {
    __extends(PieSeriesDataItem, _super);
    /**
     * Constructor
     */
    function PieSeriesDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "PieSeriesDataItem";
        _this.values.radiusValue = {};
        _this.applyTheme();
        return _this;
    }
    /**
     * Adds an `id` attribute the the slice element and returns its id.
     *
     * @ignore Exclude from docs
     */
    PieSeriesDataItem.prototype.uidAttr = function () {
        return this.slice.uidAttr();
    };
    /**
     * Hide the data item (and corresponding visual elements).
     *
     * @param {number}    duration  Duration (ms)
     * @param {number}    delay     Delay hiding (ms)
     * @param {number}    toValue   Target value for animation
     * @param {string[]}  fields    Fields to animate while hiding
     */
    PieSeriesDataItem.prototype.hide = function (duration, delay, toValue, fields) {
        return _super.prototype.hide.call(this, duration, delay, 0, ["value", "radiusValue"]);
    };
    /**
     * Show hidden data item (and corresponding cisual elements).
     *
     * @param {number}    duration  Duration (ms)
     * @param {number}    delay     Delay hiding (ms)
     * @param {string[]}  fields    Fields to animate while hiding
     */
    PieSeriesDataItem.prototype.show = function (duration, delay, fields) {
        return _super.prototype.show.call(this, duration, delay, ["value", "radiusValue"]);
    };
    Object.defineProperty(PieSeriesDataItem.prototype, "color", {
        /**
         * @return {string} Color
         */
        get: function () {
            return this.properties.color;
        },
        /**
         * Color of the slice.
         *
         * @todo why not Color?
         * @param {string}  value  Color
         */
        set: function (value) {
            this.setProperty("color", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PieSeriesDataItem.prototype, "category", {
        /**
         * @return {string} Category
         */
        get: function () {
            return this.properties.category;
        },
        /**
         * Category.
         *
         * @param {string}  value  Category
         */
        set: function (value) {
            this.setProperty("category", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PieSeriesDataItem.prototype, "radiusValue", {
        /**
         * @return {number} Radius
         */
        get: function () {
            return this.values.radiusValue.value;
        },
        /**
         * Slice's radius, if other than default.
         *
         * @param {number}  value  Radius
         */
        set: function (value) {
            this.setValue("radiusValue", value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates a marker used in the legend for this slice.
     *
     * @ignore Exclude from docs
     * @param {Container}  marker  Marker container
     */
    PieSeriesDataItem.prototype.createLegendMarker = function (marker) {
        this.component.createLegendMarker(marker, this);
    };
    Object.defineProperty(PieSeriesDataItem.prototype, "legendDataItem", {
        /**
         * @return {LegendDataItem<DataItem, IDataItemEvents>} Legend data item
         */
        get: function () {
            return this._legendDataItem;
        },
        /**
         * A legend's data item, that corresponds to this data item.
         *
         * @param {LegendDataItem<DataItem, IDataItemEvents>}  value  Legend data item
         */
        set: function (value) {
            this._legendDataItem = value;
            value.label.dataItem = this;
            value.valueLabel.dataItem = this;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PieSeriesDataItem.prototype, "tick", {
        /**
         * A Pie Tick element, related to this data item. (slice)
         *
         * @readonly
         * @return {PieTick} Tick element
         */
        get: function () {
            if (!this._tick) {
                this._tick = this.component.ticks.create();
                this.addSprite(this._tick);
                this._tick.slice = this.slice;
                this._tick.label = this.label;
            }
            return this._tick;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PieSeriesDataItem.prototype, "label", {
        /**
         * A Label element, related to this data item. (slice)
         *
         * @readonly
         * @return {AxisLabelCircular} Label element
         */
        get: function () {
            if (!this._label) {
                this._label = this.component.labels.create();
                this.addSprite(this._label);
            }
            return this._label;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PieSeriesDataItem.prototype, "slice", {
        /**
         * A Slice element, related to this data item. (slice)
         *
         * @readonly
         * @return {Slice} Slice element
         */
        get: function () {
            if (!this._slice) {
                this._slice = this.component.slices.create();
                this.addSprite(this._slice);
            }
            return this._slice;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PieSeriesDataItem.prototype, "hiddenInLegend", {
        /**
         * @return {boolean} Disabled in legend?
         */
        get: function () {
            return this.properties.hiddenInLegend;
        },
        /**
         * Should dataItem (slice) be hidden in legend?
         *
         * @param {boolean} value Visible in legend?
         */
        set: function (value) {
            this.setProperty("hiddenInLegend", value);
        },
        enumerable: true,
        configurable: true
    });
    return PieSeriesDataItem;
}(__WEBPACK_IMPORTED_MODULE_0__Series__["b" /* SeriesDataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Defines [[Series]] for a slice series on a Pie chart.
 *
 * @see {@link IPieSeriesEvents} for a list of available Events
 * @see {@link IPieSeriesAdapters} for a list of available Adapters
 * @todo Example
 * @important
 */
var PieSeries = /** @class */ (function (_super) {
    __extends(PieSeries, _super);
    /**
     * Constructor
     */
    function PieSeries() {
        var _this = _super.call(this) || this;
        _this.className = "PieSeries";
        _this.alignLabels = true;
        _this.startAngle = -90;
        _this.endAngle = 270;
        _this.colors = new __WEBPACK_IMPORTED_MODULE_6__core_utils_ColorSet__["a" /* ColorSet */]();
        _this.colors.step = 1;
        _this.isMeasured = true;
        var slicesContainer = _this.createChild(__WEBPACK_IMPORTED_MODULE_5__core_Container__["a" /* Container */]);
        slicesContainer.shouldClone = false;
        slicesContainer.isMeasured = false;
        _this.slicesContainer = slicesContainer;
        var ticksContainer = _this.createChild(__WEBPACK_IMPORTED_MODULE_5__core_Container__["a" /* Container */]);
        ticksContainer.shouldClone = false;
        ticksContainer.isMeasured = false;
        ticksContainer.layout = "none";
        _this.ticksContainer = ticksContainer;
        var labelsContainer = _this.createChild(__WEBPACK_IMPORTED_MODULE_5__core_Container__["a" /* Container */]);
        labelsContainer.shouldClone = false;
        labelsContainer.isMeasured = false;
        labelsContainer.layout = "none";
        _this.labelsContainer = labelsContainer;
        _this.bulletsContainer.toFront();
        _this.initSlice(__WEBPACK_IMPORTED_MODULE_1__core_elements_Slice__["a" /* Slice */]);
        // Create tick list
        var tick = new __WEBPACK_IMPORTED_MODULE_3__PieTick__["a" /* PieTick */]();
        tick.isMeasured = false;
        _this.ticks = new __WEBPACK_IMPORTED_MODULE_4__core_utils_List__["e" /* ListTemplate */](tick);
        // Create labels list
        // @todo create a labelText/labelHTML properties just like
        // tooltipText/tooltipHTML
        var label = new __WEBPACK_IMPORTED_MODULE_2__axes_AxisLabelCircular__["a" /* AxisLabelCircular */]();
        label.text = "{category}: {value.percent.formatNumber('#.0')}%";
        label.isMeasured = false;
        label.radius = 25;
        label.padding(5, 5, 5, 5);
        label.renderingFrequency = 2;
        _this.labels = new __WEBPACK_IMPORTED_MODULE_4__core_utils_List__["e" /* ListTemplate */](label);
        // Make all slices focusable
        _this.skipFocusThreshold = 50;
        //let hiddenState = this.hiddenState;
        //hiddenState.properties.opacity = 1;
        //hiddenState.properties.endAngle = -90;
        //hiddenState.properties.startAngle = -90;
        var defaultState = _this.defaultState;
        defaultState.transitionEasing = __WEBPACK_IMPORTED_MODULE_10__core_utils_Ease__["sinOut"];
        var hoverState = _this.slices.template.states.create("hover");
        hoverState.properties.scale = 1.05;
        // Accessibility
        _this.itemReaderText = "{category}: {value.percent.formatNumber('#.#')}%";
        _this.applyTheme();
        return _this;
    }
    /**
     * Sets defaults that instantiate some objects that rely on parent, so they
     * cannot be set in constructor.
     */
    PieSeries.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);
        if (!__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["hasValue"](this.readerTitle)) {
            this.readerTitle = this.language.translate("Pie Slice Series");
        }
    };
    /**
     * Returns a new/empty DataItem of the type appropriate for this object.
     *
     * @see {@link DataItem}
     * @return {PieSeriesDataItem} Data Item
     */
    PieSeries.prototype.createDataItem = function () {
        return new PieSeriesDataItem();
    };
    /**
     * Creates and returns a new slice element.
     *
     * @param  {typeof Slice}  sliceType  Type of the slice element
     * @return {Slice}                    Slice
     */
    PieSeries.prototype.initSlice = function (sliceType) {
        // Create a slice template
        var slice = new sliceType();
        slice.isMeasured = false;
        slice.defaultState.properties.scale = 1;
        slice.observe("scale", this.handleSliceScale, this);
        slice.observe(["dx", "dy", "x", "y", "shiftRadius"], this.handleSliceMove, this);
        slice.tooltipText = "{category}: {value.percent.formatNumber('#.#')}% ({value.value})";
        // Create slice hover state
        slice.states.create("hover");
        var defaultState = slice.defaultState;
        defaultState.properties.shiftRadius = 0;
        slice.togglable = true;
        slice.events.on("toggled", function (event) {
            event.target.hideTooltip();
        });
        var activeState = slice.states.create("active");
        activeState.properties.shiftRadius = 0.10;
        var hiddenState = slice.hiddenState;
        hiddenState.properties.visible = true;
        hiddenState.properties.opacity = 1;
        // Create slices list
        this.slices = new __WEBPACK_IMPORTED_MODULE_4__core_utils_List__["e" /* ListTemplate */](slice);
        return slice;
    };
    /**
     * (Re)validates the whole series, effectively causing it to redraw.
     *
     * @ignore Exclude from docs
     */
    PieSeries.prototype.validate = function () {
        if (Math.abs(this.startAngle - this.endAngle) < 0.01) {
            return;
        }
        // so that radius would be updated
        if (this.chart.invalid) {
            this.chart.validate();
        }
        this._leftItems = [];
        this._rightItems = [];
        this._currentStartAngle = this.startAngle;
        this._arcRect = __WEBPACK_IMPORTED_MODULE_8__core_utils_Math__["getArcRect"](this.startAngle, this.endAngle);
        this._maxRadiusPercent = 0;
        for (var i = this.startIndex; i < this.endIndex; i++) {
            var dataItem = this.dataItems.getIndex(i);
            var radiusValuePercent = dataItem.values.radiusValue.percent;
            if (radiusValuePercent > this._maxRadiusPercent) {
                this._maxRadiusPercent = radiusValuePercent;
            }
        }
        _super.prototype.validate.call(this);
        if (this.alignLabels) {
            if (this.startAngle > this.endAngle) {
                this._rightItems.reverse();
            }
            else {
                this._leftItems.reverse();
            }
            this.arrangeLabels(this._rightItems);
            this.arrangeLabels(this._leftItems);
        }
    };
    /**
     * Validates data item's element, effectively redrawing it.
     *
     * @ignore Exclude from docs
     * @param {PieSeriesDataItem}  dataItem  Data item
     */
    PieSeries.prototype.validateDataElement = function (dataItem) {
        var _this = this;
        if (this.radius > 0) {
            var percent = dataItem.values.value.percent;
            //if (percent > 0) {
            dataItem.__disabled = false;
            // SLICE
            var slice_1 = dataItem.slice;
            slice_1.parent = this.slicesContainer;
            slice_1.radius = this.radius;
            if (__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isNumber"](dataItem.radiusValue)) {
                slice_1.radius *= dataItem.values.radiusValue.percent / this._maxRadiusPercent;
            }
            slice_1.innerRadius = this.innerRadius;
            slice_1.startAngle = this._currentStartAngle;
            if (slice_1.fill == undefined) {
                slice_1.fill = this.colors.getIndex(dataItem.index * this.colors.step);
            }
            if (slice_1.stroke == undefined) {
                slice_1.stroke = this.colors.getIndex(dataItem.index * this.colors.step);
            }
            slice_1.arc = dataItem.values.value.percent * (this.endAngle - this.startAngle) / 100;
            // LABEL
            var label = dataItem.label;
            label.parent = this.labelsContainer;
            var tick = dataItem.tick;
            tick.parent = this.ticksContainer;
            var normalizedMiddleAngle = (slice_1.middleAngle + 360) % 360; // force angle to be 0 - 360;
            var point = void 0;
            if (this.alignLabels) {
                var x = tick.length + label.radius;
                label.verticalCenter = "middle";
                var arcRect = this._arcRect;
                // right half
                if (normalizedMiddleAngle >= 270 || normalizedMiddleAngle <= 91) { // 91 makes less chances for flickering
                    x += (arcRect.width + arcRect.x) * this.radius;
                    label.horizontalCenter = "left";
                    this._rightItems.push(dataItem);
                }
                // left half
                else {
                    x -= arcRect.x * this.radius;
                    label.horizontalCenter = "right";
                    this._leftItems.push(dataItem);
                    x *= -1;
                }
                var distance = this.radius + tick.length + label.radius;
                point = { x: x, y: slice_1.iy * distance };
            }
            else {
                var x = slice_1.ix * slice_1.radius;
                var y = slice_1.iy * slice_1.radiusY;
                point = label.fixPoint({ x: x, y: y }, slice_1.radius);
            }
            label.moveTo(point);
            this._currentStartAngle += slice_1.arc;
            // Apply accessibility
            if (this.itemsFocusable()) {
                slice_1.role = "menuitem";
                slice_1.focusable = true;
            }
            else {
                slice_1.role = "listitem";
                slice_1.focusable = false;
            }
            // Apply screen reader label
            if (slice_1.focusable) {
                slice_1.events.once("focus", function (ev) {
                    slice_1.readerTitle = _this.populateString(_this.itemReaderText, dataItem);
                });
                slice_1.events.once("blur", function (ev) {
                    slice_1.readerTitle = "";
                });
            }
            if (slice_1.hoverable) {
                slice_1.events.once("over", function (ev) {
                    slice_1.readerTitle = _this.populateString(_this.itemReaderText, dataItem);
                });
                slice_1.events.once("out", function (ev) {
                    slice_1.readerTitle = "";
                });
            }
            // do this at the end, otherwise bullets won't be positioned properly
            _super.prototype.validateDataElement.call(this, dataItem);
            //}
            //else {
            //	dataItem.__disabled = true;
            //}
        }
    };
    /**
     * Arranges slice labels according to position settings.
     *
     * @ignore Exclude from docs
     * @param {this["_dataItem"][]}  dataItems  Data items
     */
    PieSeries.prototype.arrangeLabels = function (dataItems) {
        for (var i = 0; i < dataItems.length; i++) {
            var dataItem = dataItems[i];
            var label = dataItem.label;
            if (label) {
                if (i < dataItems.length - 1) {
                    var nextLabel = this.getNextLabel(i + 1, dataItems);
                    if (label.invalid) {
                        label.validate();
                    }
                    var bottom = label.pixelY + label.measuredHeight;
                    if (nextLabel) {
                        if (nextLabel.y < bottom) {
                            nextLabel.y = bottom;
                        }
                    }
                }
            }
        }
    };
    /**
     * Returns the next label according to `index`.
     *
     * @param  {number}              index      Current index
     * @param  {PieSerisDataItem[]}  dataItems  Data items
     * @return {AxisLabelCircular}              Label element
     */
    PieSeries.prototype.getNextLabel = function (index, dataItems) {
        if (dataItems.length >= index) {
            var nextDataItem = dataItems[index];
            if (nextDataItem) {
                if (nextDataItem.label) {
                    return nextDataItem.label;
                }
                else {
                    return this.getNextLabel(index + 1, dataItems);
                }
            }
        }
    };
    Object.defineProperty(PieSeries.prototype, "radius", {
        /**
         * @ignore Exclude from docs
         * @return {number} Radius
         */
        get: function () {
            return this.getPropertyValue("radius");
        },
        /**
         * Outer radius for the series' slices in pixels.
         *
         * @ignore Exclude from docs
         * @todo Redo so that users can set it
         * @param {number}  value  Radius
         */
        set: function (value) {
            this.setPropertyValue("radius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PieSeries.prototype, "innerRadius", {
        /**
         * @ignore Exclude from docs
         * @return {number} Radius
         */
        get: function () {
            return this.getPropertyValue("innerRadius");
        },
        /**
         * Inner radius for the series' slices in pixels.
         *
         * @ignore Exclude from docs
         * @todo Redo so that users can set it
         * @param {number}  value  Radius
         */
        set: function (value) {
            this.setPropertyValue("innerRadius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PieSeries.prototype, "startAngle", {
        /**
         * @ignore Exclude from docs
         * @return {number} Angle
         */
        get: function () {
            return this.getPropertyValue("startAngle");
        },
        /**
         * Start angle for the series' slices in degrees. (0-360)
         *
         * @ignore Exclude from docs
         * @todo Redo so that users can set it
         * @param {number}  value  Angle
         */
        set: function (value) {
            this.setPropertyValue("startAngle", __WEBPACK_IMPORTED_MODULE_8__core_utils_Math__["normalizeAngle"](value), true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PieSeries.prototype, "endAngle", {
        /**
         * @ignore Exclude from docs
         * @return {number} Angle
         */
        get: function () {
            return this.getPropertyValue("endAngle");
        },
        /**
         * End angle for the series' slices in degrees. (0-360)
         *
         * @ignore Exclude from docs
         * @todo Redo so that users can set it
         * @param {number}  value  Angle
         */
        set: function (value) {
            this.setPropertyValue("endAngle", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PieSeries.prototype, "alignLabels", {
        /**
         * @return {boolean} Align labels?
         */
        get: function () {
            return this.getPropertyValue("alignLabels");
        },
        /**
         * Align labels into nice vertical columns?
         *
         * This will ensure that labels never overlap with each other.
         *
         * Arranging labels into columns makes them more readble, and better user
         * experience.
         *
         * If set to `false` labels will be positioned at `label.radius` distance,
         * and may, in some cases, overlap.
         *
         * @default true
         * @param {boolean}  value  Align labels?
         */
        set: function (value) {
            this.setPropertyValue("alignLabels", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PieSeries.prototype, "colors", {
        /**
         * @return {ColorSet} Color set
         */
        get: function () {
            return this.getPropertyValue("colors");
        },
        /**
         * A color set to be used for slices.
         *
         * For each new subsequent slice, the chart will assign the next color in
         * this set.
         *
         * @param {ColorSet}  value  Color set
         */
        set: function (value) {
            this.setPropertyValue("colors", value, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Binds related legend data item's visual settings to this series' visual
     * settings.
     *
     * @ignore Exclude from docs
     * @param {Container}          marker    Container
     * @param {this["_dataItem"]}  dataItem  Data item
     */
    PieSeries.prototype.createLegendMarker = function (marker, dataItem) {
        __WEBPACK_IMPORTED_MODULE_9__core_utils_Iterator__["each"](marker.children.iterator(), function (child) {
            var slice = dataItem.slice;
            // todo: make an easy possibility to bind visual properties
            child.bind("fill", slice);
            child.bind("stroke", slice);
            child.bind("fillOpacity", slice);
            child.bind("strokeOpacity", slice);
        });
    };
    /**
     * Positions series bullet.
     *
     * @ignore Exclude from docs
     * @param {Bullet}  bullet  Bullet
     */
    PieSeries.prototype.positionBullet = function (bullet) {
        _super.prototype.positionBullet.call(this, bullet);
        var dataItem = bullet.dataItem;
        var slice = dataItem.slice;
        var locationX = bullet.locationX;
        if (!__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isNumber"](locationX)) {
            locationX = 0.5;
        }
        var locationY = bullet.locationY;
        if (!__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isNumber"](locationY)) {
            locationY = 1;
        }
        var angle = slice.startAngle + slice.arc * locationX;
        var radius = locationY * slice.radius;
        bullet.x = radius * __WEBPACK_IMPORTED_MODULE_8__core_utils_Math__["cos"](angle);
        bullet.y = radius * __WEBPACK_IMPORTED_MODULE_8__core_utils_Math__["sin"](angle);
    };
    /**
     * Repositions bullets when slice's size changes.
     *
     * @ignore Exclude from docs
     * @param {AMEvent<Slice, ISpriteEvents>["propertychanged"]}  event  Event
     */
    PieSeries.prototype.handleSliceScale = function (event) {
        var _this = this;
        var slice = event.target;
        var dataItem = slice.dataItem;
        __WEBPACK_IMPORTED_MODULE_9__core_utils_Iterator__["each"](dataItem.bullets.iterator(), function (a) {
            var value = a[1];
            _this.positionBullet(value);
        });
    };
    /**
     * Repositions bullet and labels when slice moves.
     *
     * @ignore Exclude from docs
     * @param {AMEvent<Slice, ISpriteEvents>["propertychanged"]}  event  Event
     */
    PieSeries.prototype.handleSliceMove = function (event) {
        if (!this.alignLabels) {
            var slice = event.target;
            var dataItem = slice.dataItem;
            // moving textelement, as label dx and dy are already employed for aligning
            //@labeltodo
            dataItem.label.dx = slice.dx + slice.pixelX;
            dataItem.label.dy = slice.dy + slice.pixelY;
        }
    };
    /**
     * Copies all properties from another instance of [[PieSeries]].
     *
     * @param {ColumnSeries}  source  Source series
     */
    PieSeries.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        this.slices.template.copyFrom(source.slices.template);
        this.labels.template.copyFrom(source.labels.template);
        this.ticks.template.copyFrom(source.ticks.template);
    };
    PieSeries.prototype.getContainerBBox = function () {
        var chart = this.chart;
        if (chart) {
            return __WEBPACK_IMPORTED_MODULE_8__core_utils_Math__["getArcRect"](chart.startAngle, chart.endAngle, this.radius);
        }
        else {
            return __WEBPACK_IMPORTED_MODULE_8__core_utils_Math__["getArcRect"](this.startAngle, this.endAngle, this.radius);
        }
    };
    return PieSeries;
}(__WEBPACK_IMPORTED_MODULE_0__Series__["a" /* Series */]));

/**
 * bboxter class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_7__core_Registry__["b" /* registry */].registeredClasses["PieSeries"] = PieSeries;
__WEBPACK_IMPORTED_MODULE_7__core_Registry__["b" /* registry */].registeredClasses["PieSeriesDataItem"] = PieSeriesDataItem;
//# sourceMappingURL=PieSeries.js.map

/***/ }),
/* 115 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return FlowDiagramDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FlowDiagram; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Chart__ = __webpack_require__(86);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_Dictionary__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__elements_FlowDiagramNode__ = __webpack_require__(83);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__elements_FlowDiagramLink__ = __webpack_require__(84);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_rendering_fills_LinearGradientModifier__ = __webpack_require__(106);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_utils_ColorSet__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_utils_Color__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__core_utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__core_utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__core_utils_Type__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__core_utils_Number__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__core_utils_Order__ = __webpack_require__(72);
/**
 * FlowDiagram module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */















/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
//@todo rearange notes after dragged
/**
 * Defines a [[DataItem]] for [[FlowDiagram]].
 *
 * @see {@link DataItem}
 */
var FlowDiagramDataItem = /** @class */ (function (_super) {
    __extends(FlowDiagramDataItem, _super);
    /**
     * Constructor
     */
    function FlowDiagramDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "FlowDiagramDataItem";
        _this.values.value = {};
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(FlowDiagramDataItem.prototype, "fromName", {
        /**
         * @return {string} name
         */
        get: function () {
            return this.properties.fromName;
        },
        /**
         * Source node's name.
         *
         * @param {string}  value  Name
         */
        set: function (value) {
            this.setProperty("fromName", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlowDiagramDataItem.prototype, "toName", {
        /**
         * @return {string} name
         */
        get: function () {
            return this.properties.toName;
        },
        /**
         * Destination node's name.
         *
         * @param {string}  value  Name
         */
        set: function (value) {
            this.setProperty("toName", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlowDiagramDataItem.prototype, "color", {
        /**
         * @return {string} color
         */
        get: function () {
            return this.properties.color;
        },
        /**
         * Node color
         *
         * @param {string}  value  Name
         */
        set: function (value) {
            this.setProperty("color", Object(__WEBPACK_IMPORTED_MODULE_9__core_utils_Color__["e" /* toColor */])(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlowDiagramDataItem.prototype, "value", {
        /**
         * @return {number} Value
         */
        get: function () {
            return this.values.value.value;
        },
        /**
         * Link's value.
         *
         * @param {number}  value  Value
         */
        set: function (value) {
            this.setValue("value", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlowDiagramDataItem.prototype, "link", {
        /**
         * A visual element, representing link between the source and target nodes.
         *
         * Link's actual thickness will be determined by `value` of this link and
         * `value` of the source node.
         *
         * @readonly
         * @return {FlowDiagramLink} Link element
         */
        get: function () {
            if (!this._link) {
                this._link = this.component.links.create();
                this.addSprite(this._link);
            }
            return this._link;
        },
        enumerable: true,
        configurable: true
    });
    return FlowDiagramDataItem;
}(__WEBPACK_IMPORTED_MODULE_0__Chart__["b" /* ChartDataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a Pie chart
 * @see {@link IFlowDiagramEvents} for a list of available Events
 * @see {@link IFlowDiagramAdapters} for a list of available Adapters
 * @important
 */
var FlowDiagram = /** @class */ (function (_super) {
    __extends(FlowDiagram, _super);
    /**
     * Constructor
     */
    function FlowDiagram() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * A Color Set to use when applying/generating colors for each subsequent
         * node.
         *
         * @type {ColorSet}
         */
        _this.colors = new __WEBPACK_IMPORTED_MODULE_8__core_utils_ColorSet__["a" /* ColorSet */]();
        /**
         * A list of chart's FlowDiagram nodes.
         *
         * @param {DictionaryTemplate<string, FlowDiagramNode>}
         */
        _this.nodes = new __WEBPACK_IMPORTED_MODULE_2__core_utils_Dictionary__["c" /* DictionaryTemplate */](new __WEBPACK_IMPORTED_MODULE_5__elements_FlowDiagramNode__["a" /* FlowDiagramNode */]());
        /**
         * A list of FlowDiagram links connecting nodes.
         *
         * @param {ListTemplate<FlowDiagramLink>}
         */
        _this.links = new __WEBPACK_IMPORTED_MODULE_1__core_utils_List__["e" /* ListTemplate */](new __WEBPACK_IMPORTED_MODULE_6__elements_FlowDiagramLink__["a" /* FlowDiagramLink */]());
        _this.className = "FlowDiagram";
        _this.nodePadding = 20;
        _this.sortBy = "none";
        _this.sequencedInterpolation = true;
        _this.colors.step = 2;
        _this.minNodeSize = 0.02;
        var linksContainer = _this.chartContainer.createChild(__WEBPACK_IMPORTED_MODULE_3__core_Container__["a" /* Container */]);
        linksContainer.shouldClone = false;
        linksContainer.layout = "none";
        linksContainer.isMeasured = false;
        _this.linksContainer = linksContainer;
        var nodesContainer = _this.chartContainer.createChild(__WEBPACK_IMPORTED_MODULE_3__core_Container__["a" /* Container */]);
        nodesContainer.shouldClone = false;
        nodesContainer.layout = "none";
        nodesContainer.isMeasured = false;
        _this.nodesContainer = nodesContainer;
        // this data item holds sums, averages, etc
        _this.dataItem = _this.createDataItem();
        _this.dataItem.component = _this;
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * (Re)validates chart's data, effectively causing the chart to redraw.
     *
     * @ignore Exclude from docs
     */
    FlowDiagram.prototype.validateData = function () {
        var _this = this;
        // reset toNodes and fromNodes
        __WEBPACK_IMPORTED_MODULE_10__core_utils_Iterator__["each"](this.nodes.iterator(), function (strNode) {
            var node = strNode[1];
            node.incomingDataItems.clear();
            node.outgoingDataItems.clear();
        });
        __WEBPACK_IMPORTED_MODULE_10__core_utils_Iterator__["each"](this.nodes.iterator(), function (strNode) {
            var node = strNode[1];
            _this.nodes.removeKey(strNode[0]);
            node.dispose();
        });
        this.links.clear();
        _super.prototype.validateData.call(this);
        var sum = 0;
        var count = 0;
        var low;
        var high;
        // build blocks
        __WEBPACK_IMPORTED_MODULE_10__core_utils_Iterator__["each"](this.dataItems.iterator(), function (dataItem) {
            var fromName = dataItem.fromName;
            if (fromName) {
                var node = _this.nodes.getKey(fromName);
                if (!node) {
                    node = _this.nodes.create(fromName);
                    node.name = fromName;
                    node.chart = _this;
                }
                dataItem.addSprite(node);
                dataItem.fromNode = node;
                dataItem.fromNode.outgoingDataItems.push(dataItem);
            }
            var toName = dataItem.toName;
            if (toName) {
                var node = _this.nodes.getKey(toName);
                if (!node) {
                    node = _this.nodes.create(toName);
                    node.name = toName;
                    node.chart = _this;
                    if (!node.dataItem) {
                        dataItem.addSprite(node);
                    }
                }
                dataItem.toNode = node;
                dataItem.toNode.incomingDataItems.push(dataItem);
            }
            if (!dataItem.fromNode) {
                var strokeModifier = new __WEBPACK_IMPORTED_MODULE_7__core_rendering_fills_LinearGradientModifier__["a" /* LinearGradientModifier */]();
                strokeModifier.opacities = [0, 1];
                dataItem.link.strokeModifier = strokeModifier;
            }
            if (!dataItem.toNode) {
                var fillModifier = new __WEBPACK_IMPORTED_MODULE_7__core_rendering_fills_LinearGradientModifier__["a" /* LinearGradientModifier */]();
                fillModifier.opacities = [1, 0];
                dataItem.link.strokeModifier = fillModifier;
            }
            var value = dataItem.value;
            if (__WEBPACK_IMPORTED_MODULE_12__core_utils_Type__["isNumber"](value)) {
                sum += value;
                count++;
                if (low > value || !__WEBPACK_IMPORTED_MODULE_12__core_utils_Type__["isNumber"](low)) {
                    low = value;
                }
                if (high < value || !__WEBPACK_IMPORTED_MODULE_12__core_utils_Type__["isNumber"](high)) {
                    high = value;
                }
            }
        });
        var key = "value";
        this.dataItem.setCalculatedValue(key, high, "high");
        this.dataItem.setCalculatedValue(key, low, "low");
        this.dataItem.setCalculatedValue(key, sum, "sum");
        this.dataItem.setCalculatedValue(key, sum / count, "average");
        this.dataItem.setCalculatedValue(key, count, "count");
        __WEBPACK_IMPORTED_MODULE_10__core_utils_Iterator__["each"](this.nodes.iterator(), function (strNode) {
            var node = strNode[1];
            if (node.fill instanceof __WEBPACK_IMPORTED_MODULE_9__core_utils_Color__["a" /* Color */]) {
                node.color = node.fill;
            }
            if (node.color == undefined) {
                node.color = _this.colors.next();
            }
            if (node.dataItem.color != undefined) {
                node.color = node.dataItem.color;
            }
            _this.getNodeValue(node);
        });
        this.sortNodes();
        if (this.interpolationDuration > 0) {
            this.events.once("validated", this.appear, this);
        }
    };
    FlowDiagram.prototype.handleDataItemWorkingValueChange = function (event) {
        this.invalidate();
    };
    /**
     * [appear description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    FlowDiagram.prototype.appear = function () {
        this.hide(0);
        this.show();
    };
    /**
     * Sorts nodes by either their values or names, based on `sortBy` setting.
     */
    FlowDiagram.prototype.sortNodes = function () {
        if (this.sortBy == "name") {
            this._sorted = this.nodes.sortedIterator();
        }
        else if (this.sortBy == "value") {
            this._sorted = __WEBPACK_IMPORTED_MODULE_10__core_utils_Iterator__["sort"](this.nodes.iterator(), function (x, y) { return __WEBPACK_IMPORTED_MODULE_14__core_utils_Order__["b" /* reverse */](__WEBPACK_IMPORTED_MODULE_13__core_utils_Number__["order"](x[1].value, y[1].value)); });
        }
        else {
            this._sorted = this.nodes.iterator();
        }
    };
    /**
     * Updates a cummulative value of the node.
     *
     * A node's value is determined by summing values of all of the incoming
     * links or all of the outgoing links, whichever results in bigger number.
     *
     * @param {FlowDiagramNode}  node  Node value
     */
    FlowDiagram.prototype.getNodeValue = function (node) {
        var fromSum = 0;
        var toSum = 0;
        __WEBPACK_IMPORTED_MODULE_10__core_utils_Iterator__["each"](node.incomingDataItems.iterator(), function (dataItem) {
            fromSum += dataItem.getWorkingValue("value");
        });
        __WEBPACK_IMPORTED_MODULE_10__core_utils_Iterator__["each"](node.outgoingDataItems.iterator(), function (dataItem) {
            toSum += dataItem.getWorkingValue("value");
        });
        node.value = __WEBPACK_IMPORTED_MODULE_11__core_utils_Math__["max"](fromSum, toSum);
        this.fixMin(node);
    };
    ;
    /**
     * Limit size of a node for it not to be too small
     * @ignore
     */
    FlowDiagram.prototype.fixMin = function (node) {
        var minNodeSize = this.minNodeSize;
        if (minNodeSize > 0) {
            var total = this.dataItem.values.value.sum;
            if (node.value < total * minNodeSize) {
                node.value = total * minNodeSize;
            }
        }
    };
    /**
     * Changes the sort type of the nodes.
     *
     * This will actually reshuffle nodes using nice animation.
     */
    FlowDiagram.prototype.changeSorting = function () {
        this.sortNodes();
    };
    /**
     * Sets defaults that instantiate some objects that rely on parent, so they
     * cannot be set in constructor.
     */
    FlowDiagram.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);
        // Add a default screen reader title for accessibility
        // This will be overridden in screen reader if there are any `titles` set
        if (!__WEBPACK_IMPORTED_MODULE_12__core_utils_Type__["hasValue"](this.readerTitle)) {
            this.readerTitle = this.language.translate("Flow diagram");
        }
    };
    /**
     * Creates and returns a new data item.
     *
     * @return {this} Data item
     */
    FlowDiagram.prototype.createDataItem = function () {
        return new FlowDiagramDataItem();
    };
    Object.defineProperty(FlowDiagram.prototype, "nodePadding", {
        /**
         * @return {number} Padding (px)
         */
        get: function () {
            return this.getPropertyValue("nodePadding");
        },
        /**
         * Padding for node square in pixels.
         *
         * Padding will add extra space around node's name label.
         *
         * @param {number} value Padding (px)
         */
        set: function (value) {
            this.setPropertyValue("nodePadding", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlowDiagram.prototype, "sortBy", {
        /**
         * @returns {"none" | name" | "value"} Node sorting
         */
        get: function () {
            return this.getPropertyValue("sortBy");
        },
        /**
         * Sort nodes by "name" or "value" or do not sort at all. If not sorted, nodes will appear in the same order as they are in the data.
         * @default "none"
         * @param {"none" | "name" | "value"}  value  Node sorting
         */
        set: function (value) {
            this.setPropertyValue("sortBy", value);
            this.changeSorting();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlowDiagram.prototype, "minNodeSize", {
        /**
         * @returns {number} min node size
         */
        get: function () {
            return this.getPropertyValue("minNodeSize");
        },
        /**
         * Sometimes nodes can get very small if their value is little. With this setting you
         * can set min size of a node (this is relative value from the total size of all nodes)
         * @default 0.02
         * @param {"none" | "name" | "value"}  value  Node sorting
         */
        set: function (value) {
            this.setPropertyValue("minNodeSize", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return FlowDiagram;
}(__WEBPACK_IMPORTED_MODULE_0__Chart__["a" /* Chart */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_4__core_Registry__["b" /* registry */].registeredClasses["FlowDiagram"] = FlowDiagram;
//# sourceMappingURL=FlowDiagram.js.map

/***/ }),
/* 116 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AxisRendererCircular; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__AxisRenderer__ = __webpack_require__(65);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AxisFillCircular__ = __webpack_require__(135);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__GridCircular__ = __webpack_require__(136);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__AxisLabelCircular__ = __webpack_require__(76);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_utils_Type__ = __webpack_require__(1);
/**
 * Module, defining Axis Renderer for circular axes.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */










/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * A renderer for circular axis.
 */
var AxisRendererCircular = /** @class */ (function (_super) {
    __extends(AxisRendererCircular, _super);
    /**
     * Constructor.
     *
     * @param {Axis} axis Related axis
     */
    function AxisRendererCircular() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * @ignore
         */
        _this.pixelRadiusReal = 0;
        // axis.layout = "none"; // does not trigger redraw when size changes
        _this.layout = "none";
        _this.className = "AxisRendererCircular";
        _this.isMeasured = false;
        _this.startAngle = -90;
        _this.endAngle = 270;
        _this.radius = Object(__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__["c" /* percent */])(100);
        _this.isMeasured = false;
        _this.grid.template.location = 0;
        _this.labels.template.location = 0;
        _this.labels.template.isMeasured = true;
        _this.labels.template.radius = 15;
        _this.ticks.template.location = 0;
        _this.ticks.template.pixelPerfect = false;
        _this.tooltipLocation = 0;
        _this.line.strokeOpacity = 0;
        _this.applyTheme();
        return _this;
    }
    /**
    * @ignore
    */
    AxisRendererCircular.prototype.setAxis = function (axis) {
        var _this = this;
        _super.prototype.setAxis.call(this, axis);
        axis.isMeasured = false;
        // modify x and y so that tooltip would always be on circle
        var tooltip = axis.tooltip;
        tooltip.adapter.add("dx", function (x, target) {
            var point = __WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__["svgPointToSprite"]({ x: target.pixelX, y: target.pixelY }, _this);
            return _this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;
        });
        tooltip.adapter.add("dy", function (y, target) {
            var point = __WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__["svgPointToSprite"]({ x: target.pixelX, y: target.pixelY }, _this);
            return _this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;
        });
    };
    /**
     * Validates Axis renderer.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     */
    AxisRendererCircular.prototype.validate = function () {
        // so that radius would be updated
        if (this.chart && this.chart.invalid) {
            this.chart.validate();
        }
        _super.prototype.validate.call(this);
    };
    Object.defineProperty(AxisRendererCircular.prototype, "axisLength", {
        /**
         * Returns actual length of the Axis, in pixels.
         *
         * @return {number} Length (px)
         */
        get: function () {
            return 2 * Math.PI * this.pixelRadius;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRendererCircular.prototype, "radius", {
        /**
         * @return {number | Percent} Outer radius
         */
        get: function () {
            return this.getPropertyValue("radius");
        },
        /**
         * Outer radius of the axis.
         *
         * Can be absolute (px) or relative ([[Percent]]).
         *
         * @param {number | Percent}  value  Outer radius
         */
        set: function (value) {
            this.setPropertyValue("radius", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRendererCircular.prototype, "pixelRadius", {
        /**
         * Outer radius in pixels.
         *
         * @return {number} Outer radius (px)
         */
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__["relativeRadiusToValue"](this.radius, this.pixelRadiusReal);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRendererCircular.prototype, "innerRadius", {
        /**
         * @return {number | Percent} Inner radius
         */
        get: function () {
            return this.getPropertyValue("innerRadius");
        },
        /**
         * Inner radius of the axis.
         *
         * Can be absolute (px) or relative ([[Percent]]).
         *
         * @param {number | Percent}  value  Inner radius
         */
        set: function (value) {
            this.setPropertyValue("innerRadius", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRendererCircular.prototype, "pixelInnerRadius", {
        /**
         * Inner radius in pixels.
         *
         * @return {number} Inner radius (px)
         */
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__["relativeRadiusToValue"](this.innerRadius, this.pixelRadiusReal) || 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Converts relative position on axis to point coordinates.
     *
     * @param  {number}  position  Position (0-1)
     * @return {IPoint}            Point
     */
    AxisRendererCircular.prototype.positionToPoint = function (position) {
        var coordinate = this.positionToCoordinate(position);
        var angle = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;
        return { x: this.pixelRadius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["cos"](angle), y: this.pixelRadius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["sin"](angle) };
    };
    /**
     * Converts relative position on axis to angle.
     *
     * @todo Description (units)
     * @param  {number}  position  Position (0-1)
     * @return {number}            Angle
     */
    AxisRendererCircular.prototype.positionToAngle = function (position) {
        var axis = this.axis;
        var arc = (this.endAngle - this.startAngle) / (axis.end - axis.start);
        var angle;
        if (axis.renderer.inversed) {
            angle = this.startAngle + (axis.end - position) * arc;
        }
        else {
            angle = this.startAngle + (position - axis.start) * arc;
        }
        return __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["round"](angle, 3);
    };
    /**
     * Updates and positions the axis line element.
     *
     * @ignore Exclude from docs
     */
    AxisRendererCircular.prototype.updateAxisLine = function () {
        var element = this.line.element;
        // @todo Is this needed?
        this.chart;
        var radius = this.pixelRadius;
        var startAngle = this.startAngle;
        var endAngle = this.endAngle;
        var arc = endAngle - startAngle;
        element.attr({ "d": __WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__["moveTo"]({ x: radius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["cos"](startAngle), y: radius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["sin"](startAngle) }) + __WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__["arcTo"](startAngle, arc, radius, radius) });
    };
    /**
     * Updates and positions a grid element.
     *
     * @ignore Exclude from docs
     * @param {Grid}    grid         Grid element
     * @param {number}  position     Starting position
     * @param {number}  endPosition  End position
     */
    AxisRendererCircular.prototype.updateGridElement = function (grid, position, endPosition) {
        position = position + (endPosition - position) * grid.location;
        var point = this.positionToPoint(position);
        if (grid.element) {
            var angle = __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["DEGREES"] * Math.atan2(point.y, point.x);
            var radius = __WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__["relativeRadiusToValue"](__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__["isNumber"](grid.radius) ? grid.radius : this.radius, this.pixelRadius);
            var gridInnerRadius = __WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__["relativeRadiusToValue"](grid.innerRadius, this.pixelRadius);
            grid.zIndex = 0;
            var innerRadius = __WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__["relativeRadiusToValue"](__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__["isNumber"](gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadius, true);
            grid.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__["moveTo"]({ x: innerRadius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["cos"](angle), y: innerRadius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["sin"](angle) }) + __WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__["lineTo"]({ x: radius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["cos"](angle), y: radius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["sin"](angle) }) });
        }
        this.toggleVisibility(grid, position, 0, 1);
    };
    /**
     * Updates and positions a tick element.
     *
     * @ignore Exclude from docs
     * @param {AxisTick}  tick         Tick element
     * @param {number}    position     Starting position
     * @param {number}    endPosition  End position
     */
    AxisRendererCircular.prototype.updateTickElement = function (tick, position, endPosition) {
        position = position + (endPosition - position) * tick.location;
        var point = this.positionToPoint(position);
        if (tick.element) {
            var radius = this.pixelRadius;
            var angle = __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["DEGREES"] * Math.atan2(point.y, point.x);
            var tickLength = tick.length;
            if (tick.inside) {
                tickLength = -tickLength;
            }
            tick.zIndex = 1;
            tick.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__["moveTo"]({ x: radius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["cos"](angle), y: radius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["sin"](angle) }) + __WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__["lineTo"]({ x: (radius + tickLength) * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["cos"](angle), y: (radius + tickLength) * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["sin"](angle) }) });
        }
        this.toggleVisibility(tick, position, 0, 1);
    };
    /**
     * Updates and positions a label element.
     *
     * @ignore Exclude from docs
     * @param {AxisLabel}  label        Label element
     * @param {number}     position     Starting position
     * @param {number}     endPosition  Ending position
     */
    AxisRendererCircular.prototype.updateLabelElement = function (label, position, endPosition) {
        position = position + (endPosition - position) * label.location;
        var point = this.positionToPoint(position);
        label.fixPoint(point, this.pixelRadius);
        label.zIndex = 2;
        this.positionItem(label, point);
        this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);
    };
    /**
     * Checks if point is within bounds of a container.
     *
     * @ignore Exclude from docs
     * @param  {IPoint}   point Point coordinates
     * @return {boolean}         Fits?
     */
    AxisRendererCircular.prototype.fitsToBounds = function (point) {
        return true;
    };
    Object.defineProperty(AxisRendererCircular.prototype, "startAngle", {
        /**
         * @return {number} Start angle
         */
        get: function () {
            return this.getPropertyValue("startAngle");
        },
        /**
         * Start angle of the axis.
         *
         * @todo Description (units)
         * @param {number}  value  Start angle
         */
        set: function (value) {
            // do not normalize angel here!
            this.setPropertyValue("startAngle", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRendererCircular.prototype, "endAngle", {
        /**
         * @return {number} End angle
         */
        get: function () {
            return this.getPropertyValue("endAngle");
        },
        /**
         * End angle of the axis.
         *
         * @todo Description (units)
         * @param {number}  value  end angle
         */
        set: function (value) {
            // do not normalize angel here!
            this.setPropertyValue("endAngle", value, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * [getPositionRangePath description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {number}  startPosition  Starting position
     * @param  {number}  endPosition    End position
     * @return {string}                 SVG path
     */
    AxisRendererCircular.prototype.getPositionRangePath = function (startPosition, endPosition, radius, innerRadius, cornerRadius) {
        var path = "";
        if (__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__["isNumber"](startPosition) && __WEBPACK_IMPORTED_MODULE_9__core_utils_Type__["isNumber"](endPosition)) {
            if (!__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__["hasValue"](radius)) {
                radius = this.radius;
            }
            startPosition = __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["max"](startPosition, this.axis.start);
            endPosition = __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["min"](endPosition, this.axis.end);
            if (endPosition < startPosition) {
                endPosition = startPosition;
            }
            var pixelRadius = __WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__["relativeRadiusToValue"](radius, this.pixelRadius);
            var pixelInnerRadius = __WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__["relativeRadiusToValue"](innerRadius, this.pixelRadius, true);
            var startAngle = this.positionToAngle(startPosition);
            var endAngle = this.positionToAngle(endPosition);
            var arc = endAngle - startAngle;
            path = __WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__["arc"](startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);
        }
        return path;
    };
    /**
     * Returns a new grid element, suitable for this Axis Renderer type.
     *
     * @return {GridCircular} Grid element
     */
    AxisRendererCircular.prototype.createGrid = function () {
        return new __WEBPACK_IMPORTED_MODULE_2__GridCircular__["a" /* GridCircular */]();
    };
    /**
     * Returns a new fill element, suitable for this Axis Renderer type.
     *
     * @return {AxisFillCircular} Fill element
     */
    AxisRendererCircular.prototype.createFill = function (axis) {
        return new __WEBPACK_IMPORTED_MODULE_1__AxisFillCircular__["a" /* AxisFillCircular */](axis);
    };
    /**
     * Returns a new label element, suitable for this Axis Renderer type.
     *
     * @return {AxisLabelCircular} Label element
     */
    AxisRendererCircular.prototype.createLabel = function () {
        return new __WEBPACK_IMPORTED_MODULE_3__AxisLabelCircular__["a" /* AxisLabelCircular */]();
    };
    return AxisRendererCircular;
}(__WEBPACK_IMPORTED_MODULE_0__AxisRenderer__["a" /* AxisRenderer */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_4__core_Registry__["b" /* registry */].registeredClasses["AxisRendererCircular"] = AxisRendererCircular;
//# sourceMappingURL=AxisRendererCircular.js.map

/***/ }),
/* 117 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return LegendDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return LegendSettings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Legend; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Component__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_DataItem__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_elements_RoundedRectangle__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_elements_Label__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_Keyboard__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_interaction_Interaction__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__core_utils_InterfaceColorSet__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__core_utils_Type__ = __webpack_require__(1);
/**
 * Legend-related functionality.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */












/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[Legend]].
 *
 * @see {@link DataItem}
 */
var LegendDataItem = /** @class */ (function (_super) {
    __extends(LegendDataItem, _super);
    /**
     * Constructor
     */
    function LegendDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "LegendDataItem";
        _this.applyTheme();
        return _this;
    }
    return LegendDataItem;
}(__WEBPACK_IMPORTED_MODULE_1__core_DataItem__["a" /* DataItem */]));

/**
 * ============================================================================
 * REQUISITES
 * ============================================================================
 * @hidden
 */
/**
 * Defines a class that carries legend settings.
 *
 * A legend might change its settings dynamically. Legend can also be shared
 * by several elements, requiring different settings.
 *
 * Having legend's settings in a separate object is a good way to "hot swap"
 * a set of settings for the legend.
 */
var LegendSettings = /** @class */ (function () {
    function LegendSettings() {
        /**
         * Should marker be created for each legend item.
         *
         * @type {boolean}
         */
        this.createMarker = true;
    }
    return LegendSettings;
}());

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * [[Legend]] class is used to create legend for the chart.
 *
 * @see {@link ILegendEvents} for a list of available events
 * @see {@link ILegendAdapters} for a list of available Adapters
 * @todo Verify/implement dynamic updating of legend items once the properties of related Series change
 */
var Legend = /** @class */ (function (_super) {
    __extends(Legend, _super);
    /**
     * Constructor
     */
    function Legend() {
        var _this = _super.call(this) || this;
        _this.className = "Legend";
        // Set defaults
        _this.layout = "grid";
        _this.useDefaultMarker = false;
        _this.contentAlign = "center";
        // Create a template container and list for legend items
        var itemContainer = new __WEBPACK_IMPORTED_MODULE_4__core_Container__["a" /* Container */]();
        itemContainer.padding(10, 0, 10, 0);
        itemContainer.margin(0, 5, 0, 0);
        itemContainer.layout = "horizontal";
        itemContainer.clickable = true;
        itemContainer.focusable = true;
        itemContainer.role = "checkbox";
        itemContainer.background.fillOpacity = 0; // creates hit area
        itemContainer.togglable = true;
        // Add click/tap event to toggle item
        itemContainer.events.on("hit", function (ev) {
            _this.toggleDataItem(ev.target.dataItem);
        }, _this);
        // Add focus event so that we can track which object is currently in focus
        // for keyboard toggling
        itemContainer.events.on("focus", function (ev) {
            _this.focusedItem = ev.target.dataItem;
        });
        itemContainer.events.on("blur", function (ev) {
            _this.focusedItem = undefined;
        });
        // Create container list using item template we just created
        _this.itemContainers = new __WEBPACK_IMPORTED_MODULE_2__core_utils_List__["e" /* ListTemplate */](itemContainer);
        // Set up global keyboard events for toggling elements
        _this._disposers.push(Object(__WEBPACK_IMPORTED_MODULE_8__core_interaction_Interaction__["b" /* getInteraction */])().body.events.on("keyup", function (ev) {
            if (__WEBPACK_IMPORTED_MODULE_6__core_utils_Keyboard__["b" /* keyboard */].isKey(ev.event, "enter") && _this.focusedItem) {
                _this.toggleDataItem(_this.focusedItem);
            }
        }, _this));
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_10__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        // Create a template container and list for the a marker
        var marker = new __WEBPACK_IMPORTED_MODULE_4__core_Container__["a" /* Container */]();
        marker.width = 23;
        marker.height = 23;
        marker.interactionsEnabled = false;
        marker.setStateOnChildren = true;
        marker.background.fillOpacity = 0;
        marker.background.strokeOpacity = 0;
        marker.propertyFields.fill = "fill";
        var disabledColor = interfaceColors.getFor("disabledBackground");
        marker.events.on("childadded", function (event) {
            var activeState = event.newValue.states.create("active");
            activeState.properties.stroke = disabledColor;
            activeState.properties.fill = disabledColor;
        });
        _this.markers = new __WEBPACK_IMPORTED_MODULE_2__core_utils_List__["e" /* ListTemplate */](marker);
        // Create a legend background element
        var rectangle = marker.createChild(__WEBPACK_IMPORTED_MODULE_3__core_elements_RoundedRectangle__["a" /* RoundedRectangle */]);
        rectangle.width = Object(__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__["c" /* percent */])(100);
        rectangle.height = Object(__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__["c" /* percent */])(100);
        // Create a template container and list for item labels
        var label = new __WEBPACK_IMPORTED_MODULE_5__core_elements_Label__["a" /* Label */]();
        label.text = "{name}";
        label.margin(0, 5, 0, 5);
        label.valign = "middle";
        label.states.create("active").properties.fill = interfaceColors.getFor("disabledBackground");
        label.renderingFrequency = 2;
        _this.labels = new __WEBPACK_IMPORTED_MODULE_2__core_utils_List__["e" /* ListTemplate */](label);
        // Create a template container and list for item value labels
        var valueLabel = new __WEBPACK_IMPORTED_MODULE_5__core_elements_Label__["a" /* Label */]();
        valueLabel.margin(0, 5, 0, 0);
        valueLabel.valign = "middle";
        valueLabel.width = 40; // to avoid rearranging legend entries when value changes.
        valueLabel.align = "right";
        valueLabel.textAlign = "end";
        valueLabel.states.create("active").properties.fill = interfaceColors.getFor("disabledBackground");
        valueLabel.renderingFrequency = 2;
        _this.valueLabels = new __WEBPACK_IMPORTED_MODULE_2__core_utils_List__["e" /* ListTemplate */](valueLabel);
        _this.position = "bottom";
        // Create a state for disabled legend items
        itemContainer.states.create("active");
        itemContainer.setStateOnChildren = true;
        // Apply accessibility settings
        _this.role = "group";
        _this.applyTheme();
        return _this;
    }
    /**
     * Sets defaults that instantiate some objects that rely on parent, so they
     * cannot be set in constructor.
     */
    Legend.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);
        if (!__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["hasValue"](this.readerTitle)) {
            this.readerTitle = this.language.translate("Legend");
        }
    };
    /**
     * Returns a new/empty DataItem of the type appropriate for this object.
     *
     * @see {@link DataItem}
     * @return {LegendDataItem} Data Item
     */
    Legend.prototype.createDataItem = function () {
        return new LegendDataItem();
    };
    /**
     * Removes children before calling validate method of the super class. (which
     * initiates building of the legend)
     *
     * @ignore Exclude from docs
     */
    Legend.prototype.validate = function () {
        this.removeChildren();
        _super.prototype.validate.call(this);
    };
    /**
     * [validateDataElement description]
     *
     * @ignore Exclude from docs
     * @param {LegendDataItem} dataItem Data item
     * @todo Description
     * @todo Figure out how to update appearance of legend item without losing focus
     * @todo Update legend marker appearance as apperance of related series changes
     */
    Legend.prototype.validateDataElement = function (dataItem) {
        _super.prototype.validateDataElement.call(this, dataItem);
        // Get data item (legend item's) container and assign it to legend container
        var container = dataItem.itemContainer;
        if (!container) {
            // Create new container for the data item
            container = this.itemContainers.create();
            dataItem.addSprite(container);
            container.readerTitle = this.language.translate("Click, tap or press ENTER to toggle");
            container.readerControls = dataItem.dataContext.uidAttr();
            container.readerLabelledBy = dataItem.dataContext.uidAttr();
            dataItem.itemContainer = container;
            // Add an event to check for item's properties
            // We cannot do this on a template since template does not have
            // dataContext, yet
            dataItem.dataContext.events.on("propertychanged", function (ev) {
                if (ev.property == "visible") {
                    container.readerChecked = dataItem.dataContext.visible;
                }
                else {
                    //this.validateDataElement(dataItem);
                }
            });
        }
        // Set parent and update current state
        container.parent = this;
        container.readerChecked = dataItem.dataContext.visible;
        // Create a marker for legend item
        var marker = dataItem.marker;
        if (!marker) {
            marker = this.markers.create();
            marker.parent = container;
            dataItem.marker = marker;
        }
        // If we are not using default markers, create a unique legend marker based
        // on the data item type
        if (!this.useDefaultMarker) {
            dataItem.dataContext.createLegendMarker(marker);
        }
        // Create label
        var label = dataItem.label;
        if (!label) {
            label = this.labels.create();
            label.parent = container;
            dataItem.label = label;
        }
        // Create value label
        var valueLabel = dataItem.valueLabel;
        if (!valueLabel) {
            valueLabel = this.valueLabels.create();
            valueLabel.parent = container;
            dataItem.valueLabel = valueLabel;
        }
        // Tell series its legend data item
        dataItem.dataContext.legendDataItem = dataItem;
    };
    Object.defineProperty(Legend.prototype, "position", {
        /**
         * @return {LegendPosition} Position
         */
        get: function () {
            return this.getPropertyValue("position");
        },
        /**
         * Position of the legend.
         *
         * Options: "left", "right", "top", "bottom" (default), or "absolute".
         *
         * @default "bottom"
         * @param {LegendPosition}  value  Position
         */
        set: function (value) {
            if (this.setPropertyValue("position", value)) {
                if (value == "left" || value == "right") {
                    this.margin(10, 20, 10, 20);
                    this.valign = "middle";
                    this.itemContainers.template.width = Object(__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__["c" /* percent */])(100);
                    this.valueLabels.template.width = Object(__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__["c" /* percent */])(100);
                }
                else {
                    this.itemContainers.template.maxWidth = undefined;
                    this.width = Object(__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__["c" /* percent */])(100);
                    this.valueLabels.template.width = 40;
                }
                this.invalidate();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Legend.prototype, "useDefaultMarker", {
        /**
         * @return {boolean} Use default marker?
         */
        get: function () {
            return this.getPropertyValue("useDefaultMarker");
        },
        /**
         * Should legend try to mirror the look of the related item when building
         * the marker for legend item?
         *
         * If set to `true` it will try to make the marker look like its related
         * item.
         *
         * E.g. if an item is for a Line Series, it will display a line of the
         * same thickness, color, and will use the same bullets if series have them.
         *
         * @default false
         * @param {boolean} value Use default marker?
         */
        set: function (value) {
            this.setPropertyValue("useDefaultMarker", value, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Toggles a legend item.
     *
     * @ignore Exclude from docs
     * @param {this["_dataItem"]} item Legend item
     * @todo Maybe do it with togglable instead
     */
    Legend.prototype.toggleDataItem = function (item) {
        var dataContext = item.dataContext;
        if (!dataContext.visible || dataContext.isHiding) {
            dataContext.show();
        }
        else {
            dataContext.hide();
        }
    };
    Object.defineProperty(Legend.prototype, "preloader", {
        /**
         * Override preloader method so that legend does not accidentally show its
         * own preloader.
         *
         * @ignore Exclude from docs
         * @return {Preloader} Always `undefined`
         */
        get: function () {
            return;
        },
        enumerable: true,
        configurable: true
    });
    return Legend;
}(__WEBPACK_IMPORTED_MODULE_0__core_Component__["a" /* Component */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_7__core_Registry__["b" /* registry */].registeredClasses["Legend"] = Legend;
//# sourceMappingURL=Legend.js.map

/***/ }),
/* 118 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SVGDefaults; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_Color__ = __webpack_require__(15);
/**
 *
 */
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

/**
 * Defines a class that holds default properties for new SVG elements
 */
var SVGDefaults = /** @class */ (function () {
    function SVGDefaults() {
    }
    SVGDefaults.opacity = 1;
    SVGDefaults.strokeOpacity = 1;
    SVGDefaults.strokeWidth = 1;
    SVGDefaults.fillOpacity = 1;
    SVGDefaults.fill = Object(__WEBPACK_IMPORTED_MODULE_0__utils_Color__["c" /* color */])("#000000");
    SVGDefaults.stroke = Object(__WEBPACK_IMPORTED_MODULE_0__utils_Color__["c" /* color */])("#000000");
    SVGDefaults.focusable = undefined;
    SVGDefaults.tabindex = 0;
    return SVGDefaults;
}());

//# sourceMappingURL=SVGDefaults.js.map

/***/ }),
/* 119 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SpriteEventDispatcher; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_Dictionary__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_EventDispatcher__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Disposer__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Object__ = __webpack_require__(13);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





/**
 * An [[EventDispatcher]] for [[Sprite]].
 *
 * @type {TargetedEventDispatcher}
 * @important
 */
var SpriteEventDispatcher = /** @class */ (function (_super) {
    __extends(SpriteEventDispatcher, _super);
    function SpriteEventDispatcher() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * [_interactionEvents description]
         *
         * @todo Description
         * @type {Dictionary}
         */
        _this._interactionEvents = new __WEBPACK_IMPORTED_MODULE_0__utils_Dictionary__["a" /* Dictionary */]();
        return _this;
    }
    /**
     * [_dispatchSpriteEvent description]
     *
     * @todo Description
     * @type {[type]}
     */
    SpriteEventDispatcher.prototype._dispatchSpriteEvent = function (ev) {
        if (this.target.disabled || this.target.isTemplate) {
            return;
        }
        // TODO remove this <any> later
        if (this.target.events.isEnabled(ev.type)) {
            var imev = __WEBPACK_IMPORTED_MODULE_4__utils_Object__["merge"](ev, {
                target: this.target
            });
            this.target.events.dispatchImmediately(imev.type, imev);
        }
    };
    /**
     * [_dispatchSpritePointEvent description]
     *
     * @todo Description
     * @type {[type]}
     */
    SpriteEventDispatcher.prototype._dispatchSpritePointEvent = function (ev) {
        if (this.target.disabled || this.target.isTemplate) {
            return;
        }
        // TODO remove this <any> later
        if (this.target.events.isEnabled(ev.type)) {
            var imev = __WEBPACK_IMPORTED_MODULE_4__utils_Object__["merge"](ev, {
                target: this.target,
                spritePoint: __WEBPACK_IMPORTED_MODULE_3__utils_Utils__["documentPointToSprite"](ev.point, this.target),
                svgPoint: this.target.getSvgPoint(ev.point)
            });
            this.target.events.dispatchImmediately(imev.type, imev);
        }
    };
    /**
     * [_addInteractionObjectEvent description]
     *
     * @todo Description
     * @type {[type]}
     */
    SpriteEventDispatcher.prototype._addInteractionObjectEvent = function (type, callback, context) {
        var _this = this;
        var counter = this._interactionEvents.insertKeyIfEmpty(type, function () {
            var disposer = _this.target.interactions.events.on(type, callback, context);
            return new __WEBPACK_IMPORTED_MODULE_2__utils_Disposer__["a" /* CounterDisposer */](function () {
                _this._interactionEvents.removeKey(type);
                disposer.dispose();
            });
        });
        return counter.increment();
    };
    /**
     * [_on description]
     *
     * @todo Description
     * @type {[type]}
     */
    SpriteEventDispatcher.prototype._on = function (once, type, callback, context, dispatch) {
        var info = _super.prototype._on.call(this, once, type, callback, context, dispatch);
        var disposers = [info.disposer];
        /**
         * Catching Sprite-related events, converting them to [[SpriteEvent]] and
         * triggering them on sprite
         */
        switch (type) {
            case "hit":
            case "track":
            case "doublehit":
            case "wheel":
            case "wheelup":
            case "wheeldown":
            case "wheelleft":
            case "wheelright":
                disposers.push(this._addInteractionObjectEvent(type, this._dispatchSpritePointEvent, this));
                break;
            case "rightclick":
            case "down":
            case "hold":
            case "up":
            case "drag":
            case "dragstart":
            case "dragstop":
            case "over":
            case "out":
            case "swipe":
            case "swipeleft":
            case "swiperight":
            case "resize":
            case "rotate":
            case "focus":
            case "blur":
            case "toggled":
                disposers.push(this._addInteractionObjectEvent(type, this._dispatchSpriteEvent, this));
                break;
        }
        /**
         * Set functional properties based on events. For example if we add a
         * "drag" event handler, we want to make the Sprite draggable, even if we
         * don't explicitly set "draggable"
         */
        switch (type) {
            case "hit":
            case "doublehit":
            case "rightclick":
            case "down":
            case "up":
                this.target.clickable = true;
                break;
            case "toggled":
                this.target.togglable = true;
                break;
            case "drag":
            case "dragstart":
            case "dragstop":
                this.target.draggable = true;
                break;
            case "track":
                this.target.trackable = true;
                break;
            case "rotate":
                this.target.rotatable = true;
                break;
            case "resize":
                this.target.resizable = true;
                break;
            case "swipe":
            case "swipeleft":
            case "swiperight":
                this.target.swipeable = true;
                break;
            case "wheel":
            case "wheelup":
            case "wheeldown":
            case "wheelleft":
            case "wheelright":
                this.target.wheelable = true;
                break;
            case "over":
            case "out":
                this.target.hoverable = true;
                break;
            case "focus":
            case "blur":
                this.target.focusable = true;
                break;
        }
        info.disposer = new __WEBPACK_IMPORTED_MODULE_2__utils_Disposer__["c" /* MultiDisposer */](disposers);
        return info;
    };
    return SpriteEventDispatcher;
}(__WEBPACK_IMPORTED_MODULE_1__utils_EventDispatcher__["b" /* TargetedEventDispatcher */]));

//# sourceMappingURL=SpriteEvents.js.map

/***/ }),
/* 120 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RadialGradient; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__System__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Percent__ = __webpack_require__(7);
/**
 * Contains code and logic for generating radial gradients.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */






/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Radial gradient class.
 */
var RadialGradient = /** @class */ (function (_super) {
    __extends(RadialGradient, _super);
    /**
     * Constructor
     */
    function RadialGradient() {
        var _this = _super.call(this) || this;
        /**
         * List of colors switch definitions in a gradient.
         *
         * @type {List<IGradientStop>}
         */
        _this._stops = new __WEBPACK_IMPORTED_MODULE_2__utils_List__["b" /* List */]();
        _this.element = _this.paper.addGroup("radialGradient");
        _this.id = "gradient-" + __WEBPACK_IMPORTED_MODULE_3__Registry__["b" /* registry */].getUniqueId();
        _this.element.attr({ "id": _this.id });
        _this._disposers.push(_this.element);
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws gradient.
     */
    RadialGradient.prototype.draw = function () {
        var _this = this;
        var gradientElement = this.element;
        if (this.cx) {
            var value = this.cx;
            if (value instanceof __WEBPACK_IMPORTED_MODULE_5__utils_Percent__["a" /* Percent */]) {
                value = value.percent + "%";
            }
            gradientElement.attr({ "cx": value });
        }
        if (this.cy) {
            var value = this.cy;
            if (value instanceof __WEBPACK_IMPORTED_MODULE_5__utils_Percent__["a" /* Percent */]) {
                value = value.percent + "%";
            }
            gradientElement.attr({ "cy": value });
        }
        if (this.fx) {
            var value = this.fx;
            if (value instanceof __WEBPACK_IMPORTED_MODULE_5__utils_Percent__["a" /* Percent */]) {
                value = value.percent + "%";
            }
            gradientElement.attr({ "fx": value });
        }
        if (this.fy) {
            var value = this.fy;
            if (value instanceof __WEBPACK_IMPORTED_MODULE_5__utils_Percent__["a" /* Percent */]) {
                value = value.percent + "%";
            }
            gradientElement.attr({ "fy": value });
        }
        gradientElement.removeChildNodes();
        __WEBPACK_IMPORTED_MODULE_4__utils_Iterator__["each"](__WEBPACK_IMPORTED_MODULE_4__utils_Iterator__["indexed"](this._stops.iterator()), function (a) {
            var i = a[0];
            var stop = a[1];
            var offset = stop.offset;
            if (isNaN(offset)) {
                offset = i / (_this._stops.length - 1);
            }
            var gradientStop = _this.paper.add("stop");
            gradientStop.attr({ "stop-color": stop.color });
            if (!isNaN(stop.opacity)) {
                gradientStop.attr({ "stop-opacity": stop.opacity });
            }
            if (!isNaN(offset)) {
                gradientStop.attr({ "offset": offset });
            }
            gradientElement.add(gradientStop);
        });
    };
    /**
     * Adds a color step to the gradient.
     *
     * @param {Color}   color    Color (hex code or named color)
     * @param {number}  opacity  Opacity (value from 0 to 1; 0 completely transaprent, 1 fully opaque)
     * @param {number}  offset   Position of color in the gradient (value 0 to 1; 0 meaning start of the gradient and 1 end)
     */
    RadialGradient.prototype.addColor = function (color, opacity, offset) {
        this._stops.push({ color: color, opacity: opacity, offset: offset });
        this.draw();
    };
    Object.defineProperty(RadialGradient.prototype, "paper", {
        /**
         * @ignore Exclude from docs
         * @return {Paper} Paper
         */
        get: function () {
            if (this._paper) {
                return this._paper;
            }
            return Object(__WEBPACK_IMPORTED_MODULE_1__System__["b" /* getSystem */])().ghostPaper;
        },
        /**
         * A [[Paper]] instace to use for the gradient.
         *
         * @ignore Exclude from docs
         * @param {Paper}  paper  Paper
         */
        set: function (paper) {
            if (this._paper != paper) {
                this._paper = paper;
                this.draw();
                paper.appendDef(this.element);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadialGradient.prototype, "cx", {
        get: function () {
            return this._cx;
        },
        /**
         * Center x coordinate of the gradient, can be set as number or Percent
         *
         * @param {Optional<number | Percent>}  point  Center point
         */
        set: function (value) {
            this._cx = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadialGradient.prototype, "cy", {
        get: function () {
            return this._cy;
        },
        /**
         * Center y coordinate of the gradient, can be set as number or Percent
         *
         * @param {Optional<number | Percent>}  point  Center point
         */
        set: function (value) {
            this._cy = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadialGradient.prototype, "fx", {
        get: function () {
            return this._fx;
        },
        /**
         * y coordinate of the focal point of a gradient, can be set in pixels or as Percent
         *
         * @param {Optional<number | Percent>}  point  Center point
         */
        set: function (value) {
            this._fx = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadialGradient.prototype, "fy", {
        get: function () {
            return this._fy;
        },
        /**
         * y coordinate of the focal point of a gradient, can be set in pixels or as Percent
         *
         * @param {Optional<number | Percent>}  point  Center point
         */
        set: function (value) {
            this._fy = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    RadialGradient.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        this._stops = source.stops;
        this.cx = source.cx;
        this.cy = source.cy;
        this.fx = source.fx;
        this.fy = source.fy;
    };
    Object.defineProperty(RadialGradient.prototype, "stops", {
        /**
         * A list of color stops in the gradient.
         *
         * @return {List<IGradientStop>} Stops
         */
        get: function () {
            return this._stops;
        },
        enumerable: true,
        configurable: true
    });
    return RadialGradient;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["a" /* BaseObject */]));

//# sourceMappingURL=RadialGradient.js.map

/***/ }),
/* 121 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return InteractionObject; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__InteractionObjectEvents__ = __webpack_require__(122);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Base__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Dictionary__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Interaction__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Type__ = __webpack_require__(1);
/* unused harmony reexport InteractionObjectEventDispatcher */
/**
 * Interaction Object module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */







/**
 * Re-exports
 */

/**
 * Interaction object represents an object that is subject for any kind of
 * interaction with it with any input devices: mouse, touch or keyboard.
 *
 * Any DOM element can be wrapped into an Internaction object which in turn
 * enables attaching various interaction events to it, such as: hit, drag,
 * swipe, etc.
 *
 * To create an [[InteractionObject]] out of a [[Sprite]], use:
 * `interaction.getInteractionFromSprite(sprite: Sprite)`
 *
 * To create an [[InteractionObject]] out of a a regular element:
 * `interaction.getInteraction(element: HTMLElement)`
 */
var InteractionObject = /** @class */ (function (_super) {
    __extends(InteractionObject, _super);
    /**
     * Constructor
     */
    function InteractionObject() {
        var _this = _super.call(this) || this;
        /**
         * An [[EventDispatcher]] instance which holds events for this object
         */
        _this.events = new __WEBPACK_IMPORTED_MODULE_0__InteractionObjectEvents__["a" /* InteractionObjectEventDispatcher */](_this);
        /**
         * Collection of Disposers for various events. (so that those get disposed
         * when the whole InteractionObject is disposed)
         *
         * @ignore Exclude from docs
         * @type {Dictionary<string, IDisposer>}
         */
        _this.eventDisposers = new __WEBPACK_IMPORTED_MODULE_3__utils_Dictionary__["a" /* Dictionary */]();
        /**
         * A [[Dictionary]] that holds temporarily replaced original style values for
         * HTML element, so that they can be restored when the functionality that
         * replaced them is done.
         *
         * @ignore Exclude from docs
         * @type {Dictionary<string, string>}
         */
        _this.replacedStyles = new __WEBPACK_IMPORTED_MODULE_3__utils_Dictionary__["a" /* Dictionary */]();
        _this._clickable = false;
        _this._hoverable = false;
        _this._trackable = false;
        _this._draggable = false;
        _this._swipeable = false;
        _this._resizable = false;
        _this._rotatable = false;
        _this._wheelable = false;
        _this._inert = false;
        /**
         * Is element currently hovered?
         *
         * @type {boolean}
         */
        _this._isHover = false;
        /**
         * Has element got any pointers currently pressing down on it?
         * @type {boolean}
         */
        _this._isDown = false;
        /**
         * Does element have focus?
         *
         * @type {boolean}
         */
        _this._isFocused = false;
        /**
         * Options used for inertia functionality.
         *
         * @type {Dictionary<InertiaTypes, IInertiaOptions>}
         */
        _this.inertiaOptions = new __WEBPACK_IMPORTED_MODULE_3__utils_Dictionary__["a" /* Dictionary */]();
        /**
         * A collection of different inertia types, currently playing out.
         *
         * @ignore Exclude from docs
         * @type {Dictionary<InertiaTypes, Inertia>}
         */
        _this.inertias = new __WEBPACK_IMPORTED_MODULE_3__utils_Dictionary__["a" /* Dictionary */]();
        /**
         * Click/tap options.
         *
         * @type {IHitOptions}
         */
        _this.hitOptions = {};
        /**
         * Hover options.
         *
         * @type {IHoverOptions}
         */
        _this.hoverOptions = {};
        /**
         * Swipe gesture options.
         *
         * @type {ISwipeOptions}
         */
        _this.swipeOptions = {};
        /**
         * Keyboard options.
         *
         * @type {IKeyboarOptions}
         */
        _this.keyboardOptions = {};
        /**
         * Cursor options.
         *
         * @type {ICursorOptions}
         */
        _this.cursorOptions = {
            "defaultStyle": [{
                    "property": "cursor",
                    "value": "default"
                }]
        };
        _this.className = "InteractionObject";
        _this._disposers.push(new __WEBPACK_IMPORTED_MODULE_3__utils_Dictionary__["b" /* DictionaryDisposer */](_this.inertias));
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(InteractionObject.prototype, "isHover", {
        /**
         * Returns if this element is currently hovered.
         *
         * @return {boolean} Hovered?
         */
        get: function () {
            return this._isHover;
        },
        /**
         * Sets if this element is currently hovered.
         *
         * @param {boolean} value Hovered?
         */
        set: function (value) {
            if (this.isHover != value) {
                this._isHover = value;
                if (value) {
                    Object(__WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* getInteraction */])().overObjects.moveValue(this);
                }
                else {
                    Object(__WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* getInteraction */])().overObjects.removeValue(this);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "overPointers", {
        /**
         * Returns a list of pointers currently over the element.
         *
         * @see {@link Pointer}
         * @return {List<IPointer>} List if pointers currently hovering the element
         */
        get: function () {
            if (!this._overPointers) {
                this._overPointers = new __WEBPACK_IMPORTED_MODULE_2__utils_List__["b" /* List */]();
            }
            return this._overPointers;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "isDown", {
        /**
         * Returns if this element has currently any pointers pressing on it.
         *
         * @return {boolean} Has down pointers?
         */
        get: function () {
            return this._isDown;
        },
        /**
         * Sets if this element has currently any pointers pressing on it.
         *
         * @param {boolean} value Has down pointers?
         */
        set: function (value) {
            if (this.isDown != value) {
                this._isDown = value;
                if (value) {
                    Object(__WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* getInteraction */])().downObjects.moveValue(this);
                }
                else {
                    Object(__WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* getInteraction */])().downObjects.removeValue(this);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "downPointers", {
        /**
         * Returns a list of pointers currently pressing down on this element.
         *
         * @see {@link Pointer}
         * @return {List<IPointer>} List of down pointers
         */
        get: function () {
            if (!this._downPointers) {
                this._downPointers = new __WEBPACK_IMPORTED_MODULE_2__utils_List__["b" /* List */]();
            }
            return this._downPointers;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "isFocused", {
        /**
         * Returns if this element is currently focused.
         *
         * @return {boolean} Focused?
         */
        get: function () {
            return this._isFocused;
        },
        /**
         * Sets if this element is currently focused.
         *
         * @param {boolean} value Focused?
         */
        set: function (value) {
            if (this.isFocused != value) {
                this._isFocused = value;
                if (value) {
                    Object(__WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* getInteraction */])().focusedObject = this;
                }
                else {
                    Object(__WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* getInteraction */])().focusedObject = undefined;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "clickable", {
        /**
         * Returns if element is currently set as clickable.
         *
         * @return {boolean} Clickable?
         */
        get: function () {
            return this._clickable;
        },
        /**
         * Is element clickable? Clickable elements will generate "hit" events when
         * clicked or tapped.
         *
         * @param {boolean} value Clickable?
         */
        set: function (value) {
            if (this._clickable !== value) {
                this._clickable = value;
                Object(__WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* getInteraction */])().processClickable(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "hoverable", {
        /**
         * Returns if element is currently set to generate hover events.
         *
         * @return {boolean} Hoverable?
         */
        get: function () {
            return this._hoverable;
        },
        /**
         * Sets if element should generate hover events.
         *
         * @param {boolean} value Hoverable?
         */
        set: function (value) {
            if (this._hoverable !== value) {
                this._hoverable = value;
                Object(__WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* getInteraction */])().processHoverable(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "trackable", {
        /**
         * Returns if element is set to track pointer movement over it.
         *
         * @return {boolean} Track pointer?
         */
        get: function () {
            return this._trackable;
        },
        /**
         * Sets if pointer movement over element should be tracked.
         *
         * @param {boolean} value Track pointer?
         */
        set: function (value) {
            if (this._trackable !== value) {
                this._trackable = value;
                Object(__WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* getInteraction */])().processTrackable(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "draggable", {
        /**
         * Returns if element is currently set as draggable.
         *
         * @return {boolean} Draggable?
         */
        get: function () {
            return this._draggable;
        },
        /**
         * Sets if element can be dragged. (moved)
         *
         * @param {boolean} value Draggable?
         */
        set: function (value) {
            if (this._draggable !== value) {
                this._draggable = value;
                Object(__WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* getInteraction */])().processDraggable(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "swipeable", {
        /**
         * Returns if element is currently set to track swipe gesture.
         *
         * @return {boolean} Track swipe?
         */
        get: function () {
            return this._swipeable;
        },
        /**
         * Sets whether element should react to swipe gesture.
         *
         * @param {boolean} value Track swipe?
         */
        set: function (value) {
            if (this._swipeable !== value) {
                this._swipeable = value;
                Object(__WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* getInteraction */])().processSwipeable(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "resizable", {
        /**
         * Returns if element is currently set as resizeable.
         *
         * @return {boolean} Resizeble?
         */
        get: function () {
            return this._resizable;
        },
        /**
         * Sets if element can be resized.
         *
         * @param {boolean} value Resizeable?
         */
        set: function (value) {
            if (this._resizable !== value) {
                this._resizable = value;
                Object(__WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* getInteraction */])().processResizable(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "rotatable", {
        /**
         * Returns if element is currently set as rotatable.
         *
         * @return {boolean} Can rotate?
         */
        get: function () {
            return this._rotatable;
        },
        /**
         * Sets whether element can be rotated.
         *
         * @param {boolean} value Can rotate?
         */
        set: function (value) {
            if (this._rotatable !== value) {
                this._rotatable = value;
                Object(__WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* getInteraction */])().processRotatable(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "wheelable", {
        /**
         * @return {boolean} Track wheel?
         */
        get: function () {
            return this._wheelable;
        },
        /**
         * Indicates whether track moouse wheel rotation over element.
         *
         * @param {boolean} value Track wheel?
         */
        set: function (value) {
            if (this._wheelable !== value) {
                this._wheelable = value;
                Object(__WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* getInteraction */])().processWheelable(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "inert", {
        /**
         * Returns if element is currently set as inert.
         *
         * @return {boolean} Inert?
         */
        get: function () {
            return this._inert;
        },
        /**
         * Sets if element is inert, i.e. if it should carry movement momentum after
         * it is dragged and released.
         *
         * @param {boolean} value Inert?
         */
        set: function (value) {
            if (this._inert !== value) {
                this._inert = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "focusable", {
        /**
         * Returns if element is currently set as focusable.
         *
         * @return {Optional<boolean>} Focusable?
         */
        get: function () {
            return this._focusable;
        },
        /**
         * Sets if element can gain focus.
         *
         * @param {Optional<boolean>} value Focusable?
         */
        set: function (value) {
            if (this._focusable !== value) {
                this._focusable = value;
                if (this._focusable && this.tabindex == -1) {
                    this._tabindex = 1;
                }
                Object(__WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* getInteraction */])().processFocusable(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "tabindex", {
        /**
         * Returns element's current tab index.
         *
         * @return {number} Tab index
         */
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_6__utils_Type__["getValueDefault"](this._tabindex, -1);
        },
        /**
         * Sets element's tab index.
         *
         * @param {number} value Tab index
         */
        set: function (value) {
            if (this._tabindex !== value) {
                this._tabindex = value;
                if (value > -1) {
                    this.focusable = true;
                }
                Object(__WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* getInteraction */])().processFocusable(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "element", {
        /**
         * Returns DOM element associated with this element
         * @return {HTMLElement} Element
         */
        get: function () {
            return this._element;
        },
        /**
         * Sets DOM element associated with this element
         * @param {Optional<HTMLElement | SVGSVGElement>} element Element
         */
        set: function (element) {
            this._element = element;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "originalPosition", {
        /**
         * Returns element's original position.
         *
         * @ignore Exclude from docs
         * @return {Optional<IPoint>} Position.
         */
        get: function () {
            return this._originalPosition || { x: 0, y: 0 };
        },
        /**
         * Sets element's original position.
         *
         * @ignore Exclude from docs
         * @param {Optional<IPoint>} value Position
         */
        set: function (value) {
            this._originalPosition = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "originalScale", {
        /**
         * Returns element's original scale.
         *
         * @return {number} Scale
         */
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_6__utils_Type__["getValueDefault"](this._originalScale, 1);
        },
        /**
         * Sets element's original scale.
         *
         * @ignore Exclude from docs
         * @param {number} value Scale
         */
        set: function (value) {
            if (this._originalScale !== value) {
                this._originalScale = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractionObject.prototype, "originalAngle", {
        /**
         * Returns element's original angle.
         *
         * @return {number} Angle
         */
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_6__utils_Type__["getValueDefault"](this._originalAngle, 0);
        },
        /**
         * Sets element's original angle.
         *
         * @ignore Exclude from docs
         * @param {number} value Angle
         */
        set: function (value) {
            if (this._originalAngle !== value) {
                this._originalAngle = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Destroys this object and all related data.
     */
    InteractionObject.prototype.dispose = function () {
        if (!this.isDisposed) {
            _super.prototype.dispose.call(this);
            __WEBPACK_IMPORTED_MODULE_5__utils_Iterator__["each"](this.eventDisposers.iterator(), function (a) {
                var y = a[1];
                y.dispose();
            });
        }
    };
    /**
     * Copies all properties and related assets from another object of the same
     * type.
     *
     * @param {this} source Source object
     */
    InteractionObject.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        this.inertiaOptions = source.inertiaOptions;
        this.hitOptions = source.hitOptions;
        this.hoverOptions = source.hoverOptions;
        this.swipeOptions = source.swipeOptions;
        this.keyboardOptions = source.keyboardOptions;
        this.cursorOptions = source.cursorOptions;
        Object(__WEBPACK_IMPORTED_MODULE_4__Interaction__["b" /* getInteraction */])().applyCursorOverStyle(this);
    };
    /**
     * @ignore Exclude from docs
     */
    InteractionObject.prototype.setEventDisposer = function (key, value, f) {
        var disposer = this.eventDisposers.getKey(key);
        if (value) {
            if (disposer == null) {
                this.eventDisposers.setKey(key, f());
            }
        }
        else {
            if (disposer != null) {
                disposer.dispose();
                this.eventDisposers.removeKey(key);
            }
        }
    };
    return InteractionObject;
}(__WEBPACK_IMPORTED_MODULE_1__Base__["b" /* BaseObjectEvents */]));

//# sourceMappingURL=InteractionObject.js.map

/***/ }),
/* 122 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return InteractionObjectEventDispatcher; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_EventDispatcher__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Disposer__ = __webpack_require__(11);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Represents an Event Dispatcher for [[InteractionObject]].
 *
 * Besides regular [[EventDispatcher]] functionality it adds new events with
 * direct application to DOM nodes. Primarily used to handle keyboard events,
 * but can turn into something else moving forward.
 */
var InteractionObjectEventDispatcher = /** @class */ (function (_super) {
    __extends(InteractionObjectEventDispatcher, _super);
    function InteractionObjectEventDispatcher() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Holds a list of Disposers for DOM events added.
         */
        _this._domEvents = {};
        return _this;
    }
    /**
     * Adds a DOM event and returns Disposer.
     *
     * @return {IDisposer} Disposer
     */
    InteractionObjectEventDispatcher.prototype._addDOMEvent = function (type, key, listener, context) {
        var _this = this;
        if (!this._domEvents[type]) {
            var callback_1 = function (e) {
                listener.call(context, key, e);
            };
            this.target.element.addEventListener(type, callback_1, false);
            this._domEvents[type] = new __WEBPACK_IMPORTED_MODULE_1__utils_Disposer__["a" /* CounterDisposer */](function () {
                delete _this._domEvents[type];
                _this.target.element.removeEventListener(type, callback_1, false);
            });
        }
        return this._domEvents[type].increment();
    };
    InteractionObjectEventDispatcher.prototype._dispatchKeyboardEvent = function (key, ev) {
        // TODO use this.dispatchImmediately ?
        if (this.target.events.isEnabled(key)) {
            this.target.events.dispatchImmediately(key, {
                type: key,
                target: this.target,
                event: ev
            });
        }
    };
    InteractionObjectEventDispatcher.prototype._on = function (once, type, callback, context, dispatch) {
        var info = _super.prototype._on.call(this, once, type, callback, context, dispatch);
        var disposers = [info.disposer];
        switch (type) {
            case "hit":
            case "doublehit":
            case "rightclick":
            case "down":
            case "up":
                this.target.clickable = true;
                break;
            case "drag":
            case "dragstart":
            case "dragstop":
                this.target.draggable = true;
                break;
            case "track":
                this.target.trackable = true;
                break;
            case "rotate":
                this.target.rotatable = true;
                break;
            case "resize":
                this.target.resizable = true;
                break;
            case "swipe":
            case "swipeleft":
            case "swiperight":
                this.target.swipeable = true;
                break;
            case "wheel":
            case "wheelup":
            case "wheeldown":
            case "wheelleft":
            case "wheelright":
                this.target.wheelable = true;
                break;
            case "over":
            case "out":
                this.target.hoverable = true;
                break;
            case "focus":
            case "blur":
            case "focusin":
            case "focusout":
                this.target.focusable = true;
                break;
            case "keydown":
                disposers.push(this._addDOMEvent(type, type, this._dispatchKeyboardEvent, this));
                break;
            case "keyup":
                disposers.push(this._addDOMEvent(type, type, this._dispatchKeyboardEvent, this));
                break;
            case "keypress":
                disposers.push(this._addDOMEvent(type, type, this._dispatchKeyboardEvent, this));
                break;
            case "input":
                disposers.push(this._addDOMEvent(type, type, this._dispatchKeyboardEvent, this));
                break;
        }
        info.disposer = new __WEBPACK_IMPORTED_MODULE_1__utils_Disposer__["c" /* MultiDisposer */](disposers);
        return info;
    };
    return InteractionObjectEventDispatcher;
}(__WEBPACK_IMPORTED_MODULE_0__utils_EventDispatcher__["b" /* TargetedEventDispatcher */]));

//# sourceMappingURL=InteractionObjectEvents.js.map

/***/ }),
/* 123 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return InteractionKeyboardObject; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Interaction__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Animation__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Array__ = __webpack_require__(12);
/**
 * Functionality related simulating of dragging of elements using keyboard.
 */
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



/**
 * [[InteractionKeyboardObject]] is used to simulate dragging of the `draggable`
 * element using keyboard arrows.
 *
 * @ignore Exclude from docs
 */
var InteractionKeyboardObject = /** @class */ (function () {
    /**
     * Constructor.
     *
     * @param {InteractionObject} io An InteractionObject
     */
    function InteractionKeyboardObject(io) {
        /**
         * Indicates if this object has already been deleted. Any
         * destruction/disposal code should take this into account when deciding
         * wheter to run potentially costly disposal operations if they already have
         * been run.
         *
         * @type {boolean}
         */
        this._disposed = false;
        /**
         * Indicates direction of current horizontal movement.
         *
         * 0 - not moving horizontally
         * 1 - moving right
         * -1 - moving left
         * @type {number}
         */
        this.directionX = 0;
        /**
         * Indicates direction of current vertical movement.
         *
         * 0 - not moving vertically
         * 1 - moving down
         * -1 - moving up
         * @type {number}
         */
        this.directionY = 0;
        this.interaction = io;
        this._startedOn = new Date().getTime();
        Object(__WEBPACK_IMPORTED_MODULE_0__Interaction__["b" /* getInteraction */])().processDragStart(io);
        __WEBPACK_IMPORTED_MODULE_1__utils_Animation__["d" /* animations */].push(this);
    }
    /**
     * It's an update method which is called by the system if
     * [[InteractionObject]] is used as animation.
     *
     * This will update coordinates of the element based on the movement
     * directions.
     */
    InteractionKeyboardObject.prototype.update = function () {
        // Init and get settings
        var io = this.interaction;
        var speed = Object(__WEBPACK_IMPORTED_MODULE_0__Interaction__["b" /* getInteraction */])().getKeyboardOption(io, "speed"), accelleration = Object(__WEBPACK_IMPORTED_MODULE_0__Interaction__["b" /* getInteraction */])().getKeyboardOption(io, "accelleration"), accellerationDelay = Object(__WEBPACK_IMPORTED_MODULE_0__Interaction__["b" /* getInteraction */])().getKeyboardOption(io, "accellerationDelay"), shift = {
            x: 0,
            y: 0
        };
        // If SHIFT key is pressed we slash speed by half and disable accelleration
        if (this.keyboardEvent.shiftKey) {
            speed *= 0.5;
            accelleration = 1;
        }
        // If CTRL is pressed we increase speed by x2
        else if (this.keyboardEvent.ctrlKey) {
            speed *= 2;
        }
        // Get elapsed time
        var ms = new Date().getTime() - this._startedOn;
        var accelleratedMs = ms - accellerationDelay;
        // Add accellerated movement
        if ((accelleration > 0) && (accelleratedMs > 0)) {
            var accellerationFactor = ms / accellerationDelay;
            ms = accellerationDelay;
            shift.x += this.directionX * (speed * accelleration * accellerationFactor * accelleratedMs);
            shift.y += this.directionY * (speed * accelleration * accellerationFactor * accelleratedMs);
        }
        // Calculate position
        shift.x += this.directionX * (speed * ms);
        shift.y += this.directionY * (speed * ms);
        // Simulate move on Interaction
        Object(__WEBPACK_IMPORTED_MODULE_0__Interaction__["b" /* getInteraction */])().handleTransformMove(io, shift, { x: 0, y: 0 }, this.keyboardEvent, true);
    };
    /**
     * Returns if this object has been already been disposed.
     *
     * @return {boolean} Is disposed?
     */
    InteractionKeyboardObject.prototype.isDisposed = function () {
        return this._disposed;
    };
    /**
     * Disposes this object. Removes from system animations.
     */
    InteractionKeyboardObject.prototype.dispose = function () {
        if (!this._disposed) {
            Object(__WEBPACK_IMPORTED_MODULE_0__Interaction__["b" /* getInteraction */])().processDragStop(this.interaction);
            __WEBPACK_IMPORTED_MODULE_2__utils_Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_1__utils_Animation__["d" /* animations */], this);
        }
    };
    return InteractionKeyboardObject;
}());

//# sourceMappingURL=InteractionKeyboardObject.js.map

/***/ }),
/* 124 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Inertia; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Interaction__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Animation__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Type__ = __webpack_require__(1);
/**
 * Functionality related to inertia
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * A point of inertia is to simulate gradually drecreasing motion even after
 * actual interaction by user, that caused it, has already ended.
 *
 * [[Inertia]] object will continue triggering the same [[Sprite]] handlers
 * as if the interaction was still happening, gradually reducing
 * shift/angle/scale values until full stop.
 *
 * Basically, from the target element's point of view, while inertia is
 * playing, it is still being interacted with by user, albeit with a
 * decreasing speed.
 */
var Inertia = /** @class */ (function (_super) {
    __extends(Inertia, _super);
    /**
     * Constructor
     */
    function Inertia() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * List of animations currently playing.
         *
         * @type {List<Animation>}
         */
        _this.animations = [];
        _this.className = "Inertia";
        // Make animations disposable
        _this._disposers.push(new __WEBPACK_IMPORTED_MODULE_2__utils_Animation__["b" /* AnimationDisposer */](_this.animations));
        return _this;
    }
    Object.defineProperty(Inertia.prototype, "x", {
        /**
         * Returns current X coordinate.
         *
         * @return {number} X
         */
        get: function () {
            return this.point.x;
        },
        /**
         * Sets current X coordinate.
         *
         * Will trigger "drag" event for the target element.
         *
         * @param {number} value X
         */
        set: function (value) {
            if (__WEBPACK_IMPORTED_MODULE_3__utils_Type__["isNumber"](value)) {
                this.point.x = value;
                this.handleMove();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Inertia.prototype, "y", {
        /**
         * Returns current Y coordinate.
         *
         * @return {number} Y
         */
        get: function () {
            return this.point.y;
        },
        /**
         * Sets current Y coordinate.
         *
         * Will trigger "drag" event for the target element.
         *
         * @param {number} value Y
         */
        set: function (value) {
            if (__WEBPACK_IMPORTED_MODULE_3__utils_Type__["isNumber"](value)) {
                this.point.y = value;
                this.handleMove();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Simulates dragging of element.
     */
    Inertia.prototype.handleMove = function () {
        // Prepare {InteractionEvent} object
        if (this.interaction.events.isEnabled("drag")) {
            var imev = {
                type: "drag",
                target: this.interaction,
                shift: {
                    x: this.x - this.startPoint.x,
                    y: this.y - this.startPoint.y
                },
                startPoint: this.startPoint,
                point: {
                    x: this.x,
                    y: this.y
                }
            };
            // Call handler
            this.interaction.events.dispatchImmediately("drag", imev);
        }
    };
    Object.defineProperty(Inertia.prototype, "rotation", {
        /**
         * Sets current angle.
         *
         * Will trigger "rotate" event on a target element.
         *
         * @param {number} value Angle
         */
        set: function (value) {
            if (__WEBPACK_IMPORTED_MODULE_3__utils_Type__["isNumber"](value)) {
                if (this.interaction.events.isEnabled("rotate")) {
                    var imev = {
                        type: "rotate",
                        target: this.interaction,
                        angle: value
                    };
                    this.interaction.events.dispatchImmediately("rotate", imev);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Finishes up the inertia animation. (removes reference to this animation
     * object)
     */
    Inertia.prototype.done = function () {
        // Remove inertia animation from the object
        this.interaction.inertias.removeKey(this.type);
        // Move ended
        if (this.type === "move") {
            Object(__WEBPACK_IMPORTED_MODULE_1__Interaction__["b" /* getInteraction */])().processDragStop(this.interaction);
        }
        // Destroy
        this.dispose();
    };
    return Inertia;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["a" /* BaseObject */]));

//# sourceMappingURL=Inertia.js.map

/***/ }),
/* 125 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return NumberFormatter; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_Language__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Base__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__formatters_TextFormatter__ = __webpack_require__(56);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Strings__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Object__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Utils__ = __webpack_require__(6);
/**
 * Number formatting-related functionality.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();






/**
 * NumberFormatter class. Formats numbers according to specified formats.
 *
 * @todo Apply translations to suffixes/prefixes
 */
var NumberFormatter = /** @class */ (function (_super) {
    __extends(NumberFormatter, _super);
    /**
     * Constructor
     */
    function NumberFormatter() {
        var _this = _super.call(this) || this;
        /**
         * A base value for negative numbers. Will treat all numbers below this value
         * as negative numbers.
         *
         * @type {number}
         */
        _this._negativeBase = 0;
        /**
         * Holds number format.
         *
         * @type {string}
         * @default #,###.#####
         */
        _this._numberFormat = "#,###.#####";
        /**
         * Output format to produce. If the format calls for applying color to the
         * formatted value, this setting will determine what markup to use: SVG or
         * HTML.
         *
         * Available options: svg, html.
         *
         * @default "svg"
         * @type {string}
         */
        _this._outputFormat = "svg";
        /**
         * Holds big number prefixes to apply to numbers if `a` modifier is used in
         * format.
         *
         * @type {Array}
         */
        _this._bigNumberPrefixes = [
            { "number": 1e+3, "suffix": "K" },
            { "number": 1e+6, "suffix": "M" },
            { "number": 1e+9, "suffix": "G" },
            { "number": 1e+12, "suffix": "T" },
            { "number": 1e+15, "suffix": "P" },
            { "number": 1e+18, "suffix": "E" },
            { "number": 1e+21, "suffix": "Z" },
            { "number": 1e+24, "suffix": "Y" }
        ];
        /**
         * Holds small number prefixes to apply to numbers if `a` modifier is used in
         * format.
         *
         * @type {Array}
         */
        _this._smallNumberPrefixes = [
            { "number": 1e-24, "suffix": "y" },
            { "number": 1e-21, "suffix": "z" },
            { "number": 1e-18, "suffix": "a" },
            { "number": 1e-15, "suffix": "f" },
            { "number": 1e-12, "suffix": "p" },
            { "number": 1e-9, "suffix": "n" },
            { "number": 1e-6, "suffix": "μ" },
            { "number": 1e-3, "suffix": "m" }
        ];
        /**
         * Holds prefixes to apply to data size numbers if `b` modifier is used in
         * format.
         *
         * @type {Array}
         */
        _this._bytePrefixes = [
            { "number": 0, "suffix": "B" },
            { "number": 1024, "suffix": "KB" },
            { "number": 1048576, "suffix": "MB" },
            { "number": 1073741824, "suffix": "GB" },
            { "number": 1099511627776, "suffix": "TB" },
            { "number": 1125899906842624, "suffix": "PB" }
        ];
        _this.className = "NumberFormatter";
        _this.applyTheme();
        return _this;
    }
    /**
     * Formats the number according to specific format.
     *
     * @param  {number | string}  value   Value to format
     * @param  {string}           format  Format to apply
     * @return {string}                   Formatted number
     */
    NumberFormatter.prototype.format = function (value, format) {
        // no language?
        if (!this.language) {
            if (this.sprite) {
                this.language = this.sprite.language;
            }
            else {
                this.language = new __WEBPACK_IMPORTED_MODULE_0__utils_Language__["a" /* Language */];
            }
        }
        // no format passed in or "Number"
        if (typeof format === "undefined" || format.toLowerCase() === "number") {
            format = this._numberFormat;
        }
        // Clean format
        format = __WEBPACK_IMPORTED_MODULE_5__utils_Utils__["cleanFormat"](format);
        // Get format info (it will also deal with parser caching)
        var info = this.parseFormat(format);
        // cast to number just in case
        // TODO: maybe use better casting
        var source = Number(value);
        // format and replace the number
        var details;
        if (source > this._negativeBase) {
            details = info.positive;
        }
        else if (source < this._negativeBase) {
            details = info.negative;
        }
        else {
            details = info.zero;
        }
        // Format
        var formatted = details.template.split(__WEBPACK_IMPORTED_MODULE_3__utils_Strings__["d" /* PLACEHOLDER */]).join(this.applyFormat(source, details));
        return formatted;
    };
    /**
     * Parses supplied format into structured object which can be used to format
     * the number.
     *
     * @param {string} format Format string, i.e. "#,###.00"
     */
    NumberFormatter.prototype.parseFormat = function (format) {
        var _this = this;
        // check cache
        if (typeof (this.getCache(format)) !== "undefined") {
            return this.getCache(format);
        }
        // init format parse info holder
        var info = {
            "positive": {
                "thousands": {
                    "active": -1,
                    "passive": -1,
                    "interval": -1,
                    "separator": this.language.translateEmpty("_thousandSeparator")
                },
                "decimals": {
                    "active": -1,
                    "passive": -1,
                    "separator": this.language.translateEmpty("_decimalSeparator")
                },
                "template": "",
                "source": "",
                "parsed": false
            },
            "negative": {
                "thousands": {
                    "active": -1,
                    "passive": -1,
                    "interval": -1,
                    "separator": this.language.translateEmpty("_thousandSeparator")
                },
                "decimals": {
                    "active": -1,
                    "passive": -1,
                    "separator": this.language.translateEmpty("_decimalSeparator")
                },
                "template": "",
                "source": "",
                "parsed": false
            },
            "zero": {
                "thousands": {
                    "active": -1,
                    "passive": -1,
                    "interval": -1,
                    "separator": this.language.translateEmpty("_thousandSeparator")
                },
                "decimals": {
                    "active": -1,
                    "passive": -1,
                    "separator": this.language.translateEmpty("_decimalSeparator")
                },
                "template": "",
                "source": "",
                "parsed": false
            }
        };
        // Escape double vertical bars (that mean display one vertical bar)
        format = format.replace("||", __WEBPACK_IMPORTED_MODULE_3__utils_Strings__["e" /* PLACEHOLDER2 */]);
        // Split it up and deal with different formats
        var parts = format.split("|");
        info.positive.source = parts[0];
        if (typeof parts[2] === "undefined") {
            info.zero = info.positive;
        }
        else {
            info.zero.source = parts[2];
        }
        if (typeof parts[1] === "undefined") {
            info.negative = info.positive;
        }
        else {
            info.negative.source = parts[1];
        }
        // Parse each
        __WEBPACK_IMPORTED_MODULE_4__utils_Object__["each"](info, function (part, item) {
            // Already parsed
            if (item.parsed) {
                return;
            }
            // Check cached
            if (typeof _this.getCache(item.source) !== "undefined") {
                info[part] = _this.getCache(item.source);
                return;
            }
            // Begin parsing
            var partFormat = item.source;
            // Just "Number"?
            if (partFormat.toLowerCase() === "number") {
                partFormat = _this._numberFormat;
            }
            // Let TextFormatter split into chunks
            var chunks = Object(__WEBPACK_IMPORTED_MODULE_2__formatters_TextFormatter__["b" /* getTextFormatter */])().chunk(partFormat, true);
            for (var i = 0; i < chunks.length; i++) {
                var chunk = chunks[i];
                // replace back double vertical bar
                chunk.text = chunk.text.replace(__WEBPACK_IMPORTED_MODULE_3__utils_Strings__["e" /* PLACEHOLDER2 */], "|");
                if (chunk.type === "value") {
                    // Parse format
                    // Look for codes
                    var matches = [];
                    if (matches = chunk.text.match(/[#0.,]+[ ]?[abesABES%]?[abesABES‰]?/)) {
                        if (matches === null || matches[0] === "") {
                            // no codes here - assume string
                            // nothing to do here
                            item.template += chunk.text;
                        }
                        else {
                            // look for the format modifiers at the end
                            var mods = [];
                            if (mods = matches[0].match(/[abesABES%‰]{2}|[abesABES%‰]{1}$/)) {
                                item.mod = mods[0].toLowerCase();
                                item.modSpacing = matches[0].match(/[ ]{1}[abesABES%‰]{1}$/) ? true : false;
                            }
                            // break the format up
                            var a = matches[0].split(".");
                            // Deal with thousands
                            if (a[0] === "") {
                                // No directives for thousands
                                // Leave default settings (no formatting)
                            }
                            else {
                                // Counts
                                item.thousands.active = (a[0].match(/0/g) || []).length;
                                item.thousands.passive = (a[0].match(/\#/g) || []).length + item.thousands.active;
                                // Separator interval
                                var b = a[0].split(",");
                                if (b.length === 1) {
                                    // No thousands separators
                                    // Do nothing
                                }
                                else {
                                    // Use length fo the last chunk as thousands length
                                    item.thousands.interval = b.pop().length;
                                    if (item.thousands.interval === 0)
                                        item.thousands.interval = -1;
                                }
                            }
                            // Deal with decimals
                            if (typeof (a[1]) === "undefined") {
                                // No directives for decimals
                                // Leave at defaults (no formatting)
                            }
                            else {
                                // Counts
                                item.decimals.active = (a[1].match(/0/g) || []).length;
                                item.decimals.passive = (a[1].match(/\#/g) || []).length + item.decimals.active;
                            }
                            // Add special code to template
                            item.template += chunk.text.split(matches[0]).join(__WEBPACK_IMPORTED_MODULE_3__utils_Strings__["d" /* PLACEHOLDER */]);
                        }
                    }
                }
                else {
                    // Quoted string - take it as it is
                    item.template += chunk.text;
                }
            }
            // Apply style formatting
            //item.template = getTextFormatter().format(item.template, this.outputFormat);
            // Save cache
            _this.setCache(item.source, item);
            // Mark this as parsed
            item.parsed = true;
        });
        // Save cache (the whole thing)
        this.setCache(format, info);
        return info;
    };
    /**
     * Applies parsed format to a numeric value.
     *
     * @param  {number}  value    Value
     * @param  {any}     details  Parsed format as returned by {parseFormat}
     * @return {string}          Formatted number
     */
    NumberFormatter.prototype.applyFormat = function (value, details) {
        // Use absolute values
        var negative = value < 0;
        value = Math.abs(value);
        // Recalculate according to modifier
        var prefix = "", suffix = "";
        var mods = details.mod ? details.mod.split("") : [];
        if (mods.indexOf("b") !== -1) {
            var a_1 = this.applyPrefix(value, this._bytePrefixes);
            value = a_1[0];
            prefix = a_1[1];
            suffix = a_1[2];
            if (details.modSpacing) {
                suffix = " " + suffix;
            }
        }
        else if (mods.indexOf("a") !== -1) {
            var a_2 = this.applyPrefix(value, value < 1.00 ? this._smallNumberPrefixes : this._bigNumberPrefixes);
            value = a_2[0];
            prefix = a_2[1];
            suffix = a_2[2];
            if (details.modSpacing) {
                suffix = " " + suffix;
            }
        }
        else if (mods.indexOf("%") !== -1) {
            value *= 100;
            suffix = "%";
        }
        else if (mods.indexOf("‰") !== -1) {
            value *= 1000;
            suffix = "‰";
        }
        // Round to passive
        if (mods.indexOf("e") !== -1) {
            // convert the value to exponential
            var exp = void 0;
            if (details.decimals.passive >= 0) {
                exp = value.toExponential(details.decimals.passive).split("e");
            }
            else {
                exp = value.toExponential().split("e");
            }
            value = Number(exp[0]);
            suffix = "e" + exp[1];
            if (details.modSpacing) {
                suffix = " " + suffix;
            }
        }
        else if (details.decimals.passive === 0) {
            value = Math.round(value);
        }
        else if (details.decimals.passive > 0) {
            var d = Math.pow(10, details.decimals.passive);
            value = Math.round(value * d) / d;
        }
        // Init return value
        var res = "";
        // Calc integer and decimal parts
        var a = __WEBPACK_IMPORTED_MODULE_5__utils_Utils__["numberToString"](value).split(".");
        // Format integers
        var ints = a[0];
        // Pad integers to active length
        if (ints.length < details.thousands.active) {
            ints = Array(details.thousands.active - ints.length + 1).join("0") + ints;
        }
        // Insert thousands separators
        if (details.thousands.interval > 0) {
            var ip = [];
            var intsr = ints.split("").reverse().join("");
            for (var i = 0; i <= ints.length; i += details.thousands.interval) {
                var c = intsr.substr(i, details.thousands.interval).split("").reverse().join("");
                if (c !== "") {
                    ip.unshift(c);
                }
            }
            ints = ip.join(details.thousands.separator);
        }
        // Add integers
        res += ints;
        // Add decimals
        if (a.length === 1) {
            a.push("");
        }
        var decs = a[1];
        // Fill zeros?
        if (decs.length < details.decimals.active) {
            decs += Array(details.decimals.active - decs.length + 1).join("0");
        }
        if (decs !== "") {
            res += details.decimals.separator + decs;
        }
        // Can't have empty return value
        if (res === "") {
            res = "0";
        }
        // Add minus sign back
        if (negative && (mods.indexOf("s") === -1)) {
            res = "-" + res;
        }
        // Add suffixes/prefixes
        if (prefix) {
            res = prefix + res;
        }
        if (suffix) {
            res += suffix;
        }
        return res;
    };
    /**
     * Chooses appropriate prefix and suffix based on the passed in rules.
     *
     * @param  {number}  value     Value
     * @param  {any[]}   prefixes  Prefix array
     * @return {any}               Result
     */
    NumberFormatter.prototype.applyPrefix = function (value, prefixes) {
        var newvalue = value, prefix = "", suffix = "";
        for (var i = 0; i < prefixes.length; i++) {
            if (prefixes[i].number <= value) {
                if (prefixes[i].number === 0) {
                    newvalue = 0;
                }
                else {
                    newvalue = value / prefixes[i].number;
                }
                prefix = prefixes[i].prefix;
                suffix = prefixes[i].suffix;
            }
        }
        return [newvalue, prefix, suffix];
    };
    /**
     * Invalidates the parent [[Sprite]] object.
     */
    NumberFormatter.prototype.invalidateSprite = function () {
        if (this.sprite) {
            this.sprite.invalidate();
        }
    };
    Object.defineProperty(NumberFormatter.prototype, "numberFormat", {
        /**
         * @return {string} A format to use for number formatting
         */
        get: function () {
            return this._numberFormat;
        },
        /**
         * Number format.
         *
         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting
         * @param {string}  format  A format to use for number formatting
         */
        set: function (format) {
            this._numberFormat = format;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberFormatter.prototype, "bigNumberPrefixes", {
        /**
         * @return {any[]} Prefixes for big numbers
         */
        get: function () {
            return this._bigNumberPrefixes;
        },
        /**
         * Prefixes for big numbers.
         *
         * It's an array of objects of number/prefix pairs.
         *
         * ```JSON
         * [
         *   { "number": 1e+3, "suffix": "K" },
         *   { "number": 1e+6, "suffix": "M" },
         *   { "number": 1e+9, "suffix": "G" },
         *   { "number": 1e+12, "suffix": "T" },
         *   { "number": 1e+15, "suffix": "P" },
         *   { "number": 1e+18, "suffix": "E" },
         *   { "number": 1e+21, "suffix": "Z" },
         *   { "number": 1e+24, "suffix": "Y" }
         * ]
         * ```
         *
         * If the number is bigger than the `number` ir will be converted to the
         * appropriate bigger number with prefix.
         *
         * E.g. as per above `1500` will be converted to `1.5K`.
         *
         * Please note that for this transformation to be enabled, you need to
         * enable it specific modifier in your format setting.
         *
         * The modifier for big/small number modification is "a":
         *
         * ```Text
         * {myfield.formatNumber("#,###.00a")}
         * ```
         *
         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting
         * @param {any[]}  prefixes  Prefixes for big numbers
         */
        set: function (prefixes) {
            this._bigNumberPrefixes = prefixes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberFormatter.prototype, "smallNumberPrefixes", {
        /**
         * @return {any[]} Prefixes for small numbers
         */
        get: function () {
            return this._smallNumberPrefixes;
        },
        /**
         * Prefixes for big numbers.
         *
         * It's an array of objects of number/prefix pairs.
         *
         * ```JSON
         * [
         *   { "number": 1e-24, "suffix": "y" },
         *   { "number": 1e-21, "suffix": "z" },
         *   { "number": 1e-18, "suffix": "a" },
         *   { "number": 1e-15, "suffix": "f" },
         *   { "number": 1e-12, "suffix": "p" },
         *   { "number": 1e-9, "suffix": "n" },
         *   { "number": 1e-6, "suffix": "μ" },
         *   { "number": 1e-3, "suffix": "m" }
         * ]
         * ```
         *
         * If the number is smaller than the `number` ir will be converted to the
         * appropriate smaller number with prefix.
         *
         * E.g. as per above `0.0015` will be converted to `1.5m`.
         *
         * Please note that for this transformation to be enabled, you need to
         * enable it specific modifier in your format setting.
         *
         * The modifier for big/small number modification is "a":
         *
         * ```Text
         * {myfield.formatNumber("#,###.00a")}
         * ```
         *
         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting
         * @param {any[]}  prefixes  Prefixes for small numbers
         */
        set: function (prefixes) {
            this._smallNumberPrefixes = prefixes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberFormatter.prototype, "bytePrefixes", {
        /**
         * @return {any[]} Prefixes for byte-size formatting
         */
        get: function () {
            return this._bytePrefixes;
        },
        /**
         * Basically the same as `bigNumberPrefixes`, except base for calculation
         * is not thousand but byte (1024).
         *
         * The modifier is "b".
         *
         *  ```Text
         * {myfield.formatNumber("#,###.00b")}
         * ```
         *
         * The above `2048` will change to `2K`.
         *
         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting
         * @param {any[]}  prefixes  Prefixes for byte-size formatting
         */
        set: function (prefixes) {
            this._bytePrefixes = prefixes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberFormatter.prototype, "outputFormat", {
        /**
         * @ignore Exclude from docs
         * @return {string} Output format
         */
        get: function () {
            return this._outputFormat;
        },
        /**
         * Ooutput format: "svg" or "html".
         *
         * @ignore Exclude from docs
         * @param {string}  value  Output format
         */
        set: function (outputFormat) {
            this._outputFormat = outputFormat.toLowerCase();
            this.invalidateSprite();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Replaces brackets with temporary placeholders.
     *
     * @ignore Exclude from docs
     * @param  {string}  text  Input text
     * @return {string}        Escaped text
     */
    NumberFormatter.prototype.escape = function (text) {
        return text.replace("||", __WEBPACK_IMPORTED_MODULE_3__utils_Strings__["e" /* PLACEHOLDER2 */]);
    };
    /**
     * Replaces placeholders back to brackets.
     *
     * @ignore Exclude from docs
     * @param  {string}  text  Escaped text
     * @return {string}        Unescaped text
     */
    NumberFormatter.prototype.unescape = function (text) {
        return text.replace(__WEBPACK_IMPORTED_MODULE_3__utils_Strings__["e" /* PLACEHOLDER2 */], "|");
    };
    return NumberFormatter;
}(__WEBPACK_IMPORTED_MODULE_1__Base__["a" /* BaseObject */]));

//# sourceMappingURL=NumberFormatter.js.map

/***/ }),
/* 126 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DurationFormatter; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_Language__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Base__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__formatters_TextFormatter__ = __webpack_require__(56);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Strings__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Object__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Type__ = __webpack_require__(1);
/**
 * Duration formatting functionality.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();







/**
 * DurationFormatter class. Formats numbers as durations.
 *
 * `1000` as `16:40`
 *
 * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Tutorial on duration formatting
 * @todo Implement syntax to set base unit in format itself
 */
var DurationFormatter = /** @class */ (function (_super) {
    __extends(DurationFormatter, _super);
    /**
     * Constructor
     */
    function DurationFormatter() {
        var _this = _super.call(this) || this;
        /**
         * A base value for negative numbers. Will treat all numbers below this value
         * as negative numbers.
         *
         * @type {number}
         */
        _this._negativeBase = 0;
        /**
         * Holds number format.
         *
         * @type {string}
         */
        _this._durationFormat = "mm:ss";
        /**
         * A base unit to consider values are in.
         *
         * @default "s"
         * @type {string}
         */
        _this._baseUnit = "s";
        /**
         * Output format to produce. If the format calls for applying color to the
         * formatted value, this setting will determine what markup to use: SVG or
         * HTML.
         *
         * Available options: svg, html.
         *
         * @default "svg"
         * @type {string}
         */
        _this._outputFormat = "svg";
        /**
         * How many milliseconds each unit represents.
         *
         * @type {Object}
         */
        _this._unitValues = {
            "S": 1,
            "s": 1000,
            "m": 60000,
            "h": 3600000,
            "d": 86400000,
            "w": 604800000,
            "M": 2592000000,
            "y": 31536000000,
        };
        /**
         * Collection of aliases for units.
         *
         * @type {Object}
         */
        _this._unitAliases = {
            "Y": "y",
            "D": "d",
            "H": "h",
            "K": "h",
            "k": "h",
            "n": "S"
        };
        _this.className = "DurationFormatter";
        _this.applyTheme();
        return _this;
    }
    /**
     * Formats the number according as duration.
     *
     * For example `1000` (base unit seconds) would be converted to `16:40` as in
     * 16 minutes and 40 seconds.
     *
     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Tutorial on duration formatting
     * @param  {number | string}  value   Value to format
     * @param  {string}           format  Format to apply
     * @param  {string}           base    Override base unit
     * @return {string}                   Formatted number
     */
    DurationFormatter.prototype.format = function (value, format, base) {
        // no language?
        if (!this.language) {
            if (this.sprite) {
                this.language = this.sprite.language;
            }
            else {
                this.language = new __WEBPACK_IMPORTED_MODULE_0__utils_Language__["a" /* Language */];
            }
        }
        // no base unit?
        var baseUnit = base || this._baseUnit;
        // no format passed in or empty
        if (typeof format === "undefined" || format === "") {
            format = this._durationFormat;
        }
        // Clean format
        format = __WEBPACK_IMPORTED_MODULE_5__utils_Utils__["cleanFormat"](format);
        // get format info (it will also deal with parser caching)
        var info = this.parseFormat(format, baseUnit);
        // cast to number just in case
        // TODO: maybe use better casting
        var source = Number(value);
        // format and replace the number
        var details;
        if (source > this._negativeBase) {
            details = info.positive;
        }
        else if (source < this._negativeBase) {
            details = info.negative;
        }
        else {
            details = info.zero;
        }
        // Format
        var formatted = this.applyFormat(source, details);
        // Apply color?
        if (details.color !== "") {
            if (this._outputFormat === "svg") {
                formatted = "<tspan fill='" + details.color + "'>" + formatted + "</tspan>";
            }
            else if (this._outputFormat === "html") {
                formatted = "<span style='color: " + details.color + ";'>" + formatted + "</span>";
            }
        }
        return formatted;
    };
    /**
     * Parses supplied format into structured object which can be used to format
     * the number.
     *
     * @param  {string}  format  Format string, i.e. "#,###.00"
     * @param  {string}  base    Override base unit
     * @return {any}             Parsed information
     */
    DurationFormatter.prototype.parseFormat = function (format, base) {
        var _this = this;
        // check cache
        if (typeof (this.getCache(format)) !== "undefined") {
            return this.getCache(format);
        }
        // no base unit?
        var baseUnit = base || this._baseUnit;
        // Initialize duration parsing info
        var info = {
            "positive": {
                "color": "",
                "template": "",
                "parts": [],
                "source": "",
                "baseUnit": baseUnit,
                "parsed": false,
                "absolute": false
            },
            "negative": {
                "color": "",
                "template": "",
                "parts": [],
                "source": "",
                "baseUnit": baseUnit,
                "parsed": false,
                "absolute": false
            },
            "zero": {
                "color": "",
                "template": "",
                "parts": [],
                "source": "",
                "baseUnit": baseUnit,
                "parsed": false,
                "absolute": false
            }
        };
        // Escape double vertical bars (that mean display one vertical bar)
        format = format.replace("||", __WEBPACK_IMPORTED_MODULE_3__utils_Strings__["e" /* PLACEHOLDER2 */]);
        // Split it up and deal with different formats
        var parts = format.split("|");
        info.positive.source = parts[0];
        if (typeof parts[2] === "undefined") {
            info.zero = info.positive;
        }
        else {
            info.zero.source = parts[2];
        }
        if (typeof parts[1] === "undefined") {
            info.negative = info.positive;
        }
        else {
            info.negative.source = parts[1];
        }
        // Parse each
        __WEBPACK_IMPORTED_MODULE_4__utils_Object__["each"](info, function (part, item) {
            // Already parsed
            if (item.parsed) {
                return;
            }
            // Check cached
            if (typeof _this.getCache(item.source) !== "undefined") {
                info[part] = _this.getCache(item.source);
                return;
            }
            // Begin parsing
            var partFormat = item.source;
            // Check for [] directives
            var dirs = [];
            dirs = item.source.match(/^\[([^\]]*)\]/);
            if (dirs && dirs.length && dirs[0] !== "") {
                partFormat = item.source.substr(dirs[0].length);
                item.color = dirs[1];
            }
            // Let TextFormatter split into chunks
            var chunks = Object(__WEBPACK_IMPORTED_MODULE_2__formatters_TextFormatter__["b" /* getTextFormatter */])().chunk(partFormat, true);
            for (var i = 0; i < chunks.length; i++) {
                var chunk = chunks[i];
                // replace back double vertical bar
                chunk.text = chunk.text.replace(__WEBPACK_IMPORTED_MODULE_3__utils_Strings__["e" /* PLACEHOLDER2 */], "|");
                if (chunk.type === "value") {
                    // Just "Duration"?
                    if (chunk.text.toLowerCase() === "duration") {
                        chunk.text = _this._durationFormat;
                    }
                    // Check for "a" (absolute) modifier
                    if (chunk.text.match(/[yYMdDwhHKkmsSn]+a/)) {
                        item.absolute = true;
                        chunk.text = chunk.text.replace(/([yYMdDwhHKkmsSn]+)a/, "$1");
                    }
                    // Find all possible parts
                    var matches = chunk.text.match(/y+|Y+|M+|d+|D+|w+|h+|H+|K+|k+|m+|s+|S+|n+/g);
                    if (matches) {
                        // Populate template
                        for (var x = 0; x < matches.length; x++) {
                            // Is it an alias?
                            if (!__WEBPACK_IMPORTED_MODULE_6__utils_Type__["hasValue"](matches[x])) {
                                matches[x] = _this._unitAliases[matches[x]];
                            }
                            item.parts.push(matches[x]);
                            chunk.text = chunk.text.replace(matches[x], __WEBPACK_IMPORTED_MODULE_3__utils_Strings__["d" /* PLACEHOLDER */]);
                        }
                    }
                }
                // Apply to template
                item.template += chunk.text;
            }
            // Apply style formatting
            //item.template = getTextFormatter().format(item.template, this.outputFormat);
            // Save cache
            _this.setCache(item.source, item);
            // Mark this as parsed
            item.parsed = true;
        });
        // Save cache (the whole thing)
        this.setCache(format, info);
        return info;
    };
    /**
     * Applies parsed format to a numeric value.
     *
     * @param  {number}  value    Value
     * @param  {any}     details  Parsed format as returned by {parseFormat}
     * @return {string}           Formatted duration
     */
    DurationFormatter.prototype.applyFormat = function (value, details) {
        // Use absolute values
        var negative = !details.absolute && (value < this._negativeBase);
        value = Math.abs(value);
        // Recalculate to milliseconds
        var tstamp = this.toTimeStamp(value, details.baseUnit);
        // Init return value
        var res = details.template;
        // Iterate through duration parts
        for (var i = 0; i < details.parts.length; i++) {
            // Gather the part
            var part = details.parts[i];
            var unit = part.substr(0, 1);
            var digits = part.length;
            // Calculate current unit value
            var ints = Math.floor(tstamp / this._unitValues[unit]);
            res = res.replace(__WEBPACK_IMPORTED_MODULE_3__utils_Strings__["d" /* PLACEHOLDER */], __WEBPACK_IMPORTED_MODULE_5__utils_Utils__["padString"](ints, digits, "0"));
            // Reduce timestamp
            tstamp -= ints * this._unitValues[unit];
        }
        // Reapply negative sign
        if (negative) {
            res = "-" + res;
        }
        return res;
    };
    /**
     * Converts numeric value to timestamp in milliseconds.
     *
     * @param  {number}  value     A source value
     * @param  {string}  baseUnit  Base unit the source value is in: "q", "s", "i", "h", "d", "w", "m", "y"
     * @return {number}            Value representation as a timestamp in milliseconds
     */
    DurationFormatter.prototype.toTimeStamp = function (value, baseUnit) {
        return value * this._unitValues[baseUnit];
    };
    /**
     * Invalidates the parent [[Sprite]] object.
     */
    DurationFormatter.prototype.invalidateSprite = function () {
        if (this.sprite) {
            this.sprite.invalidate();
        }
    };
    Object.defineProperty(DurationFormatter.prototype, "durationFormat", {
        /**
         * @return {string} Duration format
         */
        get: function () {
            return this._durationFormat;
        },
        /**
         * Duration format.
         *
         * @default "mm:ss"
         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Tutorial on duration formatting
         * @param {string}  format  Duration format
         */
        set: function (format) {
            this._durationFormat = format;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationFormatter.prototype, "baseUnit", {
        /**
         * @return {string} Base unit
         */
        get: function () {
            return this._baseUnit;
        },
        /**
         * Base unit the values are in.
         *
         * A base unit will be used to recalculate the numeric value to millisecond
         * timestamps.
         *
         * Available options:
         *
         * * "q" - millisecond
         * * "s" - second
         * * "i" - minute
         * * "h" - hour
         * * "d" - day
         * * "w" - week
         * * "m" - month
         * * "y" - year
         *
         * @default "s"
         * @param {string}  baseUnit  A base unit
         */
        set: function (baseUnit) {
            this._baseUnit = baseUnit.toLowerCase();
            this.invalidateSprite();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DurationFormatter.prototype, "outputFormat", {
        /**
         * Getter for output format.
         *
         * @ignore Exclude from docs
         * @return {string} Output format
         */
        get: function () {
            return this._outputFormat;
        },
        /**
         * Setter for output format: "svg" or "html.
         *
         * @ignore Exclude from docs
         * @param {string}  value  Output format
         */
        set: function (outputFormat) {
            this._outputFormat = outputFormat.toLowerCase();
            this.invalidateSprite();
        },
        enumerable: true,
        configurable: true
    });
    return DurationFormatter;
}(__WEBPACK_IMPORTED_MODULE_1__Base__["a" /* BaseObject */]));

//# sourceMappingURL=DurationFormatter.js.map

/***/ }),
/* 127 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Export; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ExportMenu__ = __webpack_require__(128);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Adapter__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__elements_Modal__ = __webpack_require__(92);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Dictionary__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__formatters_DateFormatter__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Language__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_Validatable__ = __webpack_require__(93);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_Color__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__Options__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__utils_DOM__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__utils_Object__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__utils_Net__ = __webpack_require__(129);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__utils_Type__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__utils_Utils__ = __webpack_require__(6);
/**
 * Export module.
 *
 * Parts of Export functionality rely on the following third party libraries:
 *
 * [Fabric.js](http://fabricjs.com/)
 * Copyright (c) Printio (Juriy Zaytsev, Maxim Chernyak)
 * Licensed under [MIT](https://github.com/kangax/fabric.js/blob/master/LICENSE)
 *
 * [pdfmake](http://pdfmake.org/)
 * Copyright (c) 2014 bpampuch
 * Licensed under [MIT](https://github.com/bpampuch/pdfmake/blob/master/LICENSE)
 *
 * [SheetJS Community Edition](https://github.com/sheetjs/js-xlsx)
 * Licensed under [Apache License 2.0](https://github.com/SheetJS/js-xlsx/blob/master/LICENSE)
 *
 * [JSZip](http://stuartk.com/jszip)
 * Copyright (c) Stuart Knightley
 * Dual licenced under the [MIT license or GPLv3](https://raw.githubusercontent.com/Stuk/jszip/master/LICENSE.markdown).
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */
















/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * [[Export]] allows downloading of current snapshot of the chart as an
 * image, PDF, or its data in various formats.
 *
 * The export functionality is enabled by default in charts and is accessible
 * via API or optional export menu.
 *
 * To enable menu, simply access export's `menu` property. E.g.:
 *
 * ```TypeScript
 * chart.exporting.menu = new am4core.ExportMenu();
 * ```
 * ```JavaScript
 * chart.exporting.menu = new am4core.ExportMenu();
 * ```
 * ```JSON
 * {
 *   // ...
 *   "exporting": {
 *     "menu": {}
 *   }
 * }
 * ```
 *
 * To export via API, use `export()` method:
 *
 * ```TypeScript
 * chart.exporting.export(type, [options]);
 * ```
 * ```JavaScript
 * chart.exporting.export(type, [options]);
 * ```
 *
 * E.g.:
 *
 * ```TypeScript
 * chart.exporting.export("png");
 * ```
 * ```JavaScript
 * chart.exporting.export("png");
 * ```
 *
 * @todo Better loading indicator?
 * @todo Implement multiplier option
 * @todo Handling of hanged exports
 * @important
 */
var Export = /** @class */ (function (_super) {
    __extends(Export, _super);
    /**
     * Constructor
     */
    function Export() {
        var _this = _super.call(this) || this;
        /**
         * Adapter.
         *
         * @type {Adapter<Export, IExportAdapters>}
         */
        _this.adapter = new __WEBPACK_IMPORTED_MODULE_1__utils_Adapter__["a" /* Adapter */](_this);
        /**
         * Holds options for each format.
         *
         * @ignore Exclude from docs
         * @type {Dictionary<string, ExportOptions>}
         */
        _this._formatOptions = new __WEBPACK_IMPORTED_MODULE_4__utils_Dictionary__["a" /* Dictionary */]();
        /**
         * Holds a list of objects that were temporarily removed from the DOM while
         * exporting. Those most probably are tainted images, or foreign objects that
         * would otherwise prevent SVG to be converted to canvas.
         *
         * @ignore Exclude from docs
         * @type {List<IExportRemovedObject>}
         */
        _this._removedObjects = new __WEBPACK_IMPORTED_MODULE_3__utils_List__["b" /* List */]();
        /**
         * Exported files will be prefixed with whatever it is set here.
         *
         * @ignore Exclude from docs
         * @type {string}
         */
        _this._filePrefix = "amCharts";
        /**
         * If export operation takes longer than milliseconds in this second, we will
         * show a modal saying export operation took longer than expected.
         *
         * @type {number}
         */
        _this.timeoutDelay = 2000;
        _this.className = "Export";
        // Set default options
        _this._formatOptions.setKey("png", {});
        _this._formatOptions.setKey("jpg", {
            quality: 0.8
        });
        _this._formatOptions.setKey("gif", {});
        _this._formatOptions.setKey("svg", {});
        _this._formatOptions.setKey("pdf", {
            fontSize: 14,
            imageFormat: "png",
            addURL: true
        });
        _this._formatOptions.setKey("json", {
            indent: 2,
            useLocale: true
        });
        _this._formatOptions.setKey("csv", {
            addColumnNames: true
        });
        _this._formatOptions.setKey("xlsx", {
            addColumnNames: true,
            useLocale: true
        });
        _this._formatOptions.setKey("print", {
            delay: 500,
            printMethod: "iframe"
        });
        // Add options adapter
        _this.adapter.add("options", function (arg) {
            var formatOptions = _this._formatOptions.getKey(arg.type);
            if (arg.options) {
                arg.options = __WEBPACK_IMPORTED_MODULE_12__utils_Object__["merge"](arg.options, formatOptions);
            }
            else {
                arg.options = formatOptions;
            }
            return arg;
        });
        _this.applyTheme();
        _this.dispatchImmediately("inited");
        return _this;
    }
    Object.defineProperty(Export.prototype, "menu", {
        /**
         * @return {Optional<ExportMenu>} ExportMenu instance
         */
        get: function () {
            return this._menu;
        },
        /**
         * An instance of [[ExportMenu]].
         *
         * To add an export menu to a chart, set this to a new instance of
         * [[ExportMenu]].
         *
         * ```TypeScript
         * chart.exporting.menu = new am4core.ExportMenu();
         * ```
         * ```JavaScript
         * chart.exporting.menu = new am4core.ExportMenu();
         * ```
         * ```JSON
         * {
         *   // ...
         *   "exporting": {
         *     "menu": {}
         *   }
         * }
         * ```
         *
         * @param {Optional<ExportMenu>}  menu  ExportMenu instance
         */
        set: function (menu) {
            var _this = this;
            if (this._menu) {
                this.removeDispose(this._menu);
            }
            this._menu = menu;
            // Set container and language
            this._menu.container = this.container;
            this._menu.language = this._language;
            // Add adapter to check for browser support
            this._menu.adapter.add("branch", function (arg) {
                arg.branch.unsupported = !_this.typeSupported(arg.branch.type);
                return arg;
            });
            // Add click events
            this._menu.events.on("hit", function (ev) {
                _this.export(ev.branch.type, ev.branch.options);
                _this.menu.close();
            });
            this._menu.events.on("enter", function (ev) {
                _this.export(ev.branch.type, ev.branch.options);
                _this.menu.close();
            });
            this._menu.events.on("over", function (ev) {
                _this._disablePointers();
            });
            this._menu.events.on("out", function (ev) {
                _this._releasePointers();
            });
            // Dispatch event
            this.dispatchImmediately("menucreated");
            // Prefix with Sprite's class name
            this._menu.adapter.add("classPrefix", function (obj) {
                obj.classPrefix = __WEBPACK_IMPORTED_MODULE_10__Options__["a" /* options */].classNamePrefix + obj.classPrefix;
                return obj;
            });
            // Add menu to disposers so that it's destroyed when Export is disposed
            this._disposers.push(this._menu);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Checks if this specific menu item type is supported by current system.
     *
     * @param  {string}   type  Menu item type
     * @return {boolean}        `false` if not supported
     */
    Export.prototype.typeSupported = function (type) {
        var supported = true;
        if (type === "pdf") {
            supported = this.downloadSupport();
        }
        else if (type === "xlsx") {
            supported = (this.downloadSupport() && this.data) ? true : false;
        }
        else if (type == "print" && !window.print) {
            supported = false;
        }
        else if (["json", "csv"].indexOf(type) !== -1 && !this.data) {
            supported = false;
        }
        return this.adapter.apply("supported", {
            supported: supported,
            type: type
        }).supported;
    };
    /**
     * Get function to handle export for particular format.
     *
     * @ignore Exclude from docs
     * @type {this}
     */
    Export.prototype._getFunction = function (type) {
        switch (type) {
            case "png":
            case "gif":
            case "jpg":
                return this.getImage;
            case "svg":
                return this.getSVG;
            case "pdf":
                return this.getPDF;
            case "xlsx":
                return this.getExcel;
            case "csv":
                return this.getCSV;
            case "json":
                return this.getJSON;
            case "print":
                return this.getPrint;
            default:
                return this.unsupported;
        }
    };
    /**
     * Initiates export procedure.
     *
     * @param  {string}   type     Export type
     * @param  {Object}   options  Options
     * @return {boolean}           `true` if export was successful
     * @async
     */
    Export.prototype.export = function (type, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var event_1, func, data, event_2, event_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Dispatch event
                        if (this.events.isEnabled("exportstarted")) {
                            event_1 = {
                                "type": "exportstarted",
                                "target": this,
                                "format": type,
                                "options": options
                            };
                            this.events.dispatchImmediately("exportstarted", event_1);
                        }
                        // Schedule a preloader
                        this.showPreloader();
                        // Schedule a timeout
                        if (this.timeoutDelay) {
                            this.hideTimeout();
                            this._timeoutTimeout = this.setTimeout(function () {
                                // Dispatch event
                                if (_this.events.isEnabled("exporttimedout")) {
                                    var event_4 = {
                                        "type": "exporttimedout",
                                        "target": _this,
                                        "format": type,
                                        "options": options
                                    };
                                    _this.events.dispatchImmediately("exporttimedout", event_4);
                                }
                                // Show modal
                                _this.showTimeout();
                            }, this.timeoutDelay);
                        }
                        func = this._getFunction(type);
                        // Give chance for plugins to override both function and options
                        options = this.adapter.apply("options", {
                            options: options,
                            type: type
                        }).options;
                        func = this.adapter.apply("exportFunction", {
                            func: func,
                            type: type,
                            options: options
                        }).func;
                        return [4 /*yield*/, func.call(this, type, options)];
                    case 1:
                        data = _a.sent();
                        if (data) {
                            // Dispatch event
                            if (this.events.isEnabled("exportfinished")) {
                                event_2 = {
                                    "type": "exportfinished",
                                    "target": this,
                                    "format": type,
                                    "options": options
                                };
                                this.events.dispatchImmediately("exportfinished", event_2);
                            }
                            // Hide preloader and timeout modals
                            this.hidePreloader();
                            this.hideTimeout();
                            // Download or print
                            if (type === "print") {
                                return [2 /*return*/, this.print(data, options, this.adapter.apply("title", {
                                        title: this.title,
                                        options: options
                                    }).title)];
                            }
                            else {
                                return [2 /*return*/, this.download(data, this.filePrefix + "." + type)];
                            }
                        }
                        else {
                            // Throw exception?
                            // @todo
                            // Dispatch event
                            if (this.events.isEnabled("error")) {
                                event_3 = {
                                    "type": "error",
                                    "target": this,
                                    "format": type,
                                    "options": options
                                };
                                this.events.dispatchImmediately("error", event_3);
                            }
                            return [2 /*return*/, false];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * A function that should handle unsupported export types.
     *
     * @ignore Exclude from docs
     * @param  {string}              type     Export type
     * @param  {IExportImageOptions} options  Options
     * @return {Promise<string>}               Promise
     * @async
     */
    Export.prototype.unsupported = function (type, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, undefined];
            });
        });
    };
    /**
     * Requests a Print of the chart.
     *
     * @param  {string}               type     Export type
     * @param  {IExportImageOptions}  options  Options
     * @return {Promise<string>}               Promise
     * @async
     */
    Export.prototype.getPrint = function (type, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getImage("png", options)];
            });
        });
    };
    /**
     * Produces image output from the element.
     *
     * Converts to a `Canvas` first, then produces an image to download.
     *
     * This is an asynchronous function. Rather than returning a result, it
     * returns a Promise.
     *
     * You can use `await` notion from other async functions, or `then()`
     * anywhere else.
     *
     * ```TypeScript
     * // Async
     * let img = await chart.exporting.getImage( "PNG" );
     *
     * // Sync
     * let img;
     * chart.exporting.getImage( "PNG" ).then( ( data ) => {
     *   img = exporing;
     * } );
     * ```
     * ```JavaScript
     * var img;
     * chart.exporting.getImage( "PNG" ).then( ( data ) => {
     *   var = data;
     * } );
     * ```
     *
     * @param  {string}               type     Image format
     * @param  {IExportImageOptions}  options  Options
     * @return {Promise<string>}               Promise
     */
    Export.prototype.getImage = function (type, options) {
        return __awaiter(this, void 0, void 0, function () {
            var background, width, height, font, fontSize, canvas, ctx, DOMURL, data, svg, url, img, uri, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        background = this.backgroundColor || this.findBackgroundColor(this.sprite.dom);
                        return [4 /*yield*/, this.simplifiedImageExport()];
                    case 1:
                        if (!_a.sent()) return [3 /*break*/, 8];
                        width = this.sprite.pixelWidth, height = this.sprite.pixelHeight, font = this.findFont(this.sprite.dom), fontSize = this.findFontSize(this.sprite.dom);
                        canvas = document.createElement("canvas");
                        canvas.width = width;
                        canvas.height = height;
                        ctx = canvas.getContext("2d");
                        // Add background if necessary
                        if (background) {
                            ctx.fillStyle = background.toString();
                            ctx.fillRect(0, 0, width, height);
                        }
                        DOMURL = this.getDOMURL();
                        // Do prepareations on a document
                        return [4 /*yield*/, Promise.all([
                                this.imagesToDataURI(this.sprite.dom, options),
                                this.prepForeignObjects(this.sprite.dom, options)
                            ])];
                    case 2:
                        // Do prepareations on a document
                        _a.sent();
                        data = this.normalizeSVG(this.serializeElement(this.sprite.paper.defs) + this.serializeElement(this.sprite.dom), options, width, height, font, fontSize);
                        svg = new Blob([data], { type: "image/svg+xml" });
                        url = DOMURL.createObjectURL(svg);
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 7]);
                        return [4 /*yield*/, this.loadNewImage(url, width, height, "anonymous")];
                    case 4:
                        img = _a.sent();
                        // Draw image on canvas
                        ctx.drawImage(img, 0, 0);
                        DOMURL.revokeObjectURL(url);
                        // Options are set?
                        if (!__WEBPACK_IMPORTED_MODULE_14__utils_Type__["hasValue"](options)) {
                            options = {};
                        }
                        uri = canvas.toDataURL(this.getContentType(type), options.quality);
                        // Restore replaced tainted images in DOM
                        this.restoreRemovedObjects();
                        // Return value
                        return [2 /*return*/, uri];
                    case 5:
                        e_1 = _a.sent();
                        return [4 /*yield*/, this.getImageAdvanced(type, options)];
                    case 6: 
                    // An error occurred, let's try advanced method
                    return [2 /*return*/, _a.sent()];
                    case 7: return [3 /*break*/, 10];
                    case 8: return [4 /*yield*/, this.getImageAdvanced(type, options)];
                    case 9: 
                    /**
                     * Going the hard way. Converting to canvas from each node
                     */
                    return [2 /*return*/, _a.sent()];
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Tries to dynamically load [Fabric.js](http://fabricjs.com/) and export it
     * using its functions.
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @param {string}               type     Image format
     * @param {IExportImageOptions}  options  Options
     * @return {Promise<string>}              Data uri
     * @todo Is toDataURL a Promise?
     */
    Export.prototype.getImageAdvanced = function (type, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var fpromise, fabric, width, height, font, fontSize, data, canvas, background, uri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: 
                    // Convert external images to data uris
                    return [4 /*yield*/, this.imagesToDataURI(this.sprite.dom, options)];
                    case 1:
                        // Convert external images to data uris
                        _a.sent();
                        return [4 /*yield*/, this.fabric];
                    case 2:
                        fpromise = _a.sent();
                        fabric = fpromise.fabric;
                        width = this.sprite.pixelWidth, height = this.sprite.pixelHeight, font = this.findFont(this.sprite.dom), fontSize = this.findFontSize(this.sprite.dom);
                        data = this.normalizeSVG(this.serializeElement(this.sprite.paper.defs) + this.serializeElement(this.sprite.dom), options, width, height, font, fontSize);
                        canvas = new fabric.StaticCanvas();
                        canvas.setDimensions({
                            width: width,
                            height: height
                        });
                        background = this.backgroundColor || this.findBackgroundColor(this.sprite.dom);
                        if (background) {
                            canvas.setBackgroundColor(background.toString());
                        }
                        return [4 /*yield*/, new Promise(function (success, error) {
                                fabric.loadSVGFromString(data, function (objects, fabricOptions) {
                                    var obj = fabric.util.groupSVGElements(objects, fabricOptions);
                                    canvas.add(obj).renderAll();
                                    success(canvas.toDataURL({
                                        "type": type,
                                        "multiplier": 1,
                                        "quality": (options && options.quality) || 1,
                                        "enableRetina": false
                                    }));
                                }, _this.prepFabricElement, {
                                    "crossOrigin": "anonymous"
                                });
                            })];
                    case 3:
                        uri = _a.sent();
                        return [2 /*return*/, uri];
                }
            });
        });
    };
    /**
     * Preps objects used by FabricJS before the export.
     *
     * It performs removal of embedded SVG images, since those would trigger
     * security error on older browsers. Newer browsers are fine, but they do not
     * use Fabric, so we can safely assume that if we got to this function, we
     * have an old browser on our hands.
     *
     * @ignore Exclude from docs
     * @param {any} el  Element
     * @param {any} obj Fabric element object
     * @todo Check if we can somehow apply text formatting to `<tspan>` elements that is otherwise ignored by Fabric
     */
    Export.prototype.prepFabricElement = function (el, obj) {
        // Remove in-line SVG images so they don't cause security error
        if (obj.type == "image" && obj["xlink:href"] && obj["xlink:href"].match(/^data:image\/svg\+xml/)) {
            obj.visible = false;
        }
    };
    /**
     * Converts all `<image>` tags in SVG to use data uris instead of external
     * URLs
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @ignore Exclude from docs
     * @param  {SVGSVGElement}        el       SVG node
     * @param  {IExportImageOptions}  options  Options
     * @return {Promise<void>}                 Promise
     */
    Export.prototype.imagesToDataURI = function (el, options) {
        return __awaiter(this, void 0, void 0, function () {
            var images, promises, count, i, image, href;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        images = el.querySelectorAll("image");
                        if (!images.length) return [3 /*break*/, 2];
                        promises = [];
                        // There are images, process each of them
                        for (count = images.length, i = 0; i < count; i++) {
                            image = images[i];
                            href = image.getAttributeNS(Export.XLINK, "href");
                            //let href = image.getAttribute("href");
                            if (href.indexOf("data:image") !== -1) {
                                // Ignore image if it's already in Data URI format
                            }
                            else {
                                // SVG or bitmap image?
                                if (href.indexOf(".svg") !== -1) {
                                    promises.push(this.svgToDataURI(image, options));
                                }
                                else {
                                    promises.push(this.imageToDataURI(image, options));
                                }
                            }
                        }
                        return [4 /*yield*/, Promise.all(promises)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * `foreignObject` elements cannot be exported. This function hides them
     * temprarily. In the future it might try to convert them to SVG to make them
     * exportable.
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @ignore Exclude from docs
     * @param  {SVGSVGElement}        el       SVG node
     * @param  {IExportImageOptions}  options  Options
     * @return {Promise<void>}                 Promise
     */
    Export.prototype.prepForeignObjects = function (el, options) {
        return __awaiter(this, void 0, void 0, function () {
            var objects, count, i;
            return __generator(this, function (_a) {
                objects = el.querySelectorAll("foreignObject");
                if (objects.length) {
                    // There are foreign objects, process each of them
                    for (count = objects.length, i = 0; i < count; i++) {
                        this.temporarilyRemoveObject(objects[i]);
                    }
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Converts an SVG `<image>` to use its data uri for `href` instead of
     * external file.
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @ignore Exclude from docs
     * @param {SVGImageElement}     el       SVG element
     * @param {IExportImageOptions} options  Options
     */
    Export.prototype.imageToDataURI = function (el, options) {
        return __awaiter(this, void 0, void 0, function () {
            var img, canvas, uri, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.loadNewImage(el.getAttributeNS(Export.XLINK, "href"), null, null, "anonymous")];
                    case 1:
                        // Create image
                        img = _a.sent();
                        canvas = document.createElement("canvas");
                        canvas.width = img.width;
                        canvas.height = img.height;
                        // Draw new image on it via `toDataURL`
                        canvas.getContext("2d").drawImage(img, 0, 0);
                        // Replace image `href` with data uri
                        // If we got to this point it means image has loaded, however we might
                        // still get an error with `toDataURL()`
                        try {
                            uri = canvas.toDataURL();
                            el.setAttribute("href", uri);
                            return [2 /*return*/, uri];
                        }
                        catch (e) {
                            // Give up and temporarily remove the element href temporarily
                            if (options.keepTainted !== false) {
                                /*this._removedObjects.push({
                                    "element": el,
                                    "originalHref": el.getAttributeNS(Export.XLINK, "href")
                                });
                                el.setAttributeNS(Export.XLINK, "href", "");*/
                                this.temporarilyRemoveObject(el);
                            }
                            return [2 /*return*/, undefined];
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        e_2 = _a.sent();
                        // Give up and temporarily remove the element's href
                        if (!options || options.keepTainted !== false) {
                            /*this._removedObjects.push({
                                "element": el,
                                "originalHref": el.getAttributeNS(Export.XLINK, "href")
                            });
                            el.setAttributeNS(Export.XLINK, "href", "");*/
                            this.temporarilyRemoveObject(el);
                        }
                        return [2 /*return*/, undefined];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Converts `<image>` with external SVG source to data uri. Loads external SVG
     * file, then converts it to data uri and replaces the `xlink:href` parameter.
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @ignore Exclude from docs
     * @param {SVGImageElement}     el        An SVG element
     * @param {IExportImageOptions} options   Options
     */
    Export.prototype.svgToDataURI = function (el, options) {
        return __awaiter(this, void 0, void 0, function () {
            var href, data, charset, uri, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        href = el.getAttributeNS(Export.XLINK, "href");
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, __WEBPACK_IMPORTED_MODULE_13__utils_Net__["a" /* load */](href)];
                    case 2:
                        data = _a.sent();
                        charset = this.adapter.apply("charset", {
                            charset: "base64",
                            type: "svg",
                            options: options
                        }).charset;
                        uri = this.adapter.apply("svgToDataURI", {
                            data: "data:" + this.getContentType("svg") + ";" + charset + "," + btoa(data.response),
                            options: options
                        }).data;
                        el.setAttributeNS(Export.XLINK, "href", uri);
                        return [2 /*return*/, uri];
                    case 3:
                        e_3 = _a.sent();
                        // Disable temporarily
                        if (!options || options.keepTainted !== false) {
                            /*this._removedObjects.push({
                                "element": el,
                                "originalHref": href
                            });
                            el.setAttributeNS(Export.XLINK, "href", "");*/
                            this.temporarilyRemoveObject(el);
                        }
                        return [2 /*return*/, undefined];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Temporarily removes element from DOM, and replaces it with a dummy
     * placeholder, as well as stores it for later restoration.
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @ignore Exclude from docs
     * @param {Node} el Node
     */
    Export.prototype.temporarilyRemoveObject = function (el, placeholder) {
        // Get parent
        var parent = el.parentElement || el.parentNode;
        // Create a placeholder group element if it has not been passed in
        if (!placeholder) {
            placeholder = this.sprite.paper.add("g").node;
        }
        parent.insertBefore(placeholder, el);
        // Check if we have a textContents we can replace with
        // @todo Perhaps we should explore alternatives to creating text nodes
        // i.e. creating a text version of the HTML-based Text, just for export
        // purposes. Converting HTML into SVG is very complicated
        if (el.textContent) {
            /*let text = this.sprite.paper.add("text").node;
            text.textContent = el.textContent;
            placeholder.appendChild(text);

            // Copy properties from the removing element to the placeholder
            $dom.copyAttributes(el, placeholder);*/
        }
        // Remove the old element
        parent.removeChild(el);
        // Log removed item
        this._removedObjects.push({
            "element": el,
            "placeholder": placeholder
        });
    };
    /**
     * Restores all (possibly tainted or unsupported) objects that were
     * temporarily removed when exporting.
     *
     * @ignore Exclude from docs
     */
    Export.prototype.restoreRemovedObjects = function () {
        var obj;
        while (obj = this._removedObjects.pop()) {
            //obj.element.setAttribute("href", obj.originalHref);
            var parent_1 = obj.placeholder.parentElement || obj.placeholder.parentNode;
            parent_1.insertBefore(obj.element, obj.placeholder);
            //parent.removeChild(obj.placeholder);
        }
    };
    /**
     * Checkes if simplified export can be used using `createObjectURL` and SVG
     * document does not contain any external images.
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @ignore Exclude from docs
     * @return {boolean} `true` if simplified export can be used
     */
    Export.prototype.simplifiedImageExport = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cache, canvas, ctx, DOMURL, svg, url, img, e_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cache = __WEBPACK_IMPORTED_MODULE_9__Registry__["b" /* registry */].getCache("simplifiedImageExport");
                        if (cache === false || cache === true) {
                            return [2 /*return*/, cache];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        canvas = document.createElement("canvas");
                        canvas.width = 1;
                        canvas.height = 1;
                        ctx = canvas.getContext("2d");
                        DOMURL = this.getDOMURL();
                        svg = new Blob([this.normalizeSVG("<g></g>", {}, 1, 1)], { type: "image/svg+xml" });
                        url = DOMURL.createObjectURL(svg);
                        return [4 /*yield*/, this.loadNewImage(url, 1, 1)];
                    case 2:
                        img = _a.sent();
                        ctx.drawImage(img, 0, 0);
                        DOMURL.revokeObjectURL(url);
                        try {
                            //let uri = canvas.toDataURL("image/png");
                            __WEBPACK_IMPORTED_MODULE_9__Registry__["b" /* registry */].setCache("simplifiedImageExport", true);
                            return [2 /*return*/, true];
                        }
                        catch (e) {
                            __WEBPACK_IMPORTED_MODULE_9__Registry__["b" /* registry */].setCache("simplifiedImageExport", false);
                            return [2 /*return*/, false];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        e_4 = _a.sent();
                        __WEBPACK_IMPORTED_MODULE_9__Registry__["b" /* registry */].setCache("simplifiedImageExport", false);
                        return [2 /*return*/, false];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns a new `<image>` element.
     *
     * @ignore Exclude from docs
     * @param  {string}                     url          URL of the image
     * @param  {number}                     width        Width (px)
     * @param  {number}                     height       Height (px)
     * @param  {string}                     crossOrigin  Cross-Origin setting
     * @return {Promise<HTMLImageElement>}               Promise
     */
    Export.prototype.loadNewImage = function (url, width, height, crossOrigin) {
        return new Promise(function (success, error) {
            // New image
            var image;
            if (width && height) {
                image = new Image(width, height);
            }
            else {
                image = new Image();
            }
            // Set crossorigin
            if (crossOrigin) {
                image.setAttribute("crossOrigin", crossOrigin);
            }
            // Rrport success on load
            image.onload = function () {
                success(image);
            };
            function onerror() {
                // Error occurred. Just in case it's the crossOrigin issue, let's try
                // stripping off this attribute and trying again
                if (crossOrigin) {
                    // Retain old uri
                    var currentHref = image.src;
                    // Set up another `onerror` to handle situations where image is not
                    // loadable at all (i.e. protected by CORS)
                    image.onerror = function () {
                        // Nope, no luck
                        error(new Error("Loading image \"" + url + "\" failed"));
                    };
                    // remove the `crossOrigin` attribute
                    image.removeAttribute("crossorigin");
                    // retry
                    image.src = "";
                    image.src = currentHref;
                }
                else {
                    error(new Error("Loading image \"" + url + "\" failed"));
                }
            }
            // Set image error handlers
            image.onabort = onerror;
            image.onerror = onerror;
            // Trigger load
            image.src = url;
        });
    };
    /**
     * Returns current DOM URL.
     *
     * @ignore Exclude from docs
     * @return {any} URL
     */
    Export.prototype.getDOMURL = function () {
        return self.URL || self.webkitURL || self;
    };
    /**
     * Returns an SVG representation of the chart.
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @param {string}             type     Type of the export
     * @param {IExportSVGOptions}  options  Options
     * @return {Promise<string>}            Promise
     */
    Export.prototype.getSVG = function (type, options) {
        return __awaiter(this, void 0, void 0, function () {
            var width, height, font, fontSize, svg, charset, uri;
            return __generator(this, function (_a) {
                width = this.sprite.pixelWidth, height = this.sprite.pixelHeight, font = this.findFont(this.sprite.dom), fontSize = this.findFontSize(this.sprite.dom);
                svg = this.normalizeSVG(this.serializeElement(this.sprite.paper.defs) + this.serializeElement(this.sprite.dom), options, width, height, font, fontSize);
                charset = this.adapter.apply("charset", {
                    charset: "charset=utf-8",
                    type: "svg",
                    options: options
                }).charset;
                uri = this.adapter.apply("getSVG", {
                    data: "data:" + this.getContentType(type) + ";" + charset + "," + encodeURIComponent(svg),
                    options: options
                }).data;
                return [2 /*return*/, uri];
            });
        });
    };
    /**
     * Checks if SVG is fully formatted. Encloses in `<svg>...</svg>` if
     * necessary.
     *
     * @ignore Exclude from docs
     * @param  {string}             svg       Input SVG
     * @param  {IExportSVGOptions}  options   Options
     * @param  {number}             width     Width of the SVG viewport
     * @param  {number}             height    Height of the SVG viewport
     * @param  {string}             font      Font family to use as a base
     * @param  {string}             fontSize  Font size to use as a base
     * @return {string}                       Output SVG
     * @todo Add style params to existing <svg>
     */
    Export.prototype.normalizeSVG = function (svg, options, width, height, font, fontSize) {
        // Construct width/height params
        var dimParams = "";
        if (width) {
            dimParams += "width=\"" + width + "px\" ";
        }
        if (height) {
            dimParams += "height=\"" + height + "px\" ";
        }
        // Apply font settings
        var styleParams = "";
        if (font) {
            styleParams += "font-family: " + font.replace(/"/g, "") + ";";
        }
        if (fontSize) {
            styleParams += "font-size: " + fontSize + ";";
        }
        // Add missing <svg> enclosure
        if (!svg.match(/<svg/)) {
            svg = "<?xml version=\"1.0\" encoding=\"utf-8\"?><svg " + dimParams + " style=\"" + styleParams + "\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">" + svg + "</svg>";
        }
        else {
            if (dimParams !== "") {
                // Clear current params
                svg = svg.replace(/(<svg[^>]*)width="[^"]*"/, "$1");
                svg = svg.replace(/(<svg[^>]*)height="[^"]*"/, "$1");
                // Add new params
                svg = svg.replace(/(<svg)/, "$1" + dimParams);
            }
            /*if (styleParams !== "") {
                // Clear current params
                svg = svg.replace(/(<svg[^>]*)stylewidth="[^"]*"/, "$1");
                svg = svg.replace(/(<svg[^>]*)height="[^"]*"/, "$1");

                // Add new params
                svg = svg.replace(/(<svg)/, "$1" + dimParams);
            }*/
        }
        svg = this.adapter.apply("normalizeSVG", {
            data: svg,
            options: options
        }).data;
        return svg;
    };
    /**
     * Serializes an element and returns its contents.
     *
     * @ignore Exclude from docs
     * @param  {HTMLElement | SVGSVGElement}  element  An element to serialize
     * @return {string}                                A serialized XML
     */
    Export.prototype.serializeElement = function (element) {
        return new XMLSerializer().serializeToString(element);
    };
    /**
     * Returns a PDF containing chart image.
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @param {string}             type     Type of the export
     * @param {IExportPDFOptions}  options  Options
     * @return {Promise<string>}            Promise
     * @async
     * @todo Account for header when calculating vertical fit
     */
    Export.prototype.getPDF = function (type, options) {
        return __awaiter(this, void 0, void 0, function () {
            var image, pdfmake, defaultMargins, doc, title;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getImage(options.imageFormat || "png", options)];
                    case 1:
                        image = _a.sent();
                        return [4 /*yield*/, this.pdfmake];
                    case 2:
                        pdfmake = _a.sent();
                        defaultMargins = [30, 30, 30, 30];
                        doc = {
                            pageSize: options.pageSize || "A4",
                            pageOrientation: options.pageOrientation || "portrait",
                            pageMargins: options.pageMargins || defaultMargins,
                            //header: <any>[],
                            content: []
                        };
                        title = this.adapter.apply("title", {
                            title: this.title,
                            options: options
                        }).title;
                        if (title) {
                            doc.content.push({
                                text: title,
                                fontSize: options.fontSize,
                                bold: true,
                                margin: [0, 0, 0, 15]
                            });
                        }
                        // Add page URL?
                        if (options.addURL) {
                            doc.content.push({
                                text: this.language.translate("Saved from") + ": " + document.location.href,
                                fontSize: options.fontSize,
                                margin: [0, 0, 0, 15]
                            });
                        }
                        // Add image
                        doc.content.push({
                            image: image,
                            fit: this.getPageSizeFit(doc.pageSize, doc.pageMargins)
                        });
                        // Apply adapters
                        doc = this.adapter.apply("pdfmakeDocument", {
                            doc: doc,
                            options: options
                        }).doc;
                        return [4 /*yield*/, new Promise(function (success, error) {
                                pdfmake.createPdf(doc).getDataUrl(function (uri) {
                                    success(uri);
                                });
                            })];
                    case 3: 
                    // Create PDF
                    return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Returns fit dimensions for available page sizes.
     *
     * @ignore Exclude from docs
     * @param  {pageSizes} pageSize Page size
     * @return {number[]}           `[width, height]` in pixels
     */
    Export.prototype.getPageSizeFit = function (pageSize, margins) {
        // Check margins
        var newMargins = [0, 0, 0, 0];
        if (typeof margins == "number") {
            newMargins = [margins, margins, margins, margins];
        }
        else if (margins.length == 2) {
            newMargins = [margins[0], margins[1], margins[0], margins[1]];
        }
        else if (margins.length == 4) {
            newMargins = margins;
        }
        // Define available page sizes
        var sizes = {
            "4A0": [4767.87, 6740.79],
            "2A0": [3370.39, 4767.87],
            A0: [2383.94, 3370.39],
            A1: [1683.78, 2383.94],
            A2: [1190.55, 1683.78],
            A3: [841.89, 1190.55],
            A4: [595.28, 841.89],
            A5: [419.53, 595.28],
            A6: [297.64, 419.53],
            A7: [209.76, 297.64],
            A8: [147.40, 209.76],
            A9: [104.88, 147.40],
            A10: [73.70, 104.88],
            B0: [2834.65, 4008.19],
            B1: [2004.09, 2834.65],
            B2: [1417.32, 2004.09],
            B3: [1000.63, 1417.32],
            B4: [708.66, 1000.63],
            B5: [498.90, 708.66],
            B6: [354.33, 498.90],
            B7: [249.45, 354.33],
            B8: [175.75, 249.45],
            B9: [124.72, 175.75],
            B10: [87.87, 124.72],
            C0: [2599.37, 3676.54],
            C1: [1836.85, 2599.37],
            C2: [1298.27, 1836.85],
            C3: [918.43, 1298.27],
            C4: [649.13, 918.43],
            C5: [459.21, 649.13],
            C6: [323.15, 459.21],
            C7: [229.61, 323.15],
            C8: [161.57, 229.61],
            C9: [113.39, 161.57],
            C10: [79.37, 113.39],
            RA0: [2437.80, 3458.27],
            RA1: [1729.13, 2437.80],
            RA2: [1218.90, 1729.13],
            RA3: [864.57, 1218.90],
            RA4: [609.45, 864.57],
            SRA0: [2551.18, 3628.35],
            SRA1: [1814.17, 2551.18],
            SRA2: [1275.59, 1814.17],
            SRA3: [907.09, 1275.59],
            SRA4: [637.80, 907.09],
            EXECUTIVE: [521.86, 756.00],
            FOLIO: [612.00, 936.00],
            LEGAL: [612.00, 1008.00],
            LETTER: [612.00, 792.00],
            TABLOID: [792.00, 1224.00]
        };
        // Calculate size
        var fitSize = sizes[pageSize];
        fitSize[0] -= newMargins[0] + newMargins[2];
        fitSize[1] -= newMargins[1] + newMargins[3];
        return fitSize;
    };
    /**
     * Returns an Excel file of chart's data.
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @param {string}               type     Type of the export
     * @param {IExportExcelOptions}  options  Options
     * @return {Promise<string>}              Promise
     * @async
     * @todo Handle dates
     * @todo Support for multi-sheet
     */
    Export.prototype.getExcel = function (type, options) {
        return __awaiter(this, void 0, void 0, function () {
            var XLSX, wbOptions, sheetName, wb, data, len, i, uri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.xlsx];
                    case 1:
                        XLSX = _a.sent();
                        wbOptions = this.adapter.apply("xlsxWorkbookOptions", {
                            options: {
                                bookType: "xlsx",
                                bookSST: false,
                                type: "base64"
                            }
                        }).options;
                        sheetName = this.normalizeExcelSheetName(this.adapter.apply("xlsxSheetName", {
                            name: this.title || this.language.translate("Data")
                        }).name);
                        wb = {
                            SheetNames: [sheetName],
                            Sheets: {}
                        };
                        data = [];
                        // Add column names?
                        if (options.addColumnNames) {
                            data.push(this.getExcelRow(this.dataFields, options));
                        }
                        // Add lines
                        for (len = this.data.length, i = 0; i < len; i++) {
                            data.push(this.getExcelRow(this.data[i], options));
                        }
                        // Create sheet and add data
                        wb.Sheets[sheetName] = XLSX.utils.aoa_to_sheet(data);
                        uri = this.adapter.apply("getExcel", {
                            data: "data:" + this.getContentType(type) + ";base64," + XLSX.write(wb, wbOptions),
                            options: options
                        }).data;
                        return [2 /*return*/, uri];
                }
            });
        });
    };
    /**
     * This is needed to work around Excel limitations.
     *
     * @param  {string}  name  Source name
     * @return {string}        Normalized name
     */
    Export.prototype.normalizeExcelSheetName = function (name) {
        name = name.replace(/([:\\\/?*\[\]]+)/g, " ");
        return __WEBPACK_IMPORTED_MODULE_15__utils_Utils__["truncateWithEllipsis"](name, 31, "...", true);
    };
    /**
     * Rertuns an array of values to be used as Excel row.
     *
     * @ignore Exclude from docs
     * @param  {any}                  row      Row data
     * @param  {IExportExcelOptions}  options  Options
     * @return {any[]}                         Array of values
     */
    Export.prototype.getExcelRow = function (row, options) {
        var _this = this;
        // Init
        var items = [];
        // Process each row item
        __WEBPACK_IMPORTED_MODULE_12__utils_Object__["each"](row, function (key, value) {
            items.push(_this.convertDateValue(key, value, options));
        });
        return items;
    };
    /**
     * Returns chart's data formatted as CSV.
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @param {string}             type     Type of the export
     * @param {IExportCSVOptions}  options  Options
     * @return {Promise<string>}            Promise
     * @async
     */
    Export.prototype.getCSV = function (type, options) {
        return __awaiter(this, void 0, void 0, function () {
            var csv, br, len, i, row, charset, uri;
            return __generator(this, function (_a) {
                csv = "";
                br = "";
                for (len = this.data.length, i = 0; i < len; i++) {
                    row = this.getCSVRow(this.data[i], options);
                    if (options.reverse) {
                        csv = row + br + csv;
                    }
                    else {
                        csv += br + row;
                    }
                    br = "\n";
                }
                // Add column names?
                if (options.addColumnNames) {
                    csv = this.getCSVRow(this.dataFields, options) + br + csv;
                }
                charset = this.adapter.apply("charset", {
                    charset: "charset=utf-8",
                    type: type,
                    options: options
                }).charset;
                uri = this.adapter.apply("getCSV", {
                    data: "data:" + this.getContentType(type) + ";" + charset + "," + encodeURIComponent(csv),
                    options: options
                }).data;
                return [2 /*return*/, uri];
            });
        });
    };
    /**
     * Formats a row of CSV data.
     *
     * @ignore Exclude from docs
     * @param  {any}               row     An object holding data for the row
     * @param  {IExportCSVOptions} options Options
     * @return {string}                    Formated CSV line
     */
    Export.prototype.getCSVRow = function (row, options) {
        var _this = this;
        // Init
        var separator = options.separator || ",";
        var items = [];
        // Process each row item
        __WEBPACK_IMPORTED_MODULE_12__utils_Object__["each"](row, function (key, value) {
            // Convert dates
            var item = _this.convertDateValue(key, value, options);
            // Cast and escape doublequotes
            item = "" + item;
            item = item.replace(/"/g, '""');
            // Enclose into double quotes
            if (options.forceQuotes || (item.search(new RegExp("\"|\n|" + separator, "g")) >= 0)) {
                item = "\"" + item + "\"";
            }
            // Add to item
            items.push(item);
        });
        return items.join(separator);
    };
    /**
     * Returns chart's data in JSON format.
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @param {string}              type     Type of the export
     * @param {IExportJSONOptions}  options  Options
     * @return {Promise<string>}             Promise
     * @async
     */
    Export.prototype.getJSON = function (type, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var json, charset, uri;
            return __generator(this, function (_a) {
                json = JSON.stringify(this.data, function (key, value) {
                    if (typeof value == "object") {
                        __WEBPACK_IMPORTED_MODULE_12__utils_Object__["each"](value, function (field, item) {
                            value[field] = _this.convertDateValue(field, item, options);
                        });
                    }
                    return value;
                }, options.indent);
                charset = this.adapter.apply("charset", {
                    charset: "charset=utf-8",
                    type: type,
                    options: options
                }).charset;
                uri = this.adapter.apply("getJSON", {
                    data: "data:" + this.getContentType(type) + ";" + charset + "," + encodeURIComponent(json),
                    options: options
                }).data;
                return [2 /*return*/, uri];
            });
        });
    };
    /**
     * Converts the value to proper date format.
     *
     * @ignore Exclude from docs
     * @param  {string}                                  field    Field name
     * @param  {any}                                     value    Value
     * @param  {IExportCSVOptions | IExportJSONOptions}  options  Options
     * @return {any}                                              Formatted date value or unmodified value
     */
    Export.prototype.convertDateValue = function (field, value, options) {
        // Is this a timestamp?
        if (typeof value == "number" && this.isDateField(field)) {
            value = new Date(value);
        }
        if (value instanceof Date) {
            if (options.useTimestamps) {
                value = value.getTime();
            }
            else if (options.useLocale) {
                value = value.toLocaleString();
            }
            else {
                value = this.dateFormatter.format(value, this.dateFormat);
            }
        }
        return value;
    };
    /**
     * Triggers download of the file.
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @param  {string}            uri       Data URI with file content
     * @param  {string}            fileName  File name
     * @return {Promise<boolean>}            Promise
     * @async
     */
    Export.prototype.download = function (uri, fileName) {
        return __awaiter(this, void 0, void 0, function () {
            var link, parts, contentType, decoded, chars, i, charCode, blob, parts, contentType, iframe, idoc;
            return __generator(this, function (_a) {
                //if (window.navigator.msSaveOrOpenBlob === undefined) {
                if (this.linkDownloadSupport() && !this.blobDownloadSupport()) {
                    link = document.createElement("a");
                    link.download = fileName;
                    //uri = uri.replace(/#/g, "%23");
                    link.href = uri;
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                }
                else if (__WEBPACK_IMPORTED_MODULE_14__utils_Type__["hasValue"](window.navigator.msSaveBlob)) {
                    parts = uri.split(";");
                    contentType = parts.shift().replace(/data:/, "");
                    uri = decodeURIComponent(parts.join(";").replace(/^[^,]*,/, ""));
                    // Check if we need to Base64-decode
                    if (["image/svg+xml", "application/json", "text/csv"].indexOf(contentType) == -1) {
                        try {
                            decoded = atob(uri);
                            uri = decoded;
                        }
                        catch (e) {
                            // Error occurred, meaning string was not Base64-encoded. Do nothing.
                            return [2 /*return*/, false];
                        }
                    }
                    chars = new Array(uri.length);
                    for (i = 0; i < uri.length; ++i) {
                        charCode = uri.charCodeAt(i);
                        chars[i] = charCode;
                    }
                    blob = new Blob([new Uint8Array(chars)], { type: contentType });
                    window.navigator.msSaveBlob(blob, fileName);
                }
                else if (this.legacyIE()) {
                    parts = uri.match(/^data:(.*);[ ]*([^,]*),(.*)$/);
                    if (parts.length === 4) {
                        // Base64-encoded or text-based stuff?
                        if (parts[2] == "base64") {
                            // Base64-encoded - probably an image
                            if (parts[1].match(/^image\//)) {
                                // Yep, an image. Let's create a temporary image placeholder,
                                // so that user can use do Save As.
                                this.showModal("<img src=\"" + uri + "\" style=\"float: left; max-width: 50%; max-height: 80%; margin: 0 1em 0.5em 0; border: 1px solid #eee;\" />" +
                                    "<p>" + this.language.translate("To save the image, right-click thumbnail on the left and choose \"Save picture as...\"") +
                                    "</p>" +
                                    "<p style=\"text-align: center;\"><small>" + this.language.translate("(Press ESC to close this message)") + "</small></p>", this.language.translate("Image Export Complete"));
                            }
                        }
                        else {
                            contentType = void 0;
                            if (fileName.match(/\.svg$/)) {
                                contentType = "image/svg+xml";
                            }
                            else {
                                contentType = "text/plain";
                                fileName += ".txt";
                            }
                            iframe = document.createElement("iframe");
                            iframe.width = "1px";
                            iframe.height = "1px";
                            iframe.style.display = "none";
                            document.body.appendChild(iframe);
                            idoc = iframe.contentDocument;
                            idoc.open(contentType, "replace");
                            idoc.charset = parts[2].replace(/charset=/, "");
                            idoc.write(decodeURIComponent(parts[3]));
                            idoc.close();
                            idoc.execCommand("SaveAs", true, fileName);
                            // Destroy the iframe
                            document.body.removeChild(iframe);
                        }
                    }
                }
                return [2 /*return*/, true];
            });
        });
    };
    /**
     * Returns `true` if browser has any supported methods to trigger download
     * of a binary file.
     *
     * @return {boolean} Supports downloads?
     */
    Export.prototype.downloadSupport = function () {
        return this.linkDownloadSupport() || this.blobDownloadSupport();
    };
    /**
     * Checks if the browser supports "download" attribute on links.
     *
     * @ignore Exclude from docs
     * @return {boolean} Browser supports triggering downloads?
     */
    Export.prototype.linkDownloadSupport = function () {
        // Do we have this cached?
        var cache = __WEBPACK_IMPORTED_MODULE_9__Registry__["b" /* registry */].getCache("linkDownloadSupport");
        if (cache === false || cache === true) {
            return cache;
        }
        var a = document.createElement("a");
        var res = typeof a.download !== "undefined";
        __WEBPACK_IMPORTED_MODULE_9__Registry__["b" /* registry */].setCache("linkDownloadSupport", res);
        return res;
    };
    /**
     * Checks if the browser supports download via `msBlob`.
     *
     * @ignore Exclude from docs
     * @return {boolean} Browser supports triggering downloads?
     */
    Export.prototype.blobDownloadSupport = function () {
        return __WEBPACK_IMPORTED_MODULE_14__utils_Type__["hasValue"](window.navigator.msSaveOrOpenBlob);
    };
    /**
     * Checks if this is a legacy version of IE.
     *
     * @ignore Exclude from docs
     * @return {boolean} IE9 or less?
     */
    Export.prototype.legacyIE = function () {
        // Create a temporary <div> with conditional tags in it an an <i> tag.
        // Count <i>s. If there are some, we have IE9 or late on our hands.
        var div = document.createElement("div");
        div.innerHTML = "<!--[if lt IE 10]><i></i><![endif]-->";
        return div.getElementsByTagName("i").length == 1;
    };
    /**
     * Initiates print of the chart.
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @param {string}               data     Data URI for the image
     * @param {IExportPrintOptions}  options  Options
     * @param {string}               title    Optional title to use (uses window's title by default)
     * @return {Promise<boolean>}             Promise
     * @async
     */
    Export.prototype.print = function (data, options, title) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (options.printMethod == "css") {
                    return [2 /*return*/, this.printViaCSS(data, options, title)];
                }
                else {
                    return [2 /*return*/, this.printViaIframe(data, options, title)];
                }
                return [2 /*return*/];
            });
        });
    };
    Export.prototype.printViaCSS = function (data, options, title) {
        return __awaiter(this, void 0, void 0, function () {
            var scroll, rule, originalTitle, img, isIOS;
            return __generator(this, function (_a) {
                scroll = document.documentElement.scrollTop || document.body.scrollTop;
                rule = new __WEBPACK_IMPORTED_MODULE_11__utils_DOM__["c" /* StyleRule */]("body > *", {
                    "display": "none",
                    "position": "fixed",
                    "visibility": "hidden",
                    "opacity": "0",
                    "clipPath": "polygon(0px 0px,0px 0px,0px 0px,0px 0px);"
                });
                if (title && document && document.title) {
                    originalTitle = document.title;
                    document.title = title;
                }
                img = new Image();
                img.src = data;
                img.style.maxWidth = "100%";
                img.style.display = "block";
                img.style.position = "relative";
                img.style.visibility = "visible";
                img.style.opacity = "1";
                img.style.clipPath = "none";
                document.body.appendChild(img);
                // Print
                this.setTimeout(function () {
                    window.print();
                }, 50);
                isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
                if (isIOS && (options.delay < 1000)) {
                    options.delay = 1000;
                }
                else if (options.delay < 100) {
                    options.delay = 100;
                }
                // Delay function that resets back the document the way ot was before
                this.setTimeout(function () {
                    // Remove image
                    document.body.removeChild(img);
                    // Reset back all elements
                    /*for (let len = items.length, i = 0; i < len; i++) {
                        let item = <HTMLElement>items[i];
                        if ($dom.isElement(item)) {
                            item.style.display = states[i];
                        }
                    }*/
                    rule.dispose();
                    // Restore title
                    if (originalTitle) {
                        document.title = document.title;
                    }
                    // Scroll back the document the way it was before
                    document.documentElement.scrollTop = document.body.scrollTop = scroll;
                }, options.delay || 500);
                return [2 /*return*/, true];
            });
        });
    };
    Export.prototype.printViaIframe = function (data, options, title) {
        return __awaiter(this, void 0, void 0, function () {
            var iframe, img, isIOS;
            return __generator(this, function (_a) {
                iframe = document.createElement("iframe");
                iframe.style.visibility = "hidden";
                document.body.appendChild(iframe);
                // This is needed for FireFox
                iframe.contentWindow.document.open();
                iframe.contentWindow.document.close();
                img = new Image();
                img.src = data;
                img.style.maxWidth = "100%";
                if (title) {
                    iframe.contentWindow.document.title = title;
                }
                iframe.contentWindow.document.body.appendChild(img);
                iframe.load = function () {
                    iframe.contentWindow.document.body.appendChild(img);
                };
                // Print
                this.setTimeout(function () {
                    try {
                        if (!iframe.contentWindow.document.execCommand("print", false, null)) {
                            iframe.contentWindow.print();
                        }
                    }
                    catch (e) {
                        iframe.contentWindow.print();
                    }
                }, options.delay || 50);
                isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
                if (isIOS && (options.delay < 1000)) {
                    options.delay = 1000;
                }
                else if (options.delay < 100) {
                    options.delay = 100;
                }
                // Delay function that resets back the document the way ot was before
                this.setTimeout(function () {
                    // Remove image
                    document.body.removeChild(iframe);
                }, options.delay + 50 || 100);
                return [2 /*return*/, true];
            });
        });
    };
    /**
     * Finds a background color for the element. If element is transparent it goes
     * up the DOM hierarchy to find a parent element that does.
     *
     * @ignore Exclude from docs
     * @param  {Element}  element Element
     * @return {Color}            Color code
     */
    Export.prototype.findBackgroundColor = function (element) {
        // Check if element has styles set
        var opacity = 1, currentColor = "";
        if (element.currentStyle) {
            currentColor = element.currentStyle["background-color"];
        }
        else if (window.getComputedStyle) {
            currentColor = document.defaultView.getComputedStyle(element, null).getPropertyValue("background-color");
        }
        // Check opacity
        if (currentColor.match(/[^,]*,[^,]*,[^,]*,[ ]?0/) || currentColor == "transparent") {
            opacity = 0;
        }
        if (opacity == 0) {
            var parent_2 = element.parentElement; // || <Element>element.parentNode;
            // Completely transparent. Look for a parent
            if (parent_2) {
                return this.findBackgroundColor(parent_2);
            }
            else {
                return Object(__WEBPACK_IMPORTED_MODULE_8__utils_Color__["c" /* color */])("#fff");
            }
        }
        else {
            return Object(__WEBPACK_IMPORTED_MODULE_8__utils_Color__["c" /* color */])(currentColor, opacity);
        }
    };
    /**
     * Returns a font fmaily name for the element (directly set or
     * computed/inherited).
     *
     * @ignore Exclude from docs
     * @param  {Element}  element  Element
     * @return {string}            Font family
     */
    Export.prototype.findFont = function (element) {
        // Check if element has styles set
        var font = "";
        if (element.currentStyle) {
            font = element.currentStyle["font-family"];
        }
        else if (window.getComputedStyle) {
            font = document.defaultView.getComputedStyle(element, null).getPropertyValue("font-family");
        }
        if (!font) {
            // Completely transparent. Look for a parent
            var parent_3 = element.parentElement || element.parentNode;
            if (parent_3) {
                return this.findFont(parent_3);
            }
            else {
                return undefined;
            }
        }
        else {
            return font;
        }
    };
    /**
     * Returns a font fmaily name for the element (directly set or
     * computed/inherited).
     *
     * @ignore Exclude from docs
     * @param  {Element}  element  Element
     * @return {string}            Font family
     */
    Export.prototype.findFontSize = function (element) {
        // Check if element has styles set
        var font = "";
        if (element.currentStyle) {
            font = element.currentStyle["font-size"];
        }
        else if (window.getComputedStyle) {
            font = document.defaultView.getComputedStyle(element, null).getPropertyValue("font-size");
        }
        if (!font) {
            // Completely transparent. Look for a parent
            var parent_4 = element.parentElement || element.parentNode;
            if (parent_4) {
                return this.findFont(parent_4);
            }
            else {
                return undefined;
            }
        }
        else {
            return font;
        }
    };
    Object.defineProperty(Export.prototype, "container", {
        /**
         * @return {HTMLElement} Reference
         */
        get: function () {
            return this.adapter.apply("container", {
                container: this._container
            }).container;
        },
        /**
         * A reference to a container to be used to place [[ExportMenu]] in.
         *
         * @param {HTMLElement} value Reference
         */
        set: function (value) {
            this._container = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Export.prototype, "sprite", {
        /**
         * @return {Sprite} Sprite
         */
        get: function () {
            return this.adapter.apply("sprite", {
                sprite: this._sprite
            }).sprite;
        },
        /**
         * A reference to [[Sprite]] to export. Can be any Sprite, including some
         * internal elements.
         *
         * @param {Sprite} value Sprite
         */
        set: function (value) {
            this._sprite = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Export.prototype, "data", {
        /**
         * @return {any} Data
         */
        get: function () {
            return this.adapter.apply("data", {
                data: this._data
            }).data;
        },
        /**
         * Data to export.
         *
         * @param {any} value Data
         */
        set: function (value) {
            this._data = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Export.prototype, "dataFields", {
        /**
         * @return {any} Field names `{ field: fieldName }`
         */
        get: function () {
            if (!this._dataFields) {
                this.generateDataFields();
            }
            return this.adapter.apply("dataFields", {
                dataFields: this._dataFields
            }).dataFields;
        },
        /**
         * Data fields in `{ field: fieldName }` format. Those are used for
         * exporting in data formats to name the columns.
         *
         * @param {any} value Field names
         */
        set: function (value) {
            this._dataFields = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Export.prototype, "dateFormatter", {
        /**
         * @return {any} A DateFormatter instance
         */
        get: function () {
            if (!this._dateFormatter) {
                this._dateFormatter = new __WEBPACK_IMPORTED_MODULE_5__formatters_DateFormatter__["a" /* DateFormatter */]();
            }
            return this.adapter.apply("dateFormatter", {
                dateFormatter: this._dateFormatter
            }).dateFormatter;
        },
        /**
         * A [[DateFormatter]] to use when formatting dates when exporting data.
         *
         * @param {any} value DateFormatter instance
         */
        set: function (value) {
            this._dateFormatter = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Export.prototype, "dateFormat", {
        /**
         * @return {string} Date format
         */
        get: function () {
            return this.adapter.apply("dateFormat", {
                dateFormat: this._dateFormat
            }).dateFormat;
        },
        /**
         * A date format to use for exporting dates. Will use [[DateFormatter]]
         * format if not set.
         *
         * @param {string} value Date format
         */
        set: function (value) {
            this._dateFormat = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Export.prototype, "dateFields", {
        /**
         * @return {List<string>} Date field list
         */
        get: function () {
            if (!this._dateFields) {
                this._dateFields = new __WEBPACK_IMPORTED_MODULE_3__utils_List__["b" /* List */]();
            }
            return this.adapter.apply("dateFields", {
                dateFields: this._dateFields
            }).dateFields;
        },
        /**
         * A list of fields that hold date values.
         *
         * @param {List<string>} value Date field list
         */
        set: function (value) {
            this._dateFields = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Generates data fields out of the first row of data.
     *
     * @ignore Exclude from docs
     */
    Export.prototype.generateDataFields = function () {
        var _this = this;
        this._dataFields = {};
        if (this.data.length) {
            var row = this.data[0];
            __WEBPACK_IMPORTED_MODULE_12__utils_Object__["each"](row, function (key, value) {
                _this._dataFields[key] = _this.adapter.apply("dataFieldName", {
                    name: key,
                    field: key
                }).name;
            });
        }
    };
    /**
     * Cheks against `dateFields` property to determine if this field holds
     * dates.
     *
     * @ignore Exclude from docs
     * @param  {string}        field   Field name
     * @param  {IExportOptions} options Options
     * @return {boolean}               `true` if it's a date field
     */
    Export.prototype.isDateField = function (field) {
        return this.adapter.apply("isDateField", {
            isDateField: this.dateFields.contains(field),
            field: field
        }).isDateField;
    };
    /**
     * Returns proper content type for the export type.
     *
     * @param  {string}  type  Export format/type
     * @return {string}        Proper content type, i.e. "image/jpeg"
     */
    Export.prototype.getContentType = function (type) {
        var contentType = "";
        switch (type) {
            case "png":
            case "gif":
                contentType = "image/" + type;
                break;
            case "jpg":
                contentType = "image/jpeg";
                break;
            case "svg":
                contentType = "image/svg+xml";
                break;
            case "csv":
                contentType = "text/csv";
                break;
            case "json":
                contentType = "application/json";
                break;
            case "pdf":
                contentType = "application/pdf";
                break;
            case "xlsx":
                contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                break;
        }
        return this.adapter.apply("contentType", {
            contentType: contentType,
            type: type
        }).contentType;
    };
    Object.defineProperty(Export.prototype, "filePrefix", {
        /**
         * @return {string} File prefix
         */
        get: function () {
            return this.adapter.apply("filePrefix", {
                filePrefix: this._filePrefix
            }).filePrefix;
        },
        /**
         * A file prefix to be used for all exported formats.
         *
         * Export will apply format-related extension to it. E.g. if this is set to
         * "myExport", the file name of the PNG exported image will be "myExport.png".
         *
         * @param {string} value File prefix
         */
        set: function (value) {
            this._filePrefix = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Export.prototype, "backgroundColor", {
        /**
         * @return {Color} Background color
         */
        get: function () {
            return this.adapter.apply("backgroundColor", {
                backgroundColor: this._backgroundColor
            }).backgroundColor;
        },
        /**
         * A background color to be used for exported images. If set, this will
         * override the automatically acquired background color.
         *
         * @param {Color} value Color
         */
        set: function (value) {
            this._backgroundColor = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Export.prototype, "title", {
        /**
         * @return {string} Title
         */
        get: function () {
            return this.adapter.apply("title", {
                title: this._title
            }).title;
        },
        /**
         * A title to be used when printing.
         *
         * @param {string} value Title
         */
        set: function (value) {
            this._title = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Displays a preloader/exporting indicator.
     *
     * @ignore Exclude from docs
     * @todo Add ability to change text
     */
    Export.prototype.showPreloader = function () {
        var preloader = this.preloader;
        if (preloader) {
            preloader.progress = 0.5;
            preloader.label.text = "...";
        }
    };
    /**
     * Hides preloader/exporting indicator
     *
     * @ignore Exclude from docs
     */
    Export.prototype.hidePreloader = function () {
        var preloader = this.preloader;
        if (preloader) {
            preloader.progress = 1;
        }
    };
    Object.defineProperty(Export.prototype, "preloader", {
        /**
         * Returns a an instance of [[Preloader]] associated with the Sprite being
         * exported.
         *
         * @return {Preloader} Preloader
         */
        get: function () {
            return this._sprite && this._sprite.parent && this._sprite.parent.preloader ?
                this._sprite.parent.preloader :
                undefined;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Displays a modal saying export is taking longer than expected.
     *
     * @ignore Exclude from docs
     */
    Export.prototype.showTimeout = function () {
        this.showModal(this.adapter.apply("timeoutMessage", {
            message: this.language.translate("Export operation took longer than expected. Something might have gone wrong.")
        }).message);
    };
    /**
     * Hides preloader/exporting indicator.
     *
     * @ignore Exclude from docs
     */
    Export.prototype.hideTimeout = function () {
        if (this._timeoutTimeout) {
            this.removeDispose(this._timeoutTimeout);
            this._timeoutTimeout = null;
        }
        this.hideModal();
    };
    Object.defineProperty(Export.prototype, "language", {
        /**
         * @return {Language} A [[Language]] instance to be used
         */
        get: function () {
            if (!this._language) {
                this._language = new __WEBPACK_IMPORTED_MODULE_6__utils_Language__["a" /* Language */]();
            }
            return this._language;
        },
        /**
         * A [[Language]] instance to be used for translations.
         *
         * @param {Language} value An instance of [[Language]]
         */
        set: function (value) {
            this._language = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Export.prototype, "modal", {
        /**
         * Returns (and creates) [[Modal]].
         *
         * @ignore Exclude from docs
         * @return {Modal} Modal instance
         */
        get: function () {
            if (!this._modal) {
                this._modal = new __WEBPACK_IMPORTED_MODULE_2__elements_Modal__["a" /* Modal */]();
                // Prefix with Sprite's class name
                this._modal.adapter.add("classPrefix", function (value) {
                    value = __WEBPACK_IMPORTED_MODULE_10__Options__["a" /* options */].classNamePrefix + value;
                    return value;
                });
            }
            return this._modal;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Shows [[Modal]] with specific text.
     *
     * @ignore Exclude from docs
     * @param {string} text Modal contents
     */
    Export.prototype.showModal = function (text, title) {
        // Hide previous modal and preloader
        this.hideModal();
        this.hidePreloader();
        // Create modal
        var modal = this.modal;
        modal.container = this.sprite.svgContainer.SVGContainer;
        modal.content = text;
        modal.readerTitle = title;
        modal.show();
    };
    /**
     * Hides modal window if one's currently open.
     *
     * @ignore Exclude from docs
     */
    Export.prototype.hideModal = function () {
        if (this._modal) {
            this.modal.hide();
        }
    };
    /**
     * Loads Fabric dynamic module.
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @ignore Exclude from docs
     * @return {Promise<any>} Instance of Fabric
     * @async
     */
    Export.prototype._fabric = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, __webpack_require__.e/* import() */(2).then(__webpack_require__.bind(null, 248))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Object.defineProperty(Export.prototype, "fabric", {
        /**
         * Returns Fabric instance.
         *
         * @ignore Exclude from docs
         * @return {Promise<any>} Instance of Fabric
         */
        get: function () {
            return this._fabric();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Loads pdfmake dynamic module
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @ignore Exclude from docs
     * @return {Promise<any>} Instance of pdfmake
     * @async
     */
    Export.prototype._pdfmake = function () {
        return __awaiter(this, void 0, void 0, function () {
            var a, pdfmake, vfs_fonts;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all([
                            __webpack_require__.e/* import() */(0).then(__webpack_require__.bind(null, 249)),
                            __webpack_require__.e/* import() */(0).then(__webpack_require__.bind(null, 250))
                        ])];
                    case 1:
                        a = _a.sent();
                        pdfmake = a[0];
                        vfs_fonts = a[1];
                        pdfmake.vfs = vfs_fonts.pdfMake.vfs;
                        return [2 /*return*/, pdfmake];
                }
            });
        });
    };
    Object.defineProperty(Export.prototype, "pdfmake", {
        /**
         * Returns pdfmake instance.
         *
         * @ignore Exclude from docs
         * @return {Promise<any>} Instance of pdfmake
         */
        get: function () {
            return this._pdfmake();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Loads xlsx dynamic module.
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @ignore Exclude from docs
     * @return {Promise<any>} Instance of pdfmake
     * @async
     */
    Export.prototype._xlsx = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, __webpack_require__.e/* import() */(1).then(__webpack_require__.bind(null, 251))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Object.defineProperty(Export.prototype, "xlsx", {
        /**
         * Returns xlsx instance.
         *
         * @ignore Exclude from docs
         * @return {Promise<any>} Instance of pdfmake
         */
        get: function () {
            return this._xlsx();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets options for a format.
     *
     * @type {Key}
     */
    Export.prototype.setFormatOptions = function (type, options) {
        this._formatOptions.setKey(type, options);
    };
    /**
     * Returns current options for a format.
     */
    Export.prototype.getFormatOptions = function (type) {
        return this._formatOptions.getKey(type);
    };
    /**
 * Disables interactivity on parent chart.
 */
    Export.prototype._disablePointers = function () {
        if (!__WEBPACK_IMPORTED_MODULE_14__utils_Type__["hasValue"](this._spriteInteractionsEnabled)) {
            this._spriteInteractionsEnabled = this.sprite.interactionsEnabled;
        }
        this.sprite.interactionsEnabled = false;
    };
    /**
     * Releases temporarily disabled pointers on parent chart.
     */
    Export.prototype._releasePointers = function () {
        if (__WEBPACK_IMPORTED_MODULE_14__utils_Type__["hasValue"](this._spriteInteractionsEnabled)) {
            this.sprite.interactionsEnabled = this._spriteInteractionsEnabled;
        }
    };
    /**
     * Processes JSON-based config before it is applied to the object.
     *
     * @ignore Exclude from docs
     * @param {object}  config  Config
     */
    Export.prototype.processConfig = function (config) {
        __WEBPACK_IMPORTED_MODULE_9__Registry__["b" /* registry */].registeredClasses["ExportMenu"] = __WEBPACK_IMPORTED_MODULE_0__ExportMenu__["a" /* ExportMenu */];
        if (config) {
            // Set up menu
            if (__WEBPACK_IMPORTED_MODULE_14__utils_Type__["hasValue"](config.menu) && !__WEBPACK_IMPORTED_MODULE_14__utils_Type__["hasValue"](config.menu.type)) {
                config.menu.type = "ExportMenu";
            }
        }
        _super.prototype.processConfig.call(this, config);
    };
    /**
     * XLINK namespace definition.
     *
     * @ignore Exclude from docs
     * @type {string}
     */
    Export.XLINK = "http://www.w3.org/1999/xlink";
    return Export;
}(__WEBPACK_IMPORTED_MODULE_7__utils_Validatable__["a" /* Validatable */]));

//# sourceMappingURL=Export.js.map

/***/ }),
/* 128 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ExportMenu; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ExportCSS__ = __webpack_require__(203);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Adapter__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__interaction_Interaction__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Disposer__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Language__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Validatable__ = __webpack_require__(93);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_Keyboard__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_Utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__utils_DOM__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__utils_Type__ = __webpack_require__(1);
/**
 * ExportMenu provides functionality for building Export menu
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */












/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a menu for Export operations.
 *
 * To add an export menu to a chart, set this to a new instance of
 * [[ExportMenu]].
 *
 * ```TypeScript
 * chart.exporting.menu = new am4core.ExportMenu();
 * ```
 * ```JavaScript
 * chart.exporting.menu = new am4core.ExportMenu();
 * ```
 * ```JSON
 * {
 *   // ...
 *   "exporting": {
 *     "menu": {}
 *   }
 * }
 * ```
 * @important
 */
var ExportMenu = /** @class */ (function (_super) {
    __extends(ExportMenu, _super);
    /**
     * Constructor
     */
    function ExportMenu() {
        var _this = _super.call(this) || this;
        /**
         * An [[Adapter]].
         *
         * @type {Adapter<ExportMenu, IExportMenuAdapters>}
         */
        _this.adapter = new __WEBPACK_IMPORTED_MODULE_1__utils_Adapter__["a" /* Adapter */](_this);
        /**
         * How many milliseconds to hold menu/sub-menu open after it loses focus or
         * hover, before auto-closing it.
         *
         * @type {number}
         */
        _this.closeDelay = 1000;
        /**
         * An instance of [[Language]].
         *
         * @ignore Exclude from docs
         * @type {MutableValueDisposer<Language>}
         */
        _this._language = new __WEBPACK_IMPORTED_MODULE_4__utils_Disposer__["d" /* MutableValueDisposer */]();
        /**
         * What HTML tags to use to build menu.
         *
         * @ignore Exclude from docs
         * @type {string}
         */
        _this._menuTag = "ul";
        /**
         * Which tag to use to enclose individual menu items.
         *
         * @ignore Exclude from docs
         * @type {string}
         */
        _this._itemTag = "li";
        /**
         * Tag to wrap menu item labels in.
         *
         * @ignore Exclude from docs
         * @type {string}
         */
        _this._labelTag = "a";
        /**
         * Prefix for class names applied to menu elements.
         *
         * @ignore Exclude from docs
         * @type {string}
         */
        _this._classPrefix = "amexport";
        /**
         * If set to `true` [[ExportMenu]] will load it's own external CSS when
         * instantiated.
         *
         * @ignore Exclude from docs
         * @type {boolean}
         */
        _this._defaultStyles = true;
        /**
         * Horizontal positioning.
         *
         * @ignore Exclude from docs
         * @type {Align}
         */
        _this._align = "right";
        /**
         * Vertical positioning.
         *
         * @ignore Exclude from docs
         * @type {VerticalAlign}
         */
        _this._verticalAlign = "top";
        /**
         * A tabindex to apply to Export Menu.
         *
         * @ignore Exclude from docs
         * @type {number}
         */
        _this._tabindex = 0;
        /**
         * Whether next menu close event should be ignored.
         *
         * @ignore Exclude from docs
         * @type {boolean}
         */
        _this._ignoreNextClose = false;
        /**
         * Default menu items.
         *
         * @ignore Exclude from docs
         * @type {Array<IExportMenuItem>}
         */
        _this._items = [
            {
                "label": "...",
                "menu": [
                    {
                        "label": "Image",
                        "menu": [
                            { "type": "png", "label": "PNG" },
                            { "type": "jpg", "label": "JPG" },
                            { "type": "gif", "label": "GIF" },
                            { "type": "svg", "label": "SVG" },
                            { "type": "pdf", "label": "PDF" }
                        ]
                    }, {
                        "label": "Data",
                        "menu": [
                            { "type": "json", "label": "JSON" },
                            { "type": "csv", "label": "CSV" },
                            { "type": "xlsx", "label": "XLSX" }
                        ]
                    }, {
                        "label": "Print", "type": "print"
                    }
                ]
            }
        ];
        _this.className = "ExportMenu";
        _this._disposers.push(_this._language);
        _this.invalidate();
        _this.applyTheme();
        return _this;
    }
    /**
     * (Re)draws the Export menu.
     *
     * @ignore Exclude from docs
     */
    ExportMenu.prototype.validate = function () {
        this.draw();
        _super.prototype.validate.call(this);
    };
    /**
     * Draws the menu based on current items.
     *
     * Normally, there's no need to call this explicitly. The chart, if it has
     * export menu enabled, will automatically draw the menu.
     */
    ExportMenu.prototype.draw = function () {
        var _this = this;
        // Create top-level menu item, or clear it
        if (!this._element) {
            this._element = this.createMenuElement(0);
        }
        else {
            this._element.innerHTML = "";
            this._element.className = this.getMenuItemClass(0);
        }
        // See if we're loading external CSS
        // Hide it until CSS is loaded
        if (this.defaultStyles) {
            this._element.style.display = "none";
        }
        // Append to container
        this._container.appendChild(this._element);
        // Apply adapter to menu items before processing
        this._items = this.adapter.apply("items", {
            items: this._items
        }).items;
        for (var len = this._items.length, i = 0; i < len; i++) {
            this.drawBranch(this._element, this._items[i], 0);
        }
        // Apply adapter to finalized menu element
        this._element = this.adapter.apply("menuElement", {
            menuElement: this._element
        }).menuElement;
        // Set up global "down" event
        this._disposers.push(Object(__WEBPACK_IMPORTED_MODULE_3__interaction_Interaction__["b" /* getInteraction */])().body.events.on("down", function (ev) {
            if (!ev.pointer.touch) {
                _this._ignoreNextClose = false;
            }
            _this.close();
        }));
        // Set up global event on ESC press to close the menu
        this._disposers.push(Object(__WEBPACK_IMPORTED_MODULE_3__interaction_Interaction__["b" /* getInteraction */])().body.events.on("keyup", function (ev) {
            var key = __WEBPACK_IMPORTED_MODULE_7__utils_Keyboard__["b" /* keyboard */].getEventKey(ev.event);
            switch (key) {
                case "esc":
                    _this.close();
                    break;
                case "up":
                case "down":
                case "left":
                case "right":
                    _this.moveSelection(key);
                    break;
            }
        }));
        if (this.defaultStyles) {
            this.loadDefaultCSS();
        }
    };
    /**
     * Creates a new branch in export menu. This function is recursive for
     * building multi-level menus.
     *
     * @ignore Exclude from docs
     * @param {HTMLElement}     container Container to put branch elements in
     * @param {IExportMenuItem} branch    Menu item
     * @param {number}          level     Current nesting level
     */
    ExportMenu.prototype.drawBranch = function (container, branch, level) {
        var _this = this;
        // Apply adapter
        branch = this.adapter.apply("branch", {
            branch: branch,
            level: level
        }).branch;
        // Unsupported?
        // ExportMenu does not check or know for specific browser/system
        // capabilities. It must happen in some other code and applied via Adapter.
        // Export itself will check compatibility, but there might be other plugins
        // that influence it or even add any specific export functionality.
        if (branch.unsupported === true) {
            return;
        }
        // Init ascendants
        if (!branch.ascendants) {
            branch.ascendants = new __WEBPACK_IMPORTED_MODULE_2__utils_List__["b" /* List */]();
        }
        // Get type
        var type = branch.type;
        // Create an item
        var element = this.createItemElement(level, type);
        // Create label
        var label = this.createLabelElement(level, type);
        label.innerHTML = (branch.label ? this.language.translate(branch.label) : "");
        // Apply reader text to label
        var readerLabel = this.getReaderLabel(branch, label.innerHTML);
        label.setAttribute("aria-label", readerLabel);
        // Add Label
        element.appendChild(label);
        // Create interaction object
        // TODO clean this up when it's disposed
        branch.interactions = Object(__WEBPACK_IMPORTED_MODULE_3__interaction_Interaction__["b" /* getInteraction */])().getInteraction(label);
        // Create interaction manager we can set event listeners to
        if (this.typeClickable(type)) {
            //branch.interactions.clickable = true;
            // TODO clean this up when it's disposed
            branch.interactions.events.on("hit", function (ev) {
                if (_this.events.isEnabled("hit")) {
                    var event_1 = {
                        "type": "hit",
                        "event": ev.event,
                        "target": _this,
                        "branch": branch
                    };
                    _this.events.dispatchImmediately("hit", event_1);
                }
            });
            // TODO clean this up when it's disposed
            branch.interactions.events.on("keyup", function (ev) {
                if (__WEBPACK_IMPORTED_MODULE_7__utils_Keyboard__["b" /* keyboard */].isKey(ev.event, "enter")) {
                    if (_this.events.isEnabled("enter")) {
                        var event_2 = {
                            "type": "enter",
                            "event": ev.event,
                            "target": _this,
                            "branch": branch
                        };
                        _this.events.dispatchImmediately("enter", event_2);
                    }
                }
            });
        }
        // Add ENTER event to open sub-menus
        if (this.hasSubMenu(branch)) {
            // TODO clean this up when it's disposed
            branch.interactions.events.on("keyup", function (ev) {
                if (__WEBPACK_IMPORTED_MODULE_7__utils_Keyboard__["b" /* keyboard */].isKey(ev.event, "enter")) {
                    // This is item has sub-menu, activate the first child on ENTER
                    _this.selectBranch(branch.menu[0]);
                    // Attempt to set focus
                    _this.setFocus(branch.menu[0]);
                }
            });
        }
        // Add events
        // TODO clean this up when it's disposed
        branch.interactions.events.on("over", function (ev) {
            if (ev.pointer.touch) {
                // Cancel pending menu closure
                _this._ignoreNextClose = true;
            }
            _this.selectBranch(branch);
            if (_this.events.isEnabled("over")) {
                var event_3 = {
                    "type": "over",
                    "event": ev.event,
                    "target": _this,
                    "branch": branch
                };
                _this.events.dispatchImmediately("over", event_3);
            }
        });
        // TODO clean this up when it's disposed
        branch.interactions.events.on("out", function (ev) {
            if (!ev.pointer.touch) {
                _this.delayUnselectBranch(branch);
            }
            if (_this.events.isEnabled("out")) {
                var event_4 = {
                    "type": "out",
                    "event": ev.event,
                    "target": _this,
                    "branch": branch
                };
                _this.events.dispatchImmediately("out", event_4);
            }
        });
        // TODO clean this up when it's disposed
        branch.interactions.events.on("focus", function (ev) {
            _this.selectBranch(branch);
        });
        // TODO clean this up when it's disposed
        branch.interactions.events.on("blur", function (ev) {
            _this.delayUnselectBranch(branch);
        });
        // Increment level
        var local_level = level + 1;
        // Has sub-menu?
        if (branch.menu) {
            var submenu = this.createMenuElement(local_level);
            for (var len = branch.menu.length, i = 0; i < len; i++) {
                branch.menu[i].ascendants = new __WEBPACK_IMPORTED_MODULE_2__utils_List__["b" /* List */]();
                if (branch.ascendants.length) {
                    branch.menu[i].ascendants.copyFrom(branch.ascendants);
                }
                branch.menu[i].ascendants.push(branch);
                this.drawBranch(submenu, branch.menu[i], local_level);
            }
            // Sub-menu is empty (all items are not supported)
            // Do not draw this menu item at all
            if (submenu.innerHTML == "") {
                return;
            }
            element.appendChild(submenu);
        }
        // Append to container
        container.appendChild(element);
    };
    /**
     * Creates a menu element to hold its elements in. Usually it's an `<ul>`
     * tag.
     *
     * @ignore Exclude from docs
     * @param  {number}       level  Current nesting level
     * @return {HTMLElement}         HTML element reference
     */
    ExportMenu.prototype.createMenuElement = function (level) {
        var element = document.createElement(this.menuTag);
        element.className = this.getMenuItemClass(level);
        // Accessibility
        if (level === 0) {
            element.setAttribute("role", "menu");
        }
        return element;
    };
    /**
     * Generates a class name for the menu element based on its nesting level.
     *
     * @ignore Exclude from docs
     * @param  {number}  level  Current nesting level
     * @return {string}         Class name(s)
     */
    ExportMenu.prototype.getMenuItemClass = function (level) {
        var className = this.classPrefix + "-menu " + this.classPrefix + "-menu-level-" + level;
        if (level === 0) {
            className += " " + this.classPrefix + "-menu-root " +
                this.classPrefix + "-" + this.align + " " +
                this.classPrefix + "-" + this.verticalAlign;
        }
        return this.adapter.apply("menuClass", {
            className: className,
            level: level
        }).className;
    };
    /**
     * Creates menu item. Usually `<li>` tag. Its label and sub-elements will go
     * into this element.
     *
     * @ignore Exclude from docs
     * @param  {number}       level  Current nesting level
     * @param  {string}       type   Type of the menu item
     * @return {HTMLElement}         HTML element reference
     */
    ExportMenu.prototype.createItemElement = function (level, type) {
        var element = document.createElement(this.itemTag);
        var className = this.classPrefix + "-item " + this.classPrefix
            + "-item-level-" + level
            + " " + this.classPrefix + "-item-" + (type || "blank");
        element.className = this.adapter.apply("itemClass", {
            className: className,
            level: level,
            type: type
        }).className;
        return element;
    };
    /**
     * Creates a "label" part of the menu item. It could be text or any HTML
     * content.
     *
     * @ignore Exclude from docs
     * @param  {number}       level  Current nesting level
     * @param  {string}       type   Type of the menu item
     * @return {HTMLElement}         An HTML Element
     */
    ExportMenu.prototype.createLabelElement = function (level, type) {
        var element = document.createElement(this.labelTag);
        var className = this.classPrefix + "-label " + this.classPrefix
            + "-label-level-" + level
            + " " + this.classPrefix + "-item-" + (type || "blank");
        if (this.typeClickable(type)) {
            className += " " + this.classPrefix + "-clickable";
        }
        element.className = this.adapter.apply("labelClass", {
            className: className,
            level: level,
            type: type
        }).className;
        // Accessible navigation
        element.setAttribute("tabindex", this.tabindex.toString());
        element.setAttribute("role", "menuitem");
        return element;
    };
    /**
     * Destroys the menu and all its elements.
     */
    ExportMenu.prototype.dispose = function () {
        if (!this._disposed) {
            _super.prototype.dispose.call(this);
            this._element
                && this._element.parentNode
                && this._element.parentNode.removeChild(this._element);
        }
    };
    /**
     * Checks whether menu item type is supposed to be clickable.
     *
     * @ignore Exclude from docs
     * @param  {string}   type  Menu item type
     * @return {boolean}        Is clickable?
     */
    ExportMenu.prototype.typeClickable = function (type) {
        return __WEBPACK_IMPORTED_MODULE_11__utils_Type__["hasValue"](type);
    };
    /**
     * Checks whether menu item has any sub-items.
     *
     * @ignore Exclude from docs
     * @param  {IExportMenuItem}  branch  A menu item
     * @return {boolean}                  Has sub-items?
     */
    ExportMenu.prototype.hasSubMenu = function (branch) {
        return (branch.menu && branch.menu.length) ? true : false;
    };
    /**
     * Generates and returns an applicable label to be used for screen readers.
     *
     * @ignore Exclude from docs
     * @param  {IExportMenuItem}  item   A menu item instance
     * @param  {string}           label  Current label
     * @return {string}                  Reader text
     */
    ExportMenu.prototype.getReaderLabel = function (branch, label) {
        // Strip any HTML from the label
        label = __WEBPACK_IMPORTED_MODULE_8__utils_Utils__["stripTags"](label);
        // Add textual note if the branch is clickable
        if (this.hasSubMenu(branch)) {
            label += " [" + this.language.translate("Click, tap or press ENTER to open") + "]";
        }
        else if (branch.type == "print") {
            label = this.language.translate("Click, tap or press ENTER to print.");
        }
        else if (this.typeClickable(branch.type)) {
            label = this.language.translate("Click, tap or press ENTER to export as %1.", null, label);
        }
        return this.adapter.apply("rederLabel", {
            label: label,
            branch: branch
        }).label;
    };
    Object.defineProperty(ExportMenu.prototype, "container", {
        /**
         * @return {HTMLElement} Container
         */
        get: function () {
            return this._container;
        },
        /**
         * Getters and setters
         */
        /**
         * An HTML container to place the Menu in.
         *
         * A container must be an HTML element, because menu itself is HTML, and
         * cannot be placed into SVG.
         *
         * @param {HTMLElement} container Reference to container element
         * @todo Check if menu is already build. If it is, just move it to a new container
         */
        set: function (container) {
            this._container = container;
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExportMenu.prototype, "items", {
        /**
         * @return {Array<IExportMenuItem>} Menu items
         */
        get: function () {
            return this._items;
        },
        /**
         * A list of menu items. Can be nested.
         *
         * @param {Array<IExportMenuItem>}  items  Menu items
         */
        set: function (items) {
            this._items = items;
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExportMenu.prototype, "tag", {
        /**
         * Sets main menu tag to place menu in.
         *
         * This also sets up how menu items are built.
         *
         * If you set this to "ul", menu items will be wrapped into `<li>` tags.
         *
         * If set to "div", menu items will be wrapped in `<div>` tags.
         *
         * @default "ul"
         * @param {"ul" | "div"} tag Tag to use for menu
         */
        set: function (tag) {
            this._menuTag = tag;
            this._itemTag = tag == "ul" ? "li" : "div";
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExportMenu.prototype, "menuTag", {
        /**
         * Returns current menu tag.
         *
         * @ignore Exclude from docs
         * @return {string} Menu tag (item that contains sub-items)
         */
        get: function () {
            return this.adapter.apply("menuTag", {
                tag: this._menuTag
            }).tag;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExportMenu.prototype, "itemTag", {
        /**
         * Returns tag to wrap items into.
         *
         * @ignore Exclude from docs
         * @return {string} Item tag
         */
        get: function () {
            return this.adapter.apply("itemTag", {
                tag: this._itemTag
            }).tag;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExportMenu.prototype, "labelTag", {
        /**
         * Returns menu label tag.
         *
         * @ignore Exclude from docs
         * @return {string} Label tag
         */
        get: function () {
            return this.adapter.apply("labelTag", {
                tag: this._labelTag
            }).tag;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExportMenu.prototype, "align", {
        /**
         * @return {Align} Horizontal alignement
         */
        get: function () {
            return this.adapter.apply("align", {
                align: this._align
            }).align;
        },
        /**
         * A horizontal alignement for the menu placement.
         *
         * @param {Align} value Horizontal alignement
         */
        set: function (value) {
            this._align = value;
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExportMenu.prototype, "verticalAlign", {
        /**
         * @return {VerticalAlign} Vertical alignement
         */
        get: function () {
            return this.adapter.apply("verticalAlign", {
                verticalAlign: this._verticalAlign
            }).verticalAlign;
        },
        /**
         * A vertical alignement for the menu placement.
         *
         * @param {VerticalAlign} value Vertical alignement
         */
        set: function (value) {
            this._verticalAlign = value;
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExportMenu.prototype, "classPrefix", {
        /**
         * @return {string} Class name prefix
         */
        get: function () {
            return this.adapter.apply("classPrefix", {
                classPrefix: this._classPrefix
            }).classPrefix;
        },
        /**
         * Class name prefix.
         *
         * @default "amexport"
         * @param {string} value Class name prefix
         */
        set: function (value) {
            this._classPrefix = value;
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExportMenu.prototype, "defaultStyles", {
        /**
         * @return {boolean} Should ExportMenu load its own CSS?
         */
        get: function () {
            return this.adapter.apply("defaultStyles", {
                defaultStyles: this._defaultStyles
            }).defaultStyles;
        },
        /**
         * Indicates whether [[ExportMenu]] should load external CSS to style itself.
         *
         * If set to `false`, the menu will not be styled, and will rely on some
         * external CSS.
         *
         * @default true
         * @param {string} Should ExportMenu load its own CSS?
         */
        set: function (value) {
            if (this._defaultStyles != value) {
                this._defaultStyles = value;
                if (value) {
                    this.loadDefaultCSS();
                }
            }
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Loads the default CSS.
     *
     * @ignore Exclude from docs
     */
    ExportMenu.prototype.loadDefaultCSS = function () {
        this._disposers.push(Object(__WEBPACK_IMPORTED_MODULE_0__ExportCSS__["a" /* default */])(this.classPrefix));
        this._element.style.display = "";
    };
    Object.defineProperty(ExportMenu.prototype, "tabindex", {
        /**
         * @return {number} Tab index
         */
        get: function () {
            return this.adapter.apply("tabindex", {
                tabindex: this._tabindex
            }).tabindex;
        },
        /**
         * A tab index for the menu.
         *
         * Tab index will influence the order in which elements on the chart and
         * the whole page are selected when pressing TAB key.
         *
         * @param {number} value Tab index
         */
        set: function (value) {
            this._tabindex = value;
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExportMenu.prototype, "language", {
        /**
         * @return {Language} A [[Language]] instance to be used
         */
        get: function () {
            var _this = this;
            var language = this._language.get();
            if (language == null) {
                language = new __WEBPACK_IMPORTED_MODULE_5__utils_Language__["a" /* Language */]();
                // TODO code duplication with `set language()`
                this._language.set(language, language.events.on("localechanged", function (ev) {
                    _this.invalidate();
                }));
            }
            return language;
        },
        /**
         * A [[Language]] instance.
         *
         * @param {Language} value An instance of [[Language]]
         */
        set: function (value) {
            var _this = this;
            this._language.set(value, value.events.on("localechanged", function (ev) {
                _this.invalidate();
            }));
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Controlling the menu
     */
    /**
     * Removes all active classes from menu items. Useful on touch devices and
     * keyboard navigation where open menu can be closed instantly by clicking or
     * tapping outside it.
     *
     * @ignore Exclude from docs
     */
    ExportMenu.prototype.close = function () {
        if (this._ignoreNextClose) {
            this._ignoreNextClose = false;
            return;
        }
        if (this._currentSelection) {
            this.setBlur(this._currentSelection);
            this._currentSelection = undefined;
        }
        var items = this._element.getElementsByClassName("active");
        for (var len = items.length, i = len - 1; i >= 0; i--) {
            if (items[i]) {
                __WEBPACK_IMPORTED_MODULE_10__utils_DOM__["q" /* removeClass */](items[i], "active");
            }
        }
        this.events.dispatchImmediately("closed", {
            type: "closed",
            target: this
        });
    };
    /**
     * Selects a branch in the menu.
     *
     * Handles closing of currently open branch.
     *
     * @ignore Exclude from docs
     * @param {IExportMenuItem} branch Branch to select
     */
    ExportMenu.prototype.selectBranch = function (branch) {
        var _this = this;
        // Cancel previous closure
        if (branch.closeTimeout) {
            this.removeDispose(branch.closeTimeout);
            branch.closeTimeout = null;
        }
        // Add active class
        __WEBPACK_IMPORTED_MODULE_10__utils_DOM__["f" /* addClass */](branch.interactions.element.parentElement, "active");
        // Remove current selection
        if (this._currentSelection && this._currentSelection !== branch) {
            __WEBPACK_IMPORTED_MODULE_9__utils_Iterator__["each"](__WEBPACK_IMPORTED_MODULE_9__utils_Iterator__["concat"](__WEBPACK_IMPORTED_MODULE_9__utils_Iterator__["fromArray"]([this._currentSelection]), this._currentSelection.ascendants.iterator()), function (ascendant) {
                if (!branch.ascendants.contains(ascendant) && branch !== ascendant) {
                    _this.unselectBranch(ascendant, true);
                }
            });
        }
        // Select and/or cancel timeout for current ascendants
        __WEBPACK_IMPORTED_MODULE_9__utils_Iterator__["each"](branch.ascendants.iterator(), function (ascendant) {
            if (ascendant.closeTimeout) {
                _this.removeDispose(ascendant.closeTimeout);
                ascendant.closeTimeout = null;
            }
            __WEBPACK_IMPORTED_MODULE_10__utils_DOM__["f" /* addClass */](ascendant.interactions.element.parentElement, "active");
        });
        // Log current selection
        this._currentSelection = branch;
        // Invoke event
        if (this.events.isEnabled("branchselected")) {
            var event_5 = {
                type: "branchselected",
                target: this,
                branch: branch
            };
            this.events.dispatchImmediately("branchselected", event_5);
        }
    };
    /**
     * Unselects a branch. Also selects a branch one level up if necessary.
     *
     * @ignore Exclude from docs
     * @param {IExportMenuItem} branch Branch to unselect
     * @param {boolean}         simple If `true`, only the branch will be unselected without selecting parent branch
     */
    ExportMenu.prototype.unselectBranch = function (branch, simple) {
        // Remove active class
        __WEBPACK_IMPORTED_MODULE_10__utils_DOM__["q" /* removeClass */](branch.interactions.element.parentElement, "active");
        // Remove current selection
        if (this._currentSelection == branch) {
            this._currentSelection = undefined;
        }
        // Invoke event
        if (this.events.isEnabled("branchunselected")) {
            var event_6 = {
                type: "branchunselected",
                target: this,
                branch: branch
            };
            this.events.dispatchImmediately("branchunselected", event_6);
        }
    };
    /**
     * Delay unselection of a branch. This can still be cancelled in some other
     * place if the branch or its children regain focus.
     *
     * @ignore Exclude from docs
     * @param {IExportMenuItem} branch Branch to unselect
     * @param {boolean}         simple If `true`, only the branch will be unselected without selecting parent branch
     */
    ExportMenu.prototype.delayUnselectBranch = function (branch, simple) {
        var _this = this;
        // Schedule branch unselection
        if (branch.closeTimeout) {
            this.removeDispose(branch.closeTimeout);
            branch.closeTimeout = null;
        }
        branch.closeTimeout = this.setTimeout(function () {
            _this.unselectBranch(branch, simple);
        }, this.closeDelay);
        // Schedule unselection of all ascendants
        // In case focus went away from the export menu altogether, this will ensure
        // that all items will be closed.
        // In case we're jumping to other menu item, those delayed unselections will
        // be cancelled by `selectBranch`
        if (simple !== true) {
            __WEBPACK_IMPORTED_MODULE_9__utils_Iterator__["each"](branch.ascendants.iterator(), function (ascendant) {
                _this.delayUnselectBranch(ascendant, true);
            });
        }
    };
    /**
     * Navigates the menu based on which direction kayboard key was pressed.
     *
     * @ignore Exclude from docs
     * @param {KeyboardKeys} key A key that was pressed
     */
    ExportMenu.prototype.moveSelection = function (key) {
        // Check if there's a current selection
        if (!this._currentSelection) {
            return;
        }
        var newSelection;
        if (key == "up") {
            // Try moving up in current menu list, or to the last item if already
            // at the top
            newSelection = this.getPrevSibling(this._currentSelection);
        }
        else if (key == "down") {
            // Try moving down in current menu list, or to the top item if already
            // at the bottom
            newSelection = this.getNextSibling(this._currentSelection);
        }
        else if ((key == "left" && this.align == "right") || (key == "right" && this.align == "left")) {
            // Go one level-deeper
            if (this.hasSubMenu(this._currentSelection)) {
                newSelection = this._currentSelection.menu[0];
            }
        }
        else if ((key == "right" && this.align == "right") || (key == "left" && this.align == "left")) {
            // Go one level-deeper
            newSelection = this.getParentItem(this._currentSelection);
        }
        if (newSelection && newSelection !== this._currentSelection) {
            this.selectBranch(newSelection);
            this.setFocus(newSelection);
            this._currentSelection = newSelection;
        }
    };
    /**
     * Returns all siblings of a menu item, including this same menu item.
     *
     * @ignore Exclude from docs
     * @param  {IExportMenuItem}         branch  Menu item
     * @return {Array<IExportMenuItem>}          List of sibling menu items
     */
    ExportMenu.prototype.getSiblings = function (branch) {
        var parent = this.getParentItem(branch);
        return parent ? parent.menu : [];
    };
    /**
     * Returns menu items parent item.
     *
     * @ignore Exclude from docs
     * @param  {IExportMenuItem}  branch  Menu item
     * @return {IExportMenuItem}          Parent menu item
     */
    ExportMenu.prototype.getParentItem = function (branch) {
        if (branch.ascendants.length) {
            return branch.ascendants.getIndex(branch.ascendants.length - 1);
        }
        else {
            return undefined;
        }
    };
    /**
     * Returns next sibling in the same menu branch. If there is no next sibling,
     * the first one is returned. If there is just one item, that item is
     * returned. Unsupported menu items are skipped.
     *
     * @ignore Exclude from docs
     * @param  {IExportMenuItem}  branch  Menu item to search siblings for
     * @return {IExportMenuItem}          Menu item
     */
    ExportMenu.prototype.getNextSibling = function (branch) {
        var siblings = this.getSiblings(branch);
        if (siblings.length > 1) {
            var next = siblings.indexOf(branch) + 1;
            next = siblings.length == next ? 0 : next;
            return siblings[next].unsupported ? this.getNextSibling(siblings[next]) : siblings[next];
        }
        else {
            return branch;
        }
    };
    /**
     * Returns previous sibling in the same menu branch. If there is no next
     * sibling, the first one is returned. If there is just one item, that item is
     * returned. Unsupported menu items are skipped.
     *
     * @ignore Exclude from docs
     * @param  {IExportMenuItem}  branch  Menu item to search siblings for
     * @return {IExportMenuItem}          Menu item
     */
    ExportMenu.prototype.getPrevSibling = function (branch) {
        var siblings = this.getSiblings(branch);
        if (siblings.length > 1) {
            var prev = siblings.indexOf(branch) - 1;
            prev = prev == -1 ? siblings.length - 1 : prev;
            return siblings[prev].unsupported ? this.getPrevSibling(siblings[prev]) : siblings[prev];
        }
        else {
            return branch;
        }
    };
    /**
     * Attempts to set focus on particular menu element.
     *
     * @ignore Exclude from docs
     * @param {IExportMenuItem} branch Menu item
     */
    ExportMenu.prototype.setFocus = function (branch) {
        branch.interactions.element.focus();
    };
    /**
     * Attempts to remove focus from the menu element.
     *
     * @ignore Exclude from docs
     * @param {IExportMenuItem} branch Menu item
     */
    ExportMenu.prototype.setBlur = function (branch) {
        branch.interactions.element.blur();
    };
    return ExportMenu;
}(__WEBPACK_IMPORTED_MODULE_6__utils_Validatable__["a" /* Validatable */]));

//# sourceMappingURL=ExportMenu.js.map

/***/ }),
/* 129 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = load;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Type__ = __webpack_require__(1);
/**
 * A collection of network-related functions
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

/**
 * Loads an external file via its URL.
 *
 * Please note that this is an asynchronous function.
 *
 * It will not return the result, but rather a `Promise`.
 *
 * You can use the `await` notion, or `then()`.
 *
 * ```TypeScript
 * // Using await
 * let response = await Net.load( "http://www.my.com/data.json" );
 * console.log( response.response );
 *
 * // Using then()
 * Net.load( "http://www.my.com/data.json" ).then( ( response ) => {
 *   console.log( response.response );
 * } );
 * ```
 * ```JavaScript
 * // Using then()
 * Net.load( "http://www.my.com/data.json" ).then( function( response ) {
 *   console.log( response.response );
 * } );
 * ```
 *
 * @async
 * @param  {string}                      url      URL for the file to load
 * @param  {A}                           target   A target element that is requesting the net load
 * @param  {INetRequestOptions}          options  Request options
 * @return {Promise<INetLoadResult<A>>}           Result (Promise)
 */
function load(url, target, options) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (success, error) {
                    // Create request and set up handlers
                    var xhr = new XMLHttpRequest();
                    xhr.onload = function () {
                        if (xhr.status === 200) {
                            var response = xhr.responseText || xhr.response;
                            success({
                                xhr: xhr,
                                error: false,
                                response: response,
                                type: xhr.getResponseHeader("Content-Type"),
                                target: target
                            });
                        }
                        else {
                            error({
                                xhr: xhr,
                                error: true,
                                type: xhr.getResponseHeader("Content-Type"),
                                target: target
                            });
                        }
                    };
                    xhr.onerror = function () {
                        error({
                            xhr: xhr,
                            error: true,
                            type: xhr.getResponseHeader("Content-Type"),
                            target: target
                        });
                    };
                    // Open request
                    xhr.open("GET", url);
                    // Process options
                    if (__WEBPACK_IMPORTED_MODULE_0__Type__["hasValue"](options) && __WEBPACK_IMPORTED_MODULE_0__Type__["hasValue"](options.requestHeaders)) {
                        for (var i = 0; i < options.requestHeaders.length; i++) {
                            var header = options.requestHeaders[i];
                            xhr.setRequestHeader(header.key, header.value);
                        }
                    }
                    // Send request
                    xhr.send();
                })];
        });
    });
}
//# sourceMappingURL=Net.js.map

/***/ }),
/* 130 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DataSource; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__DataLoader__ = __webpack_require__(131);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__JSONParser__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__CSVParser__ = __webpack_require__(95);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Base__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Adapter__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Language__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__formatters_DateFormatter__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_Type__ = __webpack_require__(1);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */









;
;
/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Represents a single data source - external file with all of its settings,
 * such as format, data parsing, etc.
 *
 * ```TypeScript
 * chart.dataSource.url = "http://www.myweb.com/data.json";
 * chart.dataSource.parser = am4core.JSONParser;
 * ```
 * ```JavaScript
 * chart.dataSource.url = "http://www.myweb.com/data.json";
 * chart.dataSource.parser = am4core.JSONParser;
 * ```
 * ```JSON
 * {
 *   // ...
 *   "dataSource": {
 *     "url": "http://www.myweb.com/data.json",
 *     "parser": "JSONParser"
 *   },
 *   // ...
 * }
 * ```
 *
 * @see {@link IDataSourceEvents} for a list of available events
 * @see {@link IDataSourceAdapters} for a list of available Adapters
 */
var DataSource = /** @class */ (function (_super) {
    __extends(DataSource, _super);
    /**
     * Constructor
     */
    function DataSource(url, parser) {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * Adapter.
         *
         * @type {Adapter<DataSource, IDataSourceAdapters>}
         */
        _this.adapter = new __WEBPACK_IMPORTED_MODULE_4__utils_Adapter__["a" /* Adapter */](_this);
        /**
         * Custom options for HTTP(S) request.
         *
         * @type {INetRequestOptions}
         */
        _this._requestOptions = {};
        /**
         * Will show loading indicator when loading files.
         *
         * @type {boolean}
         */
        _this.showPreloader = true;
        _this.className = "DataSource";
        // Set defaults
        if (url) {
            _this.url = url;
        }
        // Set parser
        if (parser) {
            if (typeof parser == "string") {
                _this.parser = __WEBPACK_IMPORTED_MODULE_0__DataLoader__["b" /* dataLoader */].getParserByType(parser);
            }
            else {
                _this.parser = parser;
            }
        }
        return _this;
    }
    /**
     * Processes the loaded data.
     *
     * @ignore Exclude from docs
     * @param {string}  data  Raw (unparsed) data
     * @param {string}  type  Content type of the loaded data (optional)
     */
    DataSource.prototype.processData = function (data, type) {
        var _this = this;
        // Parsing started
        this.dispatchImmediately("parsestarted");
        // Check if parser is set
        if (!this.parser) {
            // Try to resolve from data
            this.parser = __WEBPACK_IMPORTED_MODULE_0__DataLoader__["b" /* dataLoader */].getParserByData(data, type);
            if (!this.parser) {
                // We have a problem - nobody knows what to do with the data
                // Raise error
                if (this.events.isEnabled("parseerror")) {
                    var event_1 = {
                        type: "parseerror",
                        message: this.language.translate("No parser available for file: %1", null, this.url),
                        target: this
                    };
                    this.events.dispatchImmediately("parseerror", event_1);
                }
                this.dispatchImmediately("parseended");
                return;
            }
        }
        // Apply options adapters
        this.parser.options = this.adapter.apply("parserOptions", this.parser.options);
        this.parser.options.dateFields = this.adapter.apply("dateFields", this.parser.options.dateFields || []);
        this.parser.options.numberFields = this.adapter.apply("numberFields", this.parser.options.numberFields || []);
        // Check if we need to pass in date formatter
        if (this.parser.options.dateFields && !this.parser.options.dateFormatter) {
            this.parser.options.dateFormatter = this.dateFormatter;
        }
        // Parse
        this.data = this.adapter.apply("parsedData", this.parser.parse(this.adapter.apply("unparsedData", data)));
        // Check for parsing errors
        if (!__WEBPACK_IMPORTED_MODULE_8__utils_Type__["hasValue"](this.data) && this.events.isEnabled("parseerror")) {
            var event_2 = {
                type: "parseerror",
                message: this.language.translate("Error parsing file: %1", null, this.url),
                target: this
            };
            this.events.dispatchImmediately("parseerror", event_2);
        }
        // Wrap up
        this.dispatchImmediately("parseended");
        this.dispatchImmediately("done", {
            "data": this.data
        });
        // Update component
        /*if (this.component) {

            // Set new data
            if (this.data && this.incremental) {
                this.component.addData(this.data);
            }
            else {
                this.component.data = this.data;
            }

        }*/
        // Update last data load
        this.lastLoad = new Date();
        // Should we schedule a reload?
        if (this.reloadFrequency) {
            this._reloadTimeout = setTimeout(function () {
                _this.load();
            }, this.reloadFrequency);
        }
    };
    Object.defineProperty(DataSource.prototype, "url", {
        /**
         * @return {string} URL
         */
        get: function () {
            return this.adapter.apply("url", this.disableCache
                ? this.timestampUrl(this._url)
                : this._url);
        },
        /**
         * URL of the data source.
         *
         * @param {string}  value  URL
         */
        set: function (value) {
            this._url = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "requestOptions", {
        /**
         * @return {INetRequestOptions} Options
         */
        get: function () {
            return this.adapter.apply("requestOptions", this._requestOptions);
        },
        /**
         * Custom options for HTTP(S) request.
         *
         * At this moment the only option supported is: `requestHeaders`, which holds
         * an array of objects for custom request headers, e.g.:
         *
         * ```TypeScript
         * chart.dataSource.requestOptions.requestHeaders = [{
         *   "key": "x-access-token",
         *   "value": "123456789"
         * }];
         * ``````JavaScript
         * chart.dataSource.requestOptions.requestHeaders = [{
         *   "key": "x-access-token",
         *   "value": "123456789"
         * }];
         * ```
         * ```JSON
         * {
         *   // ...
         *   "dataSource": {
         *     // ...
         *     "requestOptions": {
         *       "requestHeaders": [{
         *         "key": "x-access-token",
         *         "value": "123456789"
         *       }]
         *     }
         *   }
         * }
         * ```
         *
         * NOTE: setting this options on an-already loaded DataSource will not
         * trigger a reload.
         *
         * @param {INetRequestOptions}  value  Options
         */
        set: function (value) {
            this._requestOptions = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "parser", {
        /**
         * @return {DataParser} Data parser
         */
        get: function () {
            if (!this._parser) {
                this._parser = new __WEBPACK_IMPORTED_MODULE_1__JSONParser__["a" /* JSONParser */]();
            }
            return this.adapter.apply("parser", this._parser);
        },
        /**
         * A parser to be used to parse data.
         *
         * ```TypeScript
         * chart.dataSource.url = "http://www.myweb.com/data.json";
         * chart.dataSource.parser = am4core.JSONParser;
         * ```
         * ```JavaScript
         * chart.dataSource.url = "http://www.myweb.com/data.json";
         * chart.dataSource.parser = am4core.JSONParser;
         * ```
         * ```JSON
         * {
         *   // ...
         *   "dataSource": {
         *     "url": "http://www.myweb.com/data.json",
         *     "parser": "JSONParser"
         *   },
         *   // ...
         * }
         * ```
         *
         * @default JSONParser
         * @param {DataParser}  value  Data parser
         */
        set: function (value) {
            this._parser = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "reloadFrequency", {
        /**
         * @return {number} Reload frequency (ms)
         */
        get: function () {
            return this.adapter.apply("reloadTimeout", this._reloadFrequency);
        },
        /**
         * Data source reload frequency.
         *
         * If set, it will reload the same URL every X milliseconds.
         *
         * @param {number} value Reload frequency (ms)
         */
        set: function (value) {
            this._reloadFrequency = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "incremental", {
        /**
         * @return {boolean} Incremental load?
         */
        get: function () {
            return this.adapter.apply("incremental", this._incremental);
        },
        /**
         * Should subsequent reloads be treated as incremental?
         *
         * Incremental loads will assume that they contain only new data items
         * since the last load.
         *
         * If `incremental = false` the loader will replace all of the target's
         * data with each load.
         *
         * @default false
         * @param {boolean} Incremental load?
         */
        set: function (value) {
            this._incremental = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "language", {
        /**
         * @return {Language} A [[Language]] instance to be used
         */
        get: function () {
            if (this._language) {
                return this._language;
            }
            else if (this.component) {
                this._language = this.component.language;
                return this._language;
            }
            this.language = new __WEBPACK_IMPORTED_MODULE_5__utils_Language__["a" /* Language */]();
            return this.language;
        },
        /**
         * Language instance to use.
         *
         * Will inherit and use chart's language, if not set.
         *
         * @param {Language} value An instance of Language
         */
        set: function (value) {
            this._language = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "dateFormatter", {
        /**
         * @return {DateFormatter} A [[DateFormatter]] instance to be used
         */
        get: function () {
            if (this._dateFormatter) {
                return this._dateFormatter;
            }
            else if (this.component) {
                this._dateFormatter = this.component.dateFormatter;
                return this._dateFormatter;
            }
            this.dateFormatter = new __WEBPACK_IMPORTED_MODULE_6__formatters_DateFormatter__["a" /* DateFormatter */]();
            return this.dateFormatter;
        },
        /**
         * A [[DateFormatter]] to use when parsing dates from string formats.
         *
         * Will inherit and use chart's DateFormatter if not ser.
         *
         * @param {DateFormatter} value An instance of [[DateFormatter]]
         */
        set: function (value) {
            this._dateFormatter = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Adds current timestamp to the URL.
     *
     * @param  {string}  url  Source URL
     * @return {string}       Timestamped URL
     */
    DataSource.prototype.timestampUrl = function (url) {
        var p = url.split("?"), tstamp = new Date().getTime().toString();
        if (1 === p.length) {
            p[1] = tstamp;
        }
        else {
            p[1] += "&" + tstamp;
        }
        return p.join("?");
    };
    /**
     * Disposes of this object.
     */
    DataSource.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        if (this._reloadTimeout) {
            clearTimeout(this._reloadTimeout);
        }
    };
    /**
     * Initiate the load.
     *
     * All loading in JavaScript is asynchronous. This function will trigger the
     * load and will exit immediately.
     *
     * Use DataSource's events to watch for loaded data and errors.
     */
    DataSource.prototype.load = function () {
        __WEBPACK_IMPORTED_MODULE_0__DataLoader__["b" /* dataLoader */].load(this);
    };
    /**
     * Processes JSON-based config before it is applied to the object.
     *
     * @ignore Exclude from docs
     * @param {object}  config  Config
     */
    DataSource.prototype.processConfig = function (config) {
        __WEBPACK_IMPORTED_MODULE_7__Registry__["b" /* registry */].registeredClasses["json"] = __WEBPACK_IMPORTED_MODULE_1__JSONParser__["a" /* JSONParser */];
        __WEBPACK_IMPORTED_MODULE_7__Registry__["b" /* registry */].registeredClasses["JSONParser"] = __WEBPACK_IMPORTED_MODULE_1__JSONParser__["a" /* JSONParser */];
        __WEBPACK_IMPORTED_MODULE_7__Registry__["b" /* registry */].registeredClasses["csv"] = __WEBPACK_IMPORTED_MODULE_2__CSVParser__["a" /* CSVParser */];
        __WEBPACK_IMPORTED_MODULE_7__Registry__["b" /* registry */].registeredClasses["CSVParser"] = __WEBPACK_IMPORTED_MODULE_2__CSVParser__["a" /* CSVParser */];
        _super.prototype.processConfig.call(this, config);
    };
    return DataSource;
}(__WEBPACK_IMPORTED_MODULE_3__Base__["b" /* BaseObjectEvents */]));

//# sourceMappingURL=DataSource.js.map

/***/ }),
/* 131 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DataLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return dataLoader; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__CSVParser__ = __webpack_require__(95);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__JSONParser__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Adapter__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Net__ = __webpack_require__(129);
/**
 * Data Loader is responsible for loading and parsing external data
 */




;
/**
 * Data Loader is responsible for loading and parsing external data.
 *
 * There is just one instance of DataLoader per system. Unless you have a
 * speicific reason, do not instantiate additional instances.
 *
 * The global instance of Data Loader is accessible via:
 *
 * ```TypeScript
 * am4core.dataLoader;
 * ```
 * ```JavaScript
 * am4core.dataLoader;
 * ```
 *
 * A loading of specific data source is done via [[DataSource]].
 *
     Please refer to [[DataSource]] for information how to use it.
 *
 * @see {@link IDataLoaderAdapters} for a list of available Adapters
 */
var DataLoader = /** @class */ (function () {
    function DataLoader() {
        /**
         * Adapter.
         *
         * @type {Adapter<DataLoader, IDataLoaderAdapters>}
         */
        this.adapter = new __WEBPACK_IMPORTED_MODULE_2__utils_Adapter__["a" /* Adapter */](this);
    }
    /**
     * Loads a supplied [[DataSource]] or an array of data sources, then calls
     * their respective `parse` methods.
     *
     * @param  {DataSource | DataSource[]}  source  A single data source or an array of multiple of data sources
     */
    DataLoader.prototype.load = function (source) {
        var sources = Array.isArray(source) ? source : [source];
        var promises = [];
        // Add each Source to the list to be loaded simultaneously
        for (var x in sources) {
            // Dispatch events
            sources[x].dispatchImmediately("started");
            sources[x].dispatchImmediately("loadstarted");
            promises.push(__WEBPACK_IMPORTED_MODULE_3__utils_Net__["a" /* load */](sources[x].url, sources[x], sources[x].requestOptions));
        }
        // Run all promises in parallel
        Promise.all(promises).then(function (res) {
            // Process each loaded source
            for (var x in res) {
                // Get Source
                var result = res[x];
                var source_1 = result.target;
                // Dispatch events
                source_1.dispatchImmediately("loadended");
                if (result.error) {
                    if (source_1.events.isEnabled("error")) {
                        source_1.events.dispatchImmediately("error", {
                            type: "error",
                            code: result.xhr.status,
                            message: source_1.language.translate("Unable to load file: %1", null, source_1.url),
                            target: source_1
                        });
                    }
                }
                else {
                    // Initiate parsing of the loaded data
                    source_1.processData(result.response, result.type);
                }
                source_1.dispatchImmediately("ended");
            }
        }).catch(function (res) {
            res.target.dispatchImmediately("loadended");
            if (res.target.events.isEnabled("error")) {
                res.target.events.dispatchImmediately("error", {
                    type: "error",
                    code: res.xhr.status,
                    message: res.target.language.translate("Unable to load file: %1", null, res.target.url),
                    target: res.target
                });
            }
            res.target.dispatchImmediately("ended");
        });
    };
    /**
     * Instantiates a [[DataParser]] object based on the data type.
     * Built-in parser types are as follows:
     *
     * * "csv" or "text/csv"
     * * "json" or "application/json"
     *
     * @param  {string}      type  A format type
     * @return {DataParser}        A parser object
     */
    DataLoader.prototype.getParserByType = function (type) {
        // Let some plugin decide
        var parser;
        if (parser = this.adapter.apply("getParserByType", {
            parser: null,
            type: type
        }).parser) {
            return parser;
        }
        if (type == "csv" || type == "text/csv") {
            return new __WEBPACK_IMPORTED_MODULE_0__CSVParser__["a" /* CSVParser */]();
        }
        if (type == "json" || type == "application/json") {
            return new __WEBPACK_IMPORTED_MODULE_1__JSONParser__["a" /* JSONParser */]();
        }
        return;
    };
    /**
     * Tries to determine a parser out of content type and/or actual data.
     *
     * @param  {string}      data  Data
     * @param  {string}      type  Content-type
     * @return {DataParser}        Parser instance
     */
    DataLoader.prototype.getParserByData = function (data, type) {
        // Let some plugin decide
        var parser = this.adapter.apply("getParserByData", {
            parser: null,
            data: data,
            type: type
        }).parser;
        // Check if we have parser from outside code
        if (!parser) {
            // No, let's try to figure it out
            if (parser = this.getParserByType(type)) {
                // We're able to figure out parser by conten-type
                return parser;
            }
            else if (__WEBPACK_IMPORTED_MODULE_1__JSONParser__["a" /* JSONParser */].isJSON(data)) {
                return this.getParserByType("json");
            }
            else if (__WEBPACK_IMPORTED_MODULE_0__CSVParser__["a" /* CSVParser */].isCSV(data)) {
                return this.getParserByType("csv");
            }
        }
        return parser;
    };
    return DataLoader;
}());

/**
 * Create instance of Data Loader
 */
var dataLoader = new DataLoader();
//# sourceMappingURL=DataLoader.js.map

/***/ }),
/* 132 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Responsive; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Adapter__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Array__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Type__ = __webpack_require__(1);
/**
 * Responsive functionality module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */







/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Responsive is responsible for overriding certain properties when conditions
 * are met.
 *
 * This class is used to dynamically apply and change certain chart properties
 * based on the current values of properties.
 *
 * Mainly, this is used with [[Sprite]]'s dimensional properties, like
 * `pixelWidth` and `pixelHeight`. However, it can be used to dynamically
 * change any property, based on any other property's value.
 *
 * A default responsive rules are disabled.
 *
 * To enable, set `enabled = false`. E.g.:
 *
 * ```TypeScript
 * chart.responsive.enabled = true;
 * ```
 * ```JavaScript
 * chart.responsive.enabled = true;
 * ```
 *
 * @see {@link IResponsiveEvents} for a list of available events
 * @see {@link IResponsiveAdapters} for a list of available Adapters
 * @todo Add default rules
 * @todo Watch for rule modification
 * @important
 */
var Responsive = /** @class */ (function (_super) {
    __extends(Responsive, _super);
    /**
     * Constructor
     */
    function Responsive() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * Holds a list of responsive rules organized by object type.
         *
         * @type {List<IResponsiveRule>}
         */
        _this._rules = new __WEBPACK_IMPORTED_MODULE_1__utils_List__["b" /* List */]();
        /**
         * Holds the list of the default responsive rules.
         *
         * @type {List<IResponsiveRule>}
         */
        _this._defaultRules = new __WEBPACK_IMPORTED_MODULE_1__utils_List__["b" /* List */]();
        /**
         * Holds the list of currently applied rules.
         *
         * @type {object}
         */
        _this._appliedRules = {};
        /**
         * Use default rules in addition to the user-defined ones?
         *
         * @type {Boolean}
         */
        _this._useDefault = true;
        /**
         * Adapter.
         *
         * @type {Adapter<Responsive, IResponsiveAdapters>}
         */
        _this.adapter = new __WEBPACK_IMPORTED_MODULE_2__utils_Adapter__["a" /* Adapter */](_this);
        /**
         * Indicates of responsive rules application is enabled.
         *
         * @type {Boolean}
         */
        _this._enabled = false;
        /**
         * Collection of objects and state ids that do not have any properties set.
         *
         * @type {string[]}
         */
        _this._noStates = [];
        _this.className = "Responsive";
        // Set up rules list events
        _this.rules.events.on("insert", _this.checkRules, true);
        _this.rules.events.on("remove", _this.checkRules, true);
        _this._disposers.push(_this.rules.events);
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(Responsive.prototype, "component", {
        /**
         * @return {Optional<Component>} Target object
         */
        get: function () {
            return this._component;
        },
        /**
         * A target object that responsive rules will need to be applied to.
         *
         * @param {Optional<Component>}  value  Target object
         */
        set: function (value) {
            // Check if it's the same
            if (value == this._component) {
                return;
            }
            // Check if we already have a set up component and remove its events
            if (this._sizeEventDisposer) {
                this.removeDispose(this._sizeEventDisposer);
            }
            // Set
            this._component = value;
            // Set up resize monitoring events
            this._sizeEventDisposer = __WEBPACK_IMPORTED_MODULE_6__utils_Type__["getValue"](this.component).events.on("sizechanged", this.checkRules, this);
            this._disposers.push(this._sizeEventDisposer);
            // Enable resoponsive
            this.enabled = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Responsive.prototype, "enabled", {
        /**
         * @return {boolean} Apply responsive rules?
         */
        get: function () {
            return this.adapter.apply("enabled", this._enabled);
        },
        /**
         * Should responsive rules be checked against and applied?
         *
         * @default false
         * @param {boolean}  value  Apply responsive rules?
         */
        set: function (value) {
            if (this._enabled != value) {
                this._enabled = true;
                // Run `applyRules` so that any currently applied rules can be reset
                this.applyRules();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Responsive.prototype, "useDefault", {
        /**
         * @return {boolean} Use default rules?
         */
        get: function () {
            return this.adapter.apply("useDefault", this._useDefault);
        },
        /**
         * Should default responsive rules be applied in addition to user-defined
         * ones.
         *
         * User-defined rules will take precedence over default rules whenever they
         * produce conflicting settings.
         *
         * @default true
         * @param {boolean}  value  Use default rules?
         */
        set: function (value) {
            if (this._useDefault != value) {
                this._useDefault = true;
                // Run `applyRules` so that any currently applied rules can be reset
                this.applyRules();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Responsive.prototype, "rules", {
        /**
         * @return {List<IResponsiveRule>} User-defined rules
         */
        get: function () {
            return this.adapter.apply("rules", this._rules);
        },
        /**
         * User-defined responsive rules.
         *
         * User-defined rules will take precedence over default rules whenever they
         * produce conflicting settings.
         *
         * Use `allRules` to get all applicable rules including default and
         * user-defined ones.
         *
         * @param {List<IResponsiveRule>}  value  User-defined rules
         */
        set: function (value) {
            this._rules = value;
            this._enabled = true;
            this.applyRules();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Responsive.prototype, "defaultRules", {
        /**
         * Default responsive rules.
         *
         * @readonly
         * @return {List<IResponsiveRule>} List of responsive rules
         */
        get: function () {
            return this.adapter.apply("defaultRules", this._defaultRules);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Responsive.prototype, "allRules", {
        /**
         * Returns all rules: default rules (if not disabled) combined with
         * user-defined ones.
         *
         * @readonly
         * @return {List<IResponsiveRule>} List of all applicable rules
         */
        get: function () {
            // Create empty list
            var rules = new __WEBPACK_IMPORTED_MODULE_1__utils_List__["b" /* List */]();
            // Add default rules if not disabled
            // A code, requesting `allRules` must ensure loading of default rules
            // by calling `loadDefaultRules()`
            if (this.useDefault) {
                rules.copyFrom(this.defaultRules);
            }
            // Add user-defined ones
            rules.copyFrom(this.rules);
            return this.adapter.apply("allRules", rules);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Checks if rule by the particular id currently applied.
     *
     * @param  {string}   ruleId  Rule ID
     * @return {boolean}          Is currently applied?
     */
    Responsive.prototype.isApplied = function (ruleId) {
        var rule = this._appliedRules[ruleId];
        return __WEBPACK_IMPORTED_MODULE_6__utils_Type__["hasValue"](rule) ? rule : false;
    };
    /**
     * Checks which responsive rules currently satisfy their conditions and
     * should be applied, or unapplied.
     *
     * @ignore Exclude from docs
     */
    Responsive.prototype.checkRules = function () {
        var _this = this;
        // Check if default rules need to be loaded
        // If needed, we wait until it's loaded and then call `checkRules` again
        if (this.useDefault && this.defaultRules.length == 0) {
            this.loadDefaultRules().then(function (res) {
                _this._defaultRules.setAll(res.default);
                _this.checkRules();
            });
            return;
        }
        // Check if there are any rules
        var rules = this.allRules;
        if (!rules || rules.length == 0) {
            return;
        }
        // Init a list of rules to be applied
        var rulesChanged = false;
        var component = __WEBPACK_IMPORTED_MODULE_6__utils_Type__["getValue"](this.component);
        // Check which rules match
        __WEBPACK_IMPORTED_MODULE_4__utils_Iterator__["each"](rules.iterator(), function (rule) {
            // Check if rule has an id
            if (!rule.id) {
                rule.id = __WEBPACK_IMPORTED_MODULE_3__Registry__["b" /* registry */].getUniqueId();
            }
            // Init indicator if this rule should be applied
            var apply = rule.relevant(component);
            // Let's check if this rule needs to be applied
            if ((apply && !_this.isApplied(rule.id)) || (!apply && _this.isApplied(rule.id))) {
                rulesChanged = true;
            }
            _this._appliedRules[rule.id] = apply;
        });
        // Check if we need to re-apply the rules
        if (rulesChanged) {
            this.applyRules();
        }
    };
    /**
     * Applies current rules to the object.
     *
     * @ignore Exclude from docs
     * @param {any} target Target object
     * @todo Better type check
     */
    Responsive.prototype.applyRules = function (target) {
        var _this = this;
        // If no target supplied, we assume the top-level element
        var newTarget = (__WEBPACK_IMPORTED_MODULE_6__utils_Type__["hasValue"](target)
            ? target
            : __WEBPACK_IMPORTED_MODULE_6__utils_Type__["getValue"](this.component));
        // Check each rule
        var defaultStateApplied = false;
        if (this.enabled) {
            __WEBPACK_IMPORTED_MODULE_4__utils_Iterator__["each"](this.allRules.iterator(), function (rule) {
                // Get relevant state
                var state = _this.getState(rule, newTarget);
                // If there's a state, it means it needs to be applied
                if (state) {
                    // Check if default state was already applied to this element.
                    // We don't want to go resetting default states to ALL element,
                    // if they don't have responsive states.
                    if (!defaultStateApplied) {
                        // Nope, reset states (instantly).
                        //console.log("Applying default state to " + newTarget.className + " (" + newTarget.uid + "): " + JSON.stringify(newTarget.defaultState.properties));
                        newTarget.applyCurrentState(0);
                        defaultStateApplied = true;
                    }
                    // Is this rule currently applied?
                    if (_this.isApplied(__WEBPACK_IMPORTED_MODULE_6__utils_Type__["getValue"](rule.id))) {
                        // Yes. Apply the responsive state
                        //console.log("Applying state to " + newTarget.className + " (" + newTarget.uid + "): " + JSON.stringify(state.properties));
                        newTarget.setState(state);
                    }
                }
            });
        }
        // Apply rules to the children
        if (newTarget.children) {
            __WEBPACK_IMPORTED_MODULE_4__utils_Iterator__["each"](newTarget.children.iterator(), function (child) {
                _this.applyRules(child);
            });
        }
    };
    /**
     * Applies specific oresponsive overrides to the element.
     *
     * @ignore Exclude from docs
     * @param {IResponsiveRule}  rule    Responsive rule
     * @param {any}              target  Target element
     * @deprecated
     */
    /*	public applyRule(rule: IResponsiveRule, target: any): void {

            // Construct state id
            //let stateId = "responsive-" + rule.id;

            // Check if we need to create a state for the element
            let state = this.getState(rule, target);

            // Apply the state
            if (state) {
                //if (target.className == "Container" && target.parent.className == "ZoomControl") {
                console.log("Applying state to " + target.className + " (" + target.uid + "): " + JSON.stringify(state.properties));
                //}
                target.setState(state);
            }

        }*/
    /**
     * Returns a relative state for the rule/target, or `null` if no state is
     * needed.
     *
     * @param  {IResponsiveRule}  rule    [description]
     * @param  {any}              target  [description]
     * @return {Optional}                 [description]
     */
    Responsive.prototype.getState = function (rule, target) {
        var stateId = "responsive-" + rule.id;
        var tmpId = target.uid + "_" + stateId;
        if (__WEBPACK_IMPORTED_MODULE_5__utils_Array__["g" /* indexOf */](this._noStates, tmpId) !== -1) {
            return null;
        }
        else if (!target.states.hasKey(stateId)) {
            var state = rule.state(target, stateId);
            if (!state) {
                this._noStates.push(tmpId);
            }
            return state;
        }
        else {
            return target.states.getKey(stateId);
        }
    };
    /**
     * Gets a value from an element.
     *
     * @ignore Exclude from docs
     * @param  {any}     target    Target object
     * @param  {string}  property  Property
     * @return {any}               Property value
     */
    Responsive.prototype.getValue = function (target, property) {
        // This is a bit hacky, first we check if the property exist.
        // If it doesn't we try accessing target's property directly
        var value = target.getPropertyValue(property);
        if (!__WEBPACK_IMPORTED_MODULE_6__utils_Type__["hasValue"](value) && __WEBPACK_IMPORTED_MODULE_6__utils_Type__["hasValue"](target[property])) {
            value = target[property];
        }
        return value;
    };
    /**
     * Loads default responsive rules.
     *
     * @ignore Exclude from docs
     * @return {Promise<any>} Responsive rules
     */
    Responsive.prototype.loadDefaultRules = function () {
        return __webpack_require__.e/* import() */(3).then(__webpack_require__.bind(null, 252));
    };
    return Responsive;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["b" /* BaseObjectEvents */]));

//# sourceMappingURL=Responsive.js.map

/***/ }),
/* 133 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AxisLine; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_Color__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_InterfaceColorSet__ = __webpack_require__(9);
/**
 *
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Used to draw Axis line.
 *
 * @see {@link IAxisLineEvents} for a list of available events
 * @see {@link IAxisLineAdapters} for a list of available Adapters
 */
var AxisLine = /** @class */ (function (_super) {
    __extends(AxisLine, _super);
    /**
     * Constructor
     */
    function AxisLine() {
        var _this = _super.call(this) || this;
        _this.className = "AxisLine";
        _this.element = _this.paper.add("path");
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_3__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        _this.stroke = interfaceColors.getFor("grid");
        _this.strokeOpacity = 0.15;
        _this.pixelPerfect = true;
        _this.fill = Object(__WEBPACK_IMPORTED_MODULE_2__core_utils_Color__["c" /* color */])();
        _this.applyTheme();
        _this.interactionsEnabled = false;
        _this.element.moveTo({ x: 0, y: 0 });
        return _this;
    }
    return AxisLine;
}(__WEBPACK_IMPORTED_MODULE_0__core_Sprite__["a" /* Sprite */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["b" /* registry */].registeredClasses["AxisLine"] = AxisLine;
//# sourceMappingURL=AxisLine.js.map

/***/ }),
/* 134 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AxisTick; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__elements_Tick__ = __webpack_require__(101);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Registry__ = __webpack_require__(0);
/**
 * Axis Tick module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Draws an axis tick
 * @see {@link IAxisTickEvents} for a list of available events
 * @see {@link IAxisTickAdapters} for a list of available Adapters
 */
var AxisTick = /** @class */ (function (_super) {
    __extends(AxisTick, _super);
    function AxisTick() {
        var _this = _super.call(this) || this;
        _this.className = "AxisTick";
        _this.element = _this.paper.add("path");
        _this.location = 0.5;
        _this.isMeasured = false;
        _this.pixelPerfect = true;
        _this.length = 5;
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(AxisTick.prototype, "location", {
        get: function () {
            return this.getPropertyValue("location");
        },
        set: function (value) {
            this.setPropertyValue("location", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisTick.prototype, "inside", {
        get: function () {
            return this.getPropertyValue("inside");
        },
        set: function (value) {
            this.setPropertyValue("inside", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return AxisTick;
}(__WEBPACK_IMPORTED_MODULE_0__elements_Tick__["a" /* Tick */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["b" /* registry */].registeredClasses["AxisTick"] = AxisTick;
//# sourceMappingURL=AxisTick.js.map

/***/ }),
/* 135 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AxisFillCircular; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__AxisFill__ = __webpack_require__(98);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_Type__ = __webpack_require__(1);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Provides fill element functionality for circular Axes.
 *
 * @see {@link IAxisFillCircularEvents} for a list of available events
 * @see {@link IAxisFillCircularAdapters} for a list of available Adapters
 * @todo Needs description
 */
var AxisFillCircular = /** @class */ (function (_super) {
    __extends(AxisFillCircular, _super);
    /**
     * Constructor.
     *
     * @param {Axis} axis Axis
     */
    function AxisFillCircular(axis) {
        var _this = _super.call(this, axis) || this;
        _this.className = "AxisFillCircular";
        _this.element = _this.paper.add("path");
        _this.radius = Object(__WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__["c" /* percent */])(100);
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the fill element.
     *
     * @ignore Exclude from docs
     */
    AxisFillCircular.prototype.draw = function () {
        _super.prototype.draw.call(this);
        if (this.axis) {
            var renderer = this.axis.renderer;
            this.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, __WEBPACK_IMPORTED_MODULE_3__core_utils_Type__["hasValue"](this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);
            this.element.attr({ "d": this.fillPath });
        }
    };
    Object.defineProperty(AxisFillCircular.prototype, "innerRadius", {
        /**
         * @return {number} Inner radius
         */
        get: function () {
            return this.getPropertyValue("innerRadius");
        },
        /**
         * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).
         *
         * @param {number | Percent}  value  Inner radius
         */
        set: function (value) {
            this.setPropertyValue("innerRadius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisFillCircular.prototype, "radius", {
        /**
         * @return {number} Outer radius
         */
        get: function () {
            return this.getPropertyValue("radius");
        },
        /**
         * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).
         *
         * @param {number | Percent}  value  Outer radius
         */
        set: function (value) {
            this.setPropertyValue("radius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisFillCircular.prototype, "cornerRadius", {
        /**
         * @return {number} Corner radius (px)
         */
        get: function () {
            return this.getPropertyValue("cornerRadius");
        },
        /**
         * Corner radius for the fill. In pixels.
         *
         * @param {number}  value  Corner radius (px)
         */
        set: function (value) {
            this.setPropertyValue("cornerRadius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return AxisFillCircular;
}(__WEBPACK_IMPORTED_MODULE_0__AxisFill__["a" /* AxisFill */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__core_Registry__["b" /* registry */].registeredClasses["AxisFillCircular"] = AxisFillCircular;
//# sourceMappingURL=AxisFillCircular.js.map

/***/ }),
/* 136 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return GridCircular; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Grid__ = __webpack_require__(99);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Registry__ = __webpack_require__(0);
/**
 * A module defining functionality for circular axis grid elements.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a circular grid element for circular-type axis.
 *
 * @see {@link IGridCircularEvents} for a list of available events
 * @see {@link IGridCircularAdapters} for a list of available Adapters
 * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements
 */
var GridCircular = /** @class */ (function (_super) {
    __extends(GridCircular, _super);
    /**
     * Constructor
     */
    function GridCircular() {
        var _this = _super.call(this) || this;
        _this.className = "GridCircular";
        _this.pixelPerfect = false;
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(GridCircular.prototype, "innerRadius", {
        /**
         * @return {number} Inner radius
         */
        get: function () {
            return this.getPropertyValue("innerRadius");
        },
        /**
         * Inner radius of the circular grid. (absolute or relative)
         *
         * @param {number | Percent} value Inner radius
         */
        set: function (value) {
            this.setPropertyValue("innerRadius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GridCircular.prototype, "radius", {
        /**
         * @return {number} Outer radius
         */
        get: function () {
            return this.getPropertyValue("radius");
        },
        /**
         * Outer radius of the circular grid. (absolute or relative)
         *
         * @param {number | Percent} value Outer radius
         */
        set: function (value) {
            this.setPropertyValue("radius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return GridCircular;
}(__WEBPACK_IMPORTED_MODULE_0__Grid__["a" /* Grid */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["b" /* registry */].registeredClasses["GridCircular"] = GridCircular;
//# sourceMappingURL=GridCircular.js.map

/***/ }),
/* 137 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Group; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__AMElement__ = __webpack_require__(74);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_List__ = __webpack_require__(5);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates an SVG `<g>` element.
 *
 * SVG groups are used for elements that need more elements just one.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Element/g} About `<g>` element
 */
var Group = /** @class */ (function (_super) {
    __extends(Group, _super);
    /**
     * Constructor.
     *
     * @param {string} elementName Element type (should be "g")
     */
    function Group(elementName) {
        var _this = _super.call(this, elementName) || this;
        /**
         * All child elements contained in the group.
         *
         * @type {List<AMElement>}
         */
        _this.children = new __WEBPACK_IMPORTED_MODULE_1__utils_List__["b" /* List */]();
        return _this;
    }
    /**
     * Adds an element to group.
     *
     * This will manipulate DOM. `element` will be physically moved into group.
     *
     * @param {AMElement}  element  Element
     */
    Group.prototype.add = function (element) {
        if (element) {
            this.children.moveValue(element);
            this.node.appendChild(element.node);
        }
    };
    /**
     * Adds an element to group.
     *
     * This will manipulate DOM. `element` will be physically moved into group.
     *
     * @param {AMElement}  element  Element
     */
    Group.prototype.addToBack = function (element) {
        if (element) {
            var first = this.node.childNodes[0];
            if (first) {
                this.node.insertBefore(element.node, first);
            }
            else {
                this.node.appendChild(element.node);
            }
            this.children.moveValue(element);
        }
    };
    /**
     * Removes the `element` from group.
     *
     * Please note that this will not dispose the element itself, it will just
     * remove it from the group.
     *
     * @param {AMElement}  element  Element
     */
    Group.prototype.removeElement = function (element) {
        // todo: not sure about the speed, need to investigate, maybe it's faster to check if node is a child
        if (element) {
            try {
                this.node.removeChild(element.node);
            }
            catch (err) {
            }
            this.children.removeValue(element);
        }
    };
    Object.defineProperty(Group.prototype, "firstChild", {
        /**
         * First element in the group.
         *
         * @return {AMElement} First element
         */
        get: function () {
            if (this.children.length) {
                return this.children.getIndex(0);
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Group.prototype, "lastChild", {
        /**
         * Last element in the group.
         *
         * @return {AMElement} Last element
         */
        get: function () {
            var len;
            if (len = this.children.length) {
                return this.children.getIndex(len - 1);
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Group.prototype, "content", {
        /**
         * @return {string} SVG markup
         */
        get: function () {
            return this.node.innerHTML;
        },
        /**
         * Content of the group element.
         *
         * Can be used to add a lot of proprietary SVG markup into group.
         *
         * @param {string}  value  SVG markup
         */
        set: function (value) {
            this.node.innerHTML = value;
            this.populateChildren();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Removes all children from the group.
     *
     * This will note dispose the children. They will remain in memory as
     * orphans. To automatically remove and dispose children elements use
     * `disposeChildren()` instead.
     */
    Group.prototype.removeChildren = function () {
        while (this.children.length > 0) {
            var child = this.children.getIndex(0);
            if (child.node && child.node.parentNode) {
                child.node.parentNode.removeChild(child.node);
            }
            this.children.removeValue(child);
        }
    };
    /**
     * Removes and disposes all elements in the group.
     */
    Group.prototype.disposeChildren = function () {
        // TODO make this more efficient
        while (this.children.length > 0) {
            var child = this.children.getIndex(0);
            this.children.removeValue(child);
            child.dispose();
        }
    };
    /**
     * Regenerates internal `children` list out of the actual nodes in DOM.
     *
     * @ignore Exclude from docs
     */
    Group.prototype.populateChildren = function () {
        this.children.clear();
        for (var i = 0, len = this.node.childNodes.length; i < len; i++) {
            var element = this.node.childNodes[i];
            this.children.push(new __WEBPACK_IMPORTED_MODULE_0__AMElement__["a" /* AMElement */](element));
        }
    };
    return Group;
}(__WEBPACK_IMPORTED_MODULE_0__AMElement__["a" /* AMElement */]));

//# sourceMappingURL=Group.js.map

/***/ }),
/* 138 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Ellipse; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Circle__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Registry__ = __webpack_require__(0);
/**
 * Ellipse module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Draws an ellipse
 * @see {@link IEllipseEvents} for a list of available events
 * @see {@link IEllipseAdapters} for a list of available Adapters
 */
var Ellipse = /** @class */ (function (_super) {
    __extends(Ellipse, _super);
    /**
     * Constructor
     */
    function Ellipse() {
        var _this = _super.call(this) || this;
        _this.className = "Ellipse";
        _this.element = _this.paper.add("ellipse");
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the ellipsis.
     */
    Ellipse.prototype.draw = function () {
        _super.prototype.draw.call(this);
        this.element.attr({ "rx": this.radius });
        this.element.attr({ "ry": this.radiusY });
    };
    Object.defineProperty(Ellipse.prototype, "radiusY", {
        /**
         * @return {number} Vertical radius
         */
        get: function () {
            return this.innerHeight / 2;
        },
        /**
         * Vertical radius.
         *
         * It's a relative size to the `radius`.
         *
         * E.g. 0.8 will mean the height of the ellipsis will be 80% of it's
         * horizontal radius.
         *
         * @param {number}  value  Vertical radius
         */
        set: function (value) {
            this.height = value * 2;
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Ellipse.prototype, "radius", {
        /**
         * @return {number} Horizontal radius
         */
        get: function () {
            return this.innerWidth / 2;
        },
        /**
         * Horizontal radius.
         *
         * @param {number}  value  Horizontal radius
         */
        set: function (value) {
            this.width = value * 2;
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    return Ellipse;
}(__WEBPACK_IMPORTED_MODULE_0__Circle__["a" /* Circle */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__Registry__["b" /* registry */].registeredClasses["Ellipse"] = Ellipse;
//# sourceMappingURL=Ellipse.js.map

/***/ }),
/* 139 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PointedRectangle; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__PointedShape__ = __webpack_require__(140);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Math__ = __webpack_require__(2);
/**
 * Pointed rectangle module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Draws a rectangle with a pointer.
 *
 * @see {@link IPointedRectangleEvents} for a list of available events
 * @see {@link IPointedRectangleAdapters} for a list of available Adapters
 */
var PointedRectangle = /** @class */ (function (_super) {
    __extends(PointedRectangle, _super);
    /**
     * Constructor
     */
    function PointedRectangle() {
        var _this = _super.call(this) || this;
        _this.className = "PointedRectangle";
        _this.element = _this.paper.add("path");
        _this.cornerRadius = 0;
        _this.cornerRadius = 6;
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the element.
     *
     * @ignore Exclude from docs
     */
    PointedRectangle.prototype.draw = function () {
        _super.prototype.draw.call(this);
        var cr = this.cornerRadius;
        var w = this.innerWidth;
        var h = this.innerHeight;
        if (w > 0 && h > 0) {
            var x = this.pointerX;
            var y = this.pointerY;
            var bwh = this.pointerBaseWidth / 2;
            var maxcr = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["min"](w / 2, h / 2);
            var crtl = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](cr, 0, maxcr);
            var crtr = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](cr, 0, maxcr);
            var crbr = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](cr, 0, maxcr);
            var crbl = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](cr, 0, maxcr);
            // corner coordinates
            // top left
            var xtl = 0;
            var ytl = 0;
            // top right
            var xtr = w;
            var ytr = 0;
            // bottom right
            var xbr = w;
            var ybr = h;
            // bottom left
            var xbl = 0;
            var ybl = h;
            var lineT = void 0;
            var lineR = void 0;
            var lineB = void 0;
            var lineL = void 0;
            // find stem base side: http://$math.stackexchange.com/questions/274712/calculate-on-which-side-of-straign-line-is-dot-located
            // d=(x−x1)(y2−y1)−(y−y1)(x2−x1)
            var d1 = (x - xtl) * (ybr - ytl) - (y - ytl) * (xbr - xtl);
            var d2 = (x - xbl) * (ytr - ybl) - (y - ybl) * (xtr - xbl);
            // top
            if (d1 > 0 && d2 > 0) {
                var stemX = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](x, crtl + bwh, w - bwh - crtr);
                y = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](y, -Infinity, 0);
                lineT = "M" + crtl + ",0 L" + (stemX - bwh) + ",0 L" + x + "," + y + " L" + (stemX + bwh) + ",0 L" + (w - crtr) + ",0";
            }
            else {
                lineT = "M" + crtl + ",0 L" + (w - crtr) + ",0";
            }
            // bottom
            if (d1 < 0 && d2 < 0) {
                var stemX = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](x, crbl + bwh, w - bwh - crbr);
                y = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](y, h, Infinity);
                lineB = " L" + (w - crbr) + "," + h + " L" + (stemX + bwh) + "," + h + " L" + x + "," + y + " L" + (stemX - bwh) + "," + h + " L" + crbl + "," + h;
            }
            else {
                lineB = " L" + crbl + "," + h;
            }
            // left
            if (d1 < 0 && d2 > 0) {
                var stemY = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](y, crtl + bwh, h - crbl - bwh);
                x = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](x, -Infinity, 0);
                lineL = " L0," + (h - crbl) + " L0," + (stemY + bwh) + " L" + x + "," + y + " L0," + (stemY - bwh) + " L0," + crtl;
            }
            else {
                lineL = " L0," + crtl;
            }
            // right
            if (d1 > 0 && d2 < 0) {
                var stemY = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](y, crtr + bwh, h - bwh - crbr);
                x = __WEBPACK_IMPORTED_MODULE_1__utils_Math__["fitToRange"](x, w, Infinity);
                lineR = " L" + w + "," + crtr + " L" + w + "," + (stemY - bwh) + " L" + x + "," + y + " L" + w + "," + (stemY + bwh) + " L" + w + "," + (h - crbr);
            }
            else {
                lineR = " L" + w + "," + (h - crbr);
            }
            var arcTR = " a" + crtr + "," + crtr + " 0 0 1 " + crtr + "," + crtr;
            var arcBR = " a" + crbr + "," + crbr + " 0 0 1 -" + crbr + "," + crbr;
            var arcBL = " a" + crbl + "," + crbl + " 0 0 1 -" + crbl + ",-" + crbl;
            var arcTL = " a" + crtl + "," + crtl + " 0 0 1 " + crtl + ",-" + crtl;
            var path = lineT + arcTR + lineR + arcBR + lineB + arcBL + lineL + arcTL;
            this.element.attr({ "d": path });
        }
    };
    Object.defineProperty(PointedRectangle.prototype, "cornerRadius", {
        /**
         * @return {number} Corner radius (px)
         */
        get: function () {
            return this.getPropertyValue("cornerRadius");
        },
        /**
         * Radius of rectangle's border in pixels.
         *
         * @default 0
         * @param {number}  value  Corner radius (px)
         */
        set: function (value) {
            this.setPropertyValue("cornerRadius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return PointedRectangle;
}(__WEBPACK_IMPORTED_MODULE_0__PointedShape__["a" /* PointedShape */]));

//# sourceMappingURL=PointedRectangle.js.map

/***/ }),
/* 140 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PointedShape; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Type__ = __webpack_require__(1);
/**
 * Pointed shape module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Draws a shape with a pointer.
 *
 * @see {@link IPointedShapeEvents} for a list of available events
 * @see {@link IPointedShapeAdapters} for a list of available Adapters
 */
var PointedShape = /** @class */ (function (_super) {
    __extends(PointedShape, _super);
    /**
     * Constructor
     */
    function PointedShape() {
        var _this = _super.call(this) || this;
        _this.className = "PointedShape";
        _this.pointerBaseWidth = 15;
        _this.pointerLength = 10;
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the element.
     *
     * @ignore Exclude from docs
     */
    PointedShape.prototype.draw = function () {
        _super.prototype.draw.call(this);
        if (!__WEBPACK_IMPORTED_MODULE_1__utils_Type__["isNumber"](this.pointerX)) {
            this.pointerX = this.pixelWidth / 2;
        }
        if (!__WEBPACK_IMPORTED_MODULE_1__utils_Type__["isNumber"](this.pointerY)) {
            this.pointerY = this.pixelHeight + 10;
        }
    };
    Object.defineProperty(PointedShape.prototype, "pointerBaseWidth", {
        /**
         * @return {number} Width (px)
         */
        get: function () {
            return this.getPropertyValue("pointerBaseWidth");
        },
        /**
         * A width of the pinter's (stem's) thick end (base) in pixels.
         *
         * @default 15
         * @param {number}  value  Width (px)
         */
        set: function (value) {
            this.setPropertyValue("pointerBaseWidth", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PointedShape.prototype, "pointerLength", {
        /**
         * @return {number} Length (px)
         */
        get: function () {
            return this.getPropertyValue("pointerLength");
        },
        /**
         * A length of the pinter (stem) in pixels.
         *
         * @default 10
         * @param {number}  value  Length (px)
         */
        set: function (value) {
            this.setPropertyValue("pointerLength", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PointedShape.prototype, "pointerX", {
        /**
         * @return {number} X
         */
        get: function () {
            return this.getPropertyValue("pointerX");
        },
        /**
         * X coordinate the shape is pointing to.
         *
         * @param {number}  value  X
         */
        set: function (value) {
            this.setPropertyValue("pointerX", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PointedShape.prototype, "pointerY", {
        /**
         * @return {number} Y
         */
        get: function () {
            return this.getPropertyValue("pointerY");
        },
        /**
         * Y coordinate the shape is pointing to.
         *
         * @param {number}  value  Y
         */
        set: function (value) {
            this.setPropertyValue("pointerY", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return PointedShape;
}(__WEBPACK_IMPORTED_MODULE_0__Sprite__["a" /* Sprite */]));

//# sourceMappingURL=PointedShape.js.map

/***/ }),
/* 141 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Morpher; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Animation__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Ease__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Type__ = __webpack_require__(1);
/**
 * Morpher module contains functionality that allows transforming (morphing)
 * SVG shapes like paths, rectangles, circles between one another.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





/**
 * Morpher class can be used in conjunction with [[Animation]] to transform one
 * SVG shape into another.
 */
var Morpher = /** @class */ (function (_super) {
    __extends(Morpher, _super);
    /**
     * Constructor.
     *
     * @param {IMorphable} morphable An object to morph
     */
    function Morpher(morphable) {
        var _this = _super.call(this) || this;
        /**
         * A storage for measurements.
         *
         * @type {IRectangle[]}
         */
        _this._bboxes = [];
        /**
         * Duration of the morphing animation in milliseconds.
         *
         * @type {number}
         */
        _this.morphDuration = 800;
        /**
         * An easing function to use for morphing animation.
         *
         * @see {@link Ease}
         * @type {Function}
         */
        _this.morphEasing = __WEBPACK_IMPORTED_MODULE_3__utils_Ease__["cubicOut"];
        /**
         * If set to `true` then all separate parts of the multi-part shape will
         * morph into a single target shape. Otherwise each separate part will render
         * into separate target shapes.
         *
         * @type {boolean}
         */
        _this.morphToSingle = true;
        /**
         * A ratio to scale morphed object in relation to the source object.
         *
         * @type {number}
         */
        _this.scaleRatio = 1;
        _this.className = "Morpher";
        _this.morphable = morphable;
        _this.applyTheme();
        return _this;
    }
    /**
     * Morphs shape to polygon.
     *
     * @param {IPoint[][][]}        toPoints  Corner points of the target shape
     * @param {number}              duration  Duration in milliseconds
     * @param {(number) => number}  easing    Easing function
     * @return {Animation}                    Animation
     */
    Morpher.prototype.morphToPolygon = function (toPoints, duration, easing) {
        var points = this.morphable.currentPoints;
        this.sortPoints(points);
        this.sortPoints(toPoints);
        this._morphFromPointsReal = [];
        this._morphToPointsReal = [];
        if (!__WEBPACK_IMPORTED_MODULE_4__utils_Type__["hasValue"](duration)) {
            duration = this.morphDuration;
        }
        if (!__WEBPACK_IMPORTED_MODULE_4__utils_Type__["hasValue"](easing)) {
            easing = this.morphEasing;
        }
        this._morphFromPointsReal = this.normalizePoints(toPoints, points);
        this._morphToPointsReal = this.normalizePoints(points, toPoints);
        this.morphable.currentPoints = this._morphFromPointsReal;
        var animation = new __WEBPACK_IMPORTED_MODULE_1__utils_Animation__["a" /* Animation */](this, { property: "morphProgress", from: 0, to: 1 }, duration, easing);
        this._disposers.push(animation);
        animation.start();
        return animation;
    };
    /**
     * [normalizePoints description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {IPoint[][][]}  pointsA  Point A
     * @param  {IPoint[][][]}  pointsB  Point B
     * @return {IPoint[]}               Normalized points
     */
    Morpher.prototype.normalizePoints = function (pointsA, pointsB) {
        for (var i = 0; i < pointsA.length; i++) {
            var surfaceA = pointsA[i][0];
            var holeA = pointsA[i][1];
            var bboxA = __WEBPACK_IMPORTED_MODULE_4__utils_Type__["getValue"](__WEBPACK_IMPORTED_MODULE_2__utils_Math__["getBBox"](surfaceA));
            var middleX = bboxA.x + bboxA.width;
            var middleY = bboxA.y + bboxA.height;
            // check if we have the same in PointsB
            if (!pointsB[i]) {
                pointsB[i] = [];
            }
            // check if we have surface in pointsB
            if (surfaceA && !pointsB[i][0]) {
                pointsB[i][0] = [{ x: middleX, y: middleY }, { x: middleX, y: middleY }];
            }
            if (pointsB[i][0]) {
                pointsB[i][0] = this.addPoints(pointsB[i][0], surfaceA.length);
                var distance = Infinity;
                var splitAt = 0;
                for (var a = 0; a < pointsB[i][0].length; a++) {
                    var newDistance = __WEBPACK_IMPORTED_MODULE_2__utils_Math__["getDistance"](pointsB[i][0][a], surfaceA[0]);
                    if (newDistance < distance) {
                        splitAt = a;
                        distance = newDistance;
                    }
                }
                var partA = pointsB[i][0].slice(0, splitAt);
                var partB = pointsB[i][0].slice(splitAt);
                pointsB[i][0] = partB.concat(partA);
            }
            if (holeA) {
                if (!pointsB[i][1]) {
                    pointsB[i][1] = [{ x: middleX, y: middleY }, { x: middleX, y: middleY }];
                }
                pointsB[i][1] = this.addPoints(pointsB[i][1], holeA.length);
            }
        }
        return pointsB;
    };
    /**
     * [sortPoints description]
     *
     * @ignore Exclude from doc
     * @todo Description
     * @param {IPoint[][][]}  points  [description]
     * @return                        common bbox of points
     */
    Morpher.prototype.sortPoints = function (points) {
        points.sort(function (a, b) {
            var bbox1 = __WEBPACK_IMPORTED_MODULE_4__utils_Type__["getValue"](__WEBPACK_IMPORTED_MODULE_2__utils_Math__["getBBox"](a[0]));
            var bbox2 = __WEBPACK_IMPORTED_MODULE_4__utils_Type__["getValue"](__WEBPACK_IMPORTED_MODULE_2__utils_Math__["getBBox"](b[0]));
            if (bbox1.width * bbox1.height > bbox2.width * bbox2.height) {
                return -1;
            }
            else {
                return 1;
            }
        });
        var bboxes = [];
        for (var i = 0; i < points.length; i++) {
            var surface = points[i][0];
            if (surface) {
                bboxes.push(__WEBPACK_IMPORTED_MODULE_4__utils_Type__["getValue"](__WEBPACK_IMPORTED_MODULE_2__utils_Math__["getBBox"](surface)));
            }
        }
        return __WEBPACK_IMPORTED_MODULE_2__utils_Math__["getCommonRectangle"](bboxes);
    };
    /**
     * Morphs shape to a circle.
     *
     * @param  {number}              radius    Target circle radius (px)
     * @param  {number}              duration  Duration (ms)
     * @param  {(number) => number}  easing    Easing function
     * @return {Animation}                     Animation
     */
    Morpher.prototype.morphToCircle = function (radius, duration, easing) {
        var points = this.morphable.points;
        var commonBBox = this.sortPoints(points);
        this._morphFromPointsReal = [];
        this._morphToPointsReal = [];
        if (!__WEBPACK_IMPORTED_MODULE_4__utils_Type__["hasValue"](duration)) {
            duration = this.morphDuration;
        }
        if (!__WEBPACK_IMPORTED_MODULE_4__utils_Type__["hasValue"](easing)) {
            easing = this.morphEasing;
        }
        // surface
        for (var i = 0; i < points.length; i++) {
            var surface = points[i][0];
            var hole = points[i][1];
            this._morphFromPointsReal[i] = [];
            this._morphToPointsReal[i] = [];
            if (surface) {
                var toPoints = surface;
                var fromPoints = surface;
                var bbox = __WEBPACK_IMPORTED_MODULE_4__utils_Type__["getValue"](__WEBPACK_IMPORTED_MODULE_2__utils_Math__["getBBox"](fromPoints)); // this._bboxes[i];
                if (this.morphToSingle) {
                    bbox = __WEBPACK_IMPORTED_MODULE_4__utils_Type__["getValue"](commonBBox);
                }
                var middleX = bbox.x + bbox.width / 2;
                var middleY = bbox.y + bbox.height / 2;
                var realRadius = radius;
                if (!__WEBPACK_IMPORTED_MODULE_4__utils_Type__["isNumber"](realRadius)) {
                    realRadius = Math.min(bbox.width / 2, bbox.height / 2);
                }
                toPoints = [];
                // find angle for the first point
                var startAngle = __WEBPACK_IMPORTED_MODULE_2__utils_Math__["getAngle"]({ x: middleX, y: middleY }, surface[0]);
                var count = 100;
                if (surface.length > count) {
                    count = surface.length;
                }
                fromPoints = this.addPoints(surface, count);
                count = fromPoints.length; // add Points might increase number a bit
                var angle = 360 / (count - 1);
                for (var a = 0; a < count; a++) {
                    var realAngle = angle * a + startAngle;
                    var pointOnCircle = { x: middleX + realRadius * __WEBPACK_IMPORTED_MODULE_2__utils_Math__["cos"](realAngle), y: middleY + realRadius * __WEBPACK_IMPORTED_MODULE_2__utils_Math__["sin"](realAngle) };
                    toPoints[a] = pointOnCircle;
                }
                if (hole && hole.length > 0) {
                    for (var i_1 = 0; i_1 < hole.length; i_1++) {
                        toPoints.push({ x: middleX, y: middleY });
                    }
                }
                this._morphFromPointsReal[i][0] = fromPoints;
                this._morphToPointsReal[i][0] = toPoints;
            }
        }
        this.morphable.currentPoints = this._morphFromPointsReal;
        var animation = new __WEBPACK_IMPORTED_MODULE_1__utils_Animation__["a" /* Animation */](this, { property: "morphProgress", from: 0, to: 1 }, duration, easing);
        this._disposers.push(animation);
        animation.start();
        return animation;
    };
    /**
     * [addPoints description]
     *
     * @ignore Exclude from doc
     * @todo Description
     * @param  {IPoint[]}  points         [description]
     * @param  {number}    mustHaveCount  [description]
     * @return {IPoint[]}                 [description]
     */
    Morpher.prototype.addPoints = function (points, mustHaveCount) {
        var addToSegmentCount = Math.round(mustHaveCount / points.length);
        var newPoints = [];
        for (var i = 0; i < points.length; i++) {
            var point0 = points[i];
            var point1 = void 0;
            if (i == points.length - 1) {
                point1 = points[0];
            }
            else {
                point1 = points[i + 1];
            }
            newPoints.push(point0);
            for (var p = 1; p < addToSegmentCount; p++) {
                var percent = p / addToSegmentCount;
                var extraPoint = { x: point0.x + (point1.x - point0.x) * percent, y: point0.y + (point1.y - point0.y) * percent };
                newPoints.push(extraPoint);
            }
            // stop adding in case we already added more than left in original
            if (newPoints.length + points.length - i == mustHaveCount) {
                addToSegmentCount = 0;
            }
        }
        if (newPoints.length < mustHaveCount && points.length > 0) {
            var lastPoint = points[points.length - 1];
            for (var p = newPoints.length; p < mustHaveCount; p++) {
                // add same as last
                newPoints.push({ x: lastPoint.x, y: lastPoint.y });
            }
        }
        return newPoints;
    };
    /**
     * Morphs shape into a rectangle.
     *
     * @param  {number}              width     Width of the target rectangle (px)
     * @param  {number}              height    Height of the target rectangle (px)
     * @param  {number}              duration  Duration (ms)
     * @param  {(number) => number}  easing    Easing function
     * @return {Animation}                     Animation
     */
    Morpher.prototype.morphToRectangle = function (width, height, duration, easing) {
        var points = this.morphable.points;
        this.sortPoints(points);
        this._morphFromPointsReal = [];
        this._morphToPointsReal = [];
        if (!__WEBPACK_IMPORTED_MODULE_4__utils_Type__["hasValue"](duration)) {
            duration = this.morphDuration;
        }
        if (!__WEBPACK_IMPORTED_MODULE_4__utils_Type__["hasValue"](easing)) {
            easing = this.morphEasing;
        }
        //		let biggestBBox: IRectangle = this._bboxes[this._biggestIndex];
        // surface
        for (var i = 0; i < points.length; i++) {
            var surface = points[i][0];
            var hole = points[i][1];
            this._morphFromPointsReal[i] = [];
            this._morphToPointsReal[i] = [];
            if (surface) {
                var toPoints = surface;
                var fromPoints = surface;
                var bbox = this._bboxes[i];
                // we only work with first area. TODO: maybe we should find the biggest one?
                if (this.morphToSingle) {
                    //if (i != this._biggestIndex) {
                    //	bbox = { x: biggestBBox.x + biggestBBox.width / 2, y: biggestBBox.y + biggestBBox.height / 2, width: 0, height: 0 };
                    //}
                }
                var x = bbox.x;
                var y = bbox.y;
                var realWidth = width;
                var realHeight = height;
                if (!__WEBPACK_IMPORTED_MODULE_4__utils_Type__["isNumber"](realWidth)) {
                    realWidth = bbox.width;
                }
                if (!__WEBPACK_IMPORTED_MODULE_4__utils_Type__["isNumber"](realHeight)) {
                    realHeight = bbox.height;
                }
                toPoints = [{ x: x, y: y }, { x: x + realWidth, y: y }, { x: x + realWidth, y: y + realHeight }, { x: x, y: y + realHeight }];
                toPoints = this.addPoints(toPoints, surface.length);
                // if polygon has less points then count, add
                if (surface.length < 4) {
                    for (var i_2 = surface.length; i_2 < 4; i_2++) {
                        toPoints.push({ x: surface[i_2].x, y: surface[i_2].y });
                    }
                }
                if (hole && hole.length > 0) {
                    var middleX = bbox.x + bbox.width / 2;
                    var middleY = bbox.y + bbox.height / 2;
                    for (var i_3 = 0; i_3 < hole.length; i_3++) {
                        toPoints.push({ x: middleX, y: middleY });
                    }
                }
                this._morphFromPointsReal[i][0] = fromPoints;
                this._morphToPointsReal[i][0] = toPoints;
            }
        }
        this.morphable.currentPoints = this._morphFromPointsReal;
        var animation = new __WEBPACK_IMPORTED_MODULE_1__utils_Animation__["a" /* Animation */](this, { property: "morphProgress", from: 0, to: 1 }, duration, easing);
        this._disposers.push(animation);
        animation.start();
        return animation;
    };
    Object.defineProperty(Morpher.prototype, "morphProgress", {
        /**
         * Returns the progress of morph transition.
         *
         * @return {Optional<number>} Progress (0-1)
         */
        get: function () {
            return this._morphProgress;
        },
        /**
         * Progress of the morph transition.
         *
         * Setting this will also trigger actual transformation.
         *
         * @param {number}  value  Progress (0-1)
         */
        set: function (value) {
            this._morphProgress = value;
            var currentPoints = [];
            if (value != null) {
                var fromPoints = this._morphFromPointsReal;
                var toPoints = this._morphToPointsReal;
                if (fromPoints != null && toPoints != null) {
                    for (var i = 0; i < fromPoints.length; i++) {
                        var currentArea = [];
                        currentPoints.push(currentArea);
                        var surfaceFrom = fromPoints[i][0];
                        var holeFrom = fromPoints[i][1];
                        var surfaceTo = toPoints[i][0];
                        var holeTo = toPoints[i][1];
                        if (surfaceFrom && surfaceFrom.length > 0 && surfaceTo && surfaceTo.length > 0) {
                            var currentSurface = [];
                            for (var i_4 = 0; i_4 < surfaceFrom.length; i_4++) {
                                var point0 = surfaceFrom[i_4];
                                var point1 = surfaceTo[i_4];
                                var currentPoint = { x: point0.x + (point1.x * this.scaleRatio - point0.x) * value, y: point0.y + (point1.y * this.scaleRatio - point0.y) * value };
                                currentSurface.push(currentPoint);
                            }
                            currentArea[0] = currentSurface;
                        }
                        if (holeFrom && holeFrom.length > 0 && holeTo && holeTo.length > 0) {
                            var currentHole = [];
                            for (var i_5 = 0; i_5 < holeFrom.length; i_5++) {
                                var point0 = holeFrom[i_5];
                                var point1 = holeTo[i_5];
                                var currentPoint = { x: point0.x + (point1.x * this.scaleRatio - point0.x) * value, y: point0.y + (point1.y * this.scaleRatio - point0.y) * value };
                                currentHole.push(currentPoint);
                            }
                            currentArea[1] = currentHole;
                        }
                    }
                }
            }
            this.morphable.currentPoints = currentPoints;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Restores the shape to its original appearance.
     *
     * @param {number}              duration  Duration (ms)
     * @param {(number) => number}  easing    Easing function
     * @return {Animation}                    Animation
     */
    Morpher.prototype.morphBack = function (duration, easing) {
        this._morphToPointsReal = this._morphFromPointsReal;
        this._morphFromPointsReal = this.morphable.currentPoints;
        if (!__WEBPACK_IMPORTED_MODULE_4__utils_Type__["hasValue"](duration)) {
            duration = this.morphDuration;
        }
        if (!__WEBPACK_IMPORTED_MODULE_4__utils_Type__["hasValue"](easing)) {
            easing = this.morphEasing;
        }
        var animation = new __WEBPACK_IMPORTED_MODULE_1__utils_Animation__["a" /* Animation */](this, { property: "morphProgress", from: 0, to: 1 }, duration, easing);
        this._disposers.push(animation);
        animation.start();
        return animation;
    };
    Object.defineProperty(Morpher.prototype, "animations", {
        /**
         * Returns a list of morph animations currently being played.
         *
         * @return {Array<Animation>} List of animations
         */
        get: function () {
            if (!this._animations) {
                this._animations = [];
                this._disposers.push(new __WEBPACK_IMPORTED_MODULE_1__utils_Animation__["b" /* AnimationDisposer */](this._animations));
            }
            return this._animations;
        },
        enumerable: true,
        configurable: true
    });
    return Morpher;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["a" /* BaseObject */]));

//# sourceMappingURL=Morpher.js.map

/***/ }),
/* 142 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Preloader; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_utils_InterfaceColorSet__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Slice__ = __webpack_require__(48);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Label__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__ = __webpack_require__(7);
/**
 * Preloader module.
 *
 * Preloader is a progress indicator.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */






/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * A class used to draw and display progress indicator.
 *
 * @see {@link IPreloaderEvents} for a list of available events
 * @see {@link IPreloaderAdapters} for a list of available Adapters
 */
var Preloader = /** @class */ (function (_super) {
    __extends(Preloader, _super);
    /**
     * Constructor
     */
    function Preloader() {
        var _this = 
        // Init
        _super.call(this) || this;
        _this.className = "Preloader";
        // Set dimensions
        _this.width = Object(__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__["c" /* percent */])(100);
        _this.height = Object(__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__["c" /* percent */])(100);
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_1__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        // Create main container
        var sliceContainer = _this.createChild(__WEBPACK_IMPORTED_MODULE_0__Container__["a" /* Container */]);
        sliceContainer.shouldClone = false;
        // Add background (100%) slice
        var backgroundSlice = sliceContainer.createChild(__WEBPACK_IMPORTED_MODULE_2__Slice__["a" /* Slice */]);
        backgroundSlice.shouldClone = false;
        backgroundSlice.radius = 53;
        backgroundSlice.arc = 360;
        backgroundSlice.fill = interfaceColors.getFor("fill");
        backgroundSlice.fillOpacity = 0.8;
        backgroundSlice.innerRadius = 42;
        backgroundSlice.isMeasured = false;
        _this.backgroundSlice = backgroundSlice;
        // Add progress slice
        var progressSlice = sliceContainer.createChild(__WEBPACK_IMPORTED_MODULE_2__Slice__["a" /* Slice */]);
        progressSlice.shouldClone = false;
        progressSlice.radius = 50;
        progressSlice.innerRadius = 45;
        progressSlice.fill = interfaceColors.getFor("alternativeBackground");
        progressSlice.fillOpacity = 0.2;
        progressSlice.isMeasured = false;
        _this.progressSlice = progressSlice;
        // Add text label element
        var label = sliceContainer.createChild(__WEBPACK_IMPORTED_MODULE_3__Label__["a" /* Label */]);
        label.shouldClone = false;
        label.horizontalCenter = "middle";
        label.verticalCenter = "middle";
        label.isMeasured = false;
        label.fill = interfaceColors.getFor("text");
        label.align = "center";
        label.valign = "middle";
        label.fillOpacity = 0.4;
        _this.label = label;
        // Set defaults
        _this.background.opacity = 1;
        _this.background.fill = interfaceColors.getFor("background");
        _this.contentAlign = "center";
        _this.contentValign = "middle";
        _this.delay = 500;
        // Create hidden state
        var hiddenState = _this.states.create("hidden");
        hiddenState.transitionDuration = 2000;
        hiddenState.properties.opacity = 0;
        // Hide by default
        _this.visible = false;
        _this.hide(0);
        // Make it disposable
        // @todo Maybe it's enough to just dispose `sliceContainer`?
        _this._disposers.push(_this.backgroundSlice);
        _this._disposers.push(_this.progressSlice);
        _this._disposers.push(_this.label);
        _this._disposers.push(sliceContainer);
        return _this;
    }
    Object.defineProperty(Preloader.prototype, "progress", {
        /**
         * @return {number} Progress (0-1)
         */
        get: function () {
            return this.getPropertyValue("progress");
        },
        /**
         * Current preload progress. (0-1)
         *
         * * 0 - 0%
         * * 0.5 - 50%
         * * 1 - 100%
         *
         * Setting this to a value less than 1, will automatically reveal the
         * preloader, while setting it to 1 (100%) will hide it.
         *
         * @param {number} value Progress (0-1)
         */
        set: function (value) {
            var _this = this;
            this.setPropertyValue("progress", value);
            /*if (!this.visible && value == 1) {
                return;
            }*/
            this.progressSlice.arc = 360 * value;
            if (this.label) {
                this.label.text = Math.round(value * 100) + "%";
            }
            if (value >= 1) {
                // Cancel the timeout
                if (this._started) {
                    this._started = undefined;
                }
                // TODO remove closure ?
                __WEBPACK_IMPORTED_MODULE_4__Registry__["b" /* registry */].events.once("enterframe", function () {
                    _this.hide();
                });
                this.interactionsEnabled = false;
            }
            else if (value > 0) {
                if (this.delay) {
                    if (!this._started) {
                        this._started = new Date().getTime();
                    }
                    else if ((this._started + this.delay) >= new Date().getTime()) {
                        this.show();
                        this.interactionsEnabled = true;
                    }
                }
                else {
                    this.show();
                    this.interactionsEnabled = true;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Preloader.prototype, "delay", {
        /**
         * @return {number} Delay (ms)
         */
        get: function () {
            return this.getPropertyValue("delay");
        },
        /**
         * Delay display of preloader by X milliseconds.
         *
         * When loading starts (`progress` is set to <1) and finishes (`progress` is
         * set to 1) before `delay` ms, the loader is never shown.
         *
         * This is used to avoid brief flashing of the preload for very quick loads.
         *
         * @default 1000
         * @param {number}  value  Delay (ms)
         */
        set: function (value) {
            this.setPropertyValue("delay", value);
        },
        enumerable: true,
        configurable: true
    });
    return Preloader;
}(__WEBPACK_IMPORTED_MODULE_0__Container__["a" /* Container */]));

//# sourceMappingURL=Preloader.js.map

/***/ }),
/* 143 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ResizeButton; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Button__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_InterfaceColorSet__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__rendering_Path__ = __webpack_require__(8);
/**
 * Resize button module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a draggable resize/grip button.
 *
 * @see {@link IResizeButtonEvents} for a list of available events
 * @see {@link IResizeButtonAdapters} for a list of available Adapters
 */
var ResizeButton = /** @class */ (function (_super) {
    __extends(ResizeButton, _super);
    /**
     * Constructor
     */
    function ResizeButton() {
        var _this = 
        // Init
        _super.call(this) || this;
        _this.className = "ResizeButton";
        // Set defaults
        _this.orientation = "horizontal";
        _this.layout = "absolute";
        _this.horizontalCenter = "middle";
        _this.verticalCenter = "middle";
        _this.draggable = true;
        _this.padding(8, 8, 8, 8);
        _this.background.cornerRadius(20, 20, 20, 20);
        // Create an icon
        var icon = new __WEBPACK_IMPORTED_MODULE_1__Sprite__["a" /* Sprite */]();
        icon.element = _this.paper.add("path");
        var path = __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["moveTo"]({ x: -2, y: -6 });
        path += __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"]({ x: -2, y: 6 });
        path += __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["moveTo"]({ x: 2, y: -6 });
        path += __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"]({ x: 2, y: 6 });
        icon.element.attr({ "d": path });
        icon.pixelPerfect = true;
        icon.padding(0, 4, 0, 4);
        icon.stroke = new __WEBPACK_IMPORTED_MODULE_2__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]().getFor("alternativeText");
        icon.strokeOpacity = 0.7;
        //icon.align = "center";
        //icon.valign = "middle";
        _this.icon = icon;
        _this.label.dispose();
        _this.label = undefined;
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(ResizeButton.prototype, "orientation", {
        /**
         * Use for setting of direction (orientation) of the resize button.
         *
         * Available options: "horizontal", "vertical".
         *
         * @param {Orientation} value Orientation
         */
        set: function (value) {
            var icon = this.icon;
            if (icon) {
                if (value == "horizontal") {
                    icon.rotation = 0;
                }
                else {
                    icon.rotation = -90;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    return ResizeButton;
}(__WEBPACK_IMPORTED_MODULE_0__Button__["a" /* Button */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_3__Registry__["b" /* registry */].registeredClasses["ResizeButton"] = ResizeButton;
//# sourceMappingURL=ResizeButton.js.map

/***/ }),
/* 144 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TextLink; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_elements_Label__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_interaction_Mouse__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_InterfaceColorSet__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Registry__ = __webpack_require__(0);
/**
 * A module that defines Text element used to indicate links.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a text element with a link.
 *
 * @see {@link ITextLinkEvents} for a list of available events
 * @see {@link ITextLinkAdapters} for a list of available Adapters
 */
var TextLink = /** @class */ (function (_super) {
    __extends(TextLink, _super);
    /**
     * Constructor
     */
    function TextLink() {
        var _this = _super.call(this) || this;
        _this.className = "TextLink";
        _this.selectable = true;
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_2__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        _this.fill = interfaceColors.getFor("primaryButton").brighten(0.3);
        var hoverState = _this.states.create("hover");
        hoverState.properties.fill = interfaceColors.getFor("primaryButtonHover").brighten(0.3);
        var downState = _this.states.create("down");
        downState.properties.fill = interfaceColors.getFor("primaryButtonDown").brighten(0.3);
        _this.cursorOverStyle = __WEBPACK_IMPORTED_MODULE_1__core_interaction_Mouse__["a" /* MouseCursorStyle */].pointer;
        _this.applyTheme();
        return _this;
    }
    return TextLink;
}(__WEBPACK_IMPORTED_MODULE_0__core_elements_Label__["a" /* Label */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_3__Registry__["b" /* registry */].registeredClasses["TextLink"] = TextLink;
//# sourceMappingURL=TextLink.js.map

/***/ }),
/* 145 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DropShadowFilter; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Filter__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_InterfaceColorSet__ = __webpack_require__(9);
/**
 * Module for "Drop Shadow" filter.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


;
/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creats a "Drop Shadow" filter.
 */
var DropShadowFilter = /** @class */ (function (_super) {
    __extends(DropShadowFilter, _super);
    /**
     * Constructor
     * * Creates primitve (effect) elements
     * * Sets default properties
     */
    function DropShadowFilter() {
        var _this = _super.call(this) || this;
        _this.className = "DropShadowFilter";
        // Create elements
        // NOTE: we do not need to add each individual element to `_disposers`
        // because `filterPrimitives` has an event handler which automatically adds
        // anything added to it to `_disposers`
        _this.feGaussianBlur = _this.paper.add("feGaussianBlur");
        _this.feGaussianBlur.attr({ "result": "blurOut", "in": "SourceGraphic" });
        _this.filterPrimitives.push(_this.feGaussianBlur);
        _this.feOffset = _this.paper.add("feOffset");
        _this.feOffset.attr({ "result": "offsetBlur" });
        _this.filterPrimitives.push(_this.feOffset);
        _this.feFlood = _this.paper.add("feFlood");
        _this.filterPrimitives.push(_this.feFlood);
        _this.feComposite = _this.paper.add("feComposite");
        _this.feComposite.attr({ "in2": "offsetBlur", operator: "in" });
        _this.filterPrimitives.push(_this.feComposite);
        _this.feMerge = _this.paper.addGroup("feMerge");
        _this.feMerge.add(_this.paper.add("feMergeNode"));
        _this.feMerge.add(_this.paper.add("feMergeNode").attr({ "in": "SourceGraphic" }));
        _this.filterPrimitives.push(_this.feMerge);
        // Set default properties
        _this.color = new __WEBPACK_IMPORTED_MODULE_1__utils_InterfaceColorSet__["a" /* InterfaceColorSet */]().getFor("alternativeBackground");
        _this.width = 200;
        _this.height = 200;
        _this.blur = 1.5;
        _this.dx = 3;
        _this.dy = 3;
        _this.opacity = 0.5;
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(DropShadowFilter.prototype, "color", {
        /**
         * @return {Color} Color
         */
        get: function () {
            return this.properties.color;
        },
        /**
         * Shadow color.
         *
         * @param {Color}  value  Color
         */
        set: function (value) {
            this.properties.color = value;
            this.feFlood.attr({ "flood-color": value });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropShadowFilter.prototype, "opacity", {
        /**
         * @return {number} Opacity (0-1)
         */
        get: function () {
            return this.properties.opacity;
        },
        /**
         * Opacity of the shadow. (0-1)
         *
         * @param {number}  value  Opacity (0-1)
         */
        set: function (value) {
            this.properties.opacity = value;
            this.feFlood.attr({ "flood-opacity": value });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropShadowFilter.prototype, "dx", {
        /**
         * @return {number} Horizontal offset (px)
         */
        get: function () {
            return this.properties.dx;
        },
        /**
         * Horizontal offset in pixels.
         *
         * @param {number}  value  Horizontal offset (px)
         */
        set: function (value) {
            this.properties.dx = value;
            this.feOffset.attr({ "dx": value / this.scale });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropShadowFilter.prototype, "dy", {
        /**
         * @return {number} Vertical offset (px)
         */
        get: function () {
            return this.properties.dy;
        },
        /**
         * Vertical offset in pixels.
         *
         * @param {number} value Vertical offset (px)
         */
        set: function (value) {
            this.properties.dy = value;
            this.feOffset.attr({ "dy": value / this.scale });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropShadowFilter.prototype, "blur", {
        /**
         * @return {number} Blur
         */
        get: function () {
            return this.properties.blur;
        },
        /**
         * Blur.
         *
         * @param {number}  value  Blur
         */
        set: function (value) {
            this.properties.blur = value;
            this.feGaussianBlur.attr({ "stdDeviation": value / this.scale });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * [updateScale description]
     *
     * @todo Description
     */
    DropShadowFilter.prototype.updateScale = function () {
        this.dx = this.dx;
        this.dy = this.dy;
        this.blur = this.blur;
    };
    return DropShadowFilter;
}(__WEBPACK_IMPORTED_MODULE_0__Filter__["a" /* Filter */]));

//# sourceMappingURL=DropShadowFilter.js.map

/***/ }),
/* 146 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Trapezoid; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Type__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__rendering_Path__ = __webpack_require__(8);
/**
 * Functionality for drawing a trapezoid.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */






/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Used to draw a Trapezoid.
 *
 * @see {@link ITrapezoidEvents} for a list of available events
 * @see {@link ITrapezoidAdapters} for a list of available Adapters
 */
var Trapezoid = /** @class */ (function (_super) {
    __extends(Trapezoid, _super);
    /**
     * Constructor
     */
    function Trapezoid() {
        var _this = _super.call(this) || this;
        _this.className = "Trapezoid";
        _this.element = _this.paper.add("path");
        _this.topSide = Object(__WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__["c" /* percent */])(100);
        _this.bottomSide = Object(__WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__["c" /* percent */])(100);
        _this.leftSide = Object(__WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__["c" /* percent */])(100);
        _this.rightSide = Object(__WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__["c" /* percent */])(100);
        _this.isMeasured = false; // todo: add measureElement
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the element.
     *
     * @ignore Exclude from docs
     */
    Trapezoid.prototype.draw = function () {
        _super.prototype.draw.call(this);
        var w = this.pixelWidth;
        var h = this.pixelHeight;
        var ts = __WEBPACK_IMPORTED_MODULE_3__utils_Utils__["relativeToValue"](this.topSide, w);
        var bs = __WEBPACK_IMPORTED_MODULE_3__utils_Utils__["relativeToValue"](this.bottomSide, w);
        var ls = __WEBPACK_IMPORTED_MODULE_3__utils_Utils__["relativeToValue"](this.leftSide, h);
        var rs = __WEBPACK_IMPORTED_MODULE_3__utils_Utils__["relativeToValue"](this.rightSide, h);
        // 1----2
        // |    |
        // 4----3
        var x0 = (w - ts) / 2;
        var y0 = (h - ls) / 2;
        var x1 = w - (w - ts) / 2;
        var y1 = (h - rs) / 2;
        var x2 = w - (w - bs) / 2;
        var y2 = h - (h - rs) / 2;
        var x3 = (w - bs) / 2;
        var y3 = h - (h - ls) / 2;
        var mt = "";
        var mr = "";
        var mb = "";
        var ml = "";
        if (__WEBPACK_IMPORTED_MODULE_4__utils_Type__["hasValue"](this.horizontalNeck)) {
            var hn = this.horizontalNeck.value;
            mt = __WEBPACK_IMPORTED_MODULE_5__rendering_Path__["lineTo"]({ x: w * hn, y: Math.max(y0, y1) });
            mb = __WEBPACK_IMPORTED_MODULE_5__rendering_Path__["lineTo"]({ x: w * hn, y: Math.min(y2, y3) });
        }
        if (__WEBPACK_IMPORTED_MODULE_4__utils_Type__["hasValue"](this.verticalNeck)) {
            var vn = this.verticalNeck.value;
            mr = __WEBPACK_IMPORTED_MODULE_5__rendering_Path__["lineTo"]({ x: Math.min(x1, x2), y: h * vn });
            ml = __WEBPACK_IMPORTED_MODULE_5__rendering_Path__["lineTo"]({ x: Math.max(x0, x3), y: h * vn });
        }
        var path = __WEBPACK_IMPORTED_MODULE_5__rendering_Path__["moveTo"]({ x: x0, y: y0 })
            + mt
            + __WEBPACK_IMPORTED_MODULE_5__rendering_Path__["lineTo"]({ x: x1, y: y1 })
            + mr
            + __WEBPACK_IMPORTED_MODULE_5__rendering_Path__["lineTo"]({ x: x2, y: y2 })
            + mb
            + __WEBPACK_IMPORTED_MODULE_5__rendering_Path__["lineTo"]({ x: x3, y: y3 })
            + ml;
        this.element.attr({ "d": path });
    };
    Object.defineProperty(Trapezoid.prototype, "topSide", {
        /**
         * @return {number} Width
         */
        get: function () {
            return this.getPropertyValue("topSide");
        },
        /**
         * Wdith of the top side. Absolute (px) or relative ([[Percent]]).
         *
         * @default Percent(100)
         * @param {number | Percent}  value  Width
         */
        set: function (value) {
            this.setPropertyValue("topSide", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Trapezoid.prototype, "bottomSide", {
        /**
         * @return {number} Width
         */
        get: function () {
            return this.getPropertyValue("bottomSide");
        },
        /**
         * Wdith of the bottom side. Absolute (px) or relative ([[Percent]]).
         *
         * @default Percent(100)
         * @param {number | Percent}  value  Width
         */
        set: function (value) {
            this.setPropertyValue("bottomSide", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Trapezoid.prototype, "leftSide", {
        /**
         * @return {number} Height
         */
        get: function () {
            return this.getPropertyValue("leftSide");
        },
        /**
         * Height of the left side. Absolute (px) or relative ([[Percent]]).
         *
         * @default Percent(100)
         * @param {number | Percent}  value  Height
         */
        set: function (value) {
            this.setPropertyValue("leftSide", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Trapezoid.prototype, "rightSide", {
        /**
         * @return {number} Height
         */
        get: function () {
            return this.getPropertyValue("rightSide");
        },
        /**
         * Height of the right side. Absolute (px) or relative ([[Percent]]).
         *
         * @default Percent(100)
         * @param {number | Percent}  value  Height
         */
        set: function (value) {
            this.setPropertyValue("rightSide", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Trapezoid.prototype, "horizontalNeck", {
        /**
         * @return {Percent} Horizontal neck position
         */
        get: function () {
            return this.getPropertyValue("horizontalNeck");
        },
        /**
         * A relative vertical position of the "neck". If the top and bottom sides
         * are of different width, and `horizontalNeck` is set, a choke point
         * will be created at that position, creating a funnel shape.
         *
         * @param {Percent}  value  Horizontal neck position
         */
        set: function (value) {
            this.setPropertyValue("horizontalNeck", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Trapezoid.prototype, "verticalNeck", {
        /**
         * @return {Percent} Vertical neck position
         */
        get: function () {
            return this.getPropertyValue("verticalNeck");
        },
        /**
         * A relative horizontal position of the "neck". If the left and right sides
         * are of different height, and `verticalNeck` is set, a choke point
         * will be created at that position, creating a funnel shape.
         *
         * @param {Percent}  value  Vertical neck position
         */
        set: function (value) {
            this.setPropertyValue("verticalNeck", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return Trapezoid;
}(__WEBPACK_IMPORTED_MODULE_0__Sprite__["a" /* Sprite */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__Registry__["b" /* registry */].registeredClasses["Trapezoid"] = Trapezoid;
//# sourceMappingURL=Trapezoid.js.map

/***/ }),
/* 147 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return WavedCircle; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Circle__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__rendering_Path__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_rendering_Smoothing__ = __webpack_require__(46);
/**
 * Functionality for drawing waved circles.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */






/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Draws a waved circle.
 *
 * @see {@link IWavedCircleEvents} for a list of available events
 * @see {@link IWavedCircleAdapters} for a list of available Adapters
 */
var WavedCircle = /** @class */ (function (_super) {
    __extends(WavedCircle, _super);
    /**
     * Constructor
     */
    function WavedCircle() {
        var _this = _super.call(this) || this;
        _this.className = "WavedCircle";
        _this.element = _this.paper.add("path");
        _this.waveLength = 16;
        _this.waveHeight = 4;
        _this.fill = undefined;
        _this.fillOpacity = 0;
        _this.tension = 0.8;
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the waved line.
     *
     * @ignore Exclude from docs
     */
    WavedCircle.prototype.draw = function () {
        var path = "";
        var radius = this.pixelRadius;
        if (radius > 0) {
            var points = this.getPoints(radius);
            path = __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["moveTo"](points[0]) + new __WEBPACK_IMPORTED_MODULE_5__core_rendering_Smoothing__["b" /* Tension */](this.tension, this.tension).smooth(points);
        }
        var innerRadius = this.pixelInnerRadius;
        if (innerRadius > 0) {
            var points = this.getPoints(innerRadius);
            points.reverse();
            path += __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["moveTo"](points[0]) + new __WEBPACK_IMPORTED_MODULE_5__core_rendering_Smoothing__["b" /* Tension */](this.tension, this.tension).smooth(points);
        }
        this.element.attr({ "d": path });
    };
    /**
     * Returns points that circle consists of.
     *
     * @param  {number}    radius  Radius (px)
     * @return {IPoint[]}          Points
     */
    WavedCircle.prototype.getPoints = function (radius) {
        var circleLength = radius * Math.PI * 2;
        var halfWaveHeight = this.waveHeight / 2;
        var waveLength = circleLength / Math.round(circleLength / this.waveLength);
        var halfWaveLength = waveLength / 2;
        var points = [];
        var count = circleLength / waveLength;
        for (var i = 0; i <= count; i++) {
            var angle1 = (i * waveLength) / circleLength * 360;
            var angle2 = (i * waveLength + halfWaveLength) / circleLength * 360;
            points.push({ x: (radius - halfWaveHeight) * __WEBPACK_IMPORTED_MODULE_3__utils_Math__["cos"](angle1), y: (radius - halfWaveHeight) * __WEBPACK_IMPORTED_MODULE_3__utils_Math__["sin"](angle1) });
            points.push({ x: (radius + halfWaveHeight) * __WEBPACK_IMPORTED_MODULE_3__utils_Math__["cos"](angle2), y: (radius + halfWaveHeight) * __WEBPACK_IMPORTED_MODULE_3__utils_Math__["sin"](angle2) });
        }
        points.pop();
        return points;
    };
    Object.defineProperty(WavedCircle.prototype, "innerRadius", {
        /**
         * @return {number} Inner radius
         */
        get: function () {
            return this.getPropertyValue("innerRadius");
        },
        /**
         * Inner radius of the circle in pixels (absolute) or [[Percent]] (relative).
         *
         * @param {number | Percent}  value  Inner radius
         */
        set: function (value) {
            this.setPropertyValue("innerRadius", value, true);
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WavedCircle.prototype, "pixelInnerRadius", {
        /**
         * Calculated inner radius of the circle in pixels.
         *
         * @readonly
         * @return {number} Inner radius (px)
         */
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_4__utils_Utils__["relativeToValue"](this.innerRadius, __WEBPACK_IMPORTED_MODULE_3__utils_Math__["min"](this.innerWidth / 2, this.innerHeight / 2));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WavedCircle.prototype, "waveLength", {
        /**
         * @return {number} Wave length (px)
         */
        get: function () {
            return this.getPropertyValue("waveLength");
        },
        /**
         * Wave length in pixels.
         *
         * @default 16
         * @param {number}  value  Wave length (px)
         */
        set: function (value) {
            this.setPropertyValue("waveLength", value);
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WavedCircle.prototype, "waveHeight", {
        /**
         * @return {number} Wave height (px)
         */
        get: function () {
            return this.getPropertyValue("waveHeight");
        },
        /**
         * Wave height in pixels.
         *
         * @default 4
         * @param {number}  value  Wave height (px)
         */
        set: function (value) {
            this.setPropertyValue("waveHeight", value);
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WavedCircle.prototype, "tension", {
        /**
         * @return {number} Tension
         */
        get: function () {
            return this.getPropertyValue("tension");
        },
        /**
         * Tension of the wave.
         *
         * @default 0.8
         * @param {number}  value  Tension
         */
        set: function (value) {
            this.setPropertyValue("tension", value);
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    return WavedCircle;
}(__WEBPACK_IMPORTED_MODULE_0__Circle__["a" /* Circle */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__Registry__["b" /* registry */].registeredClasses["WavedCircle"] = WavedCircle;
//# sourceMappingURL=WavedCircle.js.map

/***/ }),
/* 148 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ZoomOutButton; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Button__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_InterfaceColorSet__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__rendering_Path__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_Type__ = __webpack_require__(1);
/**
 * Zoom out button functionality.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */






/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a zoom out button.
 *
 * @see {@link IZoomOutButtonEvents} for a list of available events
 * @see {@link IZoomOutButtonAdapters} for a list of available Adapters
 */
var ZoomOutButton = /** @class */ (function (_super) {
    __extends(ZoomOutButton, _super);
    /**
     * Orientation of the resize direction.
     *
     * @deprecated Not used
     * @type {Orientation}
     */
    //protected _orientation: Orientation;
    /**
     * Constructor
     */
    function ZoomOutButton() {
        var _this = 
        // Init
        _super.call(this) || this;
        _this.className = "ZoomOutButton";
        _this.padding(9, 9, 9, 9);
        //this.dx = - 5;
        //this.dy = 5;
        _this.showSystemTooltip = true;
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_3__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        var background = _this.background;
        background.cornerRadius(20, 20, 20, 20);
        background.fill = interfaceColors.getFor("primaryButton");
        background.stroke = interfaceColors.getFor("primaryButtonStroke");
        background.strokeOpacity = 0;
        background.states.getKey("hover").properties.fill = interfaceColors.getFor("primaryButtonHover");
        background.states.getKey("down").properties.fill = interfaceColors.getFor("primaryButtonActive");
        // Create an icon
        var icon = new __WEBPACK_IMPORTED_MODULE_1__Sprite__["a" /* Sprite */]();
        icon.element = _this.paper.add("path");
        var path = __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["moveTo"]({ x: 0, y: 0 });
        path += __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"]({ x: 11, y: 0 });
        icon.element.attr({ "d": path });
        icon.pixelPerfect = true;
        icon.padding(8, 3, 8, 3);
        icon.stroke = interfaceColors.getFor("primaryButtonText");
        _this.icon = icon;
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Sets defaults that instantiate some objects that rely on parent, so they
     * cannot be set in constructor.
     */
    ZoomOutButton.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);
        if (!__WEBPACK_IMPORTED_MODULE_5__core_utils_Type__["hasValue"](this.readerTitle)) {
            this.readerTitle = this.language.translate("Zoom Out");
        }
    };
    return ZoomOutButton;
}(__WEBPACK_IMPORTED_MODULE_0__Button__["a" /* Button */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__Registry__["b" /* registry */].registeredClasses["ZoomOutButton"] = ZoomOutButton;
//# sourceMappingURL=ZoomOutButton.js.map

/***/ }),
/* 149 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Cone; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__elements_Ellipse__ = __webpack_require__(138);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__rendering_fills_LinearGradientModifier__ = __webpack_require__(106);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Object__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__rendering_Path__ = __webpack_require__(8);
/**
 * Cone module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */







/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Builds a round cone/cylinder.
 *
 * @see {@link IConeEvents} for a list of available events
 * @see {@link IConeAdapters} for a list of available Adapters
 */
var Cone = /** @class */ (function (_super) {
    __extends(Cone, _super);
    /**
     * Constructor
     */
    function Cone() {
        var _this = _super.call(this) || this;
        _this.className = "Cone";
        _this.angle = 30;
        _this.radius = Object(__WEBPACK_IMPORTED_MODULE_4__utils_Percent__["c" /* percent */])(100);
        _this.topRadius = Object(__WEBPACK_IMPORTED_MODULE_4__utils_Percent__["c" /* percent */])(100);
        _this.top = _this.createChild(__WEBPACK_IMPORTED_MODULE_2__elements_Ellipse__["a" /* Ellipse */]);
        _this.top.shouldClone = false;
        _this.bottom = _this.createChild(__WEBPACK_IMPORTED_MODULE_2__elements_Ellipse__["a" /* Ellipse */]);
        _this.bottom.shouldClone = false;
        _this.body = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__Sprite__["a" /* Sprite */]);
        _this.body.shouldClone = false;
        _this.body.element = _this.paper.add("path");
        _this.layout = "none";
        _this.bodyFillModifier = new __WEBPACK_IMPORTED_MODULE_3__rendering_fills_LinearGradientModifier__["a" /* LinearGradientModifier */]();
        _this.bodyFillModifier.lightnesses = [0, -0.25, 0];
        _this.body.fillModifier = _this.bodyFillModifier;
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the element.
     *
     * @ignore Exclude from docs
     */
    Cone.prototype.draw = function () {
        _super.prototype.draw.call(this);
        __WEBPACK_IMPORTED_MODULE_5__utils_Object__["copyProperties"](this, this.top, __WEBPACK_IMPORTED_MODULE_1__Sprite__["b" /* visualProperties */]);
        __WEBPACK_IMPORTED_MODULE_5__utils_Object__["copyProperties"](this, this.bottom, __WEBPACK_IMPORTED_MODULE_1__Sprite__["b" /* visualProperties */]);
        __WEBPACK_IMPORTED_MODULE_5__utils_Object__["copyProperties"](this, this.body, __WEBPACK_IMPORTED_MODULE_1__Sprite__["b" /* visualProperties */]);
        var w = this.innerWidth;
        var h = this.innerHeight;
        var bottom = this.bottom;
        var top = this.top;
        var angle = this.angle;
        var radiusBase;
        var dx;
        var dy;
        if (this.orientation == "horizontal") {
            radiusBase = h / 2;
            bottom.y = h / 2;
            top.y = h / 2;
            top.x = w;
            dx = (90 - angle) / 90;
            dy = 0;
            this.bodyFillModifier.gradient.rotation = 90;
        }
        else {
            dx = 0;
            dy = (90 - angle) / 90;
            radiusBase = w / 2;
            bottom.y = h;
            bottom.x = w / 2;
            top.x = w / 2;
            this.bodyFillModifier.gradient.rotation = 0;
        }
        var radius = this.radius.value * radiusBase;
        var topRadius = this.topRadius.value * radiusBase;
        bottom.radius = radius - radius * dx;
        bottom.radiusY = radius - radius * dy;
        top.radius = topRadius - topRadius * dx;
        top.radiusY = topRadius - topRadius * dy;
        var path;
        if (this.orientation == "horizontal") {
            path = __WEBPACK_IMPORTED_MODULE_6__rendering_Path__["moveTo"]({ x: 0, y: h / 2 - bottom.radiusY }) + __WEBPACK_IMPORTED_MODULE_6__rendering_Path__["arcTo"](-90, -180, bottom.radius, bottom.radiusY) + __WEBPACK_IMPORTED_MODULE_6__rendering_Path__["lineTo"]({ x: w, y: h / 2 + top.radiusY }) + __WEBPACK_IMPORTED_MODULE_6__rendering_Path__["arcTo"](90, 180, top.radius, top.radiusY) + __WEBPACK_IMPORTED_MODULE_6__rendering_Path__["closePath"]();
        }
        else {
            path = __WEBPACK_IMPORTED_MODULE_6__rendering_Path__["moveTo"]({ x: w / 2 - top.radius, y: 0 }) + __WEBPACK_IMPORTED_MODULE_6__rendering_Path__["arcTo"](180, -180, top.radius, top.radiusY) + __WEBPACK_IMPORTED_MODULE_6__rendering_Path__["lineTo"]({ x: w / 2 + bottom.radius, y: h }) + __WEBPACK_IMPORTED_MODULE_6__rendering_Path__["arcTo"](0, 180, bottom.radius, bottom.radiusY) + __WEBPACK_IMPORTED_MODULE_6__rendering_Path__["closePath"]();
        }
        this.body.element.attr({ "d": path });
    };
    Object.defineProperty(Cone.prototype, "angle", {
        /**
         * @return {number} Angle
         */
        get: function () {
            return this.getPropertyValue("angle");
        },
        /**
         * Angle of the point of view to the 3D element. (0-360)
         *
         * @default 30
         * @param {number}  value  Angle
         */
        set: function (value) {
            this.setPropertyValue("angle", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Cone.prototype, "radius", {
        /**
         * @return {Percent} Bottom radius
         */
        get: function () {
            return this.getPropertyValue("radius");
        },
        /**
         * A relative radius of the cone's bottom (base).
         *
         * It is relevant to the inner width or height of the element.
         *
         * @default Percent(100)
         * @param {Percent}  value  Bottom radius
         */
        set: function (value) {
            this.setPropertyValue("radius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Cone.prototype, "topRadius", {
        /**
         * @return {Percent} Top radius
         */
        get: function () {
            return this.getPropertyValue("topRadius");
        },
        /**
         * A relative radius of the cone's top (tip).
         *
         * It is relevant to the inner width or height of the element.
         *
         * @default Percent(0)
         * @param {Percent}  value  Top radius
         */
        set: function (value) {
            this.setPropertyValue("topRadius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Cone.prototype, "orientation", {
        /**
         * @type {"horizontal" | "vertical"} Orientation
         */
        get: function () {
            return this.getPropertyValue("orientation");
        },
        /**
         * Orientation of the cone: "horizontal" or "vertical".
         *
         * @default "vertical"
         * @param {"horizontal" | "vertical"}  value  Orientation
         */
        set: function (value) {
            this.setPropertyValue("orientation", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return Cone;
}(__WEBPACK_IMPORTED_MODULE_0__Container__["a" /* Container */]));

//# sourceMappingURL=Cone.js.map

/***/ }),
/* 150 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ColorModifier; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Base__ = __webpack_require__(14);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * A base class for color modifiers.
 *
 * @ignore Exclude from docs
 */
var ColorModifier = /** @class */ (function (_super) {
    __extends(ColorModifier, _super);
    /**
     * Constructor
     */
    function ColorModifier() {
        var _this = _super.call(this) || this;
        _this.className = "ColorModifier";
        _this.applyTheme();
        return _this;
    }
    /**
     * Modifies color value.
     *
     * @ignore Exclude from docs
     * @param  {Color}  value  Original color
     * @return {Color}         Modified
     */
    ColorModifier.prototype.modify = function (value) {
        return value;
    };
    return ColorModifier;
}(__WEBPACK_IMPORTED_MODULE_0__Base__["a" /* BaseObject */]));

//# sourceMappingURL=ColorModifier.js.map

/***/ }),
/* 151 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Rectangle3D; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__rendering_filters_LightenFilter__ = __webpack_require__(107);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__rendering_Path__ = __webpack_require__(8);
/**
 * Creates a 3D rectangle.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Builds a 3D rectangle
 * @see {@link IRectangle3DEvents} for a list of available events
 * @see {@link IRectangle3DAdapters} for a list of available Adapters
 */
var Rectangle3D = /** @class */ (function (_super) {
    __extends(Rectangle3D, _super);
    /**
     * Constructor
     */
    function Rectangle3D() {
        var _this = _super.call(this) || this;
        _this.angle = 30;
        _this.depth = 30;
        _this.className = "Rectangle3D";
        _this.layout = "none";
        var sideBack = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__Sprite__["a" /* Sprite */]);
        sideBack.shouldClone = false;
        sideBack.element = _this.paper.add("path");
        sideBack.isMeasured = false;
        var lightenFilterBack = new __WEBPACK_IMPORTED_MODULE_2__rendering_filters_LightenFilter__["a" /* LightenFilter */]();
        lightenFilterBack.lightness = -0.2;
        sideBack.filters.push(lightenFilterBack);
        _this.sideBack = sideBack;
        _this._disposers.push(_this.sideBack);
        var sideBottom = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__Sprite__["a" /* Sprite */]);
        sideBottom.shouldClone = false;
        sideBottom.element = _this.paper.add("path");
        sideBottom.isMeasured = false;
        var lightenFilterBottom = new __WEBPACK_IMPORTED_MODULE_2__rendering_filters_LightenFilter__["a" /* LightenFilter */]();
        lightenFilterBottom.lightness = -0.5;
        sideBottom.filters.push(lightenFilterBottom);
        _this.sideBottom = sideBottom;
        _this._disposers.push(_this.sideBottom);
        var sideLeft = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__Sprite__["a" /* Sprite */]);
        sideLeft.shouldClone = false;
        sideLeft.element = _this.paper.add("path");
        sideLeft.isMeasured = false;
        var lightenFilterLeft = new __WEBPACK_IMPORTED_MODULE_2__rendering_filters_LightenFilter__["a" /* LightenFilter */]();
        lightenFilterLeft.lightness = -0.4;
        sideLeft.filters.push(lightenFilterLeft);
        _this.sideLeft = sideLeft;
        _this._disposers.push(_this.sideLeft);
        var sideRight = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__Sprite__["a" /* Sprite */]);
        sideRight.shouldClone = false;
        sideRight.element = _this.paper.add("path");
        sideRight.isMeasured = false;
        var lightenFilterRight = new __WEBPACK_IMPORTED_MODULE_2__rendering_filters_LightenFilter__["a" /* LightenFilter */]();
        lightenFilterRight.lightness = -0.2;
        sideRight.filters.push(lightenFilterRight);
        _this.sideRight = sideRight;
        _this._disposers.push(_this.sideRight);
        var sideTop = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__Sprite__["a" /* Sprite */]);
        sideTop.shouldClone = false;
        sideTop.element = _this.paper.add("path");
        sideTop.isMeasured = false;
        var lightenFilterTop = new __WEBPACK_IMPORTED_MODULE_2__rendering_filters_LightenFilter__["a" /* LightenFilter */]();
        lightenFilterTop.lightness = -0.1;
        sideTop.filters.push(lightenFilterTop);
        _this.sideTop = sideTop;
        _this._disposers.push(_this.sideTop);
        var sideFront = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__Sprite__["a" /* Sprite */]);
        sideFront.shouldClone = false;
        sideFront.element = _this.paper.add("path");
        sideFront.isMeasured = false;
        _this.sideFront = sideFront;
        _this._disposers.push(_this.sideFront);
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the element.
     *
     * @ignore Exclude from docs
     */
    Rectangle3D.prototype.draw = function () {
        _super.prototype.draw.call(this);
        var w = this.innerWidth;
        var h = this.innerHeight;
        var depth = this.depth;
        var angle = this.angle;
        var sin = __WEBPACK_IMPORTED_MODULE_3__utils_Math__["sin"](angle);
        var cos = __WEBPACK_IMPORTED_MODULE_3__utils_Math__["cos"](angle);
        var a = { x: 0, y: 0 };
        var b = { x: w, y: 0 };
        var c = { x: w, y: h };
        var d = { x: 0, y: h };
        var ah = { x: depth * cos, y: -depth * sin };
        var bh = { x: depth * cos + w, y: -depth * sin };
        var ch = { x: depth * cos + w, y: -depth * sin + h };
        var dh = { x: depth * cos, y: -depth * sin + h };
        this.sideFront.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["moveTo"](a) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](b) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](c) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](d) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["closePath"]() });
        this.sideBack.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["moveTo"](ah) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](bh) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](ch) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](dh) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["closePath"]() });
        this.sideLeft.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["moveTo"](a) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](ah) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](dh) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](d) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["closePath"]() });
        this.sideRight.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["moveTo"](b) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](bh) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](ch) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](c) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["closePath"]() });
        this.sideBottom.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["moveTo"](d) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](dh) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](ch) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](c) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["closePath"]() });
        this.sideTop.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["moveTo"](a) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](ah) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](bh) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["lineTo"](b) + __WEBPACK_IMPORTED_MODULE_4__rendering_Path__["closePath"]() });
    };
    Object.defineProperty(Rectangle3D.prototype, "depth", {
        /**
         * @return {number} Depth (px)
         */
        get: function () {
            return this.getPropertyValue("depth");
        },
        /**
         * Depth (Z dimension) of the 3D rectangle in pixels.
         *
         * @default 30
         * @param {number}  value  Depth (px)
         */
        set: function (value) {
            this.setPropertyValue("depth", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Rectangle3D.prototype, "angle", {
        /**
         * @return {number} Angle
         */
        get: function () {
            return this.getPropertyValue("angle");
        },
        /**
         * Angle of the point of view to the 3D element. (0-360)
         *
         * @default 30
         * @param {number}  value  Angle
         */
        set: function (value) {
            this.setPropertyValue("angle", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return Rectangle3D;
}(__WEBPACK_IMPORTED_MODULE_0__Container__["a" /* Container */]));

//# sourceMappingURL=Rectangle3D.js.map

/***/ }),
/* 152 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Slice3D; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Slice__ = __webpack_require__(48);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__rendering_filters_LightenFilter__ = __webpack_require__(107);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__rendering_Path__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_Type__ = __webpack_require__(1);
/**
 * 3D slice module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */







/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Used to draw a 3D slice of a Pie chart.
 *
 * @see {@link ISlice3DEvents} for a list of available events
 * @see {@link ISlice3DAdapters} for a list of available Adapters
 */
var Slice3D = /** @class */ (function (_super) {
    __extends(Slice3D, _super);
    /**
     * Constructor
     */
    function Slice3D() {
        var _this = 
        // Init
        _super.call(this) || this;
        _this.className = "Slice3D";
        _this.layout = "none";
        // Create edge container
        var edge = _this.createChild(__WEBPACK_IMPORTED_MODULE_2__Container__["a" /* Container */]);
        _this.edge = edge;
        edge.shouldClone = false;
        edge.isMeasured = false;
        var lightenFilter = new __WEBPACK_IMPORTED_MODULE_3__rendering_filters_LightenFilter__["a" /* LightenFilter */]();
        lightenFilter.lightness = -0.25;
        edge.filters.push(lightenFilter);
        edge.toBack();
        edge.strokeOpacity = 0;
        _this._disposers.push(edge);
        // Set defaults
        _this.angle = 30;
        _this.depth = 20;
        // Create side A element
        var sideA = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__Sprite__["a" /* Sprite */]);
        _this.sideA = sideA;
        sideA.shouldClone = false;
        sideA.isMeasured = false;
        sideA.element = _this.paper.add("path");
        var lightenFilterA = new __WEBPACK_IMPORTED_MODULE_3__rendering_filters_LightenFilter__["a" /* LightenFilter */]();
        lightenFilterA.lightness = -0.25;
        sideA.filters.push(lightenFilterA);
        sideA.strokeOpacity = 0;
        _this._disposers.push(sideA);
        // Crate side B element
        var sideB = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__Sprite__["a" /* Sprite */]);
        _this.sideB = sideB;
        sideB.shouldClone = false;
        sideB.isMeasured = false;
        sideB.element = _this.paper.add("path");
        var lightenFilterB = new __WEBPACK_IMPORTED_MODULE_3__rendering_filters_LightenFilter__["a" /* LightenFilter */]();
        lightenFilterB.lightness = -0.25;
        sideB.filters.push(lightenFilterB);
        _this._disposers.push(sideB);
        sideB.strokeOpacity = 0;
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the element.
     *
     * @ignore Exclude from docs
     */
    Slice3D.prototype.draw = function () {
        _super.prototype.draw.call(this);
        // this should go here to hide 3d slices if arc = 0
        for (var i = 0; i < this.edge.children.length; i++) {
            var slice = this.edge.children.getIndex(i);
            if (slice instanceof __WEBPACK_IMPORTED_MODULE_0__Slice__["a" /* Slice */]) {
                slice.radiusY = this.radiusY;
                slice.radius = this.radius;
                slice.fill = this.fill;
                slice.startAngle = this.startAngle;
                slice.arc = this.arc;
                slice.cornerRadius = this.cornerRadius;
                slice.innerRadius = this.innerRadius;
                slice.strokeOpacity = 0;
            }
        }
        if (this.arc !== 0 && this.radius > 0 && this.depth > 0) {
            this.sideB.show(0);
            this.sideA.show(0);
            this.edge.show(0);
            var startAngle = this.startAngle;
            var arc = this.arc;
            var innerRadius = this.innerRadius;
            var radiusY = this.radiusY;
            var cornerRadius = this.cornerRadius;
            var innerCornerRadius = this.innerCornerRadius;
            var radius = this.radius;
            // this is code duplicate with $path.arc. @todo to think how to avoid it
            var endAngle = startAngle + arc;
            var crSin = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["sin"](__WEBPACK_IMPORTED_MODULE_4__utils_Math__["min"](arc, 45) / 2);
            innerRadius = innerRadius || 0;
            radiusY = radiusY || radius;
            cornerRadius = cornerRadius || 0;
            innerCornerRadius = innerCornerRadius || cornerRadius;
            var innerRadiusY = (radiusY / radius) * innerRadius;
            var cornerRadiusY = (radiusY / radius) * cornerRadius;
            var innerCornerRadiusY = (radiusY / radius) * innerCornerRadius;
            cornerRadius = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["fitToRange"](cornerRadius, 0, (radius - innerRadius) / 2);
            cornerRadiusY = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["fitToRange"](cornerRadiusY, 0, (radiusY - innerRadiusY) / 2);
            innerCornerRadius = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["fitToRange"](innerCornerRadius, 0, (radius - innerRadius) / 2);
            innerCornerRadiusY = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["fitToRange"](innerCornerRadiusY, 0, (radiusY - innerRadiusY) / 2);
            cornerRadius = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["fitToRange"](cornerRadius, 0, radius * crSin);
            cornerRadiusY = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["fitToRange"](cornerRadiusY, 0, radiusY * crSin);
            innerCornerRadius = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["fitToRange"](innerCornerRadius, 0, innerRadius * crSin);
            innerCornerRadiusY = __WEBPACK_IMPORTED_MODULE_4__utils_Math__["fitToRange"](innerCornerRadiusY, 0, innerRadiusY * crSin);
            //let crAngle: number = Math.asin(cornerRadius / radius / 2) * $math.DEGREES * 2;
            //let crAngleY: number = Math.asin(cornerRadiusY / radiusY / 2) * $math.DEGREES * 2;
            if (innerRadius < innerCornerRadius) {
                innerRadius = innerCornerRadius;
            }
            if (innerRadiusY < innerCornerRadiusY) {
                innerRadiusY = innerCornerRadiusY;
            }
            var crInnerAngle = Math.asin(innerCornerRadius / innerRadius / 2) * __WEBPACK_IMPORTED_MODULE_4__utils_Math__["DEGREES"] * 2;
            var crInnerAngleY = Math.asin(innerCornerRadiusY / innerRadiusY / 2) * __WEBPACK_IMPORTED_MODULE_4__utils_Math__["DEGREES"] * 2;
            if (!__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isNumber"](crInnerAngle)) {
                crInnerAngle = 0;
            }
            if (!__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isNumber"](crInnerAngleY)) {
                crInnerAngleY = 0;
            }
            //let middleAngle = startAngle + arc / 2;
            //let mPoint = { x: $math.round($math.cos(middleAngle) * innerRadius, 4), y: $math.round($math.sin(middleAngle) * innerRadiusY, 4) };
            var a0 = { x: __WEBPACK_IMPORTED_MODULE_4__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_4__utils_Math__["cos"](startAngle) * (innerRadius + innerCornerRadius), 4), y: __WEBPACK_IMPORTED_MODULE_4__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_4__utils_Math__["sin"](startAngle) * (innerRadiusY + innerCornerRadiusY), 4) };
            var b0 = { x: __WEBPACK_IMPORTED_MODULE_4__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_4__utils_Math__["cos"](startAngle) * (radius - cornerRadius), 4), y: __WEBPACK_IMPORTED_MODULE_4__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_4__utils_Math__["sin"](startAngle) * (radiusY - cornerRadiusY), 4) };
            var c0 = { x: __WEBPACK_IMPORTED_MODULE_4__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_4__utils_Math__["cos"](endAngle) * (radius - cornerRadius), 4), y: __WEBPACK_IMPORTED_MODULE_4__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_4__utils_Math__["sin"](endAngle) * (radiusY - cornerRadiusY), 4) };
            var d0 = { x: __WEBPACK_IMPORTED_MODULE_4__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_4__utils_Math__["cos"](endAngle) * (innerRadius + innerCornerRadius), 4), y: __WEBPACK_IMPORTED_MODULE_4__utils_Math__["round"](__WEBPACK_IMPORTED_MODULE_4__utils_Math__["sin"](endAngle) * (innerRadiusY + innerCornerRadiusY), 4) };
            // end of duplicate
            var h = this.depth;
            var ah = { x: a0.x, y: a0.y - h };
            var bh = { x: b0.x, y: b0.y - h };
            var ch = { x: c0.x, y: c0.y - h };
            var dh = { x: d0.x, y: d0.y - h };
            var pathA = __WEBPACK_IMPORTED_MODULE_5__rendering_Path__["moveTo"](a0) + __WEBPACK_IMPORTED_MODULE_5__rendering_Path__["lineTo"](b0) + __WEBPACK_IMPORTED_MODULE_5__rendering_Path__["lineTo"](bh) + __WEBPACK_IMPORTED_MODULE_5__rendering_Path__["lineTo"](ah) + __WEBPACK_IMPORTED_MODULE_5__rendering_Path__["closePath"]();
            this.sideA.element.attr({ "d": pathA });
            var pathB = __WEBPACK_IMPORTED_MODULE_5__rendering_Path__["moveTo"](c0) + __WEBPACK_IMPORTED_MODULE_5__rendering_Path__["lineTo"](d0) + __WEBPACK_IMPORTED_MODULE_5__rendering_Path__["lineTo"](dh) + __WEBPACK_IMPORTED_MODULE_5__rendering_Path__["lineTo"](ch) + __WEBPACK_IMPORTED_MODULE_5__rendering_Path__["closePath"]();
            this.sideB.element.attr({ "d": pathB });
            if (this.startAngle < 90) {
                this.sideA.toBack();
            }
            else {
                this.sideA.toFront();
            }
            if (this.startAngle + this.arc > 90) {
                this.sideB.toBack();
            }
            else {
                this.sideB.toFront();
            }
        }
        else {
            this.sideA.hide(0);
            this.sideB.hide(0);
            this.edge.hide(0);
        }
    };
    Object.defineProperty(Slice3D.prototype, "depth", {
        /**
         * @return {number} Depth (px)
         */
        get: function () {
            return this.getPropertyValue("depth");
        },
        /**
         * Depth (height) of the 3D slice in pixels.
         *
         * @default 20
         * @param {number}  depth  Depth (px)
         */
        set: function (depth) {
            if (this.setPropertyValue("depth", depth, true)) {
                this.edge.removeChildren();
                var d = 10;
                if (this.cornerRadius > 2) {
                    d = 5;
                }
                if (depth > 0) {
                    var count = Math.ceil(this.depth / d);
                    var step = depth / count;
                    for (var i = 0; i <= count; i++) {
                        var slice = this.edge.createChild(__WEBPACK_IMPORTED_MODULE_0__Slice__["a" /* Slice */]);
                        slice.isMeasured = false;
                        slice.y = -step * i;
                    }
                }
                this.slice.dy = -this.depth;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slice3D.prototype, "angle", {
        /**
         * @return {number} Angle
         */
        get: function () {
            var angle = this.getPropertyValue("angle");
            if (!__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isNumber"](angle)) {
                angle = 0;
            }
            return angle;
        },
        /**
         * Angle of the point of view to the 3D element. (0-360)
         *
         * @default 30
         * @param {number}  value  Angle
         */
        set: function (value) {
            this.setPropertyValue("angle", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slice3D.prototype, "radiusY", {
        get: function () {
            var radiusY = this.getPropertyValue("radiusY");
            if (!__WEBPACK_IMPORTED_MODULE_6__utils_Type__["isNumber"](radiusY)) {
                radiusY = this.radius - this.radius * this.angle / 90;
            }
            return radiusY;
        },
        set: function (value) {
            this.setPropertyValue("radiusY", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return Slice3D;
}(__WEBPACK_IMPORTED_MODULE_0__Slice__["a" /* Slice */]));

//# sourceMappingURL=Slice3D.js.map

/***/ }),
/* 153 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FocusFilter; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Filter__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_InterfaceColorSet__ = __webpack_require__(9);
/**
 * Module for "Focus" filter.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a "Focus" filter.
 */
var FocusFilter = /** @class */ (function (_super) {
    __extends(FocusFilter, _super);
    /**
     * Constructor
     * * Creates primitve (effect) elements
     * * Sets default properties
     */
    function FocusFilter() {
        var _this = _super.call(this) || this;
        _this.className = "FocusFilter";
        // Create elements
        // NOTE: we do not need to add each individual element to `_disposers`
        // because `filterPrimitives` has an event handler which automatically adds
        // anything added to it to `_disposers`
        _this.feFlood = _this.paper.add("feFlood");
        _this.feFlood.attr({ "flood-color": new __WEBPACK_IMPORTED_MODULE_1__utils_InterfaceColorSet__["a" /* InterfaceColorSet */]().getFor("primaryButtonHover"), "result": "base" });
        _this.filterPrimitives.push(_this.feFlood);
        _this.feMorphology = _this.paper.add("feMorphology");
        _this.feMorphology.attr({ "result": "bigger", "in": "SourceGraphic", "operator": "dilate", "radius": "2" });
        _this.filterPrimitives.push(_this.feMorphology);
        _this.feColorMatrix = _this.paper.add("feColorMatrix");
        _this.feColorMatrix.attr({ "result": "mask", "in": "bigger", "type": "matrix", "values": "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0" });
        _this.filterPrimitives.push(_this.feColorMatrix);
        _this.feComposite = _this.paper.add("feComposite");
        _this.feComposite.attr({ "result": "drop", "in": "base", "in2": "mask", "operator": "in" });
        _this.filterPrimitives.push(_this.feComposite);
        _this.feBlend = _this.paper.add("feBlend");
        _this.feBlend.attr({ "in": "SourceGraphic", "in2": "drop", "mode": "normal" });
        _this.filterPrimitives.push(_this.feBlend);
        // Set default properties
        _this.width = 130;
        _this.height = 130;
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(FocusFilter.prototype, "stroke", {
        /**
         * @return {Optional<Color>} Color
         */
        get: function () {
            return this.properties["stroke"];
        },
        /**
         * Stroke (outline) color.
         *
         * @param {Color}  value  Color
         */
        set: function (value) {
            this.properties["stroke"] = value;
            this.feFlood.attr({ "flood-color": value });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FocusFilter.prototype, "strokeWidth", {
        /**
         * @return {number} Outline thickness (px)
         */
        get: function () {
            return this.properties["strokeWidth"];
        },
        /**
         * Stroke (outline) thickness in pixels.
         *
         * @param {number}  value  Outline thickness (px)
         */
        set: function (value) {
            this.properties["strokeWidth"] = value;
            this.feMorphology.attr({ "radius": value });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FocusFilter.prototype, "opacity", {
        /**
         * @return {number} Outline opacity (0-1)
         */
        get: function () {
            return this.properties["opacity"];
        },
        /**
         * Opacity of the outline. (0-1)
         *
         * @param {number}  value  Outline opacity (0-1)
         */
        set: function (value) {
            this.properties["opacity"] = value;
            this.feColorMatrix.attr({ "values": "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 " + value + " 0" });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets filter's target element.
     *
     * In addition it also disables built-in focus outline on element this
     * filter is applied to.
     *
     * @ignore Exclude from docs
     * @param {Sprite}  value  Element filter is being attached to
     */
    FocusFilter.prototype.setSprite = function (value) {
        if (this._sprite && this._sprite != value) {
            this._sprite.group.removeStyle("outline");
        }
        value.group.addStyle({
            "outline": "none"
        });
        _super.prototype.setSprite.call(this, value);
    };
    return FocusFilter;
}(__WEBPACK_IMPORTED_MODULE_0__Filter__["a" /* Filter */]));

//# sourceMappingURL=FocusFilter.js.map

/***/ }),
/* 154 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "timeUnitDurations", function() { return timeUnitDurations; });
/* harmony export (immutable) */ __webpack_exports__["getNextUnit"] = getNextUnit;
/* harmony export (immutable) */ __webpack_exports__["getDuration"] = getDuration;
/* harmony export (immutable) */ __webpack_exports__["copy"] = copy;
/* harmony export (immutable) */ __webpack_exports__["checkChange"] = checkChange;
/* harmony export (immutable) */ __webpack_exports__["add"] = add;
/* harmony export (immutable) */ __webpack_exports__["round"] = round;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_Type__ = __webpack_require__(1);

/**
 * Maps time period names to their numeric representations in milliseconds.
 *
 * @ignore Exclude from docs
 */
var timeUnitDurations = {
    millisecond: 1,
    second: 1000,
    minute: 60000,
    hour: 3600000,
    day: 86400000,
    week: 604800000,
    month: 2592000000,
    year: 31536000000
};
/**
 * Returns the next time unit that goes after source `unit`.
 *
 * E.g. "hour" is the next unit after "minute", etc.
 *
 * @ignore Exclude from docs
 * @param  {TimeUnit}            unit  Source time unit
 * @return {Optional<TimeUnit>}        Next time unit
 */
function getNextUnit(unit) {
    switch (unit) {
        case "year":
            return;
        case "month":
            return "year";
        case "week":
            return "month";
        case "day":
            return "month"; // not a mistake
        case "hour":
            return "day";
        case "minute":
            return "hour";
        case "second":
            return "minute";
        case "millisecond":
            return "second";
    }
}
/**
 * Returns number of milliseconds in the `count` of time `unit`.
 *
 * Available units: "millisecond", "second", "minute", "hour", "day", "week",
 * "month", and "year".
 *
 * @ignore Exclude from docs
 * @param  {TimeUnit}  unit   Time unit
 * @param  {number}    count  Number of units
 * @return {number}           Milliseconds
 */
function getDuration(unit, count) {
    if (!__WEBPACK_IMPORTED_MODULE_0__utils_Type__["hasValue"](count)) {
        count = 1;
    }
    return timeUnitDurations[unit] * count;
}
/**
 * Returns a copy of the `Date` object.
 *
 * @ignore Exclude from docs
 * @param  {Date}  date  Source date
 * @return {Date}        Copy
 */
function copy(date) {
    return new Date(date.getTime()); // todo: check if this is ok. new Date(date) used to strip milliseconds on FF in v3
}
/**
 * Checks if the `unit` part of two `Date` objects do not match. Two dates
 * represent a "range" of time, rather the same time date.
 *
 * @ignore Exclude from docs
 * @param  {Date}      dateOne  Date 1
 * @param  {Date}      dateTwo  Date 2
 * @param  {TimeUnit}  unit     Time unit to check
 * @return {boolean}            Range?
 */
function checkChange(dateOne, dateTwo, unit) {
    switch (unit) {
        case "year":
            if (dateOne.getFullYear() != dateTwo.getFullYear()) {
                return true;
            }
            break;
        case "month":
            if (dateOne.getMonth() != dateTwo.getMonth()) {
                return true;
            }
            break;
        case "day":
            if (dateOne.getDate() != dateTwo.getDate()) {
                return true;
            }
            break;
        case "hour":
            if (dateOne.getHours() != dateTwo.getHours()) {
                return true;
            }
            break;
        case "minute":
            if (dateOne.getMinutes() != dateTwo.getMinutes()) {
                return true;
            }
            break;
        case "second":
            if (dateOne.getSeconds() != dateTwo.getSeconds()) {
                return true;
            }
            break;
        case "millisecond":
            if (dateOne.getTime() != dateTwo.getTime()) {
                return true;
            }
            break;
    }
    var nextUnit = getNextUnit(unit);
    if (nextUnit) {
        return checkChange(dateOne, dateTwo, nextUnit);
    }
    else {
        return false;
    }
}
/**
 * Adds `count` of time `unit` to the source date. Returns a new `Date` object.
 *
 * @ignore Exclude from docs
 * @param  {Date}      date   Source date
 * @param  {TimeUnit}  unit   Time unit
 * @param  {number}    count  Number of units to add
 * @return {Date}             New date
 */
function add(date, unit, count) {
    var year = date.getFullYear();
    var month = date.getMonth();
    var day = date.getDate();
    var hours = date.getHours();
    var minutes = date.getMinutes();
    var seconds = date.getSeconds();
    var milliseconds = date.getMilliseconds();
    //let weekDay: number = date.getDay();
    switch (unit) {
        case "year":
            date.setFullYear(year + count);
            break;
        case "month":
            date.setMonth(month + count);
            break;
        case "week":
            date.setDate(day + count * 7);
            break;
        case "day":
            date.setDate(day + count);
            break;
        case "hour":
            date.setHours(hours + count);
            break;
        case "minute":
            date.setMinutes(minutes + count);
            break;
        case "second":
            date.setSeconds(seconds + count);
            break;
        case "millisecond":
            date.setMilliseconds(milliseconds + count);
            break;
    }
    return date;
}
/**
 * "Rounds" the date to specific time unit.
 *
 * @ignore Exclude from docs
 * @param  {Date}      date             Source date
 * @param  {TimeUnit}  unit             Time unit
 * @param  {number}    count            Number of units to round to
 * @param  {number}    firstDateOfWeek  First day of week
 * @return {Date}                       New date
 */
function round(date, unit, count, firstDateOfWeek) {
    if (!__WEBPACK_IMPORTED_MODULE_0__utils_Type__["isNumber"](count)) {
        count = 1;
    }
    if (!__WEBPACK_IMPORTED_MODULE_0__utils_Type__["isNumber"](firstDateOfWeek)) {
        firstDateOfWeek = 1;
    }
    var year = date.getFullYear();
    var month = date.getMonth();
    var day = date.getDate();
    var hours = date.getHours();
    var minutes = date.getMinutes();
    var seconds = date.getSeconds();
    var milliseconds = date.getMilliseconds();
    var weekDay = date.getDay();
    switch (unit) {
        case "year":
            year = Math.floor(year / count) * count;
            month = 0;
            day = 1;
            hours = 0;
            minutes = 0;
            seconds = 0;
            milliseconds = 0;
            break;
        case "month":
            month = Math.floor(month / count) * count;
            day = 1;
            hours = 0;
            minutes = 0;
            seconds = 0;
            milliseconds = 0;
            break;
        case "week":
            // todo: rounding when count is not 1
            if (weekDay >= firstDateOfWeek) {
                day = day - weekDay + firstDateOfWeek;
            }
            else {
                day = day - (7 + weekDay) + firstDateOfWeek;
            }
            hours = 0;
            minutes = 0;
            seconds = 0;
            milliseconds = 0;
            break;
        case "day":
            day = Math.floor(day / count) * count;
            day = day;
            hours = 0;
            minutes = 0;
            seconds = 0;
            milliseconds = 0;
            break;
        case "hour":
            hours = Math.floor(hours / count) * count;
            minutes = 0;
            seconds = 0;
            milliseconds = 0;
            break;
        case "minute":
            minutes = Math.floor(minutes / count) * count;
            seconds = 0;
            milliseconds = 0;
            break;
        case "second":
            seconds = Math.floor(seconds / count) * count;
            milliseconds = 0;
            break;
        case "millisecond":
            milliseconds = Math.floor(milliseconds / count) * count;
            break;
    }
    date.setFullYear(year, month, day);
    date.setHours(hours, minutes, seconds, milliseconds);
    return date;
}
//# sourceMappingURL=Time.js.map

/***/ }),
/* 155 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = create;
/* harmony export (immutable) */ __webpack_exports__["b"] = createFromConfig;
/* harmony export (immutable) */ __webpack_exports__["d"] = useTheme;
/* harmony export (immutable) */ __webpack_exports__["c"] = unuseTheme;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__System__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__rendering_Paper__ = __webpack_require__(103);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__rendering_SVGContainer__ = __webpack_require__(94);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__rendering_filters_FocusFilter__ = __webpack_require__(153);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__elements_Preloader__ = __webpack_require__(142);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__elements_AmChartsLogo__ = __webpack_require__(156);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__elements_Tooltip__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__Options__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__Array__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__Type__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__DOM__ = __webpack_require__(19);
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */














/**
 * ============================================================================
 * INSTANTIATION FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Creates all HTML and SVG containers needed for the chart instance, as well
 * as the new [[Sprite]] (as specified in `classType` parameter).
 *
 * @param  {Optional<HTMLElement | string>}  htmlElement  A container to creat elements in
 * @param  {T}                               classType    A class definition of the new element to create
 * @return {T}                                            Newly-created Sprite object
 */
function createChild(htmlElement, classType) {
    var htmlContainer = __WEBPACK_IMPORTED_MODULE_13__DOM__["m" /* getElement */](htmlElement);
    if (htmlContainer) {
        htmlContainer.innerHTML = "";
        // we need to create another div with position:absolute in order div elements added inside could be positioned relatively
        /*
        let innerContainer = document.createElement("div");
        let style = innerContainer.style;
        style.width = "100%";
        style.height = "100%";
        style.position = "relative";
*/
        //	htmlContainer.appendChild(innerContainer);
        var svgDiv = new __WEBPACK_IMPORTED_MODULE_4__rendering_SVGContainer__["a" /* SVGContainer */](htmlContainer);
        var paper = new __WEBPACK_IMPORTED_MODULE_3__rendering_Paper__["a" /* Paper */](svgDiv.SVGContainer);
        paper.id = "svg-" + (__WEBPACK_IMPORTED_MODULE_4__rendering_SVGContainer__["b" /* svgContainers */].length - 1);
        // the approach with masks is chosen because overflow:visible is set on SVG element in order tooltips could go outside
        // svg area - this is often needed when working with small charts.
        // main container which holds content container and tooltips container
        var container = new __WEBPACK_IMPORTED_MODULE_2__Container__["a" /* Container */]();
        container.htmlContainer = htmlContainer;
        container.svgContainer = svgDiv;
        container.width = Object(__WEBPACK_IMPORTED_MODULE_9__Percent__["c" /* percent */])(100);
        container.height = Object(__WEBPACK_IMPORTED_MODULE_9__Percent__["c" /* percent */])(100);
        container.paper = paper;
        // this is set from parent container, but this one doesn't have, so do it manually.
        container.relativeWidth = 1;
        container.relativeHeight = 1;
        svgDiv.container = container;
        // content container
        // setting mask directly on classType object would result mask to shift together with object transformations
        var contentContainer = container.createChild(__WEBPACK_IMPORTED_MODULE_2__Container__["a" /* Container */]);
        contentContainer.width = Object(__WEBPACK_IMPORTED_MODULE_9__Percent__["c" /* percent */])(100);
        contentContainer.height = Object(__WEBPACK_IMPORTED_MODULE_9__Percent__["c" /* percent */])(100);
        // content mask
        contentContainer.mask = contentContainer.background;
        // creating classType instance
        var sprite_1 = contentContainer.createChild(classType);
        sprite_1.isBaseSprite = true;
        sprite_1.focusFilter = new __WEBPACK_IMPORTED_MODULE_5__rendering_filters_FocusFilter__["a" /* FocusFilter */]();
        // tooltip container
        var tooltipContainer_1 = container.createChild(__WEBPACK_IMPORTED_MODULE_2__Container__["a" /* Container */]);
        tooltipContainer_1.width = Object(__WEBPACK_IMPORTED_MODULE_9__Percent__["c" /* percent */])(100);
        tooltipContainer_1.height = Object(__WEBPACK_IMPORTED_MODULE_9__Percent__["c" /* percent */])(100);
        tooltipContainer_1.isMeasured = false;
        contentContainer.tooltipContainer = tooltipContainer_1;
        sprite_1.tooltip = new __WEBPACK_IMPORTED_MODULE_8__elements_Tooltip__["a" /* Tooltip */]();
        sprite_1.tooltip.hide(0);
        sprite_1.tooltip.setBounds({ x: 0, y: 0, width: tooltipContainer_1.maxWidth, height: tooltipContainer_1.maxHeight });
        tooltipContainer_1.events.on("maxsizechanged", function () {
            __WEBPACK_IMPORTED_MODULE_12__Type__["getValue"](sprite_1.tooltip).setBounds({ x: 0, y: 0, width: tooltipContainer_1.maxWidth, height: tooltipContainer_1.maxHeight });
        });
        //@todo: maybe we don't need to create one by default but only on request?
        contentContainer.preloader = new __WEBPACK_IMPORTED_MODULE_6__elements_Preloader__["a" /* Preloader */]();
        if (!__WEBPACK_IMPORTED_MODULE_10__Options__["a" /* options */].commercialLicense) {
            tooltipContainer_1.createChild(__WEBPACK_IMPORTED_MODULE_7__elements_AmChartsLogo__["a" /* AmChartsLogo */]);
        }
        sprite_1.numberFormatter; // need to create one.
        // Set this as an autonomouse instance
        // Controls like Preloader, Export will use this.
        contentContainer.isStandaloneInstance = true;
        return sprite_1;
    }
    else {
        Object(__WEBPACK_IMPORTED_MODULE_0__System__["b" /* getSystem */])().log("html container not found");
    }
}
/**
 * A shortcut to creating a chart instance.
 *
 * The first argument is either a reference to or an id of a DOM element to be
 * used as a container for the chart.
 *
 * The second argument is the type reference of the chart type. (for plain
 * JavaScript users this can also be a string indicating chart type)
 *
 * ```TypeScript
 * let chart = am4core.create("chartdiv", am4charts.PieChart);
 * ```
 * ```JavaScript
 * // Can pass in chart type reference like this:
 * var chart = am4core.create("chartdiv", am4charts.PieChart);
 *
 * // ... or chart class type as a string:
 * var chart = am4core.create("chartdiv", "PieChart");
 * ```
 *
 * @param  {HTMLElement | string}  htmlElement  Reference or id of the target container element
 * @param  {T}                     classType    Class type of the target chart type
 * @return {T}                                  Chart instance
 */
function create(htmlElement, classType) {
    // This is a nasty hack for the benefit of vanilla JS users, who do not
    // enjoy benefits of type-check anyway.
    // We're allowing passing in a name of the class rather than type reference
    // itself.
    var classError;
    if (__WEBPACK_IMPORTED_MODULE_12__Type__["isString"](classType)) {
        if (__WEBPACK_IMPORTED_MODULE_12__Type__["hasValue"](__WEBPACK_IMPORTED_MODULE_1__Registry__["b" /* registry */].registeredClasses[classType])) {
            classType = __WEBPACK_IMPORTED_MODULE_1__Registry__["b" /* registry */].registeredClasses[classType];
        }
        else {
            classType = __WEBPACK_IMPORTED_MODULE_1__Registry__["b" /* registry */].registeredClasses["Container"];
            classError = new Error("Class [" + classType + "] is not loaded.");
            return;
        }
    }
    // Create the chart
    var chart = createChild(htmlElement, classType);
    // Error?
    if (classError) {
        chart.raiseCriticalError(classError);
    }
    return chart;
}
/**
 * A shortcut to creating a chart from a config object.
 *
 * Example:
 *
 * ```TypeScript
 * let chart am4core.createFromConfig({ ... }, "chartdiv", am4charts.XYChart );
 * ```
 * ```JavaScript
 * var chart am4core.createFromConfig({ ... }, "chartdiv", "XYChart" );
 * ```
 *
 * If `chartType` parameter is not supplied it must be set in a config object,
 * via reference to chart type, e.g.:
 *
 * ```TypeScript
 * {
 *   "type": am4charts.XYChart,
 *   // ...
 * }
 * ```
 * ```JavaScript
 * {
 *   "type": am4charts.XYChart,
 *   // ...
 * }
 * ```
 *
 * Or via string: (if you are using JavaScript)
 *
 * ```TypeScript
 * {
 *   "type": "XYChart",
 *   // ...
 * }
 * ```
 * ```JavaScript
 * {
 *   "type": "XYChart",
 *   // ...
 * }
 * ```
 *
 * A `container` can either be a reference to an HTML container to put chart
 * in, or it's unique id.
 *
 * If `container` is not specified, it must be included in the config object:
 *
 * ```TypeScript
 * {
 *   "type": "XYChart",
 *   "container": "chartdiv",
 *   // ...
 * }
 * ```
 * ```JavaScript
 * {
 *   "type": "XYChart",
 *   "container": "chartdiv",
 *   // ...
 * }
 * ```
 *
 * @param  {any}                   config       Config object in property/value pairs
 * @param  {string | HTMLElement}  htmlElement  Container reference or ID
 * @param  {typeof Chart}          objectType   Chart type
 * @return {Chart}                              A newly created chart instance
 * @todo Throw exception if type is not correct
 */
function createFromConfig(config, htmlElement, classType) {
    // Extract chart type from config if necessary
    if (!__WEBPACK_IMPORTED_MODULE_12__Type__["hasValue"](classType)) {
        classType = config.type;
        delete config.type;
    }
    // Extract element from config if necessary
    if (!__WEBPACK_IMPORTED_MODULE_12__Type__["hasValue"](htmlElement)) {
        htmlElement = config.container;
        delete config.container;
    }
    // Check if we need to extract actual type reference
    var finalType;
    var classError;
    if (__WEBPACK_IMPORTED_MODULE_12__Type__["isString"](classType) && __WEBPACK_IMPORTED_MODULE_12__Type__["hasValue"](__WEBPACK_IMPORTED_MODULE_1__Registry__["b" /* registry */].registeredClasses[classType])) {
        finalType = __WEBPACK_IMPORTED_MODULE_1__Registry__["b" /* registry */].registeredClasses[classType];
    }
    else if (typeof classType !== "function") {
        finalType = __WEBPACK_IMPORTED_MODULE_2__Container__["a" /* Container */];
        classError = new Error("Class [" + classType + "] is not loaded.");
    }
    else {
        finalType = classType;
    }
    // Check if maybe we have `geodata` set as string, which would mean that
    // we need to try to refer to a loaded map with a global variable, like
    // `am4geodata_xxx`
    if (__WEBPACK_IMPORTED_MODULE_12__Type__["hasValue"](config["geodata"]) && __WEBPACK_IMPORTED_MODULE_12__Type__["isString"](config["geodata"])) {
        // Check if there's a map loaded by such name
        if (__WEBPACK_IMPORTED_MODULE_12__Type__["hasValue"](window["am4geodata_" + config["geodata"]])) {
            config["geodata"] = window["am4geodata_" + config["geodata"]];
        }
        // Nope. Let's try maybe we got JSON as string?
        else {
            try {
                config["geodata"] = JSON.parse(config["geodata"]);
            }
            catch (e) {
                // No go again. Error out.
                classError = new Error("<code>geodata</code> is incorrect or the map file is not loaded.");
            }
        }
    }
    // Create the chart
    var chart = createChild(htmlElement, finalType);
    // Set config
    if (classError) {
        chart.raiseCriticalError(classError);
    }
    else {
        chart.config = config;
    }
    return chart;
}
/**
 * Applies a theme to System, and subsequently all chart instances created
 * from that point forward.
 *
 * amCharts supports multiple themes. Calling `useTheme` multiple times will
 * make the System apply multiple themes, rather than overwrite previously
 * set one.
 *
 * This enables combining features from multiple themes on the same chart.
 * E.g.:
 *
 * ```TypeScript
 * am4core.useTheme(am4themes.material);
 * am4core.useTheme(am4themes.animated);
 * ```
 * ```JavaScript
 * am4core.useTheme(am4themes.material);
 * am4core.useTheme(am4themes.animated);
 * ```
 *
 * The above will apply both the Material color and animation options to all
 * charts created.
 *
 * @param {ITheme}  value  A reference to a theme
 */
function useTheme(value) {
    __WEBPACK_IMPORTED_MODULE_1__Registry__["b" /* registry */].themes.push(value);
}
/**
 * Removes a theme from "active themes" list, so it won't get applied to any
 * charts created subsequently.
 *
 * @param {ITheme}  value  A reference to a theme
 */
function unuseTheme(value) {
    __WEBPACK_IMPORTED_MODULE_11__Array__["k" /* remove */](__WEBPACK_IMPORTED_MODULE_1__Registry__["b" /* registry */].themes, value);
}
//# sourceMappingURL=Instance.js.map

/***/ }),
/* 156 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AmChartsLogo; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_utils_InterfaceColorSet__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Polyspline__ = __webpack_require__(104);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Color__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__rendering_fills_LinearGradient__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__rendering_filters_DesaturateFilter__ = __webpack_require__(108);
/**
 * AmChartsLogo module.
 *
 * AmChartsLogo shows amCharts logo for non-commercial users of a library.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */






/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * A class used to draw and display progress indicator.
 *
 * @see {@link IAmChartsLogoEvents} for a list of available events
 * @see {@link IAmChartsLogoAdapters} for a list of available Adapters
 * @ignore Exclude from docs
 */
var AmChartsLogo = /** @class */ (function (_super) {
    __extends(AmChartsLogo, _super);
    /**
     * Constructor
     */
    function AmChartsLogo() {
        var _this = 
        // Init
        _super.call(this) || this;
        _this.className = "AmChartsLogo";
        _this.valign = "bottom";
        var d = 0.3;
        _this.opacity = 0.3;
        _this.defaultState.properties.opacity = 0.4;
        _this.url = "https://www.amcharts.com/";
        _this.showSystemTooltip = true;
        _this.readerTitle = "chart created using amCharts library";
        _this.width = 220 * d;
        _this.height = 70 * d;
        _this.background.opacity = 0;
        var aColor = Object(__WEBPACK_IMPORTED_MODULE_3__utils_Color__["c" /* color */])("#474758");
        if (new __WEBPACK_IMPORTED_MODULE_1__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]().getFor("background").alternative.hex == "#ffffff") {
            aColor = Object(__WEBPACK_IMPORTED_MODULE_3__utils_Color__["c" /* color */])("#ffffff");
        }
        var aGradient = new __WEBPACK_IMPORTED_MODULE_4__rendering_fills_LinearGradient__["a" /* LinearGradient */]();
        aGradient.addColor(aColor);
        aGradient.addColor(aColor, 1, 0.75);
        aGradient.addColor(Object(__WEBPACK_IMPORTED_MODULE_3__utils_Color__["c" /* color */])("#3cabff"), 1, 0.755);
        aGradient.rotation = -10;
        var aStroke = aGradient;
        var m = _this.createChild(__WEBPACK_IMPORTED_MODULE_2__Polyspline__["a" /* Polyspline */]);
        m.shouldClone = false;
        m.isMeasured = false;
        m.segments = [[{ x: 50 * d, y: 50 * d }, { x: 90 * d, y: 50 * d }, { x: 120 * d, y: 20 * d }, { x: 135 * d, y: 35 * d }, { x: 150 * d, y: 20 * d }, { x: 180 * d, y: 50 * d }, { x: 200 * d, y: 50 * d }]];
        m.strokeWidth = 6 * d;
        m.tensionX = 0.8;
        m.tensionY = 1;
        m.stroke = Object(__WEBPACK_IMPORTED_MODULE_3__utils_Color__["c" /* color */])("#3cabff");
        var a = _this.createChild(__WEBPACK_IMPORTED_MODULE_2__Polyspline__["a" /* Polyspline */]);
        a.shouldClone = false;
        a.isMeasured = false;
        a.segments = [[{ x: 20 * d, y: 50 * d }, { x: 50 * d, y: 50 * d }, { x: 90 * d, y: 12 * d }, { x: 133 * d, y: 50 * d }, { x: 170 * d, y: 50 * d }, { x: 200 * d, y: 50 * d }]];
        a.strokeWidth = 6 * d;
        a.tensionX = 0.75;
        a.tensionY = 1;
        a.stroke = aStroke;
        var desaturateFilter = new __WEBPACK_IMPORTED_MODULE_5__rendering_filters_DesaturateFilter__["a" /* DesaturateFilter */]();
        _this.filters.push(desaturateFilter);
        var desaturateFilterHover = new __WEBPACK_IMPORTED_MODULE_5__rendering_filters_DesaturateFilter__["a" /* DesaturateFilter */]();
        desaturateFilterHover.saturation = 1;
        var hoverState = _this.states.create("hover");
        hoverState.properties.opacity = 1;
        hoverState.filters.push(desaturateFilterHover);
        // temp
        //this.scale = 0.001;
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    return AmChartsLogo;
}(__WEBPACK_IMPORTED_MODULE_0__Container__["a" /* Container */]));

//# sourceMappingURL=AmChartsLogo.js.map

/***/ }),
/* 157 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return RadarChartDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RadarChart; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__XYChart__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__series_RadarSeries__ = __webpack_require__(161);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_elements_Circle__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__cursors_RadarCursor__ = __webpack_require__(163);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__axes_AxisRendererCircular__ = __webpack_require__(116);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__axes_AxisRendererRadial__ = __webpack_require__(164);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_utils_Utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__core_utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__core_utils_Type__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__core_utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__core_rendering_Path__ = __webpack_require__(8);
/**
 * Radar chart module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */














/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[RadarChart]].
 *
 * @see {@link DataItem}
 */
var RadarChartDataItem = /** @class */ (function (_super) {
    __extends(RadarChartDataItem, _super);
    /**
     * Constructor
     */
    function RadarChartDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "RadarChartDataItem";
        _this.applyTheme();
        return _this;
    }
    return RadarChartDataItem;
}(__WEBPACK_IMPORTED_MODULE_0__XYChart__["b" /* XYChartDataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a Radar chart.
 *
 * @see {@link IRadarChartEvents} for a list of available Events
 * @see {@link IRadarChartAdapters} for a list of available Adapters
 * @todo Example
 * @important
 */
var RadarChart = /** @class */ (function (_super) {
    __extends(RadarChart, _super);
    /**
     * Constructor
     */
    function RadarChart() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * Defines X axis renderer type.
         *
         * @type {AxisRendererCircular}
         */
        _this._axisRendererX = __WEBPACK_IMPORTED_MODULE_7__axes_AxisRendererCircular__["a" /* AxisRendererCircular */];
        /**
         * Defines Y axis renderer type.
         *
         * @type {AxisRendererRadial}
         */
        _this._axisRendererY = __WEBPACK_IMPORTED_MODULE_8__axes_AxisRendererRadial__["a" /* AxisRendererRadial */];
        /**
         * used by cursor. We adjust innerradius if start and end angle are close to each other
         * @ignore Exclude from docs
         */
        _this.innerRadiusModifyer = 1;
        _this.className = "RadarChart";
        _this.startAngle = -90;
        _this.endAngle = 270;
        _this.radius = Object(__WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__["c" /* percent */])(80);
        _this.innerRadius = 0;
        var radarContainer = _this.plotContainer.createChild(__WEBPACK_IMPORTED_MODULE_3__core_Container__["a" /* Container */]);
        radarContainer.shouldClone = false;
        radarContainer.layout = "absolute";
        radarContainer.align = "center";
        radarContainer.valign = "middle";
        _this.seriesContainer.parent = radarContainer;
        _this.radarContainer = radarContainer;
        _this.bulletsContainer.parent = radarContainer;
        _this._cursorContainer = radarContainer;
        _this._bulletMask = radarContainer.createChild(__WEBPACK_IMPORTED_MODULE_4__core_elements_Circle__["a" /* Circle */]);
        _this._bulletMask.shouldClone = false;
        _this._bulletMask.element = _this.paper.add("path");
        _this._bulletMask.opacity = 0;
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Sets defaults that instantiate some objects that rely on parent, so they
     * cannot be set in constructor.
     */
    RadarChart.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);
        // Add a default screen reader title for accessibility
        // This will be overridden in screen reader if there are any `titles` set
        if (!__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["hasValue"](this.readerTitle)) {
            this.readerTitle = this.language.translate("Radar chart");
        }
    };
    /**
     * Decorates Axis with required properties for this chart.
     *
     * @param {Axis}  axis  Axis
     */
    RadarChart.prototype.processAxis = function (axis) {
        _super.prototype.processAxis.call(this, axis);
        var renderer = axis.renderer;
        renderer.gridContainer.parent = renderer;
        renderer.breakContainer.parent = renderer;
        axis.parent = this.radarContainer;
        renderer.toBack();
    };
    /**
     * Updates all X axes after range change event.
     *
     * @param {AMEvent<Axis, IComponentEvents>["datarangechanged"]}  event  Event
     */
    RadarChart.prototype.handleXAxisRangeChange = function (event) {
        _super.prototype.handleXAxisRangeChange.call(this, event);
        __WEBPACK_IMPORTED_MODULE_10__core_utils_Iterator__["each"](this.yAxes.iterator(), function (axis) {
            axis.invalidate();
        });
    };
    /**
     * Updates all Y axes after range change event.
     *
     * @param {AMEvent<Axis, IComponentEvents>["datarangechanged"]}  event  Event
     */
    RadarChart.prototype.handleYAxisRangeChange = function (event) {
        _super.prototype.handleYAxisRangeChange.call(this, event);
        __WEBPACK_IMPORTED_MODULE_10__core_utils_Iterator__["each"](this.xAxes.iterator(), function (axis) {
            axis.invalidate();
        });
    };
    /**
     * Creates and returns a new Cursor, of type suitable for RadarChart.
     *
     * @return {RadarCursor} Cursor
     */
    RadarChart.prototype.createCursor = function () {
        return new __WEBPACK_IMPORTED_MODULE_6__cursors_RadarCursor__["a" /* RadarCursor */]();
    };
    /**
     * Processes JSON-based config before it is applied to the object.
     *
     * @ignore Exclude from docs
     * @param {object}  config  Config
     */
    RadarChart.prototype.processConfig = function (config) {
        if (config) {
            // Set up cursor
            if (__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["hasValue"](config.cursor) && !__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["hasValue"](config.cursor.type)) {
                config.cursor.type = "RadarCursor";
            }
            // Set up series
            if (__WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["hasValue"](config.series) && __WEBPACK_IMPORTED_MODULE_11__core_utils_Type__["isArray"](config.series)) {
                for (var i = 0, len = config.series.length; i < len; i++) {
                    config.series[i].type = config.series[i].type || "RadarSeries";
                }
            }
            // Set up axes
            /*if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {
                for (let i = 0, len = config.xAxes.length; i < len; i++) {
                    config.xAxes[i].type = config.xAxes[i].type || "AxisRendererCircular";
                }
            }
            if ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {
                for (let i = 0, len = config.yAxes.length; i < len; i++) {
                    config.yAxes[i].type = config.yAxes[i].type || "AxisRendererRadial";
                }
            }*/
        }
        _super.prototype.processConfig.call(this, config);
    };
    /**
     * Does calculations before drawing the chart.
     */
    RadarChart.prototype.beforeDraw = function () {
        _super.prototype.beforeDraw.call(this);
        var radarCont = this.radarContainer;
        var plotContainer = this.plotContainer;
        var rect = __WEBPACK_IMPORTED_MODULE_12__core_utils_Math__["getArcRect"](this.startAngle, this.endAngle, 1);
        var innerRect = { x: 0, y: 0, width: 0, height: 0 };
        var wr = plotContainer.innerWidth / rect.width;
        var hr = plotContainer.innerHeight / rect.height;
        var innerRadius = this.innerRadius;
        if (innerRadius instanceof __WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__["a" /* Percent */]) {
            var value = innerRadius.value;
            var mr = Math.min(wr, hr);
            value = Math.max(mr * value, mr - Math.min(plotContainer.innerHeight, plotContainer.innerWidth)) / mr;
            innerRect = __WEBPACK_IMPORTED_MODULE_12__core_utils_Math__["getArcRect"](this.startAngle, this.endAngle, value);
            this.innerRadiusModifyer = value / innerRadius.value;
            innerRadius = Object(__WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__["c" /* percent */])(value * 100);
        }
        // @todo handle this when innerRadius set in pixels (do it for pie also)
        rect = __WEBPACK_IMPORTED_MODULE_12__core_utils_Math__["getCommonRectangle"]([rect, innerRect]);
        var maxRadius = Math.min(plotContainer.innerWidth / rect.width, plotContainer.innerHeight / rect.height);
        var diameter = __WEBPACK_IMPORTED_MODULE_9__core_utils_Utils__["relativeRadiusToValue"](this.radius, maxRadius) * 2;
        var radius = diameter / 2;
        var startAngle = this.startAngle;
        var endAngle = this.endAngle;
        this._pixelInnerRadius = __WEBPACK_IMPORTED_MODULE_9__core_utils_Utils__["relativeRadiusToValue"](innerRadius, radius);
        this._bulletMask.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_13__core_rendering_Path__["arc"](startAngle, endAngle - startAngle, radius, this._pixelInnerRadius) });
        __WEBPACK_IMPORTED_MODULE_10__core_utils_Iterator__["each"](this.xAxes.iterator(), function (axis) {
            axis.renderer.startAngle = startAngle;
            axis.renderer.endAngle = endAngle;
            axis.width = diameter;
            axis.height = diameter;
            //axis.renderer.width = diameter;
            //axis.renderer.height = diameter;
            axis.renderer.pixelRadiusReal = radius;
            axis.renderer.innerRadius = innerRadius;
        });
        __WEBPACK_IMPORTED_MODULE_10__core_utils_Iterator__["each"](this.yAxes.iterator(), function (axis) {
            axis.renderer.startAngle = startAngle;
            axis.renderer.endAngle = endAngle;
            axis.width = diameter;
            axis.height = diameter;
            //axis.renderer.width = diameter;
            //axis.renderer.height = diameter;
            axis.renderer.pixelRadiusReal = radius;
            axis.renderer.innerRadius = innerRadius;
        });
        var cursor = this.cursor;
        if (cursor) {
            cursor.width = diameter;
            cursor.height = diameter;
            cursor.startAngle = startAngle;
            cursor.endAngle = endAngle;
        }
        this.radarContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };
    };
    /**
     * Creates and returns a new Series, suitable for RadarChart.
     *
     * @return {RadarSeries} New Series
     */
    RadarChart.prototype.createSeries = function () {
        return new __WEBPACK_IMPORTED_MODULE_2__series_RadarSeries__["a" /* RadarSeries */]();
    };
    Object.defineProperty(RadarChart.prototype, "startAngle", {
        /**
         * @return {number} Start angle (degrees)
         */
        get: function () {
            return this.getPropertyValue("startAngle");
        },
        /**
         * Starting angle of the Radar face. (degrees)
         *
         * Normally, a circular radar face begins (the radial axis is drawn) at the
         * top center. (at -90 degrees)
         *
         * You can use `startAngle` to change this setting.
         *
         * E.g. setting this to 0 will make the radial axis start horizontally to
         * the right, as opposed to vertical.
         *
         * For a perfect circle the absolute sum of `startAngle` and `endAngle`
         * needs to be 360.
         *
         * However, it's **not** necessary to do so. You can set those to lesser
         * numbers, to create semi-circles.
         *
         * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that
         * looks like a quarter of a circle.
         *
         * @default -90
         * @param {number}  value  Start angle (degrees)
         */
        set: function (value) {
            this.setPropertyValue("startAngle", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadarChart.prototype, "endAngle", {
        /**
         * @return {number} End angle (degrees)
         */
        get: function () {
            return this.getPropertyValue("endAngle");
        },
        /**
         * Starting angle of the Radar face. (degrees)
         *
         * Normally, a circular radar face ends (the radial axis is drawn) exactly
         * where it has started, forming a full 360 circle. (at 270 degrees)
         *
         * You can use `endAngle` to end the circle somewhere else.
         *
         * E.g. setting this to 180 will make the radar face end at horizontal line
         * to the left off the center.
         *
         * For a perfect circle the absolute sum of `startAngle` and `endAngle`
         * needs to be 360.
         *
         * However, it's **not** necessary to do so. You can set those to lesser
         * numbers, to create semi-circles.
         *
         * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that
         * looks like a quarter of a circle.
         *
         * @default -90
         * @param {number}  value  End angle (degrees)
         */
        set: function (value) {
            this.setPropertyValue("endAngle", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadarChart.prototype, "radius", {
        /**
         * @return {number} Outer radius
         */
        get: function () {
            return this.getPropertyValue("radius");
        },
        /**
         * Outer radius of the Radar face.
         *
         * This can either be in absolute pixel value, or relative [[Percent]].
         *
         * @param {number | Percent}  value  Outer radius
         */
        set: function (value) {
            this.setPropertyValue("radius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadarChart.prototype, "pixelInnerRadius", {
        /**
         * @return {number} Inner radius in pixels
         */
        get: function () {
            return this._pixelInnerRadius;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadarChart.prototype, "innerRadius", {
        /**
         * @return {number} Inner radius
         */
        get: function () {
            return this.getPropertyValue("innerRadius");
        },
        /**
         * Inner radius of the radar face.
         *
         * This can either be in absolute pixel value, or relative [[Percent]].
         *
         * If set in Percent, it will be relative to `radius`. (outer radius)
         *
         * @param {number | Percent} value Inner radius
         */
        set: function (value) {
            this.setPropertyValue("innerRadius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Triggers (re)rendering of the horizontal (X) axis.
     *
     * @ignore Exclude from docs
     * @param {Axis} axis Axis
     */
    RadarChart.prototype.updateXAxis = function (renderer) {
        //do not call super!
        renderer.axis.initRenderer();
    };
    /**
     * Triggers (re)rendering of the vertical (Y) axis.
     *
     * @ignore Exclude from docs
     * @param {Axis} axis Axis
     */
    RadarChart.prototype.updateYAxis = function (renderer) {
        // do not call super!
        renderer.axis.initRenderer();
    };
    return RadarChart;
}(__WEBPACK_IMPORTED_MODULE_0__XYChart__["a" /* XYChart */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_5__core_Registry__["b" /* registry */].registeredClasses["RadarChart"] = RadarChart;
//# sourceMappingURL=RadarChart.js.map

/***/ }),
/* 158 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CategoryAxisBreak; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__AxisBreak__ = __webpack_require__(81);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Registry__ = __webpack_require__(0);
/**
 * A module which defines functionality related to Category Axis Break.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Base class to define "breaks" in axes
 * @see {@link ICategoryAxisBreakEvents} for a list of available events
 * @see {@link ICategoryAxisBreakAdapters} for a list of available Adapters
 */
var CategoryAxisBreak = /** @class */ (function (_super) {
    __extends(CategoryAxisBreak, _super);
    /**
     * Constructor
     */
    function CategoryAxisBreak() {
        var _this = _super.call(this) || this;
        _this.className = "CategoryAxisBreak";
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(CategoryAxisBreak.prototype, "startPosition", {
        /**
         * Pixel position of the break's start.
         *
         * @return {number} Position (px)
         * @readonly
         */
        get: function () {
            if (this.axis) {
                return this.axis.indexToPosition(this.adjustedStartValue);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryAxisBreak.prototype, "endPosition", {
        /**
         * Pixel position of the break's end.
         *
         * @return {number} Position (px)
         * @readonly
         */
        get: function () {
            if (this.axis) {
                return this.axis.indexToPosition(this.adjustedEndValue);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryAxisBreak.prototype, "startCategory", {
        /**
         * @return {string} Start category
         */
        get: function () {
            return this.getPropertyValue("startCategory");
        },
        /**
         * A category break starts on.
         *
         * @param {string}  value Start category
         */
        set: function (value) {
            if (this.setPropertyValue("startCategory", value)) {
                if (this.axis) {
                    this.axis.invalidateDataRange();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryAxisBreak.prototype, "endCategory", {
        /**
         * @return {string} End category
         */
        get: function () {
            return this.getPropertyValue("endCategory");
        },
        /**
         * A category break ends on.
         *
         * @param {string}  value  End category
         */
        set: function (value) {
            if (this.setPropertyValue("endCategory", value)) {
                if (this.axis) {
                    this.axis.invalidateDataRange();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryAxisBreak.prototype, "startValue", {
        /**
         * @return {number} Value
         */
        get: function () {
            var category = this.getPropertyValue("startCategory");
            if (category) {
                return this.axis.categoryToIndex(category);
            }
            else {
                return this.getPropertyValue("startValue");
            }
        },
        /**
         * An index of start category or a start value.
         *
         * @todo Description (review)
         * @param {number}  value  Value
         */
        set: function (value) {
            if (this.setPropertyValue("startValue", value)) {
                if (this.axis) {
                    this.axis.invalidateDataRange();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryAxisBreak.prototype, "endValue", {
        /**
         * @return {number} Value
         */
        get: function () {
            var category = this.getPropertyValue("endCategory");
            if (category) {
                return this.axis.categoryToIndex(category);
            }
            else {
                return this.getPropertyValue("endValue");
            }
        },
        /**
         * An index of end category or a end value.
         *
         * @param {number}  value  Value
         */
        set: function (value) {
            if (this.setPropertyValue("endValue", value)) {
                if (this.axis) {
                    this.axis.invalidateDataRange();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    return CategoryAxisBreak;
}(__WEBPACK_IMPORTED_MODULE_0__AxisBreak__["a" /* AxisBreak */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["b" /* registry */].registeredClasses["CategoryAxisBreak"] = CategoryAxisBreak;
//# sourceMappingURL=CategoryAxisBreak.js.map

/***/ }),
/* 159 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DateAxisBreak; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ValueAxisBreak__ = __webpack_require__(110);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Registry__ = __webpack_require__(0);
/**
 * DateAxisBreak includes functionality to add breaks on a [[DateAxis]].
 *
 * A "break" can be used to "cut out" specific ranges of the axis scale, e.g.
 * weekends and holidays out of the Date-based axis.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Class used to define breaks for [[DateAxis]].
 *
 * A "break" can be used to "cut out" specific ranges of the axis scale, e.g.
 * weekends and holidays out of the Date-based axis.
 *
 * @see {@link IDateAxisBreakEvents} for a list of available events
 * @see {@link IDateAxisBreakAdapters} for a list of available Adapters
 * @important
 */
var DateAxisBreak = /** @class */ (function (_super) {
    __extends(DateAxisBreak, _super);
    /**
     * Constructor
     */
    function DateAxisBreak() {
        var _this = _super.call(this) || this;
        _this.className = "DateAxisBreak";
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(DateAxisBreak.prototype, "startDate", {
        /**
         * @return {Date} Start date
         */
        get: function () {
            return this.getPropertyValue("startDate");
        },
        /**
         * Starting date for the break.
         *
         * @param {Date} value Start date
         */
        set: function (value) {
            if (this.setPropertyValue("startDate", value)) {
                this.startValue = value.getTime();
                if (this.axis) {
                    this.axis.invalidateDataRange();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateAxisBreak.prototype, "endDate", {
        /**
         * @return {Date} End date
         */
        get: function () {
            return this.getPropertyValue("endDate");
        },
        /**
         * Ending date for the break.
         *
         * @param {Date} value End date
         */
        set: function (value) {
            if (this.setPropertyValue("endDate", value)) {
                this.endValue = value.getTime();
                if (this.axis) {
                    this.axis.invalidateDataRange();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    return DateAxisBreak;
}(__WEBPACK_IMPORTED_MODULE_0__ValueAxisBreak__["a" /* ValueAxisBreak */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["b" /* registry */].registeredClasses["DateAxisBreak"] = DateAxisBreak;
//# sourceMappingURL=DateAxisBreak.js.map

/***/ }),
/* 160 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Cursor; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_interaction_Interaction__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_interaction_Mouse__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_Utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_utils_Type__ = __webpack_require__(1);
/**
 * Cursor module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */








/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Main Cursor class with common cursor functionality.
 *
 * Chart-specific cursors must extend this class.
 *
 * @see {@link ICursorEvents} for a list of available events
 * @see {@link ICursorAdapters} for a list of available Adapters
 * @todo Add description, examples
 * @todo Should we allow changing `_generalBehavior`?
 */
var Cursor = /** @class */ (function (_super) {
    __extends(Cursor, _super);
    /**
     * Constructor
     */
    function Cursor() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * Current cursor position during selection.
         *
         * @type {IPoint}
         * @todo Better description
         */
        _this.point = { x: 0, y: 0 };
        _this.className = "Cursor";
        // Set defaults
        //this.background.fillOpacity = 0.5;
        //this.background.fill = color("#dadada");
        _this.width = Object(__WEBPACK_IMPORTED_MODULE_3__core_utils_Percent__["c" /* percent */])(100);
        _this.height = Object(__WEBPACK_IMPORTED_MODULE_3__core_utils_Percent__["c" /* percent */])(100);
        _this.shouldClone = false;
        _this.hide(0);
        _this.trackable = true;
        _this.clickable = true;
        _this.isMeasured = false;
        // Add events on body to trigger down and up events (to start zooming or
        // selection)
        var interaction = Object(__WEBPACK_IMPORTED_MODULE_1__core_interaction_Interaction__["b" /* getInteraction */])();
        _this._disposers.push(interaction.body.events.on("down", _this.handleCursorDown, _this));
        _this._disposers.push(interaction.body.events.on("up", _this.handleCursorUp, _this));
        _this._disposers.push(interaction.body.events.on("track", _this.handleCursorMove, _this));
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Handle pointer movement in document and update cursor position as needed.
     *
     * @ignore Exclude from docs
     * @param {IInteractionEvents["track"]} event Event
     */
    Cursor.prototype.handleCursorMove = function (event) {
        if (!this.interactionsEnabled) {
            return;
        }
        var local = __WEBPACK_IMPORTED_MODULE_6__core_utils_Utils__["documentPointToSprite"](event.pointer.point, this);
        this.triggerMove(local, true);
        return local;
    };
    /**
     * Places the cursor at specific point.
     *
     * If `triggeredByPointer == false` the cursor will stay there, regardless
     * movement of the actual pointer(s). This is useful when you want to
     * manually place cursor.
     *
     * @param {IPoint}   point               Point to place cursor at
     * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?
     */
    Cursor.prototype.triggerMove = function (point, triggeredByPointer) {
        this.triggerMoveReal(point, triggeredByPointer);
    };
    /**
     * Places the cursor at specific point.
     *
     * @param {IPoint}   point               Point to place cursor at
     * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?
     */
    Cursor.prototype.triggerMoveReal = function (point, triggeredByPointer) {
        if (this.point.x != point.x || this.point.y != point.y) {
            // hide cursor if it's out of bounds
            if (this.fitsToBounds(point)) {
                this.show(0);
            }
            else {
                // unless we are selecting (mouse is down)
                if (!this.downPoint) {
                    this.hide(0);
                }
            }
            this.point = point;
            if (this.visible) {
                this.getPositions();
                this.dispatch("cursorpositionchanged");
            }
        }
    };
    /**
     * Simulates pressing down (click/touch) action by a cursor.
     *
     * @param {IPoint}   point               Point of action
     * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?
     */
    Cursor.prototype.triggerDown = function (point, triggeredByPointer) {
        this.triggerDownReal(point, triggeredByPointer);
    };
    /**
     * Simulates pressing down (click/touch) action by a cursor.
     *
     * @param {IPoint}   point               Point of action
     * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?
     */
    Cursor.prototype.triggerDownReal = function (point, triggeredByPointer) {
        switch (this._generalBehavior) {
            case "zoom":
                this.dispatchImmediately("zoomstarted");
                break;
            case "select":
                this.dispatchImmediately("selectstarted");
                break;
            case "pan":
                this.dispatchImmediately("panstarted");
                Object(__WEBPACK_IMPORTED_MODULE_1__core_interaction_Interaction__["b" /* getInteraction */])().setGlobalStyle(__WEBPACK_IMPORTED_MODULE_4__core_interaction_Mouse__["a" /* MouseCursorStyle */].grabbing);
                break;
        }
    };
    /**
     * Simulates the action of release of the mouse down / touch.
     *
     * @param {IPoint}   point               Point of action
     * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?
     */
    Cursor.prototype.triggerUp = function (point, triggeredByPointer) {
        this.triggerUpReal(point, triggeredByPointer);
    };
    /**
     * Simulates the action of release of the mouse down / touch.
     *
     * @param {IPoint}   point               Point of action
     * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?
     */
    Cursor.prototype.triggerUpReal = function (point, triggeredByPointer) {
        this.updatePoint(this.upPoint);
        var interaction = Object(__WEBPACK_IMPORTED_MODULE_1__core_interaction_Interaction__["b" /* getInteraction */])();
        if (__WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["getDistance"](this.upPoint, this.downPoint) > interaction.getHitOption(this.interactions, "hitTolerance")) {
            switch (this._generalBehavior) {
                case "zoom":
                    this.dispatchImmediately("zoomended");
                    break;
                case "select":
                    this.dispatchImmediately("selectended");
                    break;
                case "pan":
                    this.dispatchImmediately("panended");
                    interaction.setGlobalStyle(__WEBPACK_IMPORTED_MODULE_4__core_interaction_Mouse__["a" /* MouseCursorStyle */].default);
                    break;
            }
        }
        else {
            this.dispatchImmediately("behaviorcanceled");
        }
        this.downPoint = undefined;
        this.updateSelection();
    };
    /**
     * Updates selection dimensions on size change.
     *
     * @ignore Exclude from docs
     */
    Cursor.prototype.updateSelection = function () {
    };
    /**
     * Updates cursors current positions.
     */
    Cursor.prototype.getPositions = function () {
        // positions are used by axes or series
        this.xPosition = this.point.x / this.innerWidth;
        this.yPosition = 1 - this.point.y / this.innerHeight;
    };
    /**
     * Handles pointer down event so we can start zoom or selection.
     *
     * @ignore Exclude from docs
     * @param {IInteractionEvents["down"]} event Original event
     */
    Cursor.prototype.handleCursorDown = function (event) {
        if (!this.interactionsEnabled) {
            return;
        }
        // Get local point
        var local = __WEBPACK_IMPORTED_MODULE_6__core_utils_Utils__["documentPointToSprite"](event.pointer.point, this);
        // We need to cancel the event to prevent gestures on touch devices
        if (event.event.cancelable && this.fitsToBounds(local)) {
            event.event.preventDefault();
        }
        // Make this happen
        this.triggerMove(local, true);
        this.triggerDown(local, true);
    };
    /**
     * Updates the coordinates of where pointer down event occurred
     * (was pressed).
     */
    Cursor.prototype.updatePoint = function (point) {
    };
    /**
     * Handles pointer up event - finishes zoom or selection action.
     *
     * @ignore Exclude from docs
     * @param {IInteractionEvents["up"]} event Original event
     */
    Cursor.prototype.handleCursorUp = function (event) {
        if (!this.interactionsEnabled) {
            this.downPoint = undefined;
            return;
        }
        var local = __WEBPACK_IMPORTED_MODULE_6__core_utils_Utils__["documentPointToSprite"](event.pointer.point, this);
        this.triggerMove(local, true);
        this.triggerUp(local, true);
    };
    Object.defineProperty(Cursor.prototype, "chart", {
        /**
         * @return {Chart} Chart
         */
        get: function () {
            return this._chart;
        },
        /**
         * A reference to a [[Chart]] the cursor belongs to.
         *
         * @param {Chart}  value  Chart
         */
        set: function (value) {
            this._chart = value;
            if (__WEBPACK_IMPORTED_MODULE_7__core_utils_Type__["hasValue"](this._chart.plotContainer)) {
                Object(__WEBPACK_IMPORTED_MODULE_1__core_interaction_Interaction__["b" /* getInteraction */])().lockElement(this._chart.plotContainer.interactions);
            }
        },
        enumerable: true,
        configurable: true
    });
    return Cursor;
}(__WEBPACK_IMPORTED_MODULE_0__core_Container__["a" /* Container */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__core_Registry__["b" /* registry */].registeredClasses["Cursor"] = Cursor;
//# sourceMappingURL=Cursor.js.map

/***/ }),
/* 161 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return RadarSeriesDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RadarSeries; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__LineSeries__ = __webpack_require__(113);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__ = __webpack_require__(8);
/**
 * Radar series module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[RadarSeries]].
 *
 * @see {@link DataItem}
 */
var RadarSeriesDataItem = /** @class */ (function (_super) {
    __extends(RadarSeriesDataItem, _super);
    /**
     * Constructor
     */
    function RadarSeriesDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "RadarSeriesDataItem";
        _this.setLocation("dateX", 0, 0);
        _this.setLocation("dateY", 0, 0);
        _this.setLocation("categoryX", 0, 0);
        _this.setLocation("categoryY", 0, 0);
        _this.applyTheme();
        return _this;
    }
    return RadarSeriesDataItem;
}(__WEBPACK_IMPORTED_MODULE_0__LineSeries__["b" /* LineSeriesDataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Defines [[Series]] for a radar graph.
 *
 * @see {@link IRadarSeriesEvents} for a list of available Events
 * @see {@link IRadarSeriesAdapters} for a list of available Adapters
 * @todo Example
 * @important
 */
var RadarSeries = /** @class */ (function (_super) {
    __extends(RadarSeries, _super);
    /**
     * Constructor
     */
    function RadarSeries() {
        var _this = _super.call(this) || this;
        _this.className = "RadarSeries";
        _this.connectEnds = true;
        _this.applyTheme();
        return _this;
    }
    /**
     * (Re)validates the whole series, effectively causing it to redraw.
     *
     * @ignore Exclude from docs
     */
    RadarSeries.prototype.validate = function () {
        // so that radius would be updated
        if (this.chart.invalid) {
            this.chart.validate();
        }
        _super.prototype.validate.call(this);
    };
    /**
     * Returns a new/empty DataItem of the type appropriate for this object.
     *
     * @see {@link DataItem}
     * @return {RadarSeriesDataItem} Data Item
     */
    RadarSeries.prototype.createDataItem = function () {
        return new RadarSeriesDataItem();
    };
    /**
     * [getPoint description]
     *
     * @todo Description
     * @param {RadarSeriesDataItem} dataItem  [description]
     * @param {string}              xKey      [description]
     * @param {string}              yKey      [description]
     * @param {number}              locationX [description]
     * @param {number}              locationY [description]
     * @param {string}              stackKeyX [description]
     * @param {string}              stackKeyY [description]
     */
    RadarSeries.prototype.getPoint = function (dataItem, xKey, yKey, locationX, locationY, stackKeyX, stackKeyY) {
        if (!stackKeyX) {
            stackKeyX = "valueX";
        }
        if (!stackKeyY) {
            stackKeyY = "valueY";
        }
        var x = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);
        var y = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);
        var radius = __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["getDistance"]({ x: x, y: y });
        var angle = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);
        var startAngle = this.chart.startAngle;
        var endAngle = this.chart.endAngle;
        //		angle = $math.fitToRange(angle, startAngle, endAngle);
        if (angle < startAngle || angle > endAngle) {
            return undefined;
        }
        else {
            return { x: radius * __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["cos"](angle), y: radius * __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["sin"](angle) };
        }
    };
    /**
     * [addPoints description]
     *
     * @todo Description
     * @param {IPoint[]}          points    [description]
     * @param {this["_dataItem"]} dataItem  [description]
     * @param {string}            xField    [description]
     * @param {string}            yField    [description]
     * @param {boolean}           backwards [description]
     */
    RadarSeries.prototype.addPoints = function (points, dataItem, xField, yField, backwards) {
        var point = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], dataItem.locations[yField]);
        if (point) {
            points.push(point);
        }
    };
    /**
     * Returns an SVG path to be used as a mask for the series.
     *
     * @return {string} SVG path
     */
    RadarSeries.prototype.getMaskPath = function () {
        var renderer = this.yAxis.renderer;
        return __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["arc"](renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);
    };
    /**
     * [drawSegment description]
     *
     * @todo Description
     * @param {LineSeriesSegment}  segment      [description]
     * @param {IPoint[]}           points       [description]
     * @param {IPoint[]}           closePoints  [description]
     */
    RadarSeries.prototype.drawSegment = function (segment, points, closePoints) {
        var axis = this.yAxis;
        var renderer = axis.renderer;
        if (this.connectEnds && Math.abs(renderer.endAngle - renderer.startAngle) == 360) {
            // adds one point to the beginning of closePoints array, if needed
            if (this.dataFields[this._xOpenField] ||
                this.dataFields[this._yOpenField] ||
                this.stacked) {
                points.push(points[0]);
                if (closePoints.length > 0) {
                    closePoints.unshift(closePoints[closePoints.length - 1]);
                }
            }
        }
        _super.prototype.drawSegment.call(this, segment, points, closePoints);
    };
    Object.defineProperty(RadarSeries.prototype, "connectEnds", {
        /**
         * @return {boolean} Connect?
         */
        get: function () {
            return this.getPropertyValue("connectEnds");
        },
        /**
         * Should the last and and first data points be connected, forming a complete
         * closed circle?
         *
         * @default true
         * @param {boolean}  value  Connect?
         */
        set: function (value) {
            this.setPropertyValue("connectEnds", value);
            this.invalidateDataRange();
        },
        enumerable: true,
        configurable: true
    });
    return RadarSeries;
}(__WEBPACK_IMPORTED_MODULE_0__LineSeries__["a" /* LineSeries */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["b" /* registry */].registeredClasses["RadarSeries"] = RadarSeries;
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["b" /* registry */].registeredClasses["RadarSeriesDataItem"] = RadarSeriesDataItem;
//# sourceMappingURL=RadarSeries.js.map

/***/ }),
/* 162 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LineSeriesSegment; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_utils_Object__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_rendering_Smoothing__ = __webpack_require__(46);
/**
 * Line series segment module.
 * @todo Add description about what this is
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */






/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Represents a line series segment.
 *
 * A line segment can be used to apply different properties to a part of the
 * line series, between two data points.
 *
 * @see {@link ILineSeriesSegmentEvents} for a list of available events
 * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters
 * @todo Example
 */
var LineSeriesSegment = /** @class */ (function (_super) {
    __extends(LineSeriesSegment, _super);
    /**
     * Constructor
     */
    function LineSeriesSegment() {
        var _this = 
        // Init
        _super.call(this) || this;
        _this.className = "LineSeriesSegment";
        // Set defaults
        _this.isMeasured = false;
        _this.interactionsEnabled = false;
        _this.layout = "none";
        // Create fill element
        var fillSprite = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__core_Sprite__["a" /* Sprite */]);
        _this.fillSprite = fillSprite;
        fillSprite.shouldClone = false;
        fillSprite.element = _this.paper.add("path");
        fillSprite.isMeasured = false;
        _this._disposers.push(fillSprite);
        // Create line element
        var strokeSprite = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__core_Sprite__["a" /* Sprite */]);
        _this.strokeSprite = strokeSprite;
        strokeSprite.shouldClone = false;
        strokeSprite.element = _this.paper.add("path");
        strokeSprite.isMeasured = false;
        _this._disposers.push(strokeSprite);
        return _this;
    }
    /**
     * Draws the series segment.
     *
     * @ignore Exclude from docs
     * @param {IPoint[]}  points       Points to connect
     * @param {IPoint[]}  closePoints  ?
     * @param {number}    smoothnessX  Horizontal bezier setting (?)
     * @param {number}    smoothnessY  Vertical bezier setting (?)
     */
    LineSeriesSegment.prototype.drawSegment = function (points, closePoints, smoothnessX, smoothnessY) {
        if (points.length > 0 && closePoints.length > 0) {
            var path = __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["moveTo"](points[0]) + new __WEBPACK_IMPORTED_MODULE_5__core_rendering_Smoothing__["b" /* Tension */](smoothnessX, smoothnessY).smooth(points);
            //if(this.strokeOpacity > 0 || this.strokeSprite.strokeOpacity > 0){ // not good, range stroke is not drawn then
            this.strokeSprite.element.attr({ "d": path });
            //}
            if (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible
                path += __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["lineTo"](closePoints[0]) + new __WEBPACK_IMPORTED_MODULE_5__core_rendering_Smoothing__["b" /* Tension */](smoothnessX, smoothnessY).smooth(closePoints);
                path += __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["lineTo"](points[0]);
                path += __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["closePath"]();
                this.fillSprite.element.attr({ "d": path });
            }
        }
    };
    /**
     * Copies properties from a [[Sprite]] to both line and fill elements.
     *
     * @param {Sprite} source Source [[Sprite]] to copy properties from
     */
    LineSeriesSegment.prototype.copyFrom = function (source) {
        var lineElement = this.strokeSprite;
        __WEBPACK_IMPORTED_MODULE_4__core_utils_Object__["copyProperties"](source, lineElement.properties, __WEBPACK_IMPORTED_MODULE_1__core_Sprite__["b" /* visualProperties */]);
        lineElement.fillOpacity = 0;
        var fillElement = this.fillSprite;
        __WEBPACK_IMPORTED_MODULE_4__core_utils_Object__["copyProperties"](source, fillElement.properties, __WEBPACK_IMPORTED_MODULE_1__core_Sprite__["b" /* visualProperties */]);
        fillElement.strokeOpacity = 0;
    };
    return LineSeriesSegment;
}(__WEBPACK_IMPORTED_MODULE_0__core_Container__["a" /* Container */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__core_Registry__["b" /* registry */].registeredClasses["LineSeriesSegment"] = LineSeriesSegment;
//# sourceMappingURL=LineSeriesSegment.js.map

/***/ }),
/* 163 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RadarCursor; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__XYCursor__ = __webpack_require__(112);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_Utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_Type__ = __webpack_require__(1);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();







/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Cursor for [[RadarChart]].
 *
 * @see {@link IRadarCursorEvents} for a list of available events
 * @see {@link IRadarCursorAdapters} for a list of available Adapters
 */
var RadarCursor = /** @class */ (function (_super) {
    __extends(RadarCursor, _super);
    /**
     * Constructor
     */
    function RadarCursor() {
        var _this = 
        // Init
        _super.call(this) || this;
        _this.className = "RadarCursor";
        _this.radius = Object(__WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__["c" /* percent */])(100);
        _this.innerRadius = Object(__WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__["c" /* percent */])(0);
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Checks if point is within bounds of a container.
     *
     * @ignore Exclude from docs
     * @param  {IPoint}   point  Point to check
     * @return {boolean}         Fits within container?
     */
    RadarCursor.prototype.fitsToBounds = function (point) {
        var radius = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["getDistance"](point);
        var angle = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["getAngle"](point);
        //if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){
        //return false;
        //}
        if (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) { // ok to add/remove some
            return true;
        }
        return false;
    };
    Object.defineProperty(RadarCursor.prototype, "startAngle", {
        /**
         * @return {number} Start angle
         */
        get: function () {
            return this.getPropertyValue("startAngle");
        },
        /**
         * Starting angle of the cursor's radial line.
         *
         * @param {number} value Start angle
         */
        set: function (value) {
            this.setPropertyValue("startAngle", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadarCursor.prototype, "endAngle", {
        /**
         * @return {number} End angle
         */
        get: function () {
            return this.getPropertyValue("endAngle");
        },
        /**
         * End angle of the cursor's radial line.
         *
         * @param {number} value End angle
         */
        set: function (value) {
            this.setPropertyValue("endAngle", value, true);
        },
        enumerable: true,
        configurable: true
    });
    RadarCursor.prototype.triggerMoveReal = function (point, triggeredByPointer) {
        if (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {
            this.updateLineX(this.point);
        }
        if (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {
            this.updateLineY(this.point);
        }
        this.updateSelection();
        _super.prototype.triggerMoveReal.call(this, point, triggeredByPointer);
    };
    /**
     * (Re)draws the horizontal (circular) cursor's line.
     *
     * @param {IPoint} point New target point
     */
    RadarCursor.prototype.updateLineX = function (point) {
        var radius = this.pixelRadius;
        var startAngle = this.startAngle;
        var endAngle = this.endAngle;
        if (radius > 0 && __WEBPACK_IMPORTED_MODULE_6__core_utils_Type__["isNumber"](startAngle) && __WEBPACK_IMPORTED_MODULE_6__core_utils_Type__["isNumber"](endAngle)) {
            var innerRadius = this.pixelInnerRadius;
            var angle = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["fitAngleToRange"](__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["getAngle"](point), startAngle, endAngle);
            var path = void 0;
            if (this.lineX && this.lineX.visible) {
                this.lineX.moveTo({ x: 0, y: 0 });
                // fill
                if (this.xAxis && this.fullWidthLineX) {
                    var startPoint = this.xAxis.currentItemStartPoint;
                    var endPoint = this.xAxis.currentItemEndPoint;
                    if (startPoint && endPoint) {
                        var fillStartAngle = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["fitAngleToRange"](__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["getAngle"](startPoint), startAngle, endAngle);
                        var fillEndAngle = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["fitAngleToRange"](__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["getAngle"](endPoint), startAngle, endAngle);
                        var arc = fillEndAngle - fillStartAngle;
                        // clockwise
                        // this is needed, normalizeAngle doesn't solve it
                        if (startAngle < endAngle) {
                            if (arc < 0) {
                                arc += 360;
                            }
                        }
                        // ccw
                        else {
                            if (arc > 0) {
                                arc -= 360;
                            }
                        }
                        angle -= arc / 2;
                        path = __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["moveTo"]({ x: innerRadius * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["cos"](angle), y: innerRadius * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["sin"](angle) })
                            + __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["lineTo"]({ x: radius * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["cos"](angle), y: radius * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["sin"](angle) })
                            + __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["arcTo"](angle, arc, radius)
                            + __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["lineTo"]({ x: innerRadius * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["cos"](angle + arc), y: innerRadius * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["sin"](angle + arc) })
                            + __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["arcTo"](angle + arc, -arc, innerRadius);
                    }
                }
                // line
                if (!path) {
                    path = __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["moveTo"]({ x: innerRadius * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["cos"](angle), y: innerRadius * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["sin"](angle) }) + __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["lineTo"]({ x: radius * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["cos"](angle), y: radius * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["sin"](angle) });
                }
                this.lineX.element.attr({ "d": path });
            }
        }
    };
    /**
     * (Re)draws the vertical (radial) cursor's line.
     *
     * @param {IPoint} point New target point
     */
    RadarCursor.prototype.updateLineY = function (point) {
        if (this.lineY && this.lineY.visible) {
            var startAngle = this.startAngle;
            var endAngle = this.endAngle;
            var truePixelRadius = this.truePixelRadius;
            var radius = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["fitToRange"](__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["getDistance"](point), 0, this.truePixelRadius);
            if (__WEBPACK_IMPORTED_MODULE_6__core_utils_Type__["isNumber"](radius) && __WEBPACK_IMPORTED_MODULE_6__core_utils_Type__["isNumber"](startAngle)) {
                this.lineY.moveTo({ x: 0, y: 0 });
                var path = void 0;
                var arc = endAngle - startAngle;
                if (this.yAxis && this.fullWidthLineY) {
                    // fill
                    var startPoint = this.yAxis.currentItemStartPoint;
                    var endPoint = this.yAxis.currentItemEndPoint;
                    if (startPoint && endPoint) {
                        var innerRadius = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["fitToRange"](__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["getDistance"](startPoint), 0, truePixelRadius);
                        radius = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["fitToRange"](__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["getDistance"](endPoint), 0, truePixelRadius);
                        path = __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["moveTo"]({ x: radius * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["cos"](startAngle), y: radius * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["sin"](startAngle) }) + __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["arcTo"](startAngle, arc, radius);
                        path += __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["moveTo"]({ x: innerRadius * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["cos"](endAngle), y: innerRadius * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["sin"](endAngle) }) + __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["arcTo"](endAngle, -arc, innerRadius);
                    }
                }
                if (!path) {
                    path = __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["moveTo"]({ x: radius * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["cos"](startAngle), y: radius * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["sin"](startAngle) }) + __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["arcTo"](startAngle, endAngle - startAngle, radius);
                }
                this.lineY.element.attr({ "d": path });
            }
        }
    };
    /**
     * Updates selection dimensions on size change.
     *
     * @ignore Exclude from docs
     */
    RadarCursor.prototype.updateSelection = function () {
        if (this._usesSelection) {
            var downPoint = this.downPoint;
            if (downPoint) {
                var point = this.point;
                var radius = this.pixelRadius;
                var truePixelRadius = this.truePixelRadius;
                var innerRadius = this.pixelInnerRadius;
                var startAngle = Math.min(this.startAngle, this.endAngle);
                var endAngle = Math.max(this.startAngle, this.endAngle);
                var downAngle = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["fitAngleToRange"](__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["getAngle"](downPoint), startAngle, endAngle);
                var angle = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["fitAngleToRange"](__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["getAngle"](point), startAngle, endAngle);
                var downRadius = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["getDistance"](downPoint);
                if (downRadius < truePixelRadius) {
                    var currentRadius = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["fitToRange"](__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["getDistance"](point), 0, truePixelRadius);
                    this._prevAngle = angle;
                    var path = __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["moveTo"]({ x: 0, y: 0 });
                    var downSin = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["sin"](downAngle);
                    var downCos = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["cos"](downAngle);
                    var sin = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["sin"](angle);
                    var cos = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["cos"](angle);
                    var behavior = this.behavior;
                    if (behavior == "zoomX" || behavior == "selectX") {
                        path += __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["lineTo"]({ x: radius * downCos, y: radius * downSin }) + __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["arcTo"](downAngle, angle - downAngle, radius) + __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["lineTo"]({ x: innerRadius * cos, y: innerRadius * sin }) + __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["arcTo"](angle, downAngle - angle, innerRadius);
                    }
                    else if (behavior == "zoomY" || behavior == "selectY") {
                        path = __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["moveTo"]({ x: currentRadius * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["cos"](startAngle), y: currentRadius * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["sin"](startAngle) }) + __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["arcTo"](startAngle, endAngle - startAngle, currentRadius) + __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["lineTo"]({ x: downRadius * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["cos"](endAngle), y: downRadius * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["sin"](endAngle) }) + __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["arcTo"](endAngle, startAngle - endAngle, downRadius) + __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["closePath"]();
                    }
                    else if (behavior == "zoomXY") {
                        path = __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["moveTo"]({ x: currentRadius * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["cos"](downAngle), y: currentRadius * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["sin"](downAngle) }) + __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["arcTo"](downAngle, angle - downAngle, currentRadius) + __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["lineTo"]({ x: downRadius * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["cos"](angle), y: downRadius * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["sin"](angle) }) + __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["arcTo"](angle, downAngle - angle, downRadius) + __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["closePath"]();
                    }
                    this.selection.element.attr({ "d": path });
                }
                this.selection.moveTo({ x: 0, y: 0 });
            }
        }
    };
    /**
     * Updates cursors current positions.
     */
    RadarCursor.prototype.getPositions = function () {
        // positions are used by axes or series
        var chart = this.chart;
        if (chart) {
            var innerRadius = this.pixelInnerRadius;
            var radius = this.truePixelRadius - innerRadius;
            var startAngle = this.startAngle;
            var endAngle = this.endAngle;
            var angle = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["fitAngleToRange"](__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["getAngle"](this.point), startAngle, endAngle);
            var xPosition = ((angle - startAngle) / (endAngle - startAngle));
            this.xPosition = xPosition;
            this.yPosition = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["fitToRange"]((__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["getDistance"](this.point) - innerRadius) / radius, 0, 1);
        }
    };
    /**
     * Overriding inherited method, so that nothing happens when it's triggered.
     *
     * @ignore Exclude from docs
     */
    RadarCursor.prototype.updatePoint = function (point) {
    };
    /**
     * Updates Cursor's position when axis tooltip changes horizontal position.
     *
     * @param {ISpriteEvents["positionchanged"]} event Axis event
     */
    RadarCursor.prototype.handleXTooltipPosition = function (event) {
        if (this.xAxis.cursorTooltipEnabled) {
            var tooltip = this.xAxis.tooltip;
            this.updateLineX(__WEBPACK_IMPORTED_MODULE_5__core_utils_Utils__["svgPointToSprite"]({ x: tooltip.pixelX, y: tooltip.pixelY }, this));
        }
    };
    /**
     * Updates Cursor's position when axis tooltip changes vertical position.
     *
     * @todo Description
     * @param {ISpriteEvents["positionchanged"]} event Axis event
     */
    RadarCursor.prototype.handleYTooltipPosition = function (event) {
        if (this.yAxis.cursorTooltipEnabled) {
            var tooltip = this.yAxis.tooltip;
            this.updateLineY(__WEBPACK_IMPORTED_MODULE_5__core_utils_Utils__["svgPointToSprite"]({ x: tooltip.pixelX, y: tooltip.pixelY }, this));
        }
    };
    /**
     * needs to be overriden
     * @ignore
     */
    RadarCursor.prototype.updateLinePositions = function (point) {
    };
    /**
     * [getRanges description]
     *
     * @todo Description
     */
    RadarCursor.prototype.getRanges = function () {
        var downPoint = this.downPoint;
        if (downPoint) {
            var upPoint = this.upPoint;
            var chart = this.chart;
            if (chart) {
                var radius = this.pixelRadius;
                var startAngle = this.startAngle;
                var endAngle = this.endAngle;
                var downAngle = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["fitAngleToRange"](__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["getAngle"](downPoint), this.startAngle, this.endAngle);
                var upAngle = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["fitAngleToRange"](__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["getAngle"](upPoint), this.startAngle, this.endAngle);
                var downRadius = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["fitToRange"](__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["getDistance"](downPoint), 0, radius);
                var upRadius = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["fitToRange"](__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["getDistance"](upPoint), 0, radius);
                var startX = 0;
                var endX = 1;
                var startY = 0;
                var endY = 1;
                var behavior = this.behavior;
                if (behavior == "zoomX" || behavior == "selectX" || behavior == "zoomXY" || behavior == "selectXY") {
                    var arc = endAngle - startAngle;
                    startX = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["round"]((downAngle - startAngle) / arc, 5);
                    endX = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["round"]((upAngle - startAngle) / arc, 5);
                }
                if (behavior == "zoomY" || behavior == "selectY" || behavior == "zoomXY" || behavior == "selectXY") {
                    startY = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["round"](downRadius / radius, 5);
                    endY = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["round"](upRadius / radius, 5);
                }
                this.xRange = { start: Math.min(startX, endX), end: Math.max(startX, endX) };
                this.yRange = { start: Math.min(startY, endY), end: Math.max(startY, endY) };
                if (this.behavior == "selectX" || this.behavior == "selectY" || this.behavior == "selectXY") {
                    // void
                }
                else {
                    this.selection.hide();
                }
            }
        }
    };
    /**
     * Overriding inherited method, so that nothing happens when `updateSize`
     * is triggered.
     *
     * RadarCursor is quite complicated and needs own sizing logic.
     *
     * @ignore Exclude from docs
     */
    RadarCursor.prototype.updateSize = function () { };
    Object.defineProperty(RadarCursor.prototype, "radius", {
        /**
         * @return {number} Outer radius
         */
        get: function () {
            return this.getPropertyValue("radius");
        },
        /**
         * Outer radius of the cursor's circular line.
         * Absolute (px) or relative ([[Percent]]).
         *
         * @param {number | Percent}  value  Outer radius
         */
        set: function (value) {
            this.setPropertyValue("radius", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadarCursor.prototype, "pixelRadius", {
        /**
         * Outer radius of the circular line in pixels.
         *
         * @return {number} Outer radius (px)
         * @readonly
         */
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_5__core_utils_Utils__["relativeRadiusToValue"](this.radius, this.truePixelRadius);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadarCursor.prototype, "truePixelRadius", {
        /**
         * [truePixelRadius description]
         *
         * @todo Description
         * @return {number} Outer radius (px)
         * @readonly
         */
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_5__core_utils_Utils__["relativeToValue"](Object(__WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__["c" /* percent */])(100), __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["min"](this.innerWidth / 2, this.innerHeight / 2));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadarCursor.prototype, "innerRadius", {
        /**
         * @return {number} Inner radius
         */
        get: function () {
            return this.getPropertyValue("innerRadius");
        },
        /**
         * Inner radius of the cursor's circular line.
         * Absolute (px) or relative ([[Percent]]).
         *
         * @param {number | Percent}  value  Inner radius
         */
        set: function (value) {
            this.setPropertyValue("innerRadius", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadarCursor.prototype, "pixelInnerRadius", {
        /**
         * Inner radius of the circular line in pixels.
         *
         * @return {number} Inner radius (px)
         * @readonly
         */
        get: function () {
            var innerRadius = this.innerRadius;
            if (innerRadius instanceof __WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__["a" /* Percent */]) {
                innerRadius = Object(__WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__["c" /* percent */])(100 * innerRadius.value * this.chart.innerRadiusModifyer);
            }
            return __WEBPACK_IMPORTED_MODULE_5__core_utils_Utils__["relativeRadiusToValue"](innerRadius, this.truePixelRadius) || 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *
     * @ignore Exclude from docs
     */
    RadarCursor.prototype.fixPoint = function (point) {
        // overriding xy method
        return point;
    };
    return RadarCursor;
}(__WEBPACK_IMPORTED_MODULE_0__XYCursor__["a" /* XYCursor */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__core_Registry__["b" /* registry */].registeredClasses["RadarCursor"] = RadarCursor;
//# sourceMappingURL=RadarCursor.js.map

/***/ }),
/* 164 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AxisRendererRadial; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__AxisRendererY__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__CategoryAxis__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_elements_WavedCircle__ = __webpack_require__(147);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_Disposer__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_utils_Type__ = __webpack_require__(1);
/**
 * Module, defining Axis Renderer for radial axes.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */










/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * A renderer for radial axis.
 */
var AxisRendererRadial = /** @class */ (function (_super) {
    __extends(AxisRendererRadial, _super);
    /**
     * Constructor.
     *
     * @param {Axis} axis Related axis
     */
    function AxisRendererRadial() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * A related chart.
         *
         * @todo Description
         * @type {MutableValueDisposer}
         */
        _this._chart = new __WEBPACK_IMPORTED_MODULE_3__core_utils_Disposer__["d" /* MutableValueDisposer */]();
        /**
         * @ignore
         */
        _this.pixelRadiusReal = 0;
        _this.className = "AxisRendererRadial";
        _this.isMeasured = false;
        _this.startAngle = -90;
        _this.endAngle = 270;
        _this.minGridDistance = 30;
        _this.gridType = "circles";
        _this.axisAngle = -90;
        _this.isMeasured = false;
        _this.layout = "none";
        _this.radius = Object(__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__["c" /* percent */])(100);
        _this.line.strokeOpacity = 0;
        _this.labels.template.horizontalCenter = "middle";
        _this._disposers.push(_this._chart);
        _this.applyTheme();
        return _this;
    }
    /**
     * Validates Axis renderer.
     *
     * @ignore Exclude from docs
     * @todo Description (review)
     */
    AxisRendererRadial.prototype.validate = function () {
        // so that radius would be updated
        if (this.chart && this.chart.invalid) {
            this.chart.validate();
        }
        _super.prototype.validate.call(this);
    };
    Object.defineProperty(AxisRendererRadial.prototype, "axisLength", {
        /**
         * Returns actual length of the Axis, in pixels.
         *
         * @return {number} Length (px)
         */
        get: function () {
            return this.pixelRadius - this.pixelInnerRadius;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRendererRadial.prototype, "radius", {
        /**
         * @return {number | Percent} Outer radius
         */
        get: function () {
            return this.getPropertyValue("radius");
        },
        /**
         * Outer radius of the axis.
         *
         * Can be absolute (px) or relative ([[Percent]]).
         *
         * @param {number | Percent}  value  Outer radius
         */
        set: function (value) {
            this.setPropertyValue("radius", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRendererRadial.prototype, "pixelRadius", {
        /**
         * Outer radius in pixels.
         *
         * @return {number} Outer radius (px)
         */
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__["relativeRadiusToValue"](this.radius, this.pixelRadiusReal);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRendererRadial.prototype, "innerRadius", {
        /**
         * @return {number | Percent} Inner radius
         */
        get: function () {
            return this.getPropertyValue("innerRadius");
        },
        /**
         * Inner radius of the axis.
         *
         * Can be absolute (px) or relative ([[Percent]]).
         *
         * @param {number | Percent}  value  Outer radius
         */
        set: function (value) {
            this.setPropertyValue("innerRadius", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRendererRadial.prototype, "pixelInnerRadius", {
        /**
         * Inner radius in pixels.
         *
         * @return {number} Inner radius (px)
         */
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__["relativeRadiusToValue"](this.innerRadius, this.pixelRadiusReal) || 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRendererRadial.prototype, "chart", {
        /**
         * @ignore Exclude from docs
         * @return {RadarChart} Chart
         */
        get: function () {
            return this._chart.get();
        },
        /**
         * Chart, associated with the Axis.
         *
         * @ignore Exclude from docs
         * @param {RadarChart} value Chart
         */
        set: function (chart) {
            this._chart.set(chart, null);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Converts relative position on axis to point coordinates.
     *
     * @param  {number}  position  Position (0-1)
     * @return {IPoint}            Point
     */
    AxisRendererRadial.prototype.positionToPoint = function (position) {
        var radius = __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["fitToRange"](this.positionToCoordinate(position), 0, Infinity);
        return { x: radius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["cos"](this.axisAngle), y: radius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["sin"](this.axisAngle) };
    };
    /**
     * Updates and positions the axis line element.
     *
     * @ignore Exclude from docs
     */
    AxisRendererRadial.prototype.updateAxisLine = function () {
        this.line.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__["moveTo"]({ x: this.pixelInnerRadius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["cos"](this.axisAngle), y: this.pixelInnerRadius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["sin"](this.axisAngle) }) + __WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__["lineTo"]({ x: this.pixelRadius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["cos"](this.axisAngle), y: this.pixelRadius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["sin"](this.axisAngle) }) });
        var title = this.axis.title;
        title.valign = "none";
        title.horizontalCenter = "middle";
        title.verticalCenter = "bottom";
        title.y = -this.axisLength / 2;
        var rotation = 90;
        if (this.opposite) {
            if (!this.inside) {
                rotation = -90;
            }
        }
        else {
            if (this.inside) {
                rotation = -90;
            }
        }
        title.rotation = rotation;
    };
    /**
     * Updates and positions a grid element.
     *
     * @ignore Exclude from docs
     * @param {Grid}    grid         Grid element
     * @param {number}  position     Starting position
     * @param {number}  endPosition  End position
     */
    AxisRendererRadial.prototype.updateGridElement = function (grid, position, endPosition) {
        position = position + (endPosition - position) * grid.location;
        var point = this.positionToPoint(position);
        var path;
        var radius = __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["getDistance"](point);
        var startAngle = this.startAngle;
        var endAngle = this.endAngle;
        if (__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__["isNumber"](radius) && grid.element) {
            var chart = this.chart;
            var xAxis = chart.xAxes.getIndex(0);
            var count = chart.dataItems.length;
            var series = chart.series.getIndex(0);
            // polygons are only possible if x axis is present
            // @todo: review this
            if (this.gridType == "polygons" && count > 0 && series && xAxis && xAxis instanceof __WEBPACK_IMPORTED_MODULE_1__CategoryAxis__["a" /* CategoryAxis */]) {
                var gridLocation = xAxis.renderer.grid.template.location;
                var angle = xAxis.getAngle(series.dataItems.getIndex(0), "categoryX", gridLocation);
                path = __WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__["moveTo"]({ x: radius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["cos"](angle), y: radius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["sin"](angle) });
                var count_1 = chart.dataItems.length;
                for (var i = 1; i < count_1; i++) {
                    angle = xAxis.getAngle(series.dataItems.getIndex(i), "categoryX", gridLocation);
                    path += __WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__["lineTo"]({ x: radius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["cos"](angle), y: radius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["sin"](angle) });
                }
                angle = xAxis.getAngle(series.dataItems.getIndex(count_1 - 1), "categoryX", xAxis.renderer.cellEndLocation);
                path += __WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__["lineTo"]({ x: radius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["cos"](angle), y: radius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["sin"](angle) });
            }
            else {
                path = __WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__["moveTo"]({ x: radius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["cos"](startAngle), y: radius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["sin"](startAngle) }) + __WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__["arcTo"](startAngle, endAngle - startAngle, radius, radius);
            }
            grid.element.attr({ "d": path });
        }
        this.toggleVisibility(grid, position, 0, 1);
    };
    /**
     * Updates and positions a label element.
     *
     * @ignore Exclude from docs
     * @param {AxisLabel}  label        Label element
     * @param {number}     position     Starting position
     * @param {number}     endPosition  Ending position
     */
    AxisRendererRadial.prototype.updateLabelElement = function (label, position, endPosition) {
        position = position + (endPosition - position) * label.location;
        var point = this.positionToPoint(position);
        this.positionItem(label, point);
        this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);
    };
    /**
     * Updates and positions the base grid element.
     *
     * @ignore Exclude from docs
     */
    AxisRendererRadial.prototype.updateBaseGridElement = function () {
        // @todo? zero grid for radar chart, is it needed?
    };
    /**
     * Checks if point is within bounds of a container.
     *
     * @ignore Exclude from docs
     * @param  {IPoint}   point Point coordinates
     * @return {boolean}         Fits?
     */
    AxisRendererRadial.prototype.fitsToBounds = function (point) {
        return true;
    };
    Object.defineProperty(AxisRendererRadial.prototype, "startAngle", {
        /**
         * @return {number} Start angle
         */
        get: function () {
            return this.getPropertyValue("startAngle");
        },
        /**
         * Start angle of the axis.
         *
         * @todo Description (units)
         * @param {number} value Start angle
         */
        set: function (value) {
            // do not normalize angel here!
            this.setPropertyValue("startAngle", value);
            this.invalidateAxisItems();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRendererRadial.prototype, "endAngle", {
        /**
         * @return {number} End angle
         */
        get: function () {
            return this.getPropertyValue("endAngle");
        },
        /**
         * End angle of the axis.
         *
         * @todo Description (units)
         * @param {number}  value  end angle
         */
        set: function (value) {
            // do not normalize angel here!
            this.setPropertyValue("endAngle", value);
            this.invalidateAxisItems();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRendererRadial.prototype, "axisAngle", {
        /**
         * @return {number} Axis angle
         */
        get: function () {
            return this.getPropertyValue("axisAngle");
            //return $math.fitToRange(this.getPropertyValue("axisAngle"), this.startAngle, this.endAngle); // no good, as less flexible
        },
        /**
         * Angle of the radial axis.
         *
         * @todo Description (units)
         * @param {number}  value  Axis angle
         */
        set: function (value) {
            this.setPropertyValue("axisAngle", __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["normalizeAngle"](value));
            this.invalidateAxisItems();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRendererRadial.prototype, "gridType", {
        /**
         * @type {"circles" | "polygons"} Grid type
         */
        get: function () {
            var axis = this.chart.xAxes.getIndex(0);
            if (axis instanceof __WEBPACK_IMPORTED_MODULE_1__CategoryAxis__["a" /* CategoryAxis */]) {
                return this.getPropertyValue("gridType");
            }
            else {
                return "circles";
            }
        },
        // polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart
        /**
         * Grid type for radial axis.
         *
         * A grid on radia axis can either be perfect circles ("circles"), or
         * straight lines ("polygons").
         *
         * @param {"circles" | "polygons"}  value  Grid type
         */
        set: function (value) {
            this.setPropertyValue("gridType", value, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * [getPositionRangePath description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param  {number}  startPosition  Starting position
     * @param  {number}  endPosition    End position
     * @return {string}                 SVG path
     */
    AxisRendererRadial.prototype.getPositionRangePath = function (startPosition, endPosition) {
        var pixelInnerRadius = this.pixelInnerRadius;
        var pixelRadius = this.axisLength + pixelInnerRadius;
        var innerRadius = __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["fitToRange"](this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);
        var radius = __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["fitToRange"](this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius);
        //let angleCount: number = this.angleCount;
        var startAngle = this.startAngle;
        var endAngle = this.endAngle;
        var arc = endAngle - startAngle;
        var path;
        var chart = this.chart;
        var xAxis = chart.xAxes.getIndex(0);
        var count = chart.dataItems.length;
        var series = chart.series.getIndex(0);
        // polygons are only possible if x axis is present
        // @todo: review this
        if (this.gridType == "polygons" && count > 0 && series && xAxis && xAxis instanceof __WEBPACK_IMPORTED_MODULE_1__CategoryAxis__["a" /* CategoryAxis */]) {
            var gridLocation = xAxis.renderer.grid.template.location;
            var angle = xAxis.getAngle(series.dataItems.getIndex(0), "categoryX", gridLocation);
            path = __WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__["moveTo"]({ x: radius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["cos"](angle), y: radius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["sin"](angle) });
            var count_2 = chart.dataItems.length;
            for (var i = 1; i < count_2; i++) {
                angle = xAxis.getAngle(series.dataItems.getIndex(i), "categoryX", gridLocation);
                path += __WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__["lineTo"]({ x: radius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["cos"](angle), y: radius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["sin"](angle) });
            }
            angle = xAxis.getAngle(series.dataItems.getIndex(count_2 - 1), "categoryX", xAxis.renderer.cellEndLocation);
            path += __WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__["lineTo"]({ x: radius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["cos"](angle), y: radius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["sin"](angle) });
            path += __WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__["moveTo"]({ x: innerRadius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["cos"](angle), y: innerRadius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["sin"](angle) });
            for (var i = count_2 - 1; i >= 0; i--) {
                angle = xAxis.getAngle(series.dataItems.getIndex(i), "categoryX", gridLocation);
                path += __WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__["lineTo"]({ x: innerRadius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["cos"](angle), y: innerRadius * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["sin"](angle) });
            }
        }
        else {
            path = __WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__["arc"](startAngle, arc, radius, innerRadius);
        }
        return path;
    };
    /**
     * Updates and positions an axis break element.
     *
     * @ignore Exclude from docs
     * @param {AxisBreak} axisBreak Break element
     */
    AxisRendererRadial.prototype.updateBreakElement = function (axisBreak) {
        // @todo: someday we might need axis break when gridType is polygons
        var startLine = axisBreak.startLine;
        var endLine = axisBreak.endLine;
        var fillShape = axisBreak.fillShape;
        var startPoint = axisBreak.startPoint;
        var endPoint = axisBreak.endPoint;
        startLine.radius = Math.abs(startPoint.y);
        endLine.radius = Math.abs(endPoint.y);
        fillShape.radius = Math.abs(endPoint.y);
        fillShape.innerRadius = Math.abs(startPoint.y);
    };
    /**
     * Creates visual elements for and axis break.
     *
     * @ignore Exclude from docs
     * @param {AxisBreak} axisBreak Axis break
     */
    AxisRendererRadial.prototype.createBreakSprites = function (axisBreak) {
        axisBreak.startLine = new __WEBPACK_IMPORTED_MODULE_2__core_elements_WavedCircle__["a" /* WavedCircle */]();
        axisBreak.endLine = new __WEBPACK_IMPORTED_MODULE_2__core_elements_WavedCircle__["a" /* WavedCircle */]();
        axisBreak.fillShape = new __WEBPACK_IMPORTED_MODULE_2__core_elements_WavedCircle__["a" /* WavedCircle */]();
    };
    /**
     * Updates some of the Axis tooltip's visual properties, related to
     * rendering of the Axis.
     *
     * @todo Description (review)
     * @ignore Exclude from docs
     */
    AxisRendererRadial.prototype.updateTooltip = function () {
        var axis = this.axis;
        if (axis) {
            var bigNum = 4000;
            var bbx = -4000;
            var bby = -4000;
            var bbw = bigNum * 2;
            var bbh = bigNum * 2;
            var axisAngle = this.axisAngle;
            if (axisAngle < 0) {
                axisAngle += 360;
            }
            var tooltipOrientation = "vertical";
            if ((axisAngle > 45 && axisAngle < 135) || (axisAngle > 225 && axisAngle < 315)) {
                tooltipOrientation = "horizontal";
            }
            this.axis.updateTooltip(tooltipOrientation, { x: bbx, y: bby, width: bbw, height: bbh });
        }
    };
    /**
     * Updates and positions a tick element.
     *
     * @ignore Exclude from docs
     * @param {AxisTick}  tick      Tick element
     * @param {number}    position  Position
     */
    AxisRendererRadial.prototype.updateTickElement = function (tick, position) {
        var point = this.positionToPoint(position);
        if (tick.element) {
            var angle = __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["normalizeAngle"](this.axisAngle + 90);
            if (angle / 90 != Math.round(angle / 90)) {
                tick.pixelPerfect = false;
            }
            else {
                tick.pixelPerfect = true;
            }
            var tickLength = -tick.length;
            if (tick.inside) {
                tickLength *= -1;
            }
            tick.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__["moveTo"]({ x: 0, y: 0 }) + __WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__["lineTo"]({ x: tickLength * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["cos"](angle), y: tickLength * __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["sin"](angle) }) });
        }
        this.positionItem(tick, point);
        this.toggleVisibility(tick, position, 0, 1);
    };
    /**
     * Converts a position on the axis to a coordinate in pixels.
     *
     * @ignore Exclude from docs
     * @param  {number}  position  Position (0-1)
     * @return {number}            Coordinate (px)
     */
    AxisRendererRadial.prototype.positionToCoordinate = function (position) {
        var coordinate;
        var axis = this.axis;
        var axisFullLength = axis.axisFullLength;
        var innerRadius = this.pixelInnerRadius;
        if (axis.renderer.inversed) {
            coordinate = (axis.end - position) * axisFullLength + innerRadius;
        }
        else {
            coordinate = (position - axis.start) * axisFullLength + innerRadius;
        }
        return __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["round"](coordinate, 1);
    };
    return AxisRendererRadial;
}(__WEBPACK_IMPORTED_MODULE_0__AxisRendererY__["a" /* AxisRendererY */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_5__core_Registry__["b" /* registry */].registeredClasses["AxisRendererRadial"] = AxisRendererRadial;
//# sourceMappingURL=AxisRendererRadial.js.map

/***/ }),
/* 165 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ClockHand; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_elements_Circle__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_elements_Trapezoid__ = __webpack_require__(146);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_Disposer__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__ = __webpack_require__(1);
/**
 * Functionality for drawing simple ClockHands
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */









/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * ClockHand class is capable of drawing a simple pointy shape with optionally
 * rounderd corners and an icon.
 *
 * @see {@link IClockHandEvents} for a list of available events
 * @see {@link IClockHandAdapters} for a list of available Adapters
 * @todo Improve
 * @important
 */
var ClockHand = /** @class */ (function (_super) {
    __extends(ClockHand, _super);
    /**
     * Constructor
     */
    function ClockHand() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * An Axis hand is related to.
         *
         * @type {MutableValueDisposer<Axis>}
         */
        _this._axis = new __WEBPACK_IMPORTED_MODULE_3__core_utils_Disposer__["d" /* MutableValueDisposer */]();
        _this.className = "ClockHand";
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        _this.fill = interfaceColors.getFor("alternativeBackground");
        _this.stroke = _this.fill;
        var pin = new __WEBPACK_IMPORTED_MODULE_1__core_elements_Circle__["a" /* Circle */]();
        pin.radius = 5;
        _this.pin = pin;
        _this.isMeasured = false;
        _this.startWidth = 5;
        _this.endWidth = 1;
        _this.width = Object(__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__["c" /* percent */])(100);
        _this.height = Object(__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__["c" /* percent */])(100);
        _this.radius = Object(__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__["c" /* percent */])(100);
        _this.innerRadius = Object(__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__["c" /* percent */])(0);
        var hand = new __WEBPACK_IMPORTED_MODULE_2__core_elements_Trapezoid__["a" /* Trapezoid */]();
        _this.hand = hand;
        _this._disposers.push(_this._axis);
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Re(validates) the clock hand, effectively redrawing it.
     *
     * @ignore Exclude from docs
     */
    ClockHand.prototype.validate = function () {
        _super.prototype.validate.call(this);
        var hand = this.hand;
        hand.width = this.pixelWidth;
        var h = Math.max(this.startWidth, this.endWidth);
        hand.height = h;
        hand.leftSide = Object(__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__["c" /* percent */])(this.startWidth / h * 100);
        hand.rightSide = Object(__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__["c" /* percent */])(this.endWidth / h * 100);
        if (this.axis) {
            var renderer = this.axis.renderer;
            var x0 = __WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__["relativeRadiusToValue"](this.innerRadius, renderer.pixelRadius);
            var x1 = __WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__["relativeRadiusToValue"](this.radius, renderer.pixelRadius);
            hand.x = x0;
            hand.y = -h / 2;
            hand.width = x1 - x0;
        }
    };
    Object.defineProperty(ClockHand.prototype, "pin", {
        /**
         * @return {Circle} Pin element
         */
        get: function () {
            return this._pin;
        },
        /**
         * A circle element used as hand's base. (pin)
         *
         * @param {Circle}  pin  Pin element
         */
        set: function (pin) {
            if (this._pin) {
                this.removeDispose(this._pin);
            }
            if (pin) {
                this._pin = pin;
                pin.parent = this;
                this._disposers.push(pin);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClockHand.prototype, "hand", {
        /**
         * @return {Trapezoid} Hand element
         */
        get: function () {
            return this._hand;
        },
        /**
         * A trapezoid shape used for hand itself.
         *
         * The shape of the trapezoid is controlled by ClockHand's `startWidth` and
         * `endWidth` properties.
         *
         * Set `endWidth` to 1 (px) to make it pointy.
         *
         * @param {Trapezoid}  hand  Hand element
         */
        set: function (hand) {
            if (this._hand) {
                this.removeDispose(this._hand);
            }
            if (hand) {
                this._hand = hand;
                hand.parent = this;
                this._disposers.push(hand);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClockHand.prototype, "radius", {
        /**
         * @return {number} Radius
         */
        get: function () {
            return this.getPropertyValue("radius");
        },
        /**
         * Radius of the hand's outer end. (tip)
         *
         * Absolute (px) or relative ([[Percent]]).
         *
         * @default Percent(0)
         * @param {number | Percent}  value  Radius
         */
        set: function (value) {
            this.setPropertyValue("radius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClockHand.prototype, "innerRadius", {
        /**
         * @return {number} Radius
         */
        get: function () {
            return this.getPropertyValue("innerRadius");
        },
        /**
         * Radius of the hand's inner end. (base)
         *
         * Absolute (px) or relative ([[Percent]]).
         *
         * @default Percent(0)
         * @param {number | Percent}  value  Radius
         */
        set: function (value) {
            this.setPropertyValue("innerRadius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClockHand.prototype, "startWidth", {
        /**
         * @return {number} Width (px)
         */
        get: function () {
            return this.getPropertyValue("startWidth");
        },
        /**
         * Width, in pixels, of the clock hand's inner end. (base)
         *
         * @default 5
         * @param {number}  value  Width (px)
         */
        set: function (value) {
            this.setPropertyValue("startWidth", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClockHand.prototype, "endWidth", {
        /**
         * @return {number} Width (px)
         */
        get: function () {
            return this.getPropertyValue("endWidth");
        },
        /**
         * Width, in pixels, of the clock hand's outer end. (tip)
         *
         * @default 1
         * @param {number}  value  Width (px)
         */
        set: function (value) {
            this.setPropertyValue("endWidth", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClockHand.prototype, "rotationDirection", {
        /**
         * @return {"any" | "clockWise" | "counterClockWise"} rotationDirection
         */
        get: function () {
            return this.getPropertyValue("rotationDirection");
        },
        /**
         * Rotation direction
         *
         * @default any
         * @param {"any" | "clockWise" | "counterClockWise"}  value
         */
        set: function (value) {
            this.setPropertyValue("rotationDirection", value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Moves clock hand to particular value.
     *
     * If `duration` is set to a number in milliseconds, the hand will move
     * to the new position gracefully, rather than jumping rigth to it.
     *
     * Alternatively, you can also set `value` directly.
     *
     * @param {any}     value     New value
     * @param {number}  duration  Animation duration (ms)
     * @param {(value:number)=>number}  easing  Animation easing function
     */
    ClockHand.prototype.showValue = function (value, duration, easing) {
        this._value = value;
        if (value != undefined) {
            if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](duration)) {
                duration = 0;
            }
            if (this.axis) {
                var renderer = this.axis.renderer;
                var newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));
                var currentAngle = this.rotation;
                if (this.rotationDirection == "clockWise") {
                    if (newAngle < currentAngle) {
                        this.rotation = currentAngle - 360;
                    }
                }
                if (this.rotationDirection == "counterClockWise") {
                    if (newAngle > currentAngle) {
                        this.rotation = currentAngle + 360;
                    }
                }
                this.animate({ property: "rotation", to: newAngle }, duration, easing);
            }
        }
    };
    Object.defineProperty(ClockHand.prototype, "value", {
        /**
         * @return {any} Value
         */
        get: function () {
            return this._value;
        },
        /**
         * A current value clock hand is pointing to.
         *
         * @param {any}  value  Value
         */
        set: function (value) {
            this.showValue(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClockHand.prototype, "axis", {
        /**
         * @return {Axis} Axis
         */
        get: function () {
            return this._axis.get();
        },
        /**
         * An Axis clock hand is associated with.
         *
         * Hand's `value` relates to values on the Axis.
         *
         * @param {Axis}  axis  Axis
         */
        set: function (axis) {
            var _this = this;
            if (this.axis != axis) {
                this._axis.set(axis, new __WEBPACK_IMPORTED_MODULE_3__core_utils_Disposer__["c" /* MultiDisposer */]([
                    axis.events.on("datavalidated", function () { return _this.updateValue(); }),
                    axis.events.on("datarangechanged", function () { return _this.updateValue(); }),
                    axis.events.on("valueschanged", function () { return _this.updateValue(); }),
                    axis.events.on("propertychanged", function () { return _this.invalidate(); })
                ]));
            }
            if (axis) {
                var chart = axis.chart;
                if (chart) {
                    this.rotation = chart.startAngle;
                }
            }
            this.parent = axis.renderer;
            this.zIndex = 5;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Triggers `value` accessor, so that Hand animates to new position, in case
     * value has changed.
     *
     * @ignore Exclude from docs
     */
    ClockHand.prototype.updateValue = function () {
        this.value = this.value;
    };
    /**
 * Processes JSON-based config before it is applied to the object.
 *
 * @ignore Exclude from docs
 * @param {object}  config  Config
 */
    ClockHand.prototype.processConfig = function (config) {
        if (config) {
            // Connect clock hands with axes
            if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["hasValue"](config.axis) && __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isString"](config.axis) && this.map.hasKey(config.axis)) {
                config.axis = this.map.getKey(config.axis);
            }
        }
        _super.prototype.processConfig.call(this, config);
    };
    return ClockHand;
}(__WEBPACK_IMPORTED_MODULE_0__core_Container__["a" /* Container */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_5__core_Registry__["b" /* registry */].registeredClasses["ClockHand"] = ClockHand;
//# sourceMappingURL=ClockHand.js.map

/***/ }),
/* 166 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return PieChartDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PieChart; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__SerialChart__ = __webpack_require__(109);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__series_PieSeries__ = __webpack_require__(114);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_Utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_utils_Type__ = __webpack_require__(1);
/**
 * Pie chart module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */








/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[PieChart]].
 *
 * @see {@link DataItem}
 */
var PieChartDataItem = /** @class */ (function (_super) {
    __extends(PieChartDataItem, _super);
    /**
     * Constructor
     */
    function PieChartDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "PieChartDataItem";
        _this.applyTheme();
        return _this;
    }
    return PieChartDataItem;
}(__WEBPACK_IMPORTED_MODULE_0__SerialChart__["b" /* SerialChartDataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a Pie chart.
 *
 * ```TypeScript
 * // Includes
 * import * as am4core from "@amcharts/amcharts4/core";
 * import * as am4charts from "@amcharts/amcharts4/charts";
 *
 * // Create chart
 * let chart = am4core.create("chartdiv", am4charts.PieChart);
 *
 * // Set data
 * chart.data = [{
 * 	"country": "Lithuania",
 * 	"litres": 501.9
 * }, {
 * 	"country": "Czech Republic",
 * 	"litres": 301.9
 * }, {
 * 	"country": "Ireland",
 * 	"litres": 201.1
 * }];
 *
 * // Create series
 * let series = chart.series.push(new am4charts.PieSeries());
 * series.dataFields.value = "litres";
 * series.dataFields.category = "country";
 * ```
 * ```JavaScript
 * // Create chart
 * var chart = am4core.create("chartdiv", am4charts.PieChart);
 *
 * // The following would work as well:
 * // var chart = am4core.create("chartdiv", "PieChart");
 *
 * // Set data
 * chart.data = [{
 * 	"country": "Lithuania",
 * 	"litres": 501.9
 * }, {
 * 	"country": "Czech Republic",
 * 	"litres": 301.9
 * }, {
 * 	"country": "Ireland",
 * 	"litres": 201.1
 * }];
 *
 * // Create series
 * var series = chart.series.push(new am4charts.PieSeries());
 * series.dataFields.value = "litres";
 * series.dataFields.category = "country";
 * ```
 * ```JSON
 * var chart = am4core.createFromConfig({
 *
 * 	// Series
 * 	"series": [{
 * 		"type": "PieSeries",
 * 		"dataFields": {
 * 			"value": "litres",
 * 			"category": "country"
 * 		}
 * 	}],
 *
 * 	// Data
 * 	"data": [{
 * 		"country": "Lithuania",
 * 		"litres": 501.9
 * 	}, {
 * 		"country": "Czech Republic",
 * 		"litres": 301.9
 * 	}, {
 * 		"country": "Ireland",
 * 		"litres": 201.1
 * 	}]
 *
 * }, "chartdiv", "PieChart");
 * ```
 *
 * @see {@link IPieChartEvents} for a list of available Events
 * @see {@link IPieChartAdapters} for a list of available Adapters
 * @important
 */
var PieChart = /** @class */ (function (_super) {
    __extends(PieChart, _super);
    /**
     * Constructor
     */
    function PieChart() {
        var _this = 
        // Init
        _super.call(this) || this;
        _this.className = "PieChart";
        // Set defaults
        _this.innerRadius = 0;
        _this.radius = Object(__WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__["c" /* percent */])(80);
        _this.align = "none";
        _this.valign = "none";
        _this.startAngle = -90;
        _this.endAngle = 270;
        var seriesContainer = _this.seriesContainer;
        seriesContainer.isMeasured = true;
        seriesContainer.valign = "middle";
        seriesContainer.align = "center";
        seriesContainer.layout = "absolute";
        seriesContainer.width = undefined;
        seriesContainer.height = undefined;
        // so that the pie is always drawn, even the legend wants all the space
        _this.chartContainer.minHeight = 50;
        _this.chartContainer.minWidth = 50;
        _this.chartContainer.events.on("maxsizechanged", function () {
            _this.invalidate();
        });
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Sets defaults that instantiate some objects that rely on parent, so they
     * cannot be set in constructor.
     */
    PieChart.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);
        // Add a default screen reader title for accessibility
        // This will be overridden in screen reader if there are any `titles` set
        if (!__WEBPACK_IMPORTED_MODULE_7__core_utils_Type__["hasValue"](this.readerTitle)) {
            this.readerTitle = this.language.translate("Pie chart");
        }
    };
    /**
     * (Re)validates the chart, causing it to redraw.
     *
     * @ignore Exclude from docs
     */
    PieChart.prototype.validate = function () {
        _super.prototype.validate.call(this);
        this.updateRadius();
    };
    /**
     * (Re)validates chart data.
     *
     * @ignore Exclude from docs
     */
    PieChart.prototype.validateData = function () {
        _super.prototype.validateData.call(this);
        this.feedLegend();
    };
    /**
     * Recalculates pie's radius, based on a number of criteria.
     *
     * @ignore Exclude from docs
     */
    PieChart.prototype.updateRadius = function () {
        var _this = this;
        var chartCont = this.chartContainer;
        var rect = __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["getArcRect"](this.startAngle, this.endAngle, 1);
        var innerRect = { x: 0, y: 0, width: 0, height: 0 };
        var innerRadius = this.innerRadius;
        if (innerRadius instanceof __WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__["a" /* Percent */]) {
            innerRect = __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["getArcRect"](this.startAngle, this.endAngle, innerRadius.value);
        }
        // @todo handle this when innerRadius set in pixels (do it for radar also)
        rect = __WEBPACK_IMPORTED_MODULE_6__core_utils_Math__["getCommonRectangle"]([rect, innerRect]);
        var maxRadius = Math.min(chartCont.innerWidth / rect.width, chartCont.innerHeight / rect.height);
        var radius = __WEBPACK_IMPORTED_MODULE_5__core_utils_Utils__["relativeRadiusToValue"](this.radius, maxRadius);
        var pixelInnerRadius = __WEBPACK_IMPORTED_MODULE_5__core_utils_Utils__["relativeRadiusToValue"](this.innerRadius, maxRadius);
        var seriesRadius = (radius - pixelInnerRadius) / this.series.length;
        //@todo: make it possible to set series radius in percent
        __WEBPACK_IMPORTED_MODULE_4__core_utils_Iterator__["each"](__WEBPACK_IMPORTED_MODULE_4__core_utils_Iterator__["indexed"](this.series.iterator()), function (a) {
            var i = a[0];
            var series = a[1];
            // todo: set this on default state instead?
            series.radius = pixelInnerRadius + seriesRadius * (i + 1);
            series.innerRadius = pixelInnerRadius + seriesRadius * i;
            series.startAngle = _this.startAngle;
            series.endAngle = _this.endAngle;
        });
    };
    /**
     * Setups the legend to use the chart's data.
     */
    PieChart.prototype.feedLegend = function () {
        var legend = this.legend;
        if (legend) {
            var legendData_1 = [];
            __WEBPACK_IMPORTED_MODULE_4__core_utils_Iterator__["each"](this.series.iterator(), function (series) {
                __WEBPACK_IMPORTED_MODULE_4__core_utils_Iterator__["each"](series.dataItems.iterator(), function (dataItem) {
                    legendData_1.push(dataItem);
                    var legendSettings = series.legendSettings;
                    if (legendSettings) {
                        if (legendSettings.labelText) {
                            legend.labels.template.text = legendSettings.labelText;
                        }
                        if (legendSettings.itemLabelText) {
                            legend.labels.template.text = legendSettings.itemLabelText;
                        }
                        if (legendSettings.valueText) {
                            legend.valueLabels.template.text = legendSettings.valueText;
                        }
                        if (legendSettings.itemValueText) {
                            legend.valueLabels.template.text = legendSettings.itemValueText;
                        }
                    }
                });
            });
            legend.data = legendData_1;
            legend.dataFields.name = "category";
            legend.itemContainers.template.propertyFields.disabled = "hiddenInLegend";
        }
    };
    Object.defineProperty(PieChart.prototype, "radius", {
        /**
         * @return {number} Radius (px or relative)
         */
        get: function () {
            return this.getPropertyValue("radius");
        },
        /**
         * Sets radius of the pie chart.
         *
         * Setting to a number will mean a fixed pixel radius.
         *
         * Setting to an instance of [[Percent]] will mean a relative radius to
         * available space.
         *
         * E.g.:
         *
         * ```TypeScript
         * // Set pie chart to be at 50% of the available space
         * pieChart.radius = am4core.percent.percent(50);
         * ```
         * ```JavaScript
         * // Set pie chart to be at 50% of the available space
         * pieChart.radius = am4core.percent.percent(50);
         * ```
         * ```JSON
         * {
         *   // Set pie chart to be at 50% of the available space
         *   "radius": "50%"
         * }
         * ```
         *
         * @param {number | Percent}  value  Radius (px or relative)
         */
        set: function (value) {
            this.setPropertyValue("radius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PieChart.prototype, "innerRadius", {
        /**
         * @return {number} Relative inner radius (0-1)
         */
        get: function () {
            return this.getPropertyValue("innerRadius");
        },
        /**
         * Sets relative inner radius (to create a donut chart).
         *
         * The inner radius is relative to pie's radius:
         * * 0 - solid pie (no hole inside);
         * * 0.5 - hole is half the radius of the pie;
         * * 1 - does not make sense, because the hole will take up the whole radius.
         *
         * @param {number | Percent}  value  Relative inner radius (0-1)
         * @todo Setting things like `innerRadius` modifies `slice.radius` and it then looks like it is not the same value as in default state
         */
        set: function (value) {
            this.setPropertyValue("innerRadius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates a new [[PieSeries]].
     *
     * @return {PieSeries} New series
     */
    PieChart.prototype.createSeries = function () {
        return new __WEBPACK_IMPORTED_MODULE_2__series_PieSeries__["a" /* PieSeries */]();
    };
    Object.defineProperty(PieChart.prototype, "startAngle", {
        /**
         * @return {number} Start angle (degrees)
         */
        get: function () {
            return this.getPropertyValue("startAngle");
        },
        /**
         * Starting angle of the Pie circle. (degrees)
         *
         * Normally, a pie chart begins (the left side of the first slice is drawn)
         * at the top center. (at -90 degrees)
         *
         * You can use `startAngle` to change this setting.
         *
         * E.g. setting this to 0 will make the first slice be drawn to the right.
         *
         * For a perfect circle the absolute sum of `startAngle` and `endAngle`
         * needs to be 360.
         *
         * However, it's **not** necessary to do so. You can set to those lesser
         * numbers, to create semi-circles.
         *
         * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that
         * looks like a quarter of a circle.
         *
         * @default -90
         * @param {number}  value  Start angle (degrees)
         */
        set: function (value) {
            this.setPropertyValue("startAngle", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PieChart.prototype, "endAngle", {
        /**
         * @return {number} End angle (degrees)
         */
        get: function () {
            return this.getPropertyValue("endAngle");
        },
        /**
         * End angle of the Pie circle. (degrees)
         *
         * Normally, a pie chart ends (the right side of the last slice is drawn)
         * at the top center. (at 270 degrees)
         *
         * You can use `endAngle` to change this setting.
         *
         * For a perfect circle the absolute sum of `startAngle` and `endAngle`
         * needs to be 360.
         *
         * However, it's **not** necessary to do so. You can set to those lesser
         * numbers, to create semi-circles.
         *
         * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that
         * looks like a quarter of a circle.
         *
         * @default 270
         * @param {number}  value  End angle (degrees)
         */
        set: function (value) {
            this.setPropertyValue("endAngle", value, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @ignore
     */
    PieChart.prototype.setLegend = function (legend) {
        _super.prototype.setLegend.call(this, legend);
        if (legend) {
            legend.labels.template.text = "{category}";
            legend.valueLabels.template.text = "{value.percent.formatNumber('#.0')}%";
            legend.itemContainers.template.events.on("over", function (event) {
                var pieSeriesDataItem = event.target.dataItem.dataContext;
                if (pieSeriesDataItem.visible && !pieSeriesDataItem.isHiding) {
                    pieSeriesDataItem.slice.isHover = true;
                }
            });
            legend.itemContainers.template.events.on("out", function (event) {
                var pieSeriesDataItem = event.target.dataItem.dataContext;
                pieSeriesDataItem.slice.isHover = false;
            });
        }
    };
    return PieChart;
}(__WEBPACK_IMPORTED_MODULE_0__SerialChart__["a" /* SerialChart */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_3__core_Registry__["b" /* registry */].registeredClasses["PieChart"] = PieChart;
__WEBPACK_IMPORTED_MODULE_3__core_Registry__["b" /* registry */].registeredClasses["PieChartDataItem"] = PieChartDataItem;
//# sourceMappingURL=PieChart.js.map

/***/ }),
/* 167 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PieTick; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__elements_Tick__ = __webpack_require__(101);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_utils_Disposer__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_Registry__ = __webpack_require__(0);
/**
 * Pie tick module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Draws an tick line for a pie slice connecting it to a related label.
 *
 * @see {@link IPieTickEvents} for a list of available events
 * @see {@link IPieTickAdapters} for a list of available Adapters
 */
var PieTick = /** @class */ (function (_super) {
    __extends(PieTick, _super);
    /**
     * Constructor
     */
    function PieTick() {
        var _this = _super.call(this) || this;
        /**
         * A label element this tick is attached to.
         *
         * @type {MutableValueDisposer}
         */
        _this._label = new __WEBPACK_IMPORTED_MODULE_1__core_utils_Disposer__["d" /* MutableValueDisposer */]();
        /**
         * A slice element this tick is attached to.
         *
         * @type {MutableValueDisposer}
         */
        _this._slice = new __WEBPACK_IMPORTED_MODULE_1__core_utils_Disposer__["d" /* MutableValueDisposer */]();
        _this.className = "PieTick";
        _this.element = _this.paper.add("polyline");
        _this._disposers.push(_this._label);
        _this._disposers.push(_this._slice);
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the tick element.
     *
     * @ignore Exclude from docs
     */
    PieTick.prototype.draw = function () {
        _super.prototype.draw.call(this);
        var slice = this.slice;
        var label = this.label;
        var series = slice.dataItem.component;
        if (slice && slice.radius > 0 && label && label.text) {
            var x0 = slice.dx + slice.slice.dx + slice.pixelX + slice.ix * slice.radius * slice.scale;
            var y0 = slice.dy + slice.slice.dy + slice.pixelY + slice.iy * slice.radius * slice.scale;
            var x1 = void 0;
            var y1 = void 0;
            var x2 = void 0;
            var y2 = void 0;
            if (series.alignLabels) {
                x1 = label.pixelX - this.length;
                y1 = label.pixelY;
                x2 = label.pixelX;
                y2 = y1;
                if (label.horizontalCenter == "right") {
                    x1 += 2 * this.length;
                    x2 = x1 - this.length;
                }
            }
            else {
                x1 = x0 + label.radius * slice.ix;
                y1 = y0 + label.radius * slice.iy;
                x2 = x1;
                y2 = y1;
            }
            this.element.attr({ "points": [x0, y0, x1, y1, x2, y2] });
        }
    };
    Object.defineProperty(PieTick.prototype, "slice", {
        /**
         * @return {Slice} Slice
         */
        get: function () {
            return this._slice.get();
        },
        /**
         * Slice element tick is attached to.
         *
         * @param {Slice}  slice  Slice
         */
        set: function (slice) {
            this._slice.set(slice, new __WEBPACK_IMPORTED_MODULE_1__core_utils_Disposer__["c" /* MultiDisposer */]([
                slice.events.on("transformed", this.invalidate, this),
                slice.events.on("validated", this.invalidate, this)
            ]));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PieTick.prototype, "label", {
        /**
         * @return {AxisLabelCircular} Label
         */
        get: function () {
            return this._label.get();
        },
        /**
         * Label element tick is attached to.
         *
         * @param {AxisLabelCircular}  label  Label
         */
        set: function (label) {
            this._label.set(label, label.events.on("transformed", this.invalidate, this));
        },
        enumerable: true,
        configurable: true
    });
    return PieTick;
}(__WEBPACK_IMPORTED_MODULE_0__elements_Tick__["a" /* Tick */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__core_Registry__["b" /* registry */].registeredClasses["PieTick"] = PieTick;
//# sourceMappingURL=PieTick.js.map

/***/ }),
/* 168 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return PieSeries3DDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PieSeries3D; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__series_PieSeries__ = __webpack_require__(114);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_elements_3d_Slice3D__ = __webpack_require__(152);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_Type__ = __webpack_require__(1);
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[PieSeries3D]].
 *
 * @see {@link DataItem}
 */
var PieSeries3DDataItem = /** @class */ (function (_super) {
    __extends(PieSeries3DDataItem, _super);
    /**
     * Constructor
     */
    function PieSeries3DDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "PieSeries3DDataItem";
        _this.values.depthValue = {};
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(PieSeries3DDataItem.prototype, "depthValue", {
        /**
         * @return {number} Depth
         */
        get: function () {
            return this.values["depthValue"].value;
        },
        /**
         * Slice depth (height).
         *
         * @param {number}  value  Depth
         */
        set: function (value) {
            this.setValue("depthValue", value);
        },
        enumerable: true,
        configurable: true
    });
    return PieSeries3DDataItem;
}(__WEBPACK_IMPORTED_MODULE_0__series_PieSeries__["b" /* PieSeriesDataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Defines [[Series]] for a slice series on a 3D pie chart.
 *
 * @see {@link IPieSeries3DEvents} for a list of available Events
 * @see {@link IPieSeries3DAdapters} for a list of available Adapters
 * @todo Example
 * @important
 */
var PieSeries3D = /** @class */ (function (_super) {
    __extends(PieSeries3D, _super);
    /**
     * Constructor
     */
    function PieSeries3D() {
        var _this = _super.call(this) || this;
        _this.className = "PieSeries3D";
        _this.applyTheme();
        return _this;
    }
    /**
     * Returns a new/empty DataItem of the type appropriate for this object
     * @see {@link DataItem}
     * @return {PieSeries3DDataItem} Data Item
     */
    PieSeries3D.prototype.createDataItem = function () {
        return new PieSeries3DDataItem();
    };
    /**
     * Creates and returns a new slice element.
     *
     * @param  {typeof Slice}  sliceType  Type of the slice element
     * @return {Slice3D}                  Slice
     */
    PieSeries3D.prototype.initSlice = function (sliceType) {
        var slice = _super.prototype.initSlice.call(this, __WEBPACK_IMPORTED_MODULE_1__core_elements_3d_Slice3D__["a" /* Slice3D */]);
        return slice;
    };
    /**
     * Validates data item's element, effectively redrawing it.
     *
     * @ignore Exclude from docs
     * @param {PieSeries3DDataItem}  dataItem  Data item
     */
    PieSeries3D.prototype.validateDataElement = function (dataItem) {
        _super.prototype.validateDataElement.call(this, dataItem);
        var slice = dataItem.slice;
        var depth = this.depth;
        if (!__WEBPACK_IMPORTED_MODULE_3__core_utils_Type__["isNumber"](depth)) {
            depth = this.chart.depth;
        }
        var depthPercent = dataItem.values.depthValue.percent;
        if (!__WEBPACK_IMPORTED_MODULE_3__core_utils_Type__["isNumber"](depthPercent)) {
            depthPercent = 100;
        }
        slice.depth = depthPercent * depth / 100;
        var angle = this.angle;
        if (!__WEBPACK_IMPORTED_MODULE_3__core_utils_Type__["isNumber"](angle)) {
            angle = this.chart.angle;
        }
        slice.angle = angle;
    };
    /**
     * (Re)validates the whole series, effectively causing it to redraw.
     *
     * @ignore Exclude from docs
     */
    PieSeries3D.prototype.validate = function () {
        _super.prototype.validate.call(this);
        for (var i = this._workingStartIndex; i < this._workingEndIndex; i++) {
            var dataItem = this.dataItems.getIndex(i);
            var slice = dataItem.slice;
            var startAngle = slice.startAngle;
            // find quarter
            //q0 || q1
            if ((startAngle >= -90 && startAngle < 90)) {
                slice.toFront();
            }
            //q2 || q3
            else if ((startAngle >= 90)) {
                slice.toBack();
            }
        }
    };
    Object.defineProperty(PieSeries3D.prototype, "depth", {
        /**
         * @return {number} Depth (px)
         */
        get: function () {
            return this.getPropertyValue("depth");
        },
        /**
         * Depth (height) of the pie slice in pixels.
         *
         * @param {number}  value  Depth (px)
         */
        set: function (value) {
            this.setPropertyValue("depth", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PieSeries3D.prototype, "angle", {
        /**
         * @return {number} Angle
         */
        get: function () {
            return this.getPropertyValue("angle");
        },
        /**
         * Angle of the view point of the 3D pie. (0-360)
         *
         * @param {number}  value  Angle
         */
        set: function (value) {
            this.setPropertyValue("angle", value);
        },
        enumerable: true,
        configurable: true
    });
    return PieSeries3D;
}(__WEBPACK_IMPORTED_MODULE_0__series_PieSeries__["a" /* PieSeries */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__core_Registry__["b" /* registry */].registeredClasses["PieSeries3D"] = PieSeries3D;
__WEBPACK_IMPORTED_MODULE_2__core_Registry__["b" /* registry */].registeredClasses["PieSeries3DDataItem"] = PieSeries3DDataItem;
//# sourceMappingURL=PieSeries3D.js.map

/***/ }),
/* 169 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return SankeyDiagramDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SankeyDiagram; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__FlowDiagram__ = __webpack_require__(115);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__elements_SankeyNode__ = __webpack_require__(170);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__elements_SankeyLink__ = __webpack_require__(172);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_utils_Type__ = __webpack_require__(1);
/**
 * Sankey diagram module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};










/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
//@todo rearange notes after dragged
/**
 * Defines a [[DataItem]] for [[SankeyDiagram]].
 *
 * @see {@link DataItem}
 */
var SankeyDiagramDataItem = /** @class */ (function (_super) {
    __extends(SankeyDiagramDataItem, _super);
    /**
     * Constructor
     */
    function SankeyDiagramDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "SankeyDiagramDataItem";
        _this.applyTheme();
        return _this;
    }
    return SankeyDiagramDataItem;
}(__WEBPACK_IMPORTED_MODULE_0__FlowDiagram__["b" /* FlowDiagramDataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a Pie chart
 * @see {@link ISankeyDiagramEvents} for a list of available Events
 * @see {@link ISankeyDiagramAdapters} for a list of available Adapters
 * @important
 */
var SankeyDiagram = /** @class */ (function (_super) {
    __extends(SankeyDiagram, _super);
    /**
     * Constructor
     */
    function SankeyDiagram() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * A list of chart's Sankey nodes.
         *
         * @param {DictionaryTemplate<string, SankeyNode>}
         */
        _this.nodes = new __WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__["c" /* DictionaryTemplate */](new __WEBPACK_IMPORTED_MODULE_5__elements_SankeyNode__["a" /* SankeyNode */]());
        /**
         * A list of Sankey links connecting nodes.
         *
         * @param {ListTemplate<SankeyLink>}
         */
        _this.links = new __WEBPACK_IMPORTED_MODULE_2__core_utils_List__["e" /* ListTemplate */](new __WEBPACK_IMPORTED_MODULE_6__elements_SankeyLink__["a" /* SankeyLink */]());
        /**
         * [valueHeight description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @type {number}
         */
        _this.valueHeight = 0;
        _this.className = "SankeyDiagram";
        _this.orientation = "horizontal";
        _this.nodeAlign = "middle";
        _this.nodesContainer.width = Object(__WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__["c" /* percent */])(100);
        _this.nodesContainer.height = Object(__WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__["c" /* percent */])(100);
        _this.linksContainer.width = Object(__WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__["c" /* percent */])(100);
        _this.linksContainer.height = Object(__WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__["c" /* percent */])(100);
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * (Re)validates chart's data, effectively causing the chart to redraw.
     *
     * @ignore Exclude from docs
     */
    SankeyDiagram.prototype.validateData = function () {
        var _this = this;
        _super.prototype.validateData.call(this);
        this._levelCount = 0;
        __WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__["each"](this.nodes.iterator(), function (strNode) {
            var node = strNode[1];
            node.level = _this.getNodeLevel(node, 0);
            _this._levelCount = __WEBPACK_IMPORTED_MODULE_8__core_utils_Math__["max"](_this._levelCount, node.level);
        });
    };
    /**
     * Returns node's highest level.
     *
     * @param  {SankeyNode}  node   Node
     * @param  {number}      level  Current level
     * @return {number}             New level
     */
    SankeyDiagram.prototype.getNodeLevel = function (node, level) {
        var _this = this;
        //@todo solve circular so
        var levels = [level];
        __WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__["each"](node.incomingDataItems.iterator(), function (link) {
            if (link.fromNode) {
                levels.push(_this.getNodeLevel(link.fromNode, level + 1));
            }
        });
        return Math.max.apply(Math, __spread(levels));
    };
    /**
     * Calculates relation between pixel height and total value.
     *
     * In Sankey the actual thickness of links and height of nodes will depend
     * on their values.
     */
    SankeyDiagram.prototype.calculateValueHeight = function () {
        var _this = this;
        // calculate sums of each level
        this._levelSum = {};
        this._levelNodesCount = {};
        this.maxSum = 0;
        __WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__["each"](this.nodes.iterator(), function (strNode) {
            var node = strNode[1];
            var level = node.level;
            if (__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__["isNumber"](_this._levelSum[level])) {
                _this._levelSum[level] += node.value;
            }
            else {
                _this._levelSum[level] = node.value;
            }
            if (__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__["isNumber"](_this._levelNodesCount[level])) {
                _this._levelNodesCount[level]++;
            }
            else {
                _this._levelNodesCount[level] = 1;
            }
        });
        var maxSumLevel;
        for (var key in this._levelSum) {
            if (this.maxSum < this._levelSum[key]) {
                this.maxSum = this._levelSum[key];
                maxSumLevel = Number(key);
            }
        }
        var maxSumLevelNodeCount = this._levelNodesCount[maxSumLevel];
        var availableHeight;
        if (this.orientation == "horizontal") {
            availableHeight = this.chartContainer.maxHeight - 1;
        }
        else {
            availableHeight = this.chartContainer.maxWidth - 1;
        }
        this.valueHeight = (availableHeight - (maxSumLevelNodeCount - 1) * this.nodePadding) / this.maxSum;
        this.maxSumLevelNodeCount = maxSumLevelNodeCount;
    };
    /**
     * Redraws the chart.
     *
     * @ignore Exclude from docs
     */
    SankeyDiagram.prototype.validate = function () {
        var _this = this;
        _super.prototype.validate.call(this);
        this.calculateValueHeight();
        var container = this.nodesContainer;
        container.removeChildren();
        var nextCoordinate = {};
        var nodesInLevel = [];
        __WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__["each"](this._sorted, function (strNode) {
            var node = strNode[1];
            _this.getNodeValue(node);
            var level = node.level;
            if (!__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__["isNumber"](nodesInLevel[level])) {
                nodesInLevel[level] = 1;
            }
            else {
                nodesInLevel[level]++;
            }
        });
        var maxSumLevelNodeCount = this.maxSumLevelNodeCount;
        __WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__["each"](this._sorted, function (strNode) {
            var node = strNode[1];
            var level = node.level;
            var levelCoordinate = 0;
            switch (_this.nodeAlign) {
                case "bottom":
                    levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight - (nodesInLevel[level] - maxSumLevelNodeCount) * _this.nodePadding;
                    break;
                case "middle":
                    levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight / 2 - (nodesInLevel[level] - maxSumLevelNodeCount) * _this.nodePadding / 2;
                    break;
            }
            if (node.value > 0) {
                node.parent = container;
            }
            var delta;
            var x;
            var y;
            if (_this.orientation == "horizontal") {
                delta = (container.pixelWidth - node.pixelWidth) / _this._levelCount;
                x = delta * node.level;
                y = nextCoordinate[level] || levelCoordinate;
                var h = node.value * _this.valueHeight;
                node.height = h;
                node.minX = x;
                node.maxX = x;
                nextCoordinate[level] = y + h + _this.nodePadding;
            }
            else {
                delta = (container.pixelHeight - node.pixelHeight) / _this._levelCount;
                x = nextCoordinate[level] || levelCoordinate;
                y = delta * node.level;
                var w = node.value * _this.valueHeight;
                node.width = w;
                node.minY = y;
                node.maxY = y;
                nextCoordinate[level] = x + w + _this.nodePadding;
            }
            node.x = x;
            node.y = y;
        });
    };
    /**
     * [appear description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    SankeyDiagram.prototype.appear = function () {
        var _this = this;
        _super.prototype.appear.call(this);
        var container = this.nodesContainer;
        var i = 0;
        __WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__["each"](this.links.iterator(), function (link) {
            link.hide(0);
        });
        __WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__["each"](this._sorted, function (strNode) {
            var node = strNode[1];
            var property;
            if (_this.orientation == "horizontal") {
                node.dx = -(container.pixelWidth - node.pixelWidth) / _this._levelCount;
                property = "dx";
            }
            else {
                node.dy = -(container.pixelHeight - node.pixelHeight) / _this._levelCount;
                property = "dy";
            }
            var delay = 0;
            var duration = _this.interpolationDuration;
            if (_this.sequencedInterpolation) {
                delay = _this.sequencedInterpolationDelay * i + duration * i / __WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__["length"](_this.nodes.iterator());
            }
            node.opacity = 0;
            node.invalidateLinks();
            node.animate([{ property: "opacity", from: 0, to: 1 }, { property: property, to: 0 }], _this.interpolationDuration, _this.interpolationEasing).delay(delay);
            __WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__["each"](node.outgoingDataItems.iterator(), function (dataItem) {
                var animation = dataItem.link.show(_this.interpolationDuration);
                if (animation) {
                    animation.delay(delay);
                }
            });
            i++;
        });
    };
    /**
     * Changes the sort type of the nodes.
     *
     * This will actually reshuffle nodes using nice animation.
     */
    SankeyDiagram.prototype.changeSorting = function () {
        var _this = this;
        this.sortNodes();
        var nextCoordinate = {};
        __WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__["each"](this._sorted, function (strNode) {
            var node = strNode[1];
            var level = node.level;
            var levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight / 2;
            var property;
            var nodeHeight;
            if (_this.orientation == "horizontal") {
                property = "y";
                nodeHeight = node.pixelHeight;
            }
            else {
                property = "x";
                nodeHeight = node.pixelWidth;
            }
            node.animate({ property: property, to: nextCoordinate[level] || levelCoordinate }, _this.interpolationDuration, _this.interpolationEasing);
            nextCoordinate[level] = (nextCoordinate[level] || levelCoordinate) + nodeHeight + _this.nodePadding;
            node.invalidateLinks();
        });
    };
    /**
     * Sets defaults that instantiate some objects that rely on parent, so they
     * cannot be set in constructor.
     */
    SankeyDiagram.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);
        // Add a default screen reader title for accessibility
        // This will be overridden in screen reader if there are any `titles` set
        if (!__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__["hasValue"](this.readerTitle)) {
            this.readerTitle = this.language.translate("Sankey diagram");
        }
    };
    /**
     * Creates and returns a new data item.
     *
     * @return {this} Data item
     */
    SankeyDiagram.prototype.createDataItem = function () {
        return new SankeyDiagramDataItem();
    };
    Object.defineProperty(SankeyDiagram.prototype, "nodeAlign", {
        /**
         * @returns {"top" | "middle" | "bottom"} Returns nodeAlign value
         */
        get: function () {
            return this.getPropertyValue("nodeAlign");
        },
        /**
         * How to align nodes. In case layout is vertical, top means left and bottom means right
         *
         * @param {"top" | "middle" | "bottom"}  value  Node sorting
         */
        set: function (value) {
            this.setPropertyValue("nodeAlign", value);
            this.changeSorting();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SankeyDiagram.prototype, "orientation", {
        /**
         * @return {Orientation} Orientation
         */
        get: function () {
            return this.getPropertyValue("orientation");
        },
        /**
         * Orientation of the chart: "horizontal" or "vertical";
         *
         * @param {Orientation} value Orientation
         */
        set: function (value) {
            this.setPropertyValue("orientation", value, true);
            var nameLabel = this.nodes.template.nameLabel;
            if (value == "vertical") {
                nameLabel.label.horizontalCenter = "middle";
                nameLabel.locationX = 0.5;
            }
            else {
                nameLabel.label.horizontalCenter = "left";
                nameLabel.locationX = 1;
            }
        },
        enumerable: true,
        configurable: true
    });
    return SankeyDiagram;
}(__WEBPACK_IMPORTED_MODULE_0__FlowDiagram__["a" /* FlowDiagram */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_4__core_Registry__["b" /* registry */].registeredClasses["SankeyDiagram"] = SankeyDiagram;
//# sourceMappingURL=SankeyDiagram.js.map

/***/ }),
/* 170 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SankeyNode; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__FlowDiagramNode__ = __webpack_require__(83);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__LabelBullet__ = __webpack_require__(171);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_Iterator__ = __webpack_require__(3);
/**
 * SankeyNode module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a node in a Sankey Diagram.
 *
 * A Sankey node is a block with a value, which represents its size on the
 * diagram.
 *
 * Nodes are connected via [[SankeyLink]] elements.
 *
 * @see {@link ISankeyNodeEvents} for a list of available events
 * @see {@link ISankeyNodeAdapters} for a list of available Adapters
 * @important
 */
var SankeyNode = /** @class */ (function (_super) {
    __extends(SankeyNode, _super);
    /**
     * Constructor
     */
    function SankeyNode() {
        var _this = _super.call(this) || this;
        /**
         * [nextInCoord description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @type {number}
         */
        _this.nextInCoord = 0;
        /**
         * [nextOutCoord description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @type {number}
         */
        _this.nextOutCoord = 0;
        _this.className = "SankeyNode";
        _this.width = 10;
        _this.height = 10;
        var nameLabel = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__LabelBullet__["a" /* LabelBullet */]);
        nameLabel.shouldClone = false;
        //@should we auto update these locations if position is changed?
        nameLabel.locationX = 1;
        nameLabel.locationY = 0.5;
        nameLabel.label.text = "{name}";
        //nameLabel.label.textElement.hideOversized = false;
        nameLabel.width = 150;
        nameLabel.height = 150;
        nameLabel.label.horizontalCenter = "left";
        nameLabel.label.padding(0, 5, 0, 5);
        _this.nameLabel = nameLabel;
        var valueLabel = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__LabelBullet__["a" /* LabelBullet */]);
        valueLabel.shouldClone = false;
        valueLabel.label.hideOversized = false;
        valueLabel.locationX = 0.5;
        valueLabel.locationY = 0.5;
        valueLabel.width = 150;
        valueLabel.height = 150;
        //valueLabel.label.text = "{value}";
        valueLabel.label.horizontalCenter = "middle";
        _this.valueLabel = valueLabel;
        return _this;
    }
    /**
     * Invalidates all links, attached to this node.
     *
     * @ignore Exclude from docs
     */
    SankeyNode.prototype.invalidateLinks = function () {
        var _this = this;
        _super.prototype.invalidateLinks.call(this);
        this.nextInCoord = 0;
        this.nextOutCoord = 0;
        var chart = this.chart;
        if (chart) {
            var orientation_1 = chart.orientation;
            if (this._incomingSorted) {
                __WEBPACK_IMPORTED_MODULE_3__core_utils_Iterator__["each"](this._incomingSorted, function (dataItem) {
                    var link = dataItem.link;
                    link.parent = _this.chart.linksContainer;
                    var x;
                    var y;
                    var angle;
                    if (orientation_1 == "horizontal") {
                        x = _this.pixelX + _this.dx;
                        y = _this.nextInCoord + _this.pixelY + _this.dy;
                        angle = 0;
                    }
                    else {
                        y = _this.pixelY + _this.dy;
                        x = _this.nextInCoord + _this.pixelX + _this.dx;
                        angle = 90;
                    }
                    link.endX = x;
                    link.endY = y;
                    link.startAngle = angle;
                    link.endAngle = angle;
                    link.gradient.rotation = angle;
                    link.linkWidth = dataItem.getWorkingValue("value") * chart.valueHeight;
                    if (!dataItem.fromNode) {
                        if (orientation_1 == "horizontal") {
                            link.startX = _this.pixelX + _this.dx - link.maxWidth;
                            link.startY = link.endY;
                        }
                        else {
                            link.startX = link.endX;
                            link.startY = _this.pixelY + _this.dy - link.maxHeight;
                        }
                        var stop_1 = link.gradient.stops.getIndex(0);
                        if (stop_1) {
                            if (link.colorMode == "gradient") {
                                stop_1.color = _this.color;
                            }
                            stop_1.opacity = 0;
                            link.fill = link.gradient;
                            link.stroke = link.gradient;
                            link.gradient.validate();
                        }
                    }
                    _this.nextInCoord += link.linkWidth;
                });
            }
            if (this._outgoingSorted) {
                __WEBPACK_IMPORTED_MODULE_3__core_utils_Iterator__["each"](this._outgoingSorted, function (dataItem) {
                    var link = dataItem.link;
                    link.parent = _this.chart.linksContainer;
                    var x;
                    var y;
                    var angle;
                    if (orientation_1 == "horizontal") {
                        angle = 0;
                        x = _this.pixelX + _this.pixelWidth + _this.dx - 1;
                        y = _this.nextOutCoord + _this.pixelY + _this.dy;
                    }
                    else {
                        angle = 90;
                        x = _this.nextOutCoord + _this.pixelX + _this.dx;
                        y = _this.pixelY + _this.pixelHeight + _this.dy - 1;
                    }
                    link.startX = x;
                    link.startY = y;
                    link.startAngle = angle;
                    link.endAngle = angle;
                    link.gradient.rotation = angle;
                    link.linkWidth = dataItem.getWorkingValue("value") * _this.chart.valueHeight;
                    if (!dataItem.toNode) {
                        if (orientation_1 == "horizontal") {
                            link.endX = _this.pixelX + link.maxWidth + _this.dx;
                            link.endY = link.startY;
                        }
                        else {
                            link.endX = link.startX;
                            link.endY = _this.pixelY + link.maxHeight + _this.dy;
                        }
                        link.opacity = _this.opacity;
                        var stop_2 = link.gradient.stops.getIndex(1);
                        if (stop_2) {
                            if (link.colorMode == "gradient") {
                                stop_2.color = _this.color;
                            }
                            stop_2.opacity = 0;
                            link.fill = link.gradient;
                            link.stroke = link.gradient;
                            link.gradient.validate();
                        }
                    }
                    _this.nextOutCoord += link.linkWidth;
                });
            }
        }
        this.positionBullet(this.nameLabel);
        this.positionBullet(this.valueLabel);
    };
    /**
     * Positions the bullet so it is centered within the node element.
     *
     * @param {LabelBullet}  bullet  Target bullet
     */
    SankeyNode.prototype.positionBullet = function (bullet) {
        if (bullet) {
            bullet.x = this.measuredWidth * bullet.locationX;
            bullet.y = this.measuredHeight * bullet.locationY;
        }
    };
    Object.defineProperty(SankeyNode.prototype, "level", {
        /**
         * @return {number} Level
         */
        get: function () {
            return this.getPropertyValue("level");
        },
        /**
         * A level node is displayed at. (0 - ...)
         *
         * Levels are measured from left to right.
         *
         * The nodes in the left-most column will have `level = 0`.
         *
         * Nodes in second column - `level = 1`, etc.
         *
         * @param {number}  value  Level
         */
        set: function (value) {
            this.setPropertyValue("level", value, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Copies properties and labels from another [[SankeyNode]].
     *
     * @param {SankeyNode}  source  Source node
     */
    SankeyNode.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        this.nameLabel.copyFrom(source.nameLabel);
        this.valueLabel.copyFrom(source.valueLabel);
    };
    return SankeyNode;
}(__WEBPACK_IMPORTED_MODULE_0__FlowDiagramNode__["a" /* FlowDiagramNode */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__core_Registry__["b" /* registry */].registeredClasses["SankeyNode"] = SankeyNode;
//# sourceMappingURL=SankeyNode.js.map

/***/ }),
/* 171 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LabelBullet; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Bullet__ = __webpack_require__(49);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_elements_Label__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_Color__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_utils_InterfaceColorSet__ = __webpack_require__(9);
/**
 * Bullet module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a bullet with a textual label.
 *
 * Uses [[Label]] instance to draw the label, so the label itself is
 * configurable.
 *
 * @see {@link IBulletEvents} for a list of available events
 * @see {@link IBulletAdapters} for a list of available Adapters
 * @todo Usage example
 * @important
 */
var LabelBullet = /** @class */ (function (_super) {
    __extends(LabelBullet, _super);
    /**
     * Constructor
     */
    function LabelBullet() {
        var _this = _super.call(this) || this;
        _this.className = "LabelBullet";
        var label = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__core_elements_Label__["a" /* Label */]);
        label.shouldClone = false;
        label.verticalCenter = "middle";
        label.horizontalCenter = "middle";
        label.truncate = true;
        label.hideOversized = true;
        label.stroke = Object(__WEBPACK_IMPORTED_MODULE_3__core_utils_Color__["c" /* color */])();
        label.strokeOpacity = 0;
        label.fill = new __WEBPACK_IMPORTED_MODULE_4__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]().getFor("text");
        _this.events.on("maxsizechanged", function () {
            _this.label.maxWidth = _this.maxWidth;
            _this.label.maxHeight = _this.maxHeight;
        }, _this);
        _this.label = label;
        return _this;
        // not good, as lineSeries will have labels somewhere in the middle.
        //this.locationX = 0.5;
        //this.locationY = 0.5;
    }
    /**
     * Copies all proprities and related stuff from another instance of
     * [[LabelBullet]].
     *
     * @param {this}  source  Source element
     */
    LabelBullet.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        this.label.copyFrom(source.label);
    };
    return LabelBullet;
}(__WEBPACK_IMPORTED_MODULE_0__Bullet__["a" /* Bullet */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__core_Registry__["b" /* registry */].registeredClasses["LabelBullet"] = LabelBullet;
//# sourceMappingURL=LabelBullet.js.map

/***/ }),
/* 172 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SankeyLink; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__FlowDiagramLink__ = __webpack_require__(84);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_elements_Polyspline__ = __webpack_require__(104);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_InterfaceColorSet__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_Type__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_rendering_Smoothing__ = __webpack_require__(46);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__ = __webpack_require__(8);
/**
 * SankeyLink module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();








/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * This class creates a link (waved color-filled line) between two nodes in a
 * Sankey Diagram.
 *
 * @see {@link ISankeyLinkEvents} for a list of available events
 * @see {@link ISankeyLinkAdapters} for a list of available Adapters
 * @important
 */
var SankeyLink = /** @class */ (function (_super) {
    __extends(SankeyLink, _super);
    /**
     * Constructor
     */
    function SankeyLink() {
        var _this = _super.call(this) || this;
        _this.className = "SankeyLink";
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_3__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        _this.tension = 0.8;
        _this.controlPointDistance = 0.2;
        _this.startAngle = 0;
        _this.endAngle = 0;
        _this.linkWidth = 0;
        _this.startX = 0;
        _this.endX = 0;
        _this.startY = 0;
        _this.endY = 0;
        _this.middleLine = _this.createChild(__WEBPACK_IMPORTED_MODULE_2__core_elements_Polyspline__["a" /* Polyspline */]);
        _this.middleLine.shouldClone = false;
        _this.middleLine.strokeOpacity = 0;
        _this.applyTheme();
        return _this;
    }
    /**
     * (Re)validates (redraws) the link.
     *
     * @ignore Exclude from docs
     */
    SankeyLink.prototype.validate = function () {
        _super.prototype.validate.call(this);
        if (!this.isTemplate) {
            var x0 = this.startX;
            var y0 = this.startY;
            var x1 = this.endX;
            var y1 = this.endY;
            if (!__WEBPACK_IMPORTED_MODULE_5__core_utils_Type__["isNumber"](x1)) {
                x1 = x0;
            }
            if (!__WEBPACK_IMPORTED_MODULE_5__core_utils_Type__["isNumber"](y1)) {
                y1 = y0;
            }
            var startAngle = this.startAngle;
            var endAngle = this.endAngle;
            var w = this.linkWidth;
            var path = "";
            var xt0 = x0;
            var yt0 = y0;
            var xt1 = x1;
            var yt1 = y1;
            var xb0 = x0 + w * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["sin"](startAngle);
            var xb1 = x1 + w * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["sin"](endAngle);
            var yb0 = y0 + w * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["cos"](startAngle);
            var yb1 = y1 + w * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["cos"](endAngle);
            var xm0 = x0 + w / 2 * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["sin"](startAngle);
            var xm1 = x1 + w / 2 * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["sin"](endAngle);
            var ym0 = y0 + w / 2 * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["cos"](startAngle);
            var ym1 = y1 + w / 2 * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["cos"](endAngle);
            this.zIndex = this.zIndex || this.dataItem.index;
            var tensionX = this.tension + (1 - this.tension) * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["sin"](startAngle);
            var tensionY = this.tension + (1 - this.tension) * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["cos"](startAngle);
            this.middleLine.tensionX = tensionX;
            this.middleLine.tensionY = tensionY;
            if (__WEBPACK_IMPORTED_MODULE_5__core_utils_Type__["isNumber"](w) && (__WEBPACK_IMPORTED_MODULE_5__core_utils_Type__["isNumber"](x0) && __WEBPACK_IMPORTED_MODULE_5__core_utils_Type__["isNumber"](x1) && __WEBPACK_IMPORTED_MODULE_5__core_utils_Type__["isNumber"](y0) && __WEBPACK_IMPORTED_MODULE_5__core_utils_Type__["isNumber"](y1))) {
                // solves issues with gradient fill of straight lines
                if (__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["round"](xt0, 3) == __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["round"](xt1, 3)) {
                    xt1 += 0.01;
                }
                if (__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["round"](yt0, 3) == __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["round"](yt1, 3)) {
                    yt1 += 0.01;
                }
                if (__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["round"](xb0, 3) == __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["round"](xb1, 3)) {
                    xb1 += 0.01;
                }
                if (__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["round"](yb0, 3) == __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["round"](yb1, 3)) {
                    yb1 += 0.01;
                }
                var minX = Math.min(xb0, xb1, xt0, xt1);
                var minY = Math.min(yb0, yb1, yt0, yt1);
                var maxX = Math.max(xb0, xb1, xt0, xt1);
                var maxY = Math.max(yb0, yb1, yt0, yt1);
                this.bbox = {
                    x: minX,
                    y: minY,
                    width: maxX - minX,
                    height: maxY - minY
                };
                var cpd = this.controlPointDistance;
                var kxt0 = xt0 + (xt1 - xt0) * cpd * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["cos"](startAngle);
                var kyt0 = yt0 + (yt1 - yt0) * cpd * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["sin"](startAngle);
                var kxt1 = xt1 - (xt1 - xt0) * cpd * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["cos"](endAngle);
                var kyt1 = yt1 - (yt1 - yt0) * cpd * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["sin"](endAngle);
                var kxm0 = xm0 + (xm1 - xm0) * cpd * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["cos"](startAngle);
                var kym0 = ym0 + (ym1 - ym0) * cpd * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["sin"](startAngle);
                var kxm1 = xm1 - (xm1 - xm0) * cpd * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["cos"](endAngle);
                var kym1 = ym1 - (ym1 - ym0) * cpd * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["sin"](endAngle);
                var angle = __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["getAngle"]({ x: kxt0, y: kyt0 }, { x: kxt1, y: kyt1 });
                var dx = (w / __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["cos"](angle) - w) / __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["tan"](angle) * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["cos"](startAngle);
                var dy = (w / __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["sin"](angle) - w) * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["tan"](angle) * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["sin"](startAngle);
                var kxb0 = -dx / 2 + xb0 + (xb1 - xb0) * cpd * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["cos"](startAngle);
                var kyb0 = -dy / 2 + yb0 + (yb1 - yb0) * cpd * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["sin"](startAngle);
                var kxb1 = -dx / 2 + xb1 - (xb1 - xb0) * cpd * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["cos"](endAngle);
                var kyb1 = -dy / 2 + yb1 - (yb1 - yb0) * cpd * __WEBPACK_IMPORTED_MODULE_4__core_utils_Math__["sin"](endAngle);
                this.middleLine.segments = [[{ x: xm0, y: ym0 }, { x: kxm0, y: kym0 }, { x: kxm1, y: kym1 }, { x: xm1, y: ym1 }]];
                kxt0 += dx / 2;
                kyt0 += dy / 2;
                kxt1 += dx / 2;
                kyt1 += dy / 2;
                path += __WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__["moveTo"]({ x: xt0, y: yt0 });
                path += new __WEBPACK_IMPORTED_MODULE_6__core_rendering_Smoothing__["b" /* Tension */](tensionX, tensionY).smooth([{ x: xt0, y: yt0 }, { x: kxt0, y: kyt0 }, { x: kxt1, y: kyt1 }, { x: xt1, y: yt1 }]);
                path += __WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__["lineTo"]({ x: xb1, y: yb1 });
                path += new __WEBPACK_IMPORTED_MODULE_6__core_rendering_Smoothing__["b" /* Tension */](tensionX, tensionY).smooth([{ x: xb1, y: yb1 }, { x: kxb1, y: kyb1 }, { x: kxb0, y: kyb0 }, { x: xb0, y: yb0 }]);
                path += __WEBPACK_IMPORTED_MODULE_7__core_rendering_Path__["closePath"]();
            }
            this.link.element.attr({ "d": path });
            if (this.maskBullets) {
                this.bulletsMask.element.attr({ "d": path });
                this.bulletsContainer.mask = this.bulletsMask;
            }
            this.positionBullets();
        }
    };
    Object.defineProperty(SankeyLink.prototype, "startX", {
        /**
         * @return {number} Start X
         */
        get: function () {
            return this.getPropertyValue("startX");
        },
        /**
         * [startX description]
         *
         * @todo Description
         * @param {number}  value  Start X
         */
        set: function (value) {
            this.setPropertyValue("startX", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SankeyLink.prototype, "endX", {
        /**
         * @return {number} End X
         */
        get: function () {
            return this.getPropertyValue("endX");
        },
        /**
         * [endX description]
         *
         * @todo Description
         * @param {number} value  End X
         */
        set: function (value) {
            this.setPropertyValue("endX", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SankeyLink.prototype, "startY", {
        /**
         * @return {number} Start Y
         */
        get: function () {
            return this.getPropertyValue("startY");
        },
        /**
         * [startY description]
         *
         * @todo Description
         * @param {number}  value  Start Y
         */
        set: function (value) {
            this.setPropertyValue("startY", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SankeyLink.prototype, "endY", {
        /**
         * @return {number} End Y
         */
        get: function () {
            return this.getPropertyValue("endY");
        },
        /**
         * [endY description]
         *
         * @todo Description
         * @param {number} value End Y
         */
        set: function (value) {
            this.setPropertyValue("endY", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SankeyLink.prototype, "linkWidth", {
        /**
         * @return {number} [description]
         */
        get: function () {
            return this.getPropertyValue("linkWidth");
        },
        /**
         * [linkWidth description]
         *
         * @todo Description
         * @param {number} value [description]
         */
        set: function (value) {
            this.setPropertyValue("linkWidth", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SankeyLink.prototype, "controlPointDistance", {
        /**
         * @return {number} relative control point distance
         */
        get: function () {
            return this.getPropertyValue("controlPointDistance");
        },
        /**
         * Distance of control point of a link, defines relative distance from a node at which linke should bend
         * @default 0.2
         * @param {number}  value
         */
        set: function (value) {
            this.setPropertyValue("controlPointDistance", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SankeyLink.prototype, "tension", {
        /**
         * @return {number} tension value
         */
        get: function () {
            return this.getPropertyValue("tension");
        },
        /**
         * Tension of a spline, 1 would make the link to have sharp edges
         * @default 0.8
         * @param {number} value
         */
        set: function (value) {
            this.setPropertyValue("tension", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return SankeyLink;
}(__WEBPACK_IMPORTED_MODULE_0__FlowDiagramLink__["a" /* FlowDiagramLink */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["b" /* registry */].registeredClasses["SankeyLink"] = SankeyLink;
//# sourceMappingURL=SankeyLink.js.map

/***/ }),
/* 173 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ChordNode; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__FlowDiagramNode__ = __webpack_require__(83);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__axes_AxisLabelCircular__ = __webpack_require__(76);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_elements_Slice__ = __webpack_require__(48);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_Type__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__elements_Bullet__ = __webpack_require__(49);
/**
 * ChordNode module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */








/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a node in a Chord Diagram.
 *
 * A Chord node is a block with a value, which represents its size on the
 * diagram.
 *
 * Nodes are connected via [[ChordLink]] elements.
 *
 * @see {@link IChordNodeEvents} for a list of available events
 * @see {@link IChordNodeAdapters} for a list of available Adapters
 * @important
 */
var ChordNode = /** @class */ (function (_super) {
    __extends(ChordNode, _super);
    /**
     * Constructor
     */
    function ChordNode() {
        var _this = _super.call(this) || this;
        _this.className = "ChordNode";
        _this.label = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__axes_AxisLabelCircular__["a" /* AxisLabelCircular */]);
        _this.label.location = 0.5;
        _this.label.radius = 5;
        _this.label.text = "{name}";
        _this.label.zIndex = 1;
        _this.label.shouldClone = false;
        _this.events.on("positionchanged", _this.updateRotation, _this);
        _this.background.fillOpacity = 0;
        _this.slice = _this.createChild(__WEBPACK_IMPORTED_MODULE_3__core_elements_Slice__["a" /* Slice */]);
        return _this;
    }
    /**
     * Invalidates all links, attached to this node.
     *
     * @ignore Exclude from docs
     */
    ChordNode.prototype.invalidateLinks = function () {
        var _this = this;
        _super.prototype.invalidateLinks.call(this);
        var label = this.label;
        var slice = this.slice;
        var chart = this.chart;
        if (chart && slice) {
            var sum_1 = 0;
            if (this._outgoingSorted) {
                __WEBPACK_IMPORTED_MODULE_4__core_utils_Iterator__["each"](this._outgoingSorted, function (dataItem) {
                    sum_1 += dataItem.getWorkingValue("value");
                });
            }
            if (this._incomingSorted) {
                __WEBPACK_IMPORTED_MODULE_4__core_utils_Iterator__["each"](this._incomingSorted, function (dataItem) {
                    sum_1 += dataItem.getWorkingValue("value");
                });
            }
            var arc_1 = slice.arc;
            this.children.each(function (child) {
                if (child instanceof __WEBPACK_IMPORTED_MODULE_7__elements_Bullet__["a" /* Bullet */]) {
                    var locationX = child.locationX;
                    if (!__WEBPACK_IMPORTED_MODULE_6__core_utils_Type__["isNumber"](locationX)) {
                        locationX = 0.5;
                    }
                    var locationY = child.locationY;
                    if (!__WEBPACK_IMPORTED_MODULE_6__core_utils_Type__["isNumber"](locationY)) {
                        locationY = 1;
                    }
                    var childAngle = slice.startAngle + arc_1 * locationX;
                    var childRadius = locationY * slice.radius;
                    child.x = childRadius * __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["cos"](childAngle);
                    child.y = childRadius * __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["sin"](childAngle);
                }
            });
            var labelAngle = slice.startAngle + arc_1 * label.location;
            var startAngle = slice.startAngle + (1 - sum_1 / this.value) * arc_1 * 0.5; // if value of a node is > then sum of the links, add to center link
            var x = (slice.radius + label.radius) * __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["cos"](labelAngle);
            var y = (slice.radius + label.radius) * __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["sin"](labelAngle);
            var point = { x: x, y: y };
            label.moveTo(point);
            label.fixPoint(point, slice.radius);
            this.nextAngle = startAngle;
            if (this._outgoingSorted) {
                __WEBPACK_IMPORTED_MODULE_4__core_utils_Iterator__["each"](this._outgoingSorted, function (dataItem) {
                    var link = dataItem.link;
                    link.parent = _this.chart.linksContainer;
                    var value = dataItem.getWorkingValue("value");
                    if (chart.nonRibbon) {
                        var percentWidth = link.percentWidth;
                        if (!__WEBPACK_IMPORTED_MODULE_6__core_utils_Type__["isNumber"](percentWidth)) {
                            percentWidth = 5;
                        }
                        percentWidth = percentWidth / 100;
                        link.startAngle = slice.startAngle + arc_1 / 2 - arc_1 / 2 * percentWidth;
                        link.arc = arc_1 * percentWidth;
                    }
                    else {
                        link.arc = value * chart.valueAngle;
                        link.startAngle = _this.nextAngle;
                        _this.nextAngle += link.arc;
                    }
                    if (!dataItem.toNode) {
                        link.endAngle = link.startAngle;
                    }
                    link.radius = slice.innerRadius;
                    link.validate();
                });
            }
            if (this._incomingSorted) {
                __WEBPACK_IMPORTED_MODULE_4__core_utils_Iterator__["each"](this._incomingSorted, function (dataItem) {
                    var link = dataItem.link;
                    link.radius = slice.innerRadius;
                    if (chart.nonRibbon) {
                        var percentWidth = link.percentWidth;
                        if (!__WEBPACK_IMPORTED_MODULE_6__core_utils_Type__["isNumber"](percentWidth)) {
                            percentWidth = 5;
                        }
                        percentWidth = percentWidth / 100;
                        link.endAngle = slice.startAngle + arc_1 / 2 - arc_1 / 2 * percentWidth;
                        link.arc = arc_1 * percentWidth;
                    }
                    else {
                        link.endAngle = _this.nextAngle;
                        link.arc = dataItem.getWorkingValue("value") * chart.valueAngle; // yes, this is needed
                        _this.nextAngle += link.arc;
                    }
                    if (!dataItem.fromNode) {
                        link.startAngle = link.endAngle;
                    }
                    link.validate();
                });
            }
        }
    };
    /**
     * @ignore
     * updates slice start angle so that when we drag a node it would face the center
     */
    ChordNode.prototype.updateRotation = function () {
        var mAngle = this.trueStartAngle + this.slice.arc / 2;
        var tx = this.slice.radius * __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["cos"](mAngle);
        var ty = this.slice.radius * __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["sin"](mAngle);
        var angle = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["getAngle"]({ x: tx + this.pixelX, y: ty + this.pixelY });
        this.slice.startAngle = this.trueStartAngle + (angle - mAngle);
        this.dx = -this.pixelX;
        this.dy = -this.pixelY;
    };
    /**
     * Copies properties and labels from another [[ChordNode]].
     *
     * @param {ChordNode}  source  Source node
     */
    ChordNode.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        this.label.copyFrom(source.label);
        this.slice.copyFrom(source.slice);
    };
    return ChordNode;
}(__WEBPACK_IMPORTED_MODULE_0__FlowDiagramNode__["a" /* FlowDiagramNode */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__core_Registry__["b" /* registry */].registeredClasses["ChordNode"] = ChordNode;
//# sourceMappingURL=ChordNode.js.map

/***/ }),
/* 174 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ChordLink; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__FlowDiagramLink__ = __webpack_require__(84);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_elements_QuadraticCurve__ = __webpack_require__(216);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_rendering_Path__ = __webpack_require__(8);
/**
 * ChordLink module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * This class creates a link (waved color-filled line) between two nodes in a
 * Chord Diagram.
 *
 * @see {@link IChordLinkEvents} for a list of available events
 * @see {@link IChordLinkAdapters} for a list of available Adapters
 * @important
 */
var ChordLink = /** @class */ (function (_super) {
    __extends(ChordLink, _super);
    /**
     * Constructor
     */
    function ChordLink() {
        var _this = _super.call(this) || this;
        _this.className = "ChordLink";
        _this.middleLine = _this.createChild(__WEBPACK_IMPORTED_MODULE_2__core_elements_QuadraticCurve__["a" /* QuadraticCurve */]);
        _this.middleLine.shouldClone = false;
        _this.middleLine.strokeOpacity = 0;
        _this.applyTheme();
        return _this;
    }
    /**
     * (Re)validates (redraws) the link.
     *
     * @ignore Exclude from docs
     */
    ChordLink.prototype.validate = function () {
        _super.prototype.validate.call(this);
        if (!this.isTemplate) {
            var startAngle = this.startAngle;
            var endAngle = this.endAngle;
            var arc = this.arc;
            var radius = this.radius;
            var fromNode = this.dataItem.fromNode;
            var toNode = this.dataItem.toNode;
            var fromX = 0;
            var fromY = 0;
            if (fromNode) {
                fromX = fromNode.pixelX + fromNode.dx;
                fromY = fromNode.pixelY + fromNode.dy;
            }
            var toX = 0;
            var toY = 0;
            if (toNode) {
                toX = toNode.pixelX + toNode.dx;
                toY = toNode.pixelY + toNode.dy;
            }
            if (radius > 0) {
                var x1 = radius * __WEBPACK_IMPORTED_MODULE_3__core_utils_Math__["cos"](startAngle) + fromX;
                var y1 = radius * __WEBPACK_IMPORTED_MODULE_3__core_utils_Math__["sin"](startAngle) + fromY;
                var x2 = radius * __WEBPACK_IMPORTED_MODULE_3__core_utils_Math__["cos"](endAngle) + toX;
                var y2 = radius * __WEBPACK_IMPORTED_MODULE_3__core_utils_Math__["sin"](endAngle) + toY;
                var x3 = radius * __WEBPACK_IMPORTED_MODULE_3__core_utils_Math__["cos"](endAngle + arc) + toX;
                var y3 = radius * __WEBPACK_IMPORTED_MODULE_3__core_utils_Math__["sin"](endAngle + arc) + toY;
                var x4 = radius * __WEBPACK_IMPORTED_MODULE_3__core_utils_Math__["cos"](startAngle + arc) + fromX;
                var y4 = radius * __WEBPACK_IMPORTED_MODULE_3__core_utils_Math__["sin"](startAngle + arc) + fromY;
                //let cpAngle = startAngle + arc + (endAngle - startAngle - arc) / 2;
                //let arcWidth = $math.getDistance({x:x1, y:y1}, {x:x4, y:y4});
                //let cpx = (arcWidth) * $math.cos(cpAngle);
                //let cpy = (arcWidth) * $math.sin(cpAngle);
                var cp = { x: 0, y: 0 };
                var path = __WEBPACK_IMPORTED_MODULE_4__core_rendering_Path__["moveTo"]({ x: x1, y: y1 });
                path += __WEBPACK_IMPORTED_MODULE_4__core_rendering_Path__["arcTo"](startAngle, arc, radius);
                path += __WEBPACK_IMPORTED_MODULE_4__core_rendering_Path__["quadraticCurveTo"]({ x: x2, y: y2 }, cp);
                path += __WEBPACK_IMPORTED_MODULE_4__core_rendering_Path__["arcTo"](endAngle, arc, radius);
                path += __WEBPACK_IMPORTED_MODULE_4__core_rendering_Path__["quadraticCurveTo"]({ x: x1, y: y1 }, cp);
                this.link.element.attr({ "d": path });
                if (this.maskBullets) {
                    this.bulletsMask.element.attr({ "d": path });
                    this.bulletsContainer.mask = this.bulletsMask;
                }
                this.positionBullets();
                var mAngle1 = startAngle + arc / 2;
                var mAngle2 = endAngle + arc / 2;
                var mAngleM = mAngle1 + (mAngle2 - mAngle1) / 2;
                var middleLine = this.middleLine;
                middleLine.x1 = radius * __WEBPACK_IMPORTED_MODULE_3__core_utils_Math__["cos"](mAngle1) + fromX;
                middleLine.y1 = radius * __WEBPACK_IMPORTED_MODULE_3__core_utils_Math__["sin"](mAngle1) + fromY;
                middleLine.x2 = radius * __WEBPACK_IMPORTED_MODULE_3__core_utils_Math__["cos"](mAngle2) + toX;
                middleLine.y2 = radius * __WEBPACK_IMPORTED_MODULE_3__core_utils_Math__["sin"](mAngle2) + toY;
                middleLine.cpx = 0;
                middleLine.cpy = 0;
                middleLine.stroke = this.fill;
            }
        }
    };
    Object.defineProperty(ChordLink.prototype, "radius", {
        /**
         * @return {number} End Y
         */
        get: function () {
            return this.getPropertyValue("radius");
        },
        /**
         * [radius description]
         *
         * @todo Description
         * @param {number} value End Y
         */
        set: function (value) {
            this.setPropertyValue("radius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChordLink.prototype, "arc", {
        /**
         * @return {number} [description]
         */
        get: function () {
            return this.getPropertyValue("arc");
        },
        /**
         * [arc description]
         *
         * @todo Description
         * @param {number} value [description]
         */
        set: function (value) {
            this.setPropertyValue("arc", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return ChordLink;
}(__WEBPACK_IMPORTED_MODULE_0__FlowDiagramLink__["a" /* FlowDiagramLink */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["b" /* registry */].registeredClasses["ChordLink"] = ChordLink;
//# sourceMappingURL=ChordLink.js.map

/***/ }),
/* 175 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return TreeMapSeriesDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TreeMapSeries; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ColumnSeries__ = __webpack_require__(50);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_InterfaceColorSet__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_Type__ = __webpack_require__(1);
/**
 * TreeMap series module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[TreeMapSeries]].
 *
 * @see {@link DataItem}
 */
var TreeMapSeriesDataItem = /** @class */ (function (_super) {
    __extends(TreeMapSeriesDataItem, _super);
    /**
     * Constructor
     */
    function TreeMapSeriesDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "TreeMapSeriesDataItem";
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(TreeMapSeriesDataItem.prototype, "parentName", {
        /**
         * Data for the this particular item.
         *
         * @param {Object}  value  Item's data
         */
        //public set dataContext(value: Object) {
        //	this._dataContext = value;
        //}
        /**
         * @return {Object} Item's data
         */
        /*
       public get dataContext(): Object {
           // It's because data of tree series is TreeMapDataItems.
           if (this._dataContext) {
               return (<any>this._dataContext).dataContext;
           }
       }*/
        /**
         * The name of the item's parent item.
         *
         * @return {string} Parent name
         */
        get: function () {
            var treeMapDataItem = this.treeMapDataItem;
            if (treeMapDataItem && treeMapDataItem.parent) {
                return treeMapDataItem.parent.name;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeMapSeriesDataItem.prototype, "value", {
        /**
         * Item's numeric value.
         *
         * @readonly
         * @return {number} Value
         */
        get: function () {
            return this.treeMapDataItem.value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeMapSeriesDataItem.prototype, "treeMapDataItem", {
        /**
         * A corresponding data item from the tree map.
         *
         * @readonly
         * @return {TreeMapDataItem} Data item
         */
        get: function () {
            return this._dataContext;
        },
        enumerable: true,
        configurable: true
    });
    return TreeMapSeriesDataItem;
}(__WEBPACK_IMPORTED_MODULE_0__ColumnSeries__["b" /* ColumnSeriesDataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Defines Series for a TreeMap chart.
 *
 * @see {@link ITreeMapSeriesEvents} for a list of available Events
 * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters
 * @todo Example
 * @important
 */
var TreeMapSeries = /** @class */ (function (_super) {
    __extends(TreeMapSeries, _super);
    /**
     * Constructor
     */
    function TreeMapSeries() {
        var _this = _super.call(this) || this;
        _this.className = "TreeMapSeries";
        _this.applyTheme();
        _this.fillOpacity = 1;
        _this.strokeOpacity = 1;
        _this.minBulletDistance = 0;
        _this.columns.template.tooltipText = "{parentName} {name}: {value}"; //@todo add format number?
        _this.columns.template.configField = "config";
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_2__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        _this.stroke = interfaceColors.getFor("stroke");
        _this.dataFields.openValueX = "x0";
        _this.dataFields.valueX = "x1";
        _this.dataFields.openValueY = "y0";
        _this.dataFields.valueY = "y1";
        _this.sequencedInterpolation = false;
        // otherwise nodes don't stack nicely to each other
        _this.columns.template.pixelPerfect = false;
        return _this;
    }
    /**
     * Processes data item.
     *
     * @param {TreeMapSeriesDataItem}  dataItem     Data item
     * @param {Object}                 dataContext  Raw data
     * @param {number}                 index        Index of the data item
     */
    TreeMapSeries.prototype.processDataItem = function (dataItem, dataContext) {
        dataContext.seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes
        _super.prototype.processDataItem.call(this, dataItem, dataContext);
    };
    /**
     * Returns a new/empty DataItem of the type appropriate for this object.
     *
     * @see {@link DataItem}
     * @return {TreeMapSeriesDataItem} Data Item
     */
    TreeMapSeries.prototype.createDataItem = function () {
        return new TreeMapSeriesDataItem();
    };
    /**
     * Shows series.
     *
     * @param  {number}     duration  Duration of fade in (ms)
     * @return {Animation}            Animation
     */
    TreeMapSeries.prototype.show = function (duration) {
        return this.showReal(duration);
    };
    /**
     * Hides series.
     *
     * @param  {number}     duration  Duration of fade out (ms)
     * @return {Animation}            Animation
     */
    TreeMapSeries.prototype.hide = function (duration) {
        return this.hideReal(duration);
    };
    /**
     * Process values.
     *
     * @ignore Exclude from docs
     */
    TreeMapSeries.prototype.processValues = function () {
        // Just overriding so that inherited method does not kick in.
    };
    /**
     * Processes JSON-based config before it is applied to the object.
     *
     * @ignore Exclude from docs
     * @param {object}  config  Config
     */
    TreeMapSeries.prototype.processConfig = function (config) {
        if (config) {
            // Add empty data fields if the they are not set, so that XYSeries
            // dataField check does not result in error.
            if (!__WEBPACK_IMPORTED_MODULE_3__core_utils_Type__["hasValue"](config.dataFields) || !__WEBPACK_IMPORTED_MODULE_3__core_utils_Type__["isObject"](config.dataFields)) {
                config.dataFields = {};
            }
        }
        _super.prototype.processConfig.call(this, config);
    };
    return TreeMapSeries;
}(__WEBPACK_IMPORTED_MODULE_0__ColumnSeries__["a" /* ColumnSeries */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["b" /* registry */].registeredClasses["TreeMapSeries"] = TreeMapSeries;
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["b" /* registry */].registeredClasses["TreeMapSeriesDataItem"] = TreeMapSeriesDataItem;
//# sourceMappingURL=TreeMapSeries.js.map

/***/ }),
/* 176 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AxisRendererX3D; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__axes_AxisRendererX__ = __webpack_require__(66);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_utils_Disposer__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__ = __webpack_require__(8);
/**
 * Module, defining Axis Renderer for horizontal 3D axes.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Renderer for horizontal 3D axis.
 *
 * @see {@link IAxisRendererX3DEvents} for a list of available events
 * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters
 */
var AxisRendererX3D = /** @class */ (function (_super) {
    __extends(AxisRendererX3D, _super);
    /**
     * Constructor.
     *
     * @param {Axis} axis Related axis
     */
    function AxisRendererX3D() {
        var _this = _super.call(this) || this;
        /**
         * A related chart.
         *
         * @todo Description
         * @type {MutableValueDisposer}
         */
        _this._chart = new __WEBPACK_IMPORTED_MODULE_1__core_utils_Disposer__["d" /* MutableValueDisposer */]();
        _this.className = "AxisRendererX3D";
        _this._disposers.push(_this._chart);
        _this.applyTheme();
        return _this;
    }
    /**
     * Updates and positions a grid element.
     *
     * @ignore Exclude from docs
     * @param {Grid}    grid         Grid element
     * @param {number}  position     Starting position
     * @param {number}  endPosition  End position
     */
    AxisRendererX3D.prototype.updateGridElement = function (grid, position, endPosition) {
        position = position + (endPosition - position) * grid.location;
        var point = this.positionToPoint(position);
        if (grid.element) {
            var dx = this.chart.dx3D;
            var dy = this.chart.dy3D;
            var h = this.getHeight();
            grid.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["moveTo"]({ x: dx, y: dy }) + __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["lineTo"]({ x: dx, y: h + dy }) + __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["lineTo"]({ x: 0, y: h }) });
        }
        this.positionItem(grid, point);
        this.toggleVisibility(grid, position, 0, 1);
    };
    /**
     * Updates and positions the base grid element.
     *
     * @ignore Exclude from docs
     */
    AxisRendererX3D.prototype.updateBaseGridElement = function () {
        _super.prototype.updateBaseGridElement.call(this);
        var h = this.getHeight();
        var dx = this.chart.dx3D;
        var dy = this.chart.dy3D;
        this.baseGrid.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["moveTo"]({ x: dx, y: dy }) + __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["lineTo"]({ x: dx, y: h + dy }) + __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["lineTo"]({ x: 0, y: h }) });
    };
    Object.defineProperty(AxisRendererX3D.prototype, "chart", {
        /**
         * @ignore Exclude from docs
         * @return {XYChart3D} Chart
         */
        get: function () {
            return this._chart.get();
        },
        /**
         * Chart, associated with the Axis.
         *
         * @ignore Exclude from docs
         * @param {XYChart3D} value Chart
         */
        set: function (chart) {
            if (chart) {
                this._chart.set(chart, chart.events.on("propertychanged", this.handle3DChanged, this));
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Invoked when 3D-related settings change, like depth or angle.
     *
     * @param {AMEvent<Sprite, ISpriteEvents>["propertychanged"]} event Event
     */
    AxisRendererX3D.prototype.handle3DChanged = function (event) {
        if (event.property == "depth" || event.property == "angle") {
            this.invalidate();
        }
    };
    return AxisRendererX3D;
}(__WEBPACK_IMPORTED_MODULE_0__axes_AxisRendererX__["a" /* AxisRendererX */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__core_Registry__["b" /* registry */].registeredClasses["AxisRendererX3D"] = AxisRendererX3D;
//# sourceMappingURL=AxisRendererX3D.js.map

/***/ }),
/* 177 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AxisRendererY3D; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__axes_AxisRendererY__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_utils_Disposer__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_rendering_Path__ = __webpack_require__(8);
/**
 * Module, defining Axis Renderer for vertical 3D axes.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Renderer for vertical 3D axis.
 *
 * @see {@link IAxisRendererY3DEvents} for a list of available events
 * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters
 */
var AxisRendererY3D = /** @class */ (function (_super) {
    __extends(AxisRendererY3D, _super);
    /**
     * Constructor.
     *
     * @param {Axis} axis Related axis
     */
    function AxisRendererY3D() {
        var _this = _super.call(this) || this;
        /**
         * A related chart.
         *
         * @todo Description
         * @type {MutableValueDisposer}
         */
        _this._chart = new __WEBPACK_IMPORTED_MODULE_1__core_utils_Disposer__["d" /* MutableValueDisposer */]();
        _this.className = "AxisRendererY3D";
        _this._disposers.push(_this._chart);
        _this.applyTheme();
        return _this;
    }
    /**
     * Updates and positions a grid element.
     *
     * @ignore Exclude from docs
     * @param {Grid}    grid         Grid element
     * @param {number}  position     Starting position
     * @param {number}  endPosition  End position
     */
    AxisRendererY3D.prototype.updateGridElement = function (grid, position, endPosition) {
        position = position + (endPosition - position) * grid.location;
        var point = this.positionToPoint(position);
        if (grid.element) {
            var dx = this.chart.dx3D;
            var dy = this.chart.dy3D;
            var w = this.getWidth();
            grid.element.attr({ "d": __WEBPACK_IMPORTED_MODULE_2__core_rendering_Path__["moveTo"]({ x: 0, y: 0 }) + __WEBPACK_IMPORTED_MODULE_2__core_rendering_Path__["lineTo"]({ x: dx, y: dy }) + __WEBPACK_IMPORTED_MODULE_2__core_rendering_Path__["lineTo"]({ x: w + dx, y: dy }) });
        }
        this.positionItem(grid, point);
        this.toggleVisibility(grid, position, 0, 1);
    };
    /**
     * Updates and positions the base grid element.
     *
     * @ignore Exclude from docs
     */
    AxisRendererY3D.prototype.updateBaseGridElement = function () {
        _super.prototype.updateBaseGridElement.call(this);
        var w = this.getWidth();
        this.baseGrid.element.attr({
            "d": __WEBPACK_IMPORTED_MODULE_2__core_rendering_Path__["moveTo"]({ x: 0, y: 0 })
                + __WEBPACK_IMPORTED_MODULE_2__core_rendering_Path__["lineTo"]({ x: w, y: 0 })
                + __WEBPACK_IMPORTED_MODULE_2__core_rendering_Path__["lineTo"]({ x: w + this.chart.dx3D, y: this.chart.dy3D })
        });
    };
    Object.defineProperty(AxisRendererY3D.prototype, "chart", {
        /**
         * @ignore Exclude from docs
         * @return {XYChart3D} Chart
         */
        get: function () {
            return this._chart.get();
        },
        /**
         * Chart, associated with the Axis.
         *
         * @ignore Exclude from docs
         * @param {XYChart3D}  value  Chart
         */
        set: function (chart) {
            if (chart) {
                this._chart.set(chart, chart.events.on("propertychanged", this.handle3DChanged, this));
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Invoked when 3D-related settings change, like depth or angle.
     *
     * @param {AMEvent<Sprite, ISpriteEvents>["propertychanged"]} event Event
     */
    AxisRendererY3D.prototype.handle3DChanged = function (event) {
        if (event.property == "depth" || event.property == "angle") {
            this.invalidate();
        }
    };
    return AxisRendererY3D;
}(__WEBPACK_IMPORTED_MODULE_0__axes_AxisRendererY__["a" /* AxisRendererY */]));

//# sourceMappingURL=AxisRendererY3D.js.map

/***/ }),
/* 178 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return ColumnSeries3DDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ColumnSeries3D; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__series_ColumnSeries__ = __webpack_require__(50);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__elements_Column3D__ = __webpack_require__(179);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__ = __webpack_require__(8);
/**
 * 3D column series module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
var ColumnSeries3DDataItem = /** @class */ (function (_super) {
    __extends(ColumnSeries3DDataItem, _super);
    /**
     * Constructor
     */
    function ColumnSeries3DDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "ColumnSeries3DDataItem";
        _this.applyTheme();
        return _this;
    }
    return ColumnSeries3DDataItem;
}(__WEBPACK_IMPORTED_MODULE_0__series_ColumnSeries__["b" /* ColumnSeriesDataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Defines [[Series]] for a 3D column graph.
 *
 * @see {@link IColumnSeries3DEvents} for a list of available Events
 * @see {@link IColumnSeries3DAdapters} for a list of available Adapters
 * @todo Example
 * @important
 */
var ColumnSeries3D = /** @class */ (function (_super) {
    __extends(ColumnSeries3D, _super);
    /**
     * Constructor
     */
    function ColumnSeries3D() {
        var _this = _super.call(this) || this;
        _this.className = "ColumnSeries3D";
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(ColumnSeries3D.prototype, "columnsContainer", {
        get: function () {
            if (this.chart && this.chart.columnsContainer) {
                // @martynas: need to check aria-things here.
                return this.chart.columnsContainer;
            }
            else {
                return this._columnsContainer;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns an element to use for 3D bar.
     * @ignore
     * @return {this["_column"]} Element.
     */
    ColumnSeries3D.prototype.createColumnTemplate = function () {
        return new __WEBPACK_IMPORTED_MODULE_1__elements_Column3D__["a" /* Column3D */]();
    };
    /**
     * Returns SVG path to use as a mask for the series.
     *
     * @return {string} Mask path
     */
    ColumnSeries3D.prototype.getMaskPath = function () {
        var w = this.xAxis.axisLength;
        var h = this.yAxis.axisLength;
        var dx = this.chart.dx3D || 0;
        var dy = this.chart.dy3D || 0;
        return __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["moveTo"]({ x: 0, y: 0 }) + __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["lineTo"]({ x: dx, y: dy }) + __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["lineTo"]({ x: w + dx, y: dy }) + __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["lineTo"]({ x: w + dx, y: h + dy }) + __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["lineTo"]({ x: w, y: h }) + __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["lineTo"]({ x: w, y: h }) + __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["lineTo"]({ x: 0, y: h }) + __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["closePath"]();
    };
    Object.defineProperty(ColumnSeries3D.prototype, "depth", {
        /**
         * @ignore Exclude from docs
         * @return {number} Depth (px)
         */
        get: function () {
            return this.getPropertyValue("depth");
        },
        /**
         * Depth (height) of the slices in the series in pixels.
         *
         * @ignore Exclude from docs
         * @param {number}  value  Depth (px)
         */
        set: function (value) {
            this.setPropertyValue("depth", value, true);
            var template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?
            template.column3D.depth = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnSeries3D.prototype, "angle", {
        /**
         * @ignore Exclude from docs
         * @return {number} Angle (0-360)
         */
        get: function () {
            return this.getPropertyValue("angle");
        },
        /**
         * Angle of view for the slices in series. (0-360)
         *
         * @ignore Exclude from docs
         * @param {number}  value  Angle (0-360)
         */
        set: function (value) {
            this.setPropertyValue("angle", value);
            var template = this.columns.template;
            template.column3D.angle = value;
        },
        enumerable: true,
        configurable: true
    });
    return ColumnSeries3D;
}(__WEBPACK_IMPORTED_MODULE_0__series_ColumnSeries__["a" /* ColumnSeries */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__core_Registry__["b" /* registry */].registeredClasses["ColumnSeries3D"] = ColumnSeries3D;
__WEBPACK_IMPORTED_MODULE_2__core_Registry__["b" /* registry */].registeredClasses["ColumnSeries3DDataItem"] = ColumnSeries3DDataItem;
//# sourceMappingURL=ColumnSeries3D.js.map

/***/ }),
/* 179 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Column3D; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Column__ = __webpack_require__(51);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_elements_3d_Rectangle3D__ = __webpack_require__(151);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_Registry__ = __webpack_require__(0);
/**
 * Module that defines everything related to building 3D Columns.
 * It is a container which has column3D element which is a Rectangle3D.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Class used to creates Column3Ds.
 *
 * @see {@link IColumn3DEvents} for a list of available events
 * @see {@link IColumn3DAdapters} for a list of available Adapters
 * @todo Usage example
 * @important
 */
var Column3D = /** @class */ (function (_super) {
    __extends(Column3D, _super);
    /**
     * Constructor
     */
    function Column3D() {
        var _this = _super.call(this) || this;
        _this.className = "Column3D";
        return _this;
    }
    Column3D.prototype.createAssets = function () {
        this.column3D = this.createChild(__WEBPACK_IMPORTED_MODULE_1__core_elements_3d_Rectangle3D__["a" /* Rectangle3D */]);
        this.column3D.shouldClone = false;
        this.column3D.strokeOpacity = 0;
        // some dirty hack so that if user access column, it won't get error
        this.column = this.column3D;
    };
    Column3D.prototype.validate = function () {
        _super.prototype.validate.call(this);
        if (this.column3D) {
            this.column3D.width = this.pixelWidth;
            this.column3D.height = this.pixelHeight;
        }
    };
    Column3D.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        if (this.column3D) {
            this.column3D.copyFrom(source.column3D);
        }
    };
    return Column3D;
}(__WEBPACK_IMPORTED_MODULE_0__Column__["a" /* Column */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__core_Registry__["b" /* registry */].registeredClasses["Column3D"] = Column3D;
//# sourceMappingURL=Column3D.js.map

/***/ }),
/* 180 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Candlestick; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Column__ = __webpack_require__(51);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_elements_Line__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_Registry__ = __webpack_require__(0);
/**
 * Module that defines everything related to building Candlesticks.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Class used to creates Candlesticks.
 *
 * @see {@link ICandlestickEvents} for a list of available events
 * @see {@link ICandlestickAdapters} for a list of available Adapters
 * @todo Usage example
 * @important
 */
var Candlestick = /** @class */ (function (_super) {
    __extends(Candlestick, _super);
    /**
     * Constructor
     */
    function Candlestick() {
        var _this = _super.call(this) || this;
        _this.className = "Candlestick";
        _this.layout = "none";
        return _this;
    }
    Candlestick.prototype.createAssets = function () {
        _super.prototype.createAssets.call(this);
        this.lowLine = this.createChild(__WEBPACK_IMPORTED_MODULE_1__core_elements_Line__["a" /* Line */]);
        this.lowLine.shouldClone = false;
        this.highLine = this.createChild(__WEBPACK_IMPORTED_MODULE_1__core_elements_Line__["a" /* Line */]);
        this.highLine.shouldClone = false;
    };
    Candlestick.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        if (this.lowLine) {
            this.lowLine.copyFrom(source.lowLine);
        }
        if (this.highLine) {
            this.highLine.copyFrom(source.highLine);
        }
    };
    return Candlestick;
}(__WEBPACK_IMPORTED_MODULE_0__Column__["a" /* Column */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__core_Registry__["b" /* registry */].registeredClasses["Candlestick"] = Candlestick;
//# sourceMappingURL=Candlestick.js.map

/***/ }),
/* 181 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RadarColumn; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Column__ = __webpack_require__(51);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_elements_Slice__ = __webpack_require__(48);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_Type__ = __webpack_require__(1);
/**
 * Module that defines everything related to building RadarColumns.
 * It is a container which has radarColumn element which is a Slice.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Class used to creates RadarColumns.
 *
 * @see {@link IRadarColumnEvents} for a list of available events
 * @see {@link IRadarColumnAdapters} for a list of available Adapters
 * @todo Usage example
 * @important
 */
var RadarColumn = /** @class */ (function (_super) {
    __extends(RadarColumn, _super);
    /**
     * Constructor
     */
    function RadarColumn() {
        var _this = _super.call(this) || this;
        _this.className = "RadarColumn";
        return _this;
    }
    RadarColumn.prototype.createAssets = function () {
        this.radarColumn = this.createChild(__WEBPACK_IMPORTED_MODULE_1__core_elements_Slice__["a" /* Slice */]);
        this.radarColumn.shouldClone = false;
        this.radarColumn.strokeOpacity = undefined;
        // some dirty hack so that if user access column, it won't get error
        this.column = this.radarColumn;
    };
    RadarColumn.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        if (this.radarColumn) {
            this.radarColumn.copyFrom(source.radarColumn);
        }
    };
    /**
     * X coordinate for the slice tooltip.
     *
     * @return {number} X
     */
    RadarColumn.prototype.getTooltipX = function () {
        var value = this.getPropertyValue("tooltipX");
        if (!__WEBPACK_IMPORTED_MODULE_3__core_utils_Type__["isNumber"](value)) {
            value = this.radarColumn.tooltipX;
        }
        return value;
    };
    /**
     * Y coordinate for the slice tooltip.
     *
     * @return {number} Y
     */
    RadarColumn.prototype.getTooltipY = function () {
        var value = this.getPropertyValue("tooltipX");
        if (!__WEBPACK_IMPORTED_MODULE_3__core_utils_Type__["isNumber"](value)) {
            value = this.radarColumn.tooltipY;
        }
        return value;
    };
    return RadarColumn;
}(__WEBPACK_IMPORTED_MODULE_0__Column__["a" /* Column */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__core_Registry__["b" /* registry */].registeredClasses["RadarColumn"] = RadarColumn;
//# sourceMappingURL=RadarColumn.js.map

/***/ }),
/* 182 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ConeColumn; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Column__ = __webpack_require__(51);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_elements_3d_Cone__ = __webpack_require__(149);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_Registry__ = __webpack_require__(0);
/**
 * Module that defines everything related to building Cone Columns.
 * It is a container which has coneColumn element which is a Cone.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Class used to creates ConeColumns.
 *
 * @see {@link IConeColumnEvents} for a list of available events
 * @see {@link IConeColumnAdapters} for a list of available Adapters
 * @todo Usage example
 * @important
 */
var ConeColumn = /** @class */ (function (_super) {
    __extends(ConeColumn, _super);
    /**
     * Constructor
     */
    function ConeColumn() {
        var _this = _super.call(this) || this;
        _this.className = "ConeColumn";
        return _this;
    }
    ConeColumn.prototype.createAssets = function () {
        this.coneColumn = this.createChild(__WEBPACK_IMPORTED_MODULE_1__core_elements_3d_Cone__["a" /* Cone */]);
        this.coneColumn.shouldClone = false;
        // some dirty hack so that if user access column, it won't get error
        this.column = this.coneColumn;
    };
    ConeColumn.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        if (this.coneColumn) {
            this.coneColumn.copyFrom(source.coneColumn);
        }
    };
    return ConeColumn;
}(__WEBPACK_IMPORTED_MODULE_0__Column__["a" /* Column */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__core_Registry__["b" /* registry */].registeredClasses["ConeColumn"] = ConeColumn;
//# sourceMappingURL=ConeColumn.js.map

/***/ }),
/* 183 */,
/* 184 */,
/* 185 */,
/* 186 */,
/* 187 */,
/* 188 */,
/* 189 */,
/* 190 */,
/* 191 */,
/* 192 */,
/* 193 */,
/* 194 */,
/* 195 */,
/* 196 */,
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {

var _map = __webpack_require__(53);

var _map2 = _interopRequireDefault(_map);

var _bootstrapSelect = __webpack_require__(198);

var _bootstrapSelect2 = _interopRequireDefault(_bootstrapSelect);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var api = __webpack_require__(33);

var radarChart = __webpack_require__(200);
var horizontalBar = __webpack_require__(228);
var growthChart = __webpack_require__(229);
var healthChart = __webpack_require__(230);

// require('bootstrap');

__webpack_require__(231)($);
// require('bootstrap-select/js/bootstrap-select');

window.onload = function () {

    if ($('#inputState').length > 0) {

        $('#inputState').on('change', function () {

            var currentAbbr = $('#state-tiny').attr("data-state-abbr");
            var abbr = this.value;

            $('.state-btn').attr('data-selected-abbr', abbr);
        });

        $('.state-btn').click(function () {

            var selected = $(this).attr('data-selected-abbr');
            var current = $(this).attr('data-current-abbr');

            console.log(selected);
            console.log(current);

            if (current === undefined) {
                console.log("this is go to button");
                window.location = "/state/" + selected.toUpperCase();
            } else {

                if (selected === undefined) {
                    console.log("nothing is selected");
                    return;
                }

                window.location = "/state/compare/" + current.toUpperCase() + "/" + selected.toUpperCase();
            }
        });
    }

    // $('#inputState').selectpicker({
    //     style: 'btn-info',
    //     size: 1
    // });


    $.scrollify({
        section: ".page",
        interstitialSection: "body",
        easing: "easeOutExpo",
        scrollSpeed: 1100,
        offset: -62,
        scrollbars: true,
        standardScrollElements: "",
        overflowScroll: true,
        updateHash: true,
        touchScroll: true,
        before: function before() {},
        after: function after() {},
        afterResize: function afterResize() {},
        afterRender: function afterRender() {}
    });
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(199);

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(21)(content, options);

if(content.locals) module.exports = content.locals;

if(false) {
	module.hot.accept("!!../../../css-loader/index.js!./bootstrap-select.css", function() {
		var newContent = require("!!../../../css-loader/index.js!./bootstrap-select.css");

		if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];

		var locals = (function(a, b) {
			var key, idx = 0;

			for(key in a) {
				if(!b || a[key] !== b[key]) return false;
				idx++;
			}

			for(key in b) idx--;

			return idx === 0;
		}(content.locals, newContent.locals));

		if(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');

		update(newContent);
	});

	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(20)(false);
// imports


// module
exports.push([module.i, "/*!\r\n * Bootstrap-select v1.13.1 (https://developer.snapappointments.com/bootstrap-select)\r\n *\r\n * Copyright 2012-2018 SnapAppointments, LLC\r\n * Licensed under MIT (https://github.com/snapappointments/bootstrap-select/blob/master/LICENSE)\r\n */\r\n\r\nselect.bs-select-hidden,\n.bootstrap-select > select.bs-select-hidden,\nselect.selectpicker {\n  display: none !important;\n}\n.bootstrap-select {\n  width: 220px \\0;\n  /*IE9 and below*/\n}\n.bootstrap-select > .dropdown-toggle {\n  position: relative;\n  width: 100%;\n  z-index: 1;\n  text-align: right;\n  white-space: nowrap;\n}\n.bootstrap-select > .dropdown-toggle.bs-placeholder,\n.bootstrap-select > .dropdown-toggle.bs-placeholder:hover,\n.bootstrap-select > .dropdown-toggle.bs-placeholder:focus,\n.bootstrap-select > .dropdown-toggle.bs-placeholder:active {\n  color: #999;\n}\n.bootstrap-select > .dropdown-toggle.bs-placeholder.btn-primary,\n.bootstrap-select > .dropdown-toggle.bs-placeholder.btn-secondary,\n.bootstrap-select > .dropdown-toggle.bs-placeholder.btn-success,\n.bootstrap-select > .dropdown-toggle.bs-placeholder.btn-danger,\n.bootstrap-select > .dropdown-toggle.bs-placeholder.btn-info,\n.bootstrap-select > .dropdown-toggle.bs-placeholder.btn-dark,\n.bootstrap-select > .dropdown-toggle.bs-placeholder.btn-primary:hover,\n.bootstrap-select > .dropdown-toggle.bs-placeholder.btn-secondary:hover,\n.bootstrap-select > .dropdown-toggle.bs-placeholder.btn-success:hover,\n.bootstrap-select > .dropdown-toggle.bs-placeholder.btn-danger:hover,\n.bootstrap-select > .dropdown-toggle.bs-placeholder.btn-info:hover,\n.bootstrap-select > .dropdown-toggle.bs-placeholder.btn-dark:hover,\n.bootstrap-select > .dropdown-toggle.bs-placeholder.btn-primary:focus,\n.bootstrap-select > .dropdown-toggle.bs-placeholder.btn-secondary:focus,\n.bootstrap-select > .dropdown-toggle.bs-placeholder.btn-success:focus,\n.bootstrap-select > .dropdown-toggle.bs-placeholder.btn-danger:focus,\n.bootstrap-select > .dropdown-toggle.bs-placeholder.btn-info:focus,\n.bootstrap-select > .dropdown-toggle.bs-placeholder.btn-dark:focus,\n.bootstrap-select > .dropdown-toggle.bs-placeholder.btn-primary:active,\n.bootstrap-select > .dropdown-toggle.bs-placeholder.btn-secondary:active,\n.bootstrap-select > .dropdown-toggle.bs-placeholder.btn-success:active,\n.bootstrap-select > .dropdown-toggle.bs-placeholder.btn-danger:active,\n.bootstrap-select > .dropdown-toggle.bs-placeholder.btn-info:active,\n.bootstrap-select > .dropdown-toggle.bs-placeholder.btn-dark:active {\n  color: rgba(255, 255, 255, 0.5);\n}\n.bootstrap-select > select {\n  position: absolute !important;\n  bottom: 0;\n  left: 50%;\n  display: block !important;\n  width: 0.5px !important;\n  height: 100% !important;\n  padding: 0 !important;\n  opacity: 0 !important;\n  border: none;\n}\n.bootstrap-select > select.mobile-device {\n  top: 0;\n  left: 0;\n  display: block !important;\n  width: 100% !important;\n  z-index: 2;\n}\n.has-error .bootstrap-select .dropdown-toggle,\n.error .bootstrap-select .dropdown-toggle,\n.bootstrap-select.is-invalid .dropdown-toggle,\n.was-validated .bootstrap-select .selectpicker:invalid + .dropdown-toggle {\n  border-color: #b94a48;\n}\n.bootstrap-select.is-valid .dropdown-toggle,\n.was-validated .bootstrap-select .selectpicker:valid + .dropdown-toggle {\n  border-color: #28a745;\n}\n.bootstrap-select.fit-width {\n  width: auto !important;\n}\n.bootstrap-select:not([class*=\"col-\"]):not([class*=\"form-control\"]):not(.input-group-btn) {\n  width: 220px;\n}\n.bootstrap-select .dropdown-toggle:focus {\n  outline: thin dotted #333333 !important;\n  outline: 5px auto -webkit-focus-ring-color !important;\n  outline-offset: -2px;\n}\n.bootstrap-select.form-control {\n  margin-bottom: 0;\n  padding: 0;\n  border: none;\n}\n:not(.input-group) > .bootstrap-select.form-control:not([class*=\"col-\"]) {\n  width: 100%;\n}\n.bootstrap-select.form-control.input-group-btn {\n  z-index: auto;\n}\n.bootstrap-select.form-control.input-group-btn:not(:first-child):not(:last-child) > .btn {\n  border-radius: 0;\n}\n.bootstrap-select:not(.input-group-btn),\n.bootstrap-select[class*=\"col-\"] {\n  float: none;\n  display: inline-block;\n  margin-left: 0;\n}\n.bootstrap-select.dropdown-menu-right,\n.bootstrap-select[class*=\"col-\"].dropdown-menu-right,\n.row .bootstrap-select[class*=\"col-\"].dropdown-menu-right {\n  float: right;\n}\n.form-inline .bootstrap-select,\n.form-horizontal .bootstrap-select,\n.form-group .bootstrap-select {\n  margin-bottom: 0;\n}\n.form-group-lg .bootstrap-select.form-control,\n.form-group-sm .bootstrap-select.form-control {\n  padding: 0;\n}\n.form-group-lg .bootstrap-select.form-control .dropdown-toggle,\n.form-group-sm .bootstrap-select.form-control .dropdown-toggle {\n  height: 100%;\n  font-size: inherit;\n  line-height: inherit;\n  border-radius: inherit;\n}\n.bootstrap-select.form-control-sm .dropdown-toggle,\n.bootstrap-select.form-control-lg .dropdown-toggle {\n  font-size: inherit;\n  line-height: inherit;\n  border-radius: inherit;\n}\n.bootstrap-select.form-control-sm .dropdown-toggle {\n  padding: 0.25rem 0.5rem;\n}\n.bootstrap-select.form-control-lg .dropdown-toggle {\n  padding: 0.5rem 1rem;\n}\n.form-inline .bootstrap-select .form-control {\n  width: 100%;\n}\n.bootstrap-select.disabled,\n.bootstrap-select > .disabled {\n  cursor: not-allowed;\n}\n.bootstrap-select.disabled:focus,\n.bootstrap-select > .disabled:focus {\n  outline: none !important;\n}\n.bootstrap-select.bs-container {\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 0 !important;\n  padding: 0 !important;\n}\n.bootstrap-select.bs-container .dropdown-menu {\n  z-index: 1060;\n}\n.bootstrap-select .dropdown-toggle:before {\n  content: '';\n  display: inline-block;\n}\n.bootstrap-select .dropdown-toggle .filter-option {\n  position: absolute;\n  top: 0;\n  left: 0;\n  padding-top: inherit;\n  padding-right: inherit;\n  padding-bottom: inherit;\n  padding-left: inherit;\n  height: 100%;\n  width: 100%;\n  text-align: left;\n}\n.bootstrap-select .dropdown-toggle .filter-option-inner {\n  padding-right: inherit;\n}\n.bootstrap-select .dropdown-toggle .filter-option-inner-inner {\n  overflow: hidden;\n}\n.bootstrap-select .dropdown-toggle .caret {\n  position: absolute;\n  top: 50%;\n  right: 12px;\n  margin-top: -2px;\n  vertical-align: middle;\n}\n.input-group .bootstrap-select.form-control .dropdown-toggle {\n  border-radius: inherit;\n}\n.bootstrap-select[class*=\"col-\"] .dropdown-toggle {\n  width: 100%;\n}\n.bootstrap-select .dropdown-menu {\n  min-width: 100%;\n  -webkit-box-sizing: border-box;\n     -moz-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.bootstrap-select .dropdown-menu > .inner:focus {\n  outline: none !important;\n}\n.bootstrap-select .dropdown-menu.inner {\n  position: static;\n  float: none;\n  border: 0;\n  padding: 0;\n  margin: 0;\n  border-radius: 0;\n  -webkit-box-shadow: none;\n          box-shadow: none;\n}\n.bootstrap-select .dropdown-menu li {\n  position: relative;\n}\n.bootstrap-select .dropdown-menu li.active small {\n  color: #fff;\n}\n.bootstrap-select .dropdown-menu li.disabled a {\n  cursor: not-allowed;\n}\n.bootstrap-select .dropdown-menu li a {\n  cursor: pointer;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n}\n.bootstrap-select .dropdown-menu li a.opt {\n  position: relative;\n  padding-left: 2.25em;\n}\n.bootstrap-select .dropdown-menu li a span.check-mark {\n  display: none;\n}\n.bootstrap-select .dropdown-menu li a span.text {\n  display: inline-block;\n}\n.bootstrap-select .dropdown-menu li small {\n  padding-left: 0.5em;\n}\n.bootstrap-select .dropdown-menu .notify {\n  position: absolute;\n  bottom: 5px;\n  width: 96%;\n  margin: 0 2%;\n  min-height: 26px;\n  padding: 3px 5px;\n  background: #f5f5f5;\n  border: 1px solid #e3e3e3;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05);\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05);\n  pointer-events: none;\n  opacity: 0.9;\n  -webkit-box-sizing: border-box;\n     -moz-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.bootstrap-select .no-results {\n  padding: 3px;\n  background: #f5f5f5;\n  margin: 0 5px;\n  white-space: nowrap;\n}\n.bootstrap-select.fit-width .dropdown-toggle .filter-option {\n  position: static;\n  display: inline;\n  padding: 0;\n}\n.bootstrap-select.fit-width .dropdown-toggle .filter-option-inner,\n.bootstrap-select.fit-width .dropdown-toggle .filter-option-inner-inner {\n  display: inline;\n}\n.bootstrap-select.fit-width .dropdown-toggle .caret {\n  position: static;\n  top: auto;\n  margin-top: -1px;\n}\n.bootstrap-select.show-tick .dropdown-menu .selected span.check-mark {\n  position: absolute;\n  display: inline-block;\n  right: 15px;\n  top: 5px;\n}\n.bootstrap-select.show-tick .dropdown-menu li a span.text {\n  margin-right: 34px;\n}\n.bootstrap-select .bs-ok-default:after {\n  content: '';\n  display: block;\n  width: 0.5em;\n  height: 1em;\n  border-style: solid;\n  border-width: 0 0.26em 0.26em 0;\n  -webkit-transform: rotate(45deg);\n      -ms-transform: rotate(45deg);\n       -o-transform: rotate(45deg);\n          transform: rotate(45deg);\n}\n.bootstrap-select.show-menu-arrow.open > .dropdown-toggle,\n.bootstrap-select.show-menu-arrow.show > .dropdown-toggle {\n  z-index: 1061;\n}\n.bootstrap-select.show-menu-arrow .dropdown-toggle .filter-option:before {\n  content: '';\n  border-left: 7px solid transparent;\n  border-right: 7px solid transparent;\n  border-bottom: 7px solid rgba(204, 204, 204, 0.2);\n  position: absolute;\n  bottom: -4px;\n  left: 9px;\n  display: none;\n}\n.bootstrap-select.show-menu-arrow .dropdown-toggle .filter-option:after {\n  content: '';\n  border-left: 6px solid transparent;\n  border-right: 6px solid transparent;\n  border-bottom: 6px solid white;\n  position: absolute;\n  bottom: -4px;\n  left: 10px;\n  display: none;\n}\n.bootstrap-select.show-menu-arrow.dropup .dropdown-toggle .filter-option:before {\n  bottom: auto;\n  top: -4px;\n  border-top: 7px solid rgba(204, 204, 204, 0.2);\n  border-bottom: 0;\n}\n.bootstrap-select.show-menu-arrow.dropup .dropdown-toggle .filter-option:after {\n  bottom: auto;\n  top: -4px;\n  border-top: 6px solid white;\n  border-bottom: 0;\n}\n.bootstrap-select.show-menu-arrow.pull-right .dropdown-toggle .filter-option:before {\n  right: 12px;\n  left: auto;\n}\n.bootstrap-select.show-menu-arrow.pull-right .dropdown-toggle .filter-option:after {\n  right: 13px;\n  left: auto;\n}\n.bootstrap-select.show-menu-arrow.open > .dropdown-toggle .filter-option:before,\n.bootstrap-select.show-menu-arrow.show > .dropdown-toggle .filter-option:before,\n.bootstrap-select.show-menu-arrow.open > .dropdown-toggle .filter-option:after,\n.bootstrap-select.show-menu-arrow.show > .dropdown-toggle .filter-option:after {\n  display: block;\n}\n.bs-searchbox,\n.bs-actionsbox,\n.bs-donebutton {\n  padding: 4px 8px;\n}\n.bs-actionsbox {\n  width: 100%;\n  -webkit-box-sizing: border-box;\n     -moz-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.bs-actionsbox .btn-group button {\n  width: 50%;\n}\n.bs-donebutton {\n  float: left;\n  width: 100%;\n  -webkit-box-sizing: border-box;\n     -moz-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.bs-donebutton .btn-group button {\n  width: 100%;\n}\n.bs-searchbox + .bs-actionsbox {\n  padding: 0 8px 4px;\n}\n.bs-searchbox .form-control {\n  margin-bottom: 0;\n  width: 100%;\n  float: none;\n}", ""]);

// exports


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {

var _core = __webpack_require__(68);

var am4core = _interopRequireWildcard(_core);

var _charts = __webpack_require__(79);

var am4charts = _interopRequireWildcard(_charts);

var _animated = __webpack_require__(85);

var _animated2 = _interopRequireDefault(_animated);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var api = __webpack_require__(33);

am4core.useTheme(_animated2.default);

if ($('#radar-chart').length > 0) {

    var abbr = $('#state-name').attr('data-abbr');

    api.getData("state/ratings/average/" + abbr).then(function (avgData) {

        console.log(avgData.metrics);
        var radarData = avgData.metrics;

        var chart = am4core.create("radar-chart", am4charts.RadarChart);

        var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());

        categoryAxis.dataFields.category = "metric";

        var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());

        var series = chart.series.push(new am4charts.RadarColumnSeries());
        series.name = "True Sense";
        // series.bullets.push(new am4charts.CircleBullet());
        series.strokeWidth = 3;
        series.dataFields.valueY = "value";
        series.dataFields.categoryX = "metric";
        series.strokeWidth = 0;
        series.columns.template.tooltipText = "Series: {name}\nCategory: {categoryX}\nValue: {valueY}";
        series.sequencedInterpolation = true;
        series.sequencedInterpolationDelay = 100;
        series.stacked = true;
        series.fill = '#ff9890';

        var series2 = chart.series.push(new am4charts.RadarColumnSeries());
        series2.dataFields.valueY = "userValue";
        series2.dataFields.categoryX = "metric";
        series2.name = "User Ratings";
        series2.strokeWidth = 0;
        series2.sequencedInterpolation = true;
        series2.columns.template.tooltipText = "Series: {name}\nCategory: {categoryX}\nValue: {valueY}";
        series2.sequencedInterpolationDelay = 100;
        series2.stacked = true;
        series2.fill = '#ffcbb5';

        chart.cursor = new am4charts.RadarCursor();
        chart.legend = new am4charts.Legend();

        // chart.startAngle = -170;
        // chart.endAngle = -10;
        // chart.innerRadius = am4core.percent(50);
        chart.categoryField = "metric";

        chart.data = [{
            "metric": "Safety",
            "value": 9.2,
            "userValue": radarData['Crime']
        }, {
            "metric": "Education",
            "value": 8.4,
            "userValue": radarData['Education']
        }, {
            "metric": "Growth",
            "value": 5.5,
            "userValue": radarData['Growth']
        }, {
            "metric": "Employment",
            "value": 7.2,
            "userValue": radarData['Employment']
        }, {
            "metric": "Health",
            "value": 7.6,
            "userValue": radarData['Health']
        }];
    });
}

if ($('#health-chart').length > 0) {

    // Create chart instance
    var chart = am4core.create("health-chart", am4charts.XYChart);

    // Add data
    chart.data = [{
        "year": "2010",
        "population": 501.9,
        "assault": 250,
        "rape": 199
    }, {
        "year": "2011",
        "population": 301.9,
        "assault": 222,
        "rape": 251
    }, {
        "year": "2012",
        "population": 201.1,
        "assault": 170,
        "rape": 199
    }, {
        "year": "2013",
        "population": 165.8,
        "assault": 122,
        "rape": 90
    }, {
        "year": "2014",
        "population": 139.9,
        "assault": 99,
        "rape": 252
    }, {
        "year": "2015",
        "population": 128.3,
        "assault": 85,
        "rape": 84
    }, {
        "year": "2016",
        "population": 99,
        "assault": 93,
        "rape": 142
    }];

    // Create axes
    var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
    categoryAxis.dataFields.category = "year";
    categoryAxis.title.text = "Health Data";
    categoryAxis.renderer.grid.template.location = 0;
    categoryAxis.renderer.minGridDistance = 20;

    var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
    valueAxis.title.text = "Value ";

    // Create series
    var series = chart.series.push(new am4charts.ColumnSeries());
    series.dataFields.valueY = "population";
    series.dataFields.categoryX = "year";
    series.name = "Populations";
    series.tooltipText = "{name}: [bold]{valueY}[/]";
    // This has no effect
    // series.stacked = true;

    var series2 = chart.series.push(new am4charts.ColumnSeries());
    series2.dataFields.valueY = "assault";
    series2.dataFields.categoryX = "year";
    series2.name = "Insurance Coverage";
    series2.tooltipText = "{name}: [bold]{valueY}[/]";
    // Do not try to stack on top of previous series
    // series2.stacked = true;

    var series3 = chart.series.push(new am4charts.ColumnSeries());
    series3.dataFields.valueY = "rape";
    series3.dataFields.categoryX = "year";
    series3.name = "Doctors";
    series3.tooltipText = "{name}: [bold]{valueY}[/]";
    series3.stacked = true;

    // Add cursor
    chart.cursor = new am4charts.XYCursor();

    // Add legend
    chart.legend = new am4charts.Legend();
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ }),
/* 201 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_DOM__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Dictionary__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Disposer__ = __webpack_require__(11);



var rules = new __WEBPACK_IMPORTED_MODULE_1__utils_Dictionary__["a" /* Dictionary */]();
/**
 * Default CSS for Popup.
 *
 * @ignore Exclude from docs
 * @param  {string}     prefix  Prefix for CSS classes
 * @return {IDisposer}          Disposer for the CSS definition
 */
/* harmony default export */ __webpack_exports__["a"] = (function (prefix) {
    if (!prefix) {
        prefix = "ampopup";
    }
    var counter = rules.insertKeyIfEmpty(prefix, function () {
        var disposer = new __WEBPACK_IMPORTED_MODULE_2__utils_Disposer__["c" /* MultiDisposer */]([
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["c" /* StyleRule */]("." + prefix, {
                //"width": "100%",
                //"height": "100%",
                "overflow": "visible",
                "position": "absolute",
                "top": "0",
                "left": "0",
                "z-index": "2000"
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["c" /* StyleRule */]("." + prefix + "-curtain", {
                "width": "100%",
                "height": "100%",
                "position": "absolute",
                "top": "0",
                "left": "0",
                "z-index": "2001",
                "background": "#fff",
                "opacity": "0.5"
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["c" /* StyleRule */]("." + prefix + "-title", {
                "font-weight": "bold",
                "font-size": "120%"
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["c" /* StyleRule */]("." + prefix + "-content", {
                /*"width": "100%",
                "height": "100%",*/
                "padding": "1em 2em",
                "background": "rgb(255, 255, 255);",
                "background-color": "rgba(255, 255, 255, 0.8)",
                "display": "inline-block",
                "position": "absolute",
                "max-width": "90%",
                "max-height": "90%",
                "overflow": "auto",
                "z-index": "2002"
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["c" /* StyleRule */]("." + prefix + "-close", {
                "display": "block",
                "position": "absolute",
                "top": "0.3em",
                "right": "0.3em",
                "background-color": "rgb(100, 100, 100)",
                "background": "rgba(100, 100, 100, 0.1) url(data:image/svg+xml;charset=utf-8;base64,PHN2ZyBoZWlnaHQ9IjUxMiIgdmVyc2lvbj0iMSIgdmlld0JveD0iMCAwIDUxMiA1MTIiIHdpZHRoPSI1MTIiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyI+PHBhdGggZD0iTTQ0NS4yIDEwOS4ybC00Mi40LTQyLjRMMjU2IDIxMy42IDEwOS4yIDY2LjhsLTQyLjQgNDIuNEwyMTMuNiAyNTYgNjYuOCA0MDIuOGw0Mi40IDQyLjRMMjU2IDI5OC40bDE0Ni44IDE0Ni44IDQyLjQtNDIuNEwyOTguNCAyNTYiLz48L3N2Zz4=) no-repeat center",
                "background-size": "80%",
                "width": "1.2em",
                "height": "1.2em",
                "cursor": "pointer"
            }),
        ]);
        return new __WEBPACK_IMPORTED_MODULE_2__utils_Disposer__["a" /* CounterDisposer */](function () {
            rules.removeKey(prefix);
            disposer.dispose();
        });
    });
    return counter.increment();
});
//# sourceMappingURL=PopupCSS.js.map

/***/ }),
/* 202 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Translation file
 * Locale: en (default international English)
 *
 * Use this file as a template to create translations. Leave the key part in
 * English intact. Fill the value with a translation.
 *
 * Empty string means no translation, so default "Internationtional English"
 * will beused.
 *
 * IMPORTANT:
 * When translating make good effort to keep the translation length
 * at least the same chartcount as the English, especially for short prompts.
 *
 * Having significantly longer prompts may distort the actual charts.
 *
 * NOTE:
 * Some prompts - like months or weekdays - come in two versions: full and
 * shortened.
 *
 * If there's no official shortened version of these in your language, and it
 * would not be possible to invent such short versions that don't seem weird
 * to native speakers of that language, fill those with the same as full
 * version.
 *
 * PLACEHODERS:
 * Some prompts have placeholders like "%1". Those will be replaced by actual
 * values during translation and should be retained in the translated prompts.
 *
 * Placeholder positions may be changed to better suit structure of the
 * sentence.
 *
 * For example "From %1 to %2", when actually used will replace "%1" with an
 * actual value representing range start, and "%2" will be replaced by end
 * value.
 *
 * E.g. in a Scrollbar for Value axis "From %1 to %2" will become
 * "From 100 to 200". You may translate "From" and "to", as well as re-arrange
 * the order of the prompt itself, but make sure the "%1" and "%2" remain, in
 * places where they will make sense.
 *
 * Save the file as language_LOCALE, i.e. en_GB, fr_FR, etc.
 *
 * @type {ILocale}
 */
/* harmony default export */ __webpack_exports__["a"] = ({
    // Number formatting options.
    // 
    // Please check with the local standards which separator is accepted to be
    // used for separating decimals, and which for thousands.
    "_decimalSeparator": ".",
    "_thousandSeparator": ",",
    // Default date formats for various periods.
    // 
    // This should reflect official or de facto formatting universally accepted
    // in the country translation is being made for
    // Available format codes here:
    // https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/#Format_codes
    // 
    // This will be used when formatting date/time for particular granularity,
    // e.g. "_date_hour" will be shown whenever we need to show time as hours.
    "_date_millisecond": "mm:ss SSS",
    "_date_second": "HH:mm:ss",
    "_date_minute": "HH:mm",
    "_date_hour": "HH:mm",
    "_date_day": "MMM dd",
    "_date_week": "ww",
    "_date_month": "MMM",
    "_date_year": "yyyy",
    // Default duration formats for various base units.
    // 
    // This will be used by DurationFormatter to format numeric values into
    // duration.
    // 
    // Available codes here:
    // https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/#Available_Codes
    "_duration_millisecond": "SSS",
    "_duration_second": "ss",
    "_duration_minute": "mm",
    "_duration_hour": "hh",
    "_duration_day": "dd",
    "_duration_week": "ww",
    "_duration_month": "MM",
    "_duration_year": "yyyy",
    // Era translations
    "_era_ad": "AD",
    "_era_bc": "BC",
    // Day part, used in 12-hour formats, e.g. 5 P.M.
    // Please note that these come in 3 variants:
    // * one letter (e.g. "A")
    // * two letters (e.g. "AM")
    // * two letters with dots (e.g. "A.M.")
    // 
    // All three need to to be translated even if they are all the same. Some
    // users might use one, some the other.
    "A": "",
    "P": "",
    "AM": "",
    "PM": "",
    "A.M.": "",
    "P.M.": "",
    // Date-related stuff.
    // 
    // When translating months, if there's a difference, use the form which is
    // best for a full date, e.g. as you would use it in "2018 January 1".
    // 
    // Note that May is listed twice. This is because in English May is the same
    // in both long and short forms, while in other languages it may not be the
    // case. Translate "May" to full word, while "May(short)" to shortened
    // version.
    "January": "",
    "February": "",
    "March": "",
    "April": "",
    "May": "",
    "June": "",
    "July": "",
    "August": "",
    "September": "",
    "October": "",
    "November": "",
    "December": "",
    "Jan": "",
    "Feb": "",
    "Mar": "",
    "Apr": "",
    "May(short)": "May",
    "Jun": "",
    "Jul": "",
    "Aug": "",
    "Sep": "",
    "Oct": "",
    "Nov": "",
    "Dec": "",
    // Weekdays.
    "Sunday": "",
    "Monday": "",
    "Tuesday": "",
    "Wednesday": "",
    "Thursday": "",
    "Friday": "",
    "Saturday": "",
    "Sun": "",
    "Mon": "",
    "Tue": "",
    "Wed": "",
    "Thu": "",
    "Fri": "",
    "Sat": "",
    // Date ordinal function.
    // 
    // This is used when adding number ordinal when formatting days in dates.
    // 
    // E.g. "January 1st", "February 2nd".
    // 
    // The function accepts day number, and returns a string to be added to the
    // day, like in default English translation, if we pass in 2, we will receive
    // "nd" back.
    "_dateOrd": function (day) {
        var res = "th";
        if ((day < 11) || (day > 13)) {
            switch (day % 10) {
                case 1:
                    res = "st";
                    break;
                case 2:
                    res = "nd";
                    break;
                case 3:
                    res = "rd";
                    break;
            }
        }
        return res;
    },
    // Various chart controls.
    // Shown as a tooltip on zoom out button.
    "Zoom Out": "",
    // Timeline buttons
    "Play": "",
    "Stop": "",
    // Chart's Legend screen reader title.
    "Legend": "",
    // Legend's item screen reader indicator.
    "Click, tap or press ENTER to toggle": "",
    // Shown when the cahrt is busy loading something.
    "Loading": "",
    // Shown as the first button in the breadcrumb navigation, e.g.:
    // Home > First level > ...
    "Home": "",
    // Chart types.
    // Those are used as default screen reader titles for the main chart element
    // unless developer has set some more descriptive title.
    "Chart": "",
    "Serial chart": "",
    "X/Y chart": "",
    "Pie chart": "",
    "Gauge chart": "",
    "Radar chart": "",
    "Sankey diagram": "",
    "Chord diagram": "",
    "Flow diagram": "",
    "TreeMap chart": "",
    // Series types.
    // Used to name series by type for screen readers if they do not have their
    // name set.
    "Series": "",
    "Candlestick Series": "",
    "Column Series": "",
    "Line Series": "",
    "Pie Slice Series": "",
    "X/Y Series": "",
    // Map-related stuff.
    "Map": "",
    "Press ENTER to zoom in": "",
    "Press ENTER to zoom out": "",
    "Use arrow keys to zoom in and out": "",
    "Use plus and minus keys on your keyboard to zoom in and out": "",
    // Export-related stuff.
    // These prompts are used in Export menu labels.
    // 
    // "Export" is the top-level menu item.
    // 
    // "Image", "Data", "Print" as second-level indicating type of export
    // operation.
    // 
    // Leave actual format untranslated, unless you absolutely know that they
    // would convey more meaning in some other way.
    "Export": "",
    "Image": "",
    "Data": "",
    "Print": "",
    "Click, tap or press ENTER to open": "",
    "Click, tap or press ENTER to print.": "",
    "Click, tap or press ENTER to export as %1.": "",
    'To save the image, right-click this link and choose "Save picture as..."': "",
    'To save the image, right-click thumbnail on the left and choose "Save picture as..."': "",
    "(Press ESC to close this message)": "",
    "Image Export Complete": "",
    "Export operation took longer than expected. Something might have gone wrong.": "",
    "Saved from": "",
    "PNG": "",
    "JPG": "",
    "GIF": "",
    "SVG": "",
    "PDF": "",
    "JSON": "",
    "CSV": "",
    "XLSX": "",
    // Scrollbar-related stuff.
    // 
    // Scrollbar is a control which can zoom and pan the axes on the chart.
    // 
    // Each scrollbar has two grips: left or right (for horizontal scrollbar) or
    // upper and lower (for vertical one).
    // 
    // Prompts change in relation to whether Scrollbar is vertical or horizontal.
    // 
    // The final section is used to indicate the current range of selection.
    "Use TAB to select grip buttons or left and right arrows to change selection": "",
    "Use left and right arrows to move selection": "",
    "Use left and right arrows to move left selection": "",
    "Use left and right arrows to move right selection": "",
    "Use TAB select grip buttons or up and down arrows to change selection": "",
    "Use up and down arrows to move selection": "",
    "Use up and down arrows to move lower selection": "",
    "Use up and down arrows to move upper selection": "",
    "From %1 to %2": "",
    "From %1": "",
    "To %1": "",
    // Data loader-related.
    "No parser available for file: %1": "",
    "Error parsing file: %1": "",
    "Unable to load file: %1": "",
    "Invalid date": "",
});
//# sourceMappingURL=en.js.map

/***/ }),
/* 203 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_DOM__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_InterfaceColorSet__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Dictionary__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Disposer__ = __webpack_require__(11);




var rules = new __WEBPACK_IMPORTED_MODULE_2__utils_Dictionary__["a" /* Dictionary */]();
/**
 * A dynamically-loadable CSS module for Export menu.
 *
 * @ignore Exclude from docs
 * @param  {string}     prefix  Prefix to addtach to class names
 * @return {IDisposer}          A MultiDisposer with style rules
 */
/* harmony default export */ __webpack_exports__["a"] = (function (prefix) {
    var newPrefix = (prefix ? prefix : "amexport");
    var colorSet = new __WEBPACK_IMPORTED_MODULE_1__utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
    var counter = rules.insertKeyIfEmpty(newPrefix, function () {
        var disposer = new __WEBPACK_IMPORTED_MODULE_3__utils_Disposer__["c" /* MultiDisposer */]([
            /*new StyleRule(`.${newPrefix}-menu`, {
                "opacity": "0.3",
                "transition": "all 100ms ease-in-out",
            }),

            new StyleRule(`div:hover .${newPrefix}-menu, .${newPrefix}-menu.active`, {
                "opacity": "0.9",
            }),*/
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["c" /* StyleRule */]("." + newPrefix + "-menu-level-0", {
                "position": "absolute",
                "top": "5px",
                "right": "5px",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["c" /* StyleRule */]("." + newPrefix + "-menu-level-0." + newPrefix + "-left", {
                "right": "auto",
                "left": "5px",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["c" /* StyleRule */]("." + newPrefix + "-menu-level-0." + newPrefix + "-right", {
                "right": "5px",
                "left": "auto",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["c" /* StyleRule */]("." + newPrefix + "-menu-level-0." + newPrefix + "-top", {
                "top": "5px",
                "bottom": "auto",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["c" /* StyleRule */]("." + newPrefix + "-menu-level-0." + newPrefix + "-bottom", {
                "top": "auto",
                "bottom": "5px",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["c" /* StyleRule */]("." + newPrefix + "-item." + newPrefix + "-item-level-0", {
                "opacity": "0.3",
                "width": "30px",
                "height": "30px",
                "transition": "all 100ms ease-in-out",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["c" /* StyleRule */]("div:hover ." + newPrefix + "-item." + newPrefix + "-item-level-0, ." + newPrefix + "-item." + newPrefix + "-item-level-0.active", {
                "opacity": "0.9",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["c" /* StyleRule */]("." + newPrefix + "-item." + newPrefix + "-item-level-0 > a", {
                "padding": "0",
                "text-align": "center"
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["c" /* StyleRule */]("." + newPrefix + "-item." + newPrefix + "-item-level-0:before", {
                "display": "block"
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["c" /* StyleRule */]("." + newPrefix + "-item", {
                "position": "relative",
                "display": "block",
                "opacity": "0",
                "z-index": "1",
                "border-radius": "3px",
                "background-color": colorSet.getFor("secondaryButton").hex,
                "padding": "0",
                "margin": "1px 1px 0 0",
                "color": colorSet.getFor("secondaryButton").alternative.hex,
                "transition": "all 100ms ease-in-out, opacity 0.5s ease 0.5s",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["c" /* StyleRule */]("." + newPrefix + "-left ." + newPrefix + "-item", {
                "margin": "1px 0 0 1px",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["c" /* StyleRule */]("." + newPrefix + "-item:hover, ." + newPrefix + "-item.active", {
                "background": colorSet.getFor("secondaryButtonHover").hex,
                "color": colorSet.getFor("secondaryButtonText").hex,
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["c" /* StyleRule */]("." + newPrefix + "-item > ." + newPrefix + "-menu", {
                "position": "absolute",
                "top": "-1px",
                "right": "0",
                "margin-right": "100%",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["c" /* StyleRule */]("." + newPrefix + "-left ." + newPrefix + "-item > ." + newPrefix + "-menu", {
                "left": "0",
                "right": "auto",
                "margin-left": "100%",
                "margin-right": "auto",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["c" /* StyleRule */]("." + newPrefix + "-right ." + newPrefix + "-item > ." + newPrefix + "-menu", {
                "left": "auto",
                "right": "0",
                "margin-left": "auto",
                "margin-right": "100%",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["c" /* StyleRule */]("." + newPrefix + "-top ." + newPrefix + "-item > ." + newPrefix + "-menu", {
                "top": "-1px",
                "bottom": "auto",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["c" /* StyleRule */]("." + newPrefix + "-bottom ." + newPrefix + "-item > ." + newPrefix + "-menu", {
                "top": "auto",
                "bottom": "0",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["c" /* StyleRule */]("." + newPrefix + "-item > ." + newPrefix + "-menu", {
                "display": "none",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["c" /* StyleRule */]("." + newPrefix + "-item:hover > ." + newPrefix + "-menu, ." + newPrefix + "-item.active > ." + newPrefix + "-menu", {
                "display": "block",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["c" /* StyleRule */]("." + newPrefix + "-item:hover > ." + newPrefix + "-menu > ." + newPrefix + "-item, ." + newPrefix + "-item.active > ." + newPrefix + "-menu > ." + newPrefix + "-item", {
                "opacity": "1",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["c" /* StyleRule */]("." + newPrefix + "-menu", {
                "display": "block",
                "list-style": "none",
                "margin": "0",
                "padding": "0",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["c" /* StyleRule */]("." + newPrefix + "-label", {
                "display": "block",
                "cursor": "default",
                "padding": "0.5em 1em",
            }),
            new __WEBPACK_IMPORTED_MODULE_0__utils_DOM__["c" /* StyleRule */]("." + newPrefix + "-clickable", {
                "cursor": "pointer",
            }),
        ]);
        return new __WEBPACK_IMPORTED_MODULE_3__utils_Disposer__["a" /* CounterDisposer */](function () {
            rules.removeKey(newPrefix);
            disposer.dispose();
        });
    });
    return counter.increment();
});
//# sourceMappingURL=ExportCSS.js.map

/***/ }),
/* 204 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Image; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_DOM__ = __webpack_require__(19);
/**
 * Functionality for adding images in SVG tree.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Used to add `<image>` elements to SVG.
 *
 * @see {@link IImageEvents} for a list of available events
 * @see {@link IImageAdapters} for a list of available Adapters
 */
var Image = /** @class */ (function (_super) {
    __extends(Image, _super);
    /**
     * Constructor
     */
    function Image() {
        var _this = _super.call(this) || this;
        _this.className = "Image";
        _this.element = _this.paper.add("image");
        _this.applyTheme();
        _this.width = 50;
        _this.height = 50;
        return _this;
    }
    /**
     * Draws an `<image>` element.
     *
     * @ignore Exclude from docs
     */
    Image.prototype.draw = function () {
        _super.prototype.draw.call(this);
        this.element.attr({
            "width": this.innerWidth,
            "height": this.innerHeight
        });
        this.element.attrNS(__WEBPACK_IMPORTED_MODULE_2__utils_DOM__["d" /* XLINK */], "xlink:href", this.href);
    };
    Object.defineProperty(Image.prototype, "href", {
        /**
         * @return {string} Image URI
         */
        get: function () {
            return this.getPropertyValue("href");
        },
        /**
         * An image URI.
         *
         * @param {string}  value  Image URI
         */
        set: function (value) {
            this.setPropertyValue("href", value, true);
        },
        enumerable: true,
        configurable: true
    });
    return Image;
}(__WEBPACK_IMPORTED_MODULE_0__Sprite__["a" /* Sprite */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__Registry__["b" /* registry */].registeredClasses["Image"] = Image;
//# sourceMappingURL=Image.js.map

/***/ }),
/* 205 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Polyarc; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Polyline__ = __webpack_require__(77);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__ = __webpack_require__(8);
/**
 * Module for a multi-part arched line.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Draws a multi-part arched line.
 *
 * @see {@link IPolyarcEvents} for a list of available events
 * @see {@link IPolyarcAdapters} for a list of available Adapters
 */
var Polyarc = /** @class */ (function (_super) {
    __extends(Polyarc, _super);
    /**
     * Constructor
     */
    function Polyarc() {
        var _this = _super.call(this) || this;
        _this.className = "Polyarc";
        _this.controlPointDistance = 0.5;
        _this.controlPointPosition = 0.5;
        _this.applyTheme();
        return _this;
    }
    /**
     * Creats and adds an SVG path for the arc.
     *
     * @ignore Exclude from docs
     */
    Polyarc.prototype.makePath = function () {
        this._distance = 0;
        var segments = this.segments;
        if (segments && segments.length > 0) {
            var path = "";
            this._realSegments = [];
            for (var i = 0; i < segments.length; i++) {
                var points = segments[i];
                var realPoints = [];
                this._realSegments.push(realPoints);
                if (points.length > 0) {
                    path += __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["moveTo"](points[0]);
                    for (var p = 1; p < points.length; p++) {
                        var pointA = points[p - 1];
                        var pointB = points[p];
                        var distanceAB = __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["getDistance"](pointB, pointA);
                        var cpDistance = distanceAB * this.controlPointDistance;
                        var controlPointPosition = this.controlPointPosition;
                        var angle = -__WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["getAngle"](pointA, pointB);
                        var cpx = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 0.5 - cpDistance * __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["sin"](angle);
                        var cpy = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 0.5 - cpDistance * __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["cos"](angle);
                        var controlPoint1 = { x: cpx, y: cpy };
                        var cpx2 = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 1.5 - cpDistance * __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["sin"](angle);
                        var cpy2 = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 1.5 - cpDistance * __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["cos"](angle);
                        var controlPoint2 = { x: cpx2, y: cpy2 };
                        path += __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["cubicCurveTo"](pointB, controlPoint1, controlPoint2);
                        // we add a lot of points in order to get the position/angle later
                        var stepCount = Math.ceil(distanceAB);
                        var prevPoint = pointA;
                        for (var i_1 = 0; i_1 <= stepCount; i_1++) {
                            var point = __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["getPointOnCubicCurve"](pointA, pointB, controlPoint1, controlPoint2, i_1 / stepCount);
                            realPoints.push(point);
                            this._distance += __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["getDistance"](prevPoint, point);
                            prevPoint = point;
                        }
                    }
                }
            }
            this.element.attr({ "d": path });
        }
    };
    Object.defineProperty(Polyarc.prototype, "controlPointPosition", {
        /**
         * @return {number} Position (0-1)
         */
        get: function () {
            return this.getPropertyValue("controlPointPosition");
        },
        /**
         * Relative position along the line the control point is. (0-1)
         *
         * @default 0.5
         * @param {number}  value  Position (0-1)
         */
        set: function (value) {
            this.setPropertyValue("controlPointPosition", value);
            this.makePath();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Polyarc.prototype, "controlPointDistance", {
        /**
         * @return {number} Distance (0-1)
         */
        get: function () {
            return this.getPropertyValue("controlPointDistance");
        },
        /**
         * Relative distance of the control point. (0-1)
         *
         * Default is half the length of the line. (0.5)
         *
         * @default 0.5
         * @param {number}  value  Distance (0-1)
         */
        set: function (value) {
            this.setPropertyValue("controlPointDistance", value);
            this.makePath();
        },
        enumerable: true,
        configurable: true
    });
    return Polyarc;
}(__WEBPACK_IMPORTED_MODULE_0__Polyline__["a" /* Polyline */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__Registry__["b" /* registry */].registeredClasses["Polyarc"] = Polyarc;
//# sourceMappingURL=Polyarc.js.map

/***/ }),
/* 206 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Polygon; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Morpher__ = __webpack_require__(141);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__rendering_Path__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Type__ = __webpack_require__(1);
/**
 * Polygon module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Draws a polygon.
 *
 * @see {@link IPolygonEvents} for a list of available events
 * @see {@link IPolygonAdapters} for a list of available Adapters
 */
var Polygon = /** @class */ (function (_super) {
    __extends(Polygon, _super);
    /**
     * Constructor
     */
    function Polygon() {
        var _this = _super.call(this) || this;
        _this.className = "Polygon";
        _this.element = _this.paper.add("path");
        _this.shapeRendering = "auto";
        _this._currentPoints = [];
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(Polygon.prototype, "points", {
        /**
         * @return {IPoint[]} Polygon points
         */
        get: function () {
            return this.getPropertyValue("points");
        },
        /**
         * An array of X/Y coordinates for each elbow of the polygon.
         *
         * @todo Example
         * @param {IPoint[][][]}  points  Polygon points
         */
        set: function (points) {
            this.setPropertyValue("points", points, true);
            this._currentPoints = this.points;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Polygon.prototype, "currentPoints", {
        /**
         * @return {IPoint[]} Polygon points
         */
        get: function () {
            return this._currentPoints;
        },
        /**
         * Current points. Used when morphing the element, so that original `points`
         * are not overwritten.
         *
         * @param {IPoint[][][]}  points  Polygon points
         */
        set: function (points) {
            if (this._currentPoints != points) {
                this._currentPoints = points;
                this.draw();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Draws the element.
     *
     * @ignore Exclude from docs
     */
    Polygon.prototype.draw = function () {
        var path = "";
        var points = this._currentPoints;
        var left;
        var right;
        var top;
        var bottom;
        if (points.length > 0) {
            // separate areas
            for (var i = 0; i < points.length; i++) {
                // surface
                var surface = points[i][0];
                var hole = points[i][1];
                if (surface && surface.length > 0) {
                    var point = surface[0];
                    path += __WEBPACK_IMPORTED_MODULE_3__rendering_Path__["moveTo"](point);
                    for (var s = 0; s < surface.length; s++) {
                        point = surface[s];
                        path += __WEBPACK_IMPORTED_MODULE_3__rendering_Path__["lineTo"](point);
                        if ((right < point.x) || !__WEBPACK_IMPORTED_MODULE_4__utils_Type__["isNumber"](right)) {
                            right = point.x;
                        }
                        if ((left > point.x) || !__WEBPACK_IMPORTED_MODULE_4__utils_Type__["isNumber"](left)) {
                            left = point.x;
                        }
                        if ((top > point.y) || !__WEBPACK_IMPORTED_MODULE_4__utils_Type__["isNumber"](top)) {
                            top = point.y;
                        }
                        if ((bottom < point.y) || !__WEBPACK_IMPORTED_MODULE_4__utils_Type__["isNumber"](bottom)) {
                            bottom = point.y;
                        }
                    }
                }
                // hole
                if (hole && hole.length > 0) {
                    var point = hole[0];
                    path += __WEBPACK_IMPORTED_MODULE_3__rendering_Path__["moveTo"](point);
                    for (var h = 0; h < hole.length; h++) {
                        point = hole[h];
                        path += __WEBPACK_IMPORTED_MODULE_3__rendering_Path__["lineTo"](point);
                    }
                }
            }
            if (path) {
                path += __WEBPACK_IMPORTED_MODULE_3__rendering_Path__["closePath"]();
            }
            this.bbox.x = left;
            this.bbox.y = top;
            this.bbox.width = right - left;
            this.bbox.height = bottom - top;
        }
        this.element.attr({ "d": path });
    };
    /**
     * Measures element
     */
    Polygon.prototype.measureElement = function () {
        // Overriding to avoid extra measurement.
    };
    Object.defineProperty(Polygon.prototype, "centerPoint", {
        /**
         * A calculated center point for the shape.
         *
         * @readonly
         * @return {IPoint} Center
         */
        get: function () {
            return { x: this.bbox.x + this.bbox.width / 2, y: this.bbox.y + this.bbox.height / 2 };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Polygon.prototype, "morpher", {
        /**
         * A [[Morpher]] instance that is used to morph polygon into some other
         * shape.
         *
         * @readonly
         * @return {Morpher} Morpher instance
         */
        get: function () {
            if (!this._morpher) {
                this._morpher = new __WEBPACK_IMPORTED_MODULE_1__utils_Morpher__["a" /* Morpher */](this);
                this._disposers.push(this._morpher);
            }
            return this._morpher;
        },
        enumerable: true,
        configurable: true
    });
    return Polygon;
}(__WEBPACK_IMPORTED_MODULE_0__Sprite__["a" /* Sprite */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__Registry__["b" /* registry */].registeredClasses["Polygon"] = Polygon;
//# sourceMappingURL=Polygon.js.map

/***/ }),
/* 207 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Slider; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_elements_Scrollbar__ = __webpack_require__(78);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Registry__ = __webpack_require__(0);
/**
 * Slider is a scrollbar with just one selection grip.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a slider - a version of scrollbar with just one grip.
 *
 * @see {@link ISliderEvents} for a list of available events
 * @see {@link ISliderAdapters} for a list of available Adapters
 */
var Slider = /** @class */ (function (_super) {
    __extends(Slider, _super);
    /**
     * Constructor
     */
    function Slider() {
        var _this = _super.call(this) || this;
        _this.className = "Slider";
        _this.thumb.opacity = 0;
        _this.thumb.interactionsEnabled = false;
        _this.endGrip.opacity = 0;
        _this.endGrip.interactionsEnabled = false;
        _this.startGrip.events.on("drag", function () {
            _this.endGrip.x = _this.startGrip.x;
            _this.endGrip.y = _this.startGrip.y;
        });
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(Slider.prototype, "__end", {
        /**
         * @return {number} [description]
         */
        get: function () {
            return this._start;
        },
        set: function (value) {
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "end", {
        /**
         * @return {number} [description]
         */
        get: function () {
            return this._start;
        },
        /**
         * Relative position (0-1) of the end grip.
         *
         * @param {number}  position  Position (0-1)
         */
        set: function (position) {
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "start", {
        /**
         * @return {number} Position (0-1)
         */
        get: function () {
            return this._start;
        },
        /**
         * Relative position (0-1) of the start grip.
         *
         * @param {number}  position  Position (0-1)
         */
        set: function (position) {
            if (!this._isBusy) {
                this.__start = position;
            }
        },
        enumerable: true,
        configurable: true
    });
    return Slider;
}(__WEBPACK_IMPORTED_MODULE_0__core_elements_Scrollbar__["a" /* Scrollbar */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__Registry__["b" /* registry */].registeredClasses["Slider"] = Slider;
//# sourceMappingURL=Slider.js.map

/***/ }),
/* 208 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PlayButton; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Button__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__RoundedRectangle__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_InterfaceColorSet__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Triangle__ = __webpack_require__(105);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_Type__ = __webpack_require__(1);
/**
 * Play button functionality.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */






/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a zoom out button.
 *
 * @see {@link IPlayButtonEvents} for a list of available events
 * @see {@link IPlayButtonAdapters} for a list of available Adapters
 */
var PlayButton = /** @class */ (function (_super) {
    __extends(PlayButton, _super);
    /**
     * Orientation of the resize direction.
     *
     * @deprecated Not used
     * @type {Orientation}
     */
    //protected _orientation: Orientation;
    /**
     * Constructor
     */
    function PlayButton() {
        var _this = 
        // Init
        _super.call(this) || this;
        _this.className = "PlayButton";
        _this.padding(12, 12, 12, 12);
        _this.showSystemTooltip = true;
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_3__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        var background = _this.background;
        background.cornerRadius(25, 25, 25, 25);
        background.fill = interfaceColors.getFor("primaryButton");
        background.stroke = interfaceColors.getFor("primaryButtonStroke");
        background.strokeOpacity = 0;
        background.states.getKey("hover").properties.fill = interfaceColors.getFor("primaryButtonHover");
        background.states.getKey("down").properties.fill = interfaceColors.getFor("primaryButtonActive");
        // Create a play icon
        var playIcon = new __WEBPACK_IMPORTED_MODULE_4__Triangle__["a" /* Triangle */]();
        playIcon.direction = "right";
        playIcon.width = 9;
        playIcon.height = 11;
        playIcon.marginLeft = 1;
        playIcon.marginRight = 1;
        playIcon.horizontalCenter = "middle";
        playIcon.verticalCenter = "middle";
        playIcon.stroke = interfaceColors.getFor("primaryButtonText");
        playIcon.fill = playIcon.stroke;
        _this.icon = playIcon;
        // Create a play icon
        var stopIcon = new __WEBPACK_IMPORTED_MODULE_1__RoundedRectangle__["a" /* RoundedRectangle */]();
        stopIcon.width = 11;
        stopIcon.height = 11;
        stopIcon.horizontalCenter = "middle";
        stopIcon.verticalCenter = "middle";
        stopIcon.cornerRadius(0, 0, 0, 0);
        stopIcon.stroke = interfaceColors.getFor("primaryButtonText");
        stopIcon.fill = playIcon.stroke;
        _this.togglable = true;
        var activeState = _this.states.create("active");
        activeState.transitionDuration = 0;
        activeState.properties.icon = stopIcon;
        _this.defaultState.transitionDuration = 0;
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Sets defaults that instantiate some objects that rely on parent, so they
     * cannot be set in constructor.
     */
    PlayButton.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);
        if (!__WEBPACK_IMPORTED_MODULE_5__core_utils_Type__["hasValue"](this.readerTitle)) {
            this.readerTitle = this.language.translate("Play");
        }
    };
    return PlayButton;
}(__WEBPACK_IMPORTED_MODULE_0__Button__["a" /* Button */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__Registry__["b" /* registry */].registeredClasses["PlayButton"] = PlayButton;
//# sourceMappingURL=PlayButton.js.map

/***/ }),
/* 209 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LinePattern; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Pattern__ = __webpack_require__(73);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Line pattern.
 */
var LinePattern = /** @class */ (function (_super) {
    __extends(LinePattern, _super);
    /**
     * Constructor
     */
    function LinePattern() {
        var _this = _super.call(this) || this;
        _this._line = _this.paper.add("line");
        _this.addElement(_this._line);
        return _this;
    }
    /**
     * Draws the pattern.
     */
    LinePattern.prototype.draw = function () {
        _super.prototype.draw.call(this);
        if (this._line) {
            this._line.attr({ "x2": this.width * 2 }); // to solve rotation
        }
    };
    return LinePattern;
}(__WEBPACK_IMPORTED_MODULE_0__Pattern__["a" /* Pattern */]));

//# sourceMappingURL=LinePattern.js.map

/***/ }),
/* 210 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RectPattern; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Pattern__ = __webpack_require__(73);
/**
 * Rectangular pattern module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

;
/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Rectangular pattern
 */
var RectPattern = /** @class */ (function (_super) {
    __extends(RectPattern, _super);
    /**
     * Collection of property values for the pattern
     *
     * @todo Remove?
     * @deprecated
     * @type {Dictionary<RectPatternProperties, any>}
     */
    //public propertyValues: Dictionary<RectPatternProperties, any>;
    /**
     * Constructor
     */
    function RectPattern() {
        var _this = _super.call(this) || this;
        _this.rectHeight = 1;
        _this.rectWidth = 1;
        return _this;
    }
    /**
     * Draws the rectangular element.
     */
    RectPattern.prototype.draw = function () {
        if (this._rect) {
            this.removeElement(this._rect);
        }
        this._rect = this.paper.add("rect");
        this._rect.attr({ "width": this.rectWidth, "height": this.rectHeight });
        this.addElement(this._rect);
        _super.prototype.draw.call(this);
    };
    Object.defineProperty(RectPattern.prototype, "rectWidth", {
        /**
         * @return {number} Width (px)
         */
        get: function () {
            return this.properties["rectWidth"];
        },
        /**
         * Rectangle width in pixels.
         *
         * @param {number} value Width (px)
         */
        set: function (value) {
            this.properties["rectWidth"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RectPattern.prototype, "rectHeight", {
        /**
         * @return {number} Height (px)
         */
        get: function () {
            return this.properties["rectHeight"];
        },
        /**
         * Rectangle height in pixels.
         *
         * @param {number} value Height (px)
         */
        set: function (value) {
            this.properties["rectHeight"] = value;
            this.draw();
        },
        enumerable: true,
        configurable: true
    });
    return RectPattern;
}(__WEBPACK_IMPORTED_MODULE_0__Pattern__["a" /* Pattern */]));

//# sourceMappingURL=RectPattern.js.map

/***/ }),
/* 211 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ColorizeFilter; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Filter__ = __webpack_require__(28);
/**
 * Module for "Colorize" filter.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

;
/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a "Colorize" filter.
 */
var ColorizeFilter = /** @class */ (function (_super) {
    __extends(ColorizeFilter, _super);
    /**
     * Constructor
     * * Creates primitve (effect) elements
     * * Sets default properties
     */
    function ColorizeFilter() {
        var _this = _super.call(this) || this;
        _this.className = "ColorizeFilter";
        // Create elements
        // NOTE: we do not need to add each individual element to `_disposers`
        // because `filterPrimitives` has an event handler which automatically adds
        // anything added to it to `_disposers`
        _this.feColorMatrix = _this.paper.add("feColorMatrix");
        _this.feColorMatrix.attr({ "type": "matrix" });
        //this.feColorMatrix.setAttribute("in", "SourceAlpha");
        _this.filterPrimitives.push(_this.feColorMatrix);
        // Set default properties
        _this.intensity = 1;
        _this.applyTheme();
        return _this;
    }
    /**
     * (Re)applies colors to the already existing filter by modifying filyer's
     * color matrix element.
     *
     * @ignore Exclude from docs
     */
    ColorizeFilter.prototype.applyFilter = function () {
        var i = this.intensity;
        var ii = 1 - i;
        var r;
        var g;
        var b;
        var color = this.color;
        if (!color) {
            r = 0;
            g = 0;
            b = 0;
        }
        else {
            r = color.rgb.r / 255 * i;
            g = color.rgb.g / 255 * i;
            b = color.rgb.b / 255 * i;
        }
        this.feColorMatrix.attr({ "values": ii + " 0 0 0 " + r + " 0 " + ii + " 0 0 " + g + " 0 0 " + ii + " 0 " + b + " 0 0 0 1 0" });
    };
    Object.defineProperty(ColorizeFilter.prototype, "color", {
        /**
         * @return {Color} Color
         */
        get: function () {
            return this.properties["color"];
        },
        /**
         * Color.
         *
         * @param {Color}  value  Color
         */
        set: function (value) {
            this.properties["color"] = value;
            this.applyFilter();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorizeFilter.prototype, "intensity", {
        /**
         * @return {number} Intensity (0-1)
         */
        get: function () {
            return this.properties.intensity;
        },
        /**
         * Intensity of the color. (0-1)
         *
         * @default 1
         * @param {number} value Intensity (0-1)
         * @todo Describe possible values
         */
        set: function (value) {
            this.properties.intensity = value;
            this.applyFilter();
        },
        enumerable: true,
        configurable: true
    });
    return ColorizeFilter;
}(__WEBPACK_IMPORTED_MODULE_0__Filter__["a" /* Filter */]));

//# sourceMappingURL=ColorizeFilter.js.map

/***/ }),
/* 212 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BlurFilter; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Filter__ = __webpack_require__(28);
/**
 * Module for "Blur" filter.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

;
/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a "Blur" filter.
 */
var BlurFilter = /** @class */ (function (_super) {
    __extends(BlurFilter, _super);
    /**
     * Constructor
     * * Creates primitve (effect) elements
     * * Sets default properties
     */
    function BlurFilter() {
        var _this = _super.call(this) || this;
        _this.className = "BlurFilter";
        // Create elements
        // NOTE: we do not need to add each individual element to `_disposers`
        // because `filterPrimitives` has an event handler which automatically adds
        // anything added to it to `_disposers`
        _this.feGaussianBlur = _this.paper.add("feGaussianBlur");
        _this.feGaussianBlur.attr({ "result": "blurOut", "in": "SourceGraphic" });
        _this.filterPrimitives.push(_this.feGaussianBlur);
        // Set default properties
        _this.width = 200;
        _this.height = 200;
        _this.blur = 1.5;
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(BlurFilter.prototype, "blur", {
        /**
         * @return {number} Blur
         */
        get: function () {
            return this.properties.blur;
        },
        /**
         * Blur value.
         *
         * @default 1.5
         * @param {number} value Blur
         */
        set: function (value) {
            this.properties.blur = value;
            this.feGaussianBlur.attr({ "stdDeviation": value / this.scale });
        },
        enumerable: true,
        configurable: true
    });
    return BlurFilter;
}(__WEBPACK_IMPORTED_MODULE_0__Filter__["a" /* Filter */]));

//# sourceMappingURL=BlurFilter.js.map

/***/ }),
/* 213 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return GaugeChartDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return GaugeChart; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__RadarChart__ = __webpack_require__(157);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__elements_ClockHand__ = __webpack_require__(165);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_utils_Type__ = __webpack_require__(1);
/**
 * Module for building Gauge charts.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[GaugeChart]].
 *
 * @see {@link DataItem}
 */
var GaugeChartDataItem = /** @class */ (function (_super) {
    __extends(GaugeChartDataItem, _super);
    /**
     * Constructor
     */
    function GaugeChartDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "GaugeChartDataItem";
        _this.applyTheme();
        return _this;
    }
    return GaugeChartDataItem;
}(__WEBPACK_IMPORTED_MODULE_0__RadarChart__["b" /* RadarChartDataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a Gauge chart.
 *
 * @see {@link IGaugeChartEvents} for a list of available Events
 * @see {@link IGaugeChartAdapters} for a list of available Adapters
 * @todo Example
 * @important
 */
var GaugeChart = /** @class */ (function (_super) {
    __extends(GaugeChart, _super);
    /**
     * Constructor
     */
    function GaugeChart() {
        var _this = 
        // Init
        _super.call(this) || this;
        _this.className = "GaugeChart";
        _this.startAngle = 180;
        _this.endAngle = 360;
        _this.hands = new __WEBPACK_IMPORTED_MODULE_1__core_utils_List__["e" /* ListTemplate */](new __WEBPACK_IMPORTED_MODULE_2__elements_ClockHand__["a" /* ClockHand */]());
        _this.hands.events.on("insert", _this.processHand, _this);
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Sets defaults that instantiate some objects that rely on parent, so they
     * cannot be set in constructor.
     */
    GaugeChart.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);
        // Add a default screen reader title for accessibility
        // This will be overridden in screen reader if there are any `titles` set
        if (!__WEBPACK_IMPORTED_MODULE_4__core_utils_Type__["hasValue"](this.readerTitle)) {
            this.readerTitle = this.language.translate("Gauge chart");
        }
    };
    /**
     * Decorates a [[ClockHand]] when it is added to the chart.
     *
     * @param {IListEvents<ClockHand>["insert"]}  event  Event
     */
    GaugeChart.prototype.processHand = function (event) {
        var hand = event.newValue;
        if (!hand.axis) {
            hand.axis = this.xAxes.getIndex(0);
        }
    };
    return GaugeChart;
}(__WEBPACK_IMPORTED_MODULE_0__RadarChart__["a" /* RadarChart */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_3__core_Registry__["b" /* registry */].registeredClasses["GaugeChart"] = GaugeChart;
//# sourceMappingURL=GaugeChart.js.map

/***/ }),
/* 214 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return PieChart3DDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PieChart3D; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__PieChart__ = __webpack_require__(166);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__series_PieSeries3D__ = __webpack_require__(168);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_Registry__ = __webpack_require__(0);
/**
 * 3D Pie chart module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * Imports
 * ============================================================================
 * @hidden
 */



/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[PieChart3D]].
 *
 * @see {@link DataItem}
 */
var PieChart3DDataItem = /** @class */ (function (_super) {
    __extends(PieChart3DDataItem, _super);
    /**
     * Constructor
     */
    function PieChart3DDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "PieChart3DDataItem";
        _this.applyTheme();
        return _this;
    }
    return PieChart3DDataItem;
}(__WEBPACK_IMPORTED_MODULE_0__PieChart__["b" /* PieChartDataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a 3D Pie chart.
 *
 *  * ```TypeScript
 * // Includes
 * import * as am4core from "@amcharts/amcharts4/core";
 * import * as am4charts from "@amcharts/amcharts4/charts";
 *
 * // Create chart
 * let chart = am4core.create("chartdiv", am4charts.Pie3DChart);
 *
 * // Set data
 * chart.data = [{
 * 	"country": "Lithuania",
 * 	"litres": 501.9
 * }, {
 * 	"country": "Czech Republic",
 * 	"litres": 301.9
 * }, {
 * 	"country": "Ireland",
 * 	"litres": 201.1
 * }];
 *
 * // Create series
 * let series = chart.series.push(new am4charts.Pie3DSeries());
 * series.dataFields.value = "litres";
 * series.dataFields.category = "country";
 * ```
 * ```JavaScript
 * // Create chart
 * var chart = am4core.create("chartdiv", am4charts.Pie3DChart);
 *
 * // The following would work as well:
 * // var chart = am4core.create("chartdiv", "Pie3DChart");
 *
 * // Set data
 * chart.data = [{
 * 	"country": "Lithuania",
 * 	"litres": 501.9
 * }, {
 * 	"country": "Czech Republic",
 * 	"litres": 301.9
 * }, {
 * 	"country": "Ireland",
 * 	"litres": 201.1
 * }];
 *
 * // Create series
 * var series = chart.series.push(new am4charts.Pie3DSeries());
 * series.dataFields.value = "litres";
 * series.dataFields.category = "country";
 * ```
 * ```JSON
 * var chart = am4core.createFromConfig({
 *
 * 	// Series
 * 	"series": [{
 * 		"type": "Pie3DSeries",
 * 		"dataFields": {
 * 			"value": "litres",
 * 			"category": "country"
 * 		}
 * 	}],
 *
 * 	// Data
 * 	"data": [{
 * 		"country": "Lithuania",
 * 		"litres": 501.9
 * 	}, {
 * 		"country": "Czech Republic",
 * 		"litres": 301.9
 * 	}, {
 * 		"country": "Ireland",
 * 		"litres": 201.1
 * 	}]
 *
 * }, "chartdiv", "Pie3DChart");
 * ```
 *
 * @see {@link IPieChart3DEvents} for a list of available Events
 * @see {@link IPieChart3DAdapters} for a list of available Adapters
 * @important
 */
var PieChart3D = /** @class */ (function (_super) {
    __extends(PieChart3D, _super);
    /**
     * Constructor
     */
    function PieChart3D() {
        var _this = 
        // Init
        _super.call(this) || this;
        _this.className = "PieChart3D";
        _this.depth = 20;
        _this.angle = 10;
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(PieChart3D.prototype, "depth", {
        /**
         * @return {number} Depth (px)
         */
        get: function () {
            return this.getPropertyValue("depth");
        },
        /**
         * Depth of the 3D pie in pixels.
         *
         * This will determine "height" of the pie.
         *
         * @default 20
         * @param {number}  value  Depth (px)
         */
        set: function (value) {
            this.setPropertyValue("depth", value);
            this.invalidateDataUsers();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PieChart3D.prototype, "angle", {
        /**
         * @return {number} Angle (degrees)
         */
        get: function () {
            return this.getPropertyValue("angle");
        },
        /**
         * An angle of a "point of view" in degrees.
         *
         * @default 10
         * @param {number}  value  Angle (degrees)
         */
        set: function (value) {
            this.setPropertyValue("angle", value);
            this.invalidateDataUsers();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates and returns a new Series.
     *
     * @return {PieSeries3D} New series
     */
    PieChart3D.prototype.createSeries = function () {
        return new __WEBPACK_IMPORTED_MODULE_1__series_PieSeries3D__["a" /* PieSeries3D */]();
    };
    return PieChart3D;
}(__WEBPACK_IMPORTED_MODULE_0__PieChart__["a" /* PieChart */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__core_Registry__["b" /* registry */].registeredClasses["PieChart3D"] = PieChart3D;
//# sourceMappingURL=PieChart3D.js.map

/***/ }),
/* 215 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return ChordDiagramDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ChordDiagram; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__FlowDiagram__ = __webpack_require__(115);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__elements_ChordNode__ = __webpack_require__(173);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__elements_ChordLink__ = __webpack_require__(174);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__core_utils_Type__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__core_utils_Utils__ = __webpack_require__(6);
/**
 * Chord diagram module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();












/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
//@todo rearange notes after dragged
/**
 * Defines a [[DataItem]] for [[ChordDiagram]].
 *
 * @see {@link DataItem}
 */
var ChordDiagramDataItem = /** @class */ (function (_super) {
    __extends(ChordDiagramDataItem, _super);
    /**
     * Constructor
     */
    function ChordDiagramDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "ChordDiagramDataItem";
        _this.applyTheme();
        return _this;
    }
    return ChordDiagramDataItem;
}(__WEBPACK_IMPORTED_MODULE_0__FlowDiagram__["b" /* FlowDiagramDataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a Pie chart
 * @see {@link IChordDiagramEvents} for a list of available Events
 * @see {@link IChordDiagramAdapters} for a list of available Adapters
 * @important
 */
var ChordDiagram = /** @class */ (function (_super) {
    __extends(ChordDiagram, _super);
    /**
     * Constructor
     */
    function ChordDiagram() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * A list of chart's Chord nodes.
         *
         * @param {DictionaryTemplate<string, ChordNode>}
         */
        _this.nodes = new __WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__["c" /* DictionaryTemplate */](new __WEBPACK_IMPORTED_MODULE_6__elements_ChordNode__["a" /* ChordNode */]());
        /**
         * A list of Chord links connecting nodes.
         *
         * @param {ListTemplate<ChordLink>}
         */
        _this.links = new __WEBPACK_IMPORTED_MODULE_2__core_utils_List__["e" /* ListTemplate */](new __WEBPACK_IMPORTED_MODULE_7__elements_ChordLink__["a" /* ChordLink */]());
        /**
         * [valueAngle description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @type {number}
         */
        _this.valueAngle = 0;
        _this.className = "ChordDiagram";
        _this.startAngle = -90;
        _this.endAngle = 270;
        _this.radius = Object(__WEBPACK_IMPORTED_MODULE_1__core_utils_Percent__["c" /* percent */])(80);
        _this.innerRadius = -15;
        _this.nodePadding = 5;
        var chordContainer = _this.chartContainer.createChild(__WEBPACK_IMPORTED_MODULE_4__core_Container__["a" /* Container */]);
        chordContainer.align = "center";
        chordContainer.valign = "middle";
        chordContainer.shouldClone = false;
        _this.chordContainer = chordContainer;
        _this.nodesContainer.parent = chordContainer;
        _this.linksContainer.parent = chordContainer;
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Updates a cummulative value of the node.
     *
     * A node's value is determined by summing values of all of the incoming
     * links or all of the outgoing links, whichever results in bigger number.
     *
     * @param {FlowDiagramNode}  node  Node value
     */
    ChordDiagram.prototype.getNodeValue = function (node) {
        var sum = 0;
        __WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__["each"](node.incomingDataItems.iterator(), function (dataItem) {
            sum += dataItem.getWorkingValue("value");
        });
        __WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__["each"](node.outgoingDataItems.iterator(), function (dataItem) {
            sum += dataItem.getWorkingValue("value");
        });
        node.value = sum;
        this.fixMin(node);
    };
    ;
    /**
     * Redraws the chart.
     *
     * @ignore Exclude from docs
     */
    ChordDiagram.prototype.validate = function () {
        var _this = this;
        _super.prototype.validate.call(this);
        var chartContainer = this.chartContainer;
        var nodesContainer = this.nodesContainer;
        var radius = __WEBPACK_IMPORTED_MODULE_11__core_utils_Utils__["relativeRadiusToValue"](this.radius, __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["min"](chartContainer.innerWidth, chartContainer.innerHeight)) / 2;
        var pixelInnerRadius = __WEBPACK_IMPORTED_MODULE_11__core_utils_Utils__["relativeRadiusToValue"](this.innerRadius, radius, true);
        var endAngle = this.endAngle;
        var startAngle = this.startAngle + this.nodePadding / 2;
        var rect = __WEBPACK_IMPORTED_MODULE_9__core_utils_Math__["getArcRect"](this.startAngle, this.endAngle, 1);
        var total = 0;
        var count = 0;
        __WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__["each"](this._sorted, function (strNode) {
            var node = strNode[1];
            _this.getNodeValue(node);
            total += node.value;
            count++;
        });
        this.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / total;
        __WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__["each"](this._sorted, function (strNode) {
            var node = strNode[1];
            var slice = node.slice;
            node.parent = nodesContainer;
            slice.radius = radius;
            slice.innerRadius = pixelInnerRadius;
            var arc;
            if (_this.nonRibbon) {
                arc = (endAngle - _this.startAngle) / count - _this.nodePadding;
            }
            else {
                arc = _this.valueAngle * node.value;
            }
            slice.arc = arc;
            slice.startAngle = startAngle;
            node.trueStartAngle = startAngle;
            node.invalidate();
            startAngle += arc + _this.nodePadding;
        });
        this.chordContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };
        this.chordContainer.invalidateLayout();
    };
    /**
     * [appear description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    ChordDiagram.prototype.appear = function () {
        _super.prototype.appear.call(this);
        /* quite useless - in case sequencedInterpolation = false, the animation is not visible, as the proportions
           are the same. if true, then it doesn't look right either.
        let duration = this.interpolationDuration;
        let i = 0;
        this.dataItems.each((dataItem) => {
            let delay = 0;
            if (this.sequencedInterpolation) {
                delay = this.sequencedInterpolationDelay * i + duration * i / $iter.length(this.nodes.iterator());
            }

            dataItem.setWorkingValue("value", 0.001, 0);
            dataItem.setWorkingValue("value", dataItem.value, duration, delay);
            i++;
        })*/
    };
    /**
     * Sets defaults that instantiate some objects that rely on parent, so they
     * cannot be set in constructor.
     */
    ChordDiagram.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);
        // Add a default screen reader title for accessibility
        // This will be overridden in screen reader if there are any `titles` set
        if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["hasValue"](this.readerTitle)) {
            this.readerTitle = this.language.translate("Chord diagram");
        }
    };
    /**
     * Creates and returns a new data item.
     *
     * @return {this} Data item
     */
    ChordDiagram.prototype.createDataItem = function () {
        return new ChordDiagramDataItem();
    };
    Object.defineProperty(ChordDiagram.prototype, "startAngle", {
        /**
         * @return {number} Start angle (degrees)
         */
        get: function () {
            return this.getPropertyValue("startAngle");
        },
        /**
         * Starting angle of the Radar face. (degrees)
         *
         * Normally, a circular radar face begins (the radial axis is drawn) at the
         * top center. (at -90 degrees)
         *
         * You can use `startAngle` to change this setting.
         *
         * E.g. setting this to 0 will make the radial axis start horizontally to
         * the right, as opposed to vertical.
         *
         * For a perfect circle the absolute sum of `startAngle` and `endAngle`
         * needs to be 360.
         *
         * However, it's **not** necessary to do so. You can set those to lesser
         * numbers, to create semi-circles.
         *
         * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that
         * looks like a quarter of a circle.
         *
         * @default -90
         * @param {number}  value  Start angle (degrees)
         */
        set: function (value) {
            this.setPropertyValue("startAngle", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChordDiagram.prototype, "endAngle", {
        /**
         * @return {number} End angle (degrees)
         */
        get: function () {
            return this.getPropertyValue("endAngle");
        },
        /**
         * Starting angle of the Radar face. (degrees)
         *
         * Normally, a circular radar face ends (the radial axis is drawn) exactly
         * where it has started, forming a full 360 circle. (at 270 degrees)
         *
         * You can use `endAngle` to end the circle somewhere else.
         *
         * E.g. setting this to 180 will make the radar face end at horizontal line
         * to the left off the center.
         *
         * For a perfect circle the absolute sum of `startAngle` and `endAngle`
         * needs to be 360.
         *
         * However, it's **not** necessary to do so. You can set those to lesser
         * numbers, to create semi-circles.
         *
         * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that
         * looks like a quarter of a circle.
         *
         * @default -90
         * @param {number}  value  End angle (degrees)
         */
        set: function (value) {
            this.setPropertyValue("endAngle", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChordDiagram.prototype, "radius", {
        /**
         * @return {number} Outer radius
         */
        get: function () {
            return this.getPropertyValue("radius");
        },
        /**
         * Outer radius of the Radar face.
         *
         * This can either be in absolute pixel value, or relative [[Percent]].
         *
         * @param {number | Percent}  value  Outer radius
         */
        set: function (value) {
            this.setPropertyValue("radius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChordDiagram.prototype, "innerRadius", {
        /**
         * @return {number} Inner radius
         */
        get: function () {
            return this.getPropertyValue("innerRadius");
        },
        /**
         * Inner radius of the Chord nodes.
         *
         * This can either be in absolute pixel value, or relative [[Percent]].
         *
         * @param {number | Percent}  value  Outer radius
         */
        set: function (value) {
            this.setPropertyValue("innerRadius", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChordDiagram.prototype, "nonRibbon", {
        /**
         * @return {boolean} Non-ribbon
         */
        get: function () {
            return this.getPropertyValue("nonRibbon");
        },
        /**
         *
         * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.
         *
         * @param {boolean}  value
         */
        set: function (value) {
            this.setPropertyValue("nonRibbon", value, true);
            this.links.template.middleLine.strokeOpacity = 1;
            this.links.template.link.fillOpacity = 0;
        },
        enumerable: true,
        configurable: true
    });
    return ChordDiagram;
}(__WEBPACK_IMPORTED_MODULE_0__FlowDiagram__["a" /* FlowDiagram */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_5__core_Registry__["b" /* registry */].registeredClasses["ChordDiagram"] = ChordDiagram;
//# sourceMappingURL=ChordDiagram.js.map

/***/ }),
/* 216 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return QuadraticCurve; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Line__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Color__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__rendering_Path__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_Type__ = __webpack_require__(1);
/**
 * Functionality for drawing quadratic curves.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */





/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Draws a waved line.
 *
 * @see {@link IQuadraticCurveEvents} for a list of available events
 * @see {@link IQuadraticCurveAdapters} for a list of available Adapters
 */
var QuadraticCurve = /** @class */ (function (_super) {
    __extends(QuadraticCurve, _super);
    /**
     * Constructor
     */
    function QuadraticCurve() {
        var _this = _super.call(this) || this;
        _this.className = "QuadraticCurve";
        _this.element = _this.paper.add("path");
        _this.pixelPerfect = false;
        _this.fill = Object(__WEBPACK_IMPORTED_MODULE_1__utils_Color__["c" /* color */])();
        _this.applyTheme();
        return _this;
    }
    /**
     * Draws the waved line.
     *
     * @ignore Exclude from docs
     */
    QuadraticCurve.prototype.draw = function () {
        //super.draw();
        if (__WEBPACK_IMPORTED_MODULE_4__utils_Type__["isNumber"](this.x1 + this.x2 + this.y1 + this.y2 + this.cpx + this.cpy)) {
            var p1 = { x: this.x1, y: this.y1 };
            var p2 = { x: this.x2, y: this.y2 };
            var cp = { x: this.cpx, y: this.cpy };
            var d = __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["moveTo"](p1) + __WEBPACK_IMPORTED_MODULE_2__rendering_Path__["quadraticCurveTo"](p2, cp);
            this.element.attr({ "d": d });
        }
    };
    Object.defineProperty(QuadraticCurve.prototype, "cpx", {
        /**
         * @return {number} X
         */
        get: function () {
            return this.getPropertyValue("cpx");
        },
        /**
         * X coordinate of control point.
         *
         * @param {number} value X
         */
        set: function (value) {
            this.setPropertyValue("cpx", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QuadraticCurve.prototype, "cpy", {
        /**
         * @return {number} Y
         */
        get: function () {
            return this.getPropertyValue("cpy");
        },
        /**
         * Y coordinate of control point.
         *
         * @param {number} value Y
         */
        set: function (value) {
            this.setPropertyValue("cpy", value, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Converts relative position along the line (0-1) into pixel coordinates.
     *
     * @param  {number}             position  Position (0-1)
     * @return {IOrientationPoint}            Coordinates
     */
    QuadraticCurve.prototype.positionToPoint = function (position) {
        var p1 = { x: this.x1, y: this.y1 };
        var cp = { x: this.cpx, y: this.cpy };
        var p2 = { x: this.x2, y: this.y2 };
        var point1 = __WEBPACK_IMPORTED_MODULE_3__utils_Math__["getPointOnQuadraticCurve"](p1, p2, cp, position);
        var point2 = __WEBPACK_IMPORTED_MODULE_3__utils_Math__["getPointOnQuadraticCurve"](p1, p2, cp, position + 0.001);
        return { x: point1.x, y: point1.y, angle: __WEBPACK_IMPORTED_MODULE_3__utils_Math__["getAngle"](point1, point2) };
    };
    return QuadraticCurve;
}(__WEBPACK_IMPORTED_MODULE_0__Line__["a" /* Line */]));

//# sourceMappingURL=QuadraticCurve.js.map

/***/ }),
/* 217 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return TreeMapDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TreeMap; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__XYChart__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_Dictionary__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__axes_ValueAxis__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__series_TreeMapSeries__ = __webpack_require__(175);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_ColorSet__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_interaction_Mouse__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_utils_Array__ = __webpack_require__(12);
/**
 * TreeMap chart module.
 *
 * Parts of the functionality used in this module are taken from D3.js library
 * (https://d3js.org/)
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */










/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[TreeMap]].
 *
 * @see {@link DataItem}
 */
var TreeMapDataItem = /** @class */ (function (_super) {
    __extends(TreeMapDataItem, _super);
    /**
     * Constructor
     */
    function TreeMapDataItem() {
        var _this = _super.call(this) || this;
        /**
         * Required for squarify functionality.
         *
         * @ignore Exclude from docs
         * @type {TreeMapDataItem[]}
         */
        _this.rows = [];
        _this.className = "TreeMapDataItem";
        _this.values.value = {};
        _this.values.x0 = {};
        _this.values.y0 = {};
        _this.values.x1 = {};
        _this.values.y1 = {};
        _this.hasChildren.children = true;
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(TreeMapDataItem.prototype, "value", {
        /**
         * @return {number} Value
         */
        get: function () {
            var value = this.values["value"].value;
            if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](value)) {
                value = 0;
                if (this.children) {
                    __WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__["each"](this.children.iterator(), function (child) {
                        if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isNumber"](child.value)) {
                            value += child.value;
                        }
                    });
                }
            }
            return value;
        },
        /**
         * Numeric value of the item.
         *
         * @param {number}  value  Value
         */
        set: function (value) {
            this.setValue("value", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeMapDataItem.prototype, "x0", {
        /**
         * @return {number} X
         */
        get: function () {
            return this.values.x0.value;
        },
        /**
         * Item's X position.
         *
         * @ignore Exclude from docs
         * @todo Description (review)
         * @param {number}  value  X
         */
        set: function (value) {
            this.setValue("x0", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeMapDataItem.prototype, "x1", {
        /**
         * @return {number} X
         */
        get: function () {
            return this.values.x1.value;
        },
        /**
         * Item's X position.
         *
         * @ignore Exclude from docs
         * @todo Description (review)
         * @param {number}  value  X
         */
        set: function (value) {
            this.setValue("x1", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeMapDataItem.prototype, "y0", {
        /**
         * @return {number} Y
         */
        get: function () {
            return this.values.y0.value;
        },
        /**
         * Item's Y position.
         *
         * @ignore Exclude from docs
         * @todo Description (review)
         * @param {number}  value  Y
         */
        set: function (value) {
            this.setValue("y0", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeMapDataItem.prototype, "y1", {
        /**
         * @return {number} Y
         */
        get: function () {
            return this.values.y1.value;
        },
        /**
         * Item's Y position.
         *
         * @ignore Exclude from docs
         * @todo Description (review)
         * @param {number}  value  Y
         */
        set: function (value) {
            this.setValue("y1", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeMapDataItem.prototype, "name", {
        /**
         * @return {string} Name
         */
        get: function () {
            return this.properties.name;
        },
        /**
         * Item's name.
         *
         * @param {string}  name  Name
         */
        set: function (name) {
            this.setProperty("name", name);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeMapDataItem.prototype, "children", {
        /**
         * @return {OrderedListTemplate<TreeMapDataItem>} Item's children
         */
        get: function () {
            return this.properties.children;
        },
        /**
         * A list of item's sub-children.
         *
         * Having children means that the TreeMap chat will automatically be
         * "drillable". Clicking on an item with children will zoom to the item, then
         * display its children.
         *
         * Treemap can have any level of nesting.
         *
         * @param {OrderedListTemplate<TreeMapDataItem>}  children  Item's children
         */
        set: function (children) {
            this.setProperty("children", children);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeMapDataItem.prototype, "level", {
        /**
         * Depth level in the treemap hierarchy.
         *
         * The top-level item will have level set at 0. Its children will have
         * level 1, and so on.
         *
         * @readonly
         * @return {number} Level
         */
        get: function () {
            if (!this.parent) {
                return 0;
            }
            else {
                return this.parent.level + 1;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeMapDataItem.prototype, "color", {
        /**
         * @return {Color} Color
         */
        get: function () {
            var color = this.properties.color;
            if (color == undefined) {
                if (this.parent) {
                    color = this.parent.color;
                }
            }
            if (color == undefined) {
                if (this.component) {
                    color = this.component.colors.getIndex(this.component.colors.step * this.index);
                }
            }
            return color;
        },
        /**
         * Item's color.
         *
         * If not set, will use parent's color, or, if that is not set either,
         * automatically assigned color from chart's color set. (`chart.colors`)
         *
         * @param {Color}  value  Color
         */
        set: function (value) {
            this.setProperty("color", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeMapDataItem.prototype, "series", {
        get: function () {
            return this._series;
        },
        /**
         * series of data item
         * @todo: proper descrition
         */
        set: function (series) {
            if (this._series) {
                this.component.series.removeValue(this._series);
                this._series.dispose();
            }
            this._series = series;
            this._disposers.push(series);
        },
        enumerable: true,
        configurable: true
    });
    return TreeMapDataItem;
}(__WEBPACK_IMPORTED_MODULE_0__XYChart__["b" /* XYChartDataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a TreeMap chart.
 *
 * @see {@link ITreeMapEvents} for a list of available Events
 * @see {@link ITreeMapAdapters} for a list of available Adapters
 * @todo Example
 */
var TreeMap = /** @class */ (function (_super) {
    __extends(TreeMap, _super);
    /**
     * Constructor
     */
    function TreeMap() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * An algorithm used to divide area into squares based on their value.
         *
         * Available options: squarify (default), binaryTree, slice, dice, sliceDice.
         *
         * ```TypeScript
         * chart.layoutAlgorithm = chart.sliceDice;
         * ```
         * ```JavaScript
         * chart.layoutAlgorithm = chart.sliceDice;
         * ```
         * ```JSON
         * {
         *   // ...
         *   "layoutAlgorithm": "sliceDice",
         *   // ...
         * }
         * ```
         *
         * @default squarify
         * @type {function}
         */
        _this.layoutAlgorithm = _this.squarify;
        /**
         * Holds series object for each TreeMap level.
         *
         * "0" is the top-level series.
         * "1" is the second level.
         * Etc.
         *
         * @todo Description
         * @param {DictionaryTemplate<string, TreeMapSeries>} Templates for each level
         */
        _this.seriesTemplates = new __WEBPACK_IMPORTED_MODULE_2__core_utils_Dictionary__["c" /* DictionaryTemplate */](new __WEBPACK_IMPORTED_MODULE_4__series_TreeMapSeries__["a" /* TreeMapSeries */]());
        /**
         * Is the chart zoomable?
         *
         * If the chart is `zoomable`, and items have sub-items, the chart will
         * drill-down to sub-items when click on their parent item.
         *
         * @default true
         * @type {boolean}
         */
        _this.zoomable = true;
        _this.className = "TreeMap";
        _this.maxLevels = 2;
        _this.currentLevel = 0;
        _this.homeText = _this.language.translate("Home");
        _this.colors = new __WEBPACK_IMPORTED_MODULE_5__core_utils_ColorSet__["a" /* ColorSet */]();
        _this.sorting = "descending";
        // create two value axes for the chart
        var xAxis = _this.xAxes.push(new __WEBPACK_IMPORTED_MODULE_3__axes_ValueAxis__["a" /* ValueAxis */]());
        xAxis.title.disabled = true;
        xAxis.strictMinMax = true;
        var xRenderer = xAxis.renderer;
        xRenderer.inside = true;
        xRenderer.labels.template.disabled = true;
        xRenderer.ticks.template.disabled = true;
        xRenderer.grid.template.disabled = true;
        xRenderer.axisFills.template.disabled = true;
        xRenderer.minGridDistance = 100;
        xRenderer.line.disabled = true;
        xRenderer.baseGrid.disabled = true;
        //xRenderer.inversed = true;
        var yAxis = _this.yAxes.push(new __WEBPACK_IMPORTED_MODULE_3__axes_ValueAxis__["a" /* ValueAxis */]());
        yAxis.title.disabled = true;
        yAxis.strictMinMax = true;
        var yRenderer = yAxis.renderer;
        yRenderer.inside = true;
        yRenderer.labels.template.disabled = true;
        yRenderer.ticks.template.disabled = true;
        yRenderer.grid.template.disabled = true;
        yRenderer.axisFills.template.disabled = true;
        yRenderer.minGridDistance = 100;
        yRenderer.line.disabled = true;
        yRenderer.baseGrid.disabled = true;
        yRenderer.inversed = true;
        // shortcuts
        _this.xAxis = xAxis;
        _this.yAxis = yAxis;
        _this.zoomOutButton.events.on("hit", function () {
            _this.zoomToChartDataItem(_this._homeDataItem);
        });
        _this.seriesTemplates.events.on("insertKey", function (event) {
            event.newValue.isTemplate = true;
        });
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(TreeMap.prototype, "navigationBar", {
        /**
         * Returns navigationBar if it is added to a chart
         */
        get: function () {
            return this._navigationBar;
        },
        /**
         * A navigation bar used to show "breadcrumb" control, indicating current
         * drill-down path.
         *
         * @type {NavigationBar}
         */
        set: function (navigationBar) {
            var _this = this;
            if (this._navigationBar != navigationBar) {
                this._navigationBar = navigationBar;
                navigationBar.parent = this;
                navigationBar.toBack();
                navigationBar.links.template.events.on("hit", function (event) {
                    var dataItem = event.target.dataItem.dataContext;
                    _this.zoomToChartDataItem(dataItem);
                    _this.createTreeSeries(dataItem);
                });
                this._disposers.push(navigationBar);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * (Re)validates chart's data.
     *
     * @ignore Exclude from docs
     */
    TreeMap.prototype.validateData = function () {
        var _this = this;
        this.series.clear();
        _super.prototype.validateData.call(this);
        if (this._homeDataItem) {
            this._homeDataItem.dispose();
        }
        var homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!
        this._homeDataItem = homeDataItem;
        __WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__["each"](this.dataItems.iterator(), function (dataItem) {
            dataItem.parent = homeDataItem;
        });
        homeDataItem.children = this.dataItems;
        homeDataItem.x0 = 0;
        homeDataItem.y0 = 0;
        homeDataItem.name = this._homeText;
        var maxX = 1000;
        var maxY = maxX * this.pixelHeight / this.pixelWidth;
        homeDataItem.x1 = maxX;
        homeDataItem.y1 = maxY;
        this.xAxis.min = 0;
        this.xAxis.max = maxX;
        this.yAxis.min = 0;
        this.yAxis.max = maxY;
        this.layoutItems(homeDataItem);
        this.createTreeSeries(homeDataItem);
        __WEBPACK_IMPORTED_MODULE_1__core_Registry__["b" /* registry */].events.once("exitframe", function () {
            _this.toggleBullets(0);
        });
    };
    /**
     * Layouts and sizes all items according to their value and
     * `layoutAlgorithm`.
     *
     * @ignore Exclude from docs
     * @param {TreeMapDataItem}  parent  Parent data item
     */
    TreeMap.prototype.layoutItems = function (parent, sorting) {
        if (parent) {
            var children = parent.children;
            if (!sorting) {
                sorting = this.sorting;
            }
            if (sorting == "ascending") {
                children.values.sort(function (a, b) {
                    return a.value - b.value;
                });
            }
            if (sorting == "descending") {
                children.values.sort(function (a, b) {
                    return b.value - a.value;
                });
            }
            this.layoutAlgorithm(parent);
            for (var i = 0; i < children.length; i++) {
                var node = children.getIndex(i);
                if (node.children) {
                    this.layoutItems(node);
                }
            }
        }
    };
    /**
     * Creates and returns a new treemap series.
     *
     * @todo Description
     * @param {TreeMapDataItem}  dataItem  Data item to create series out of
     */
    TreeMap.prototype.createTreeSeries = function (dataItem) {
        var _this = this;
        this._tempSeries = [];
        var navigationData = [dataItem];
        // create parent series and navigation data
        var parentDataItem = dataItem.parent;
        while (parentDataItem != undefined) {
            this.initSeries(parentDataItem);
            navigationData.push(parentDataItem);
            parentDataItem = parentDataItem.parent;
        }
        navigationData.reverse();
        if (this.navigationBar) {
            this.navigationBar.data = navigationData;
        }
        // create series and children series
        this.createTreeSeriesReal(dataItem);
        // add those which are not in the list
        __WEBPACK_IMPORTED_MODULE_9__core_utils_Array__["c" /* each */](this._tempSeries, function (series) {
            if (_this.series.indexOf(series) == -1) {
                _this.series.push(series);
            }
            series.zIndex = series.level;
        });
    };
    /**
     * [createTreeSeriesReal description]
     *
     * @todo Description
     * @param {TreeMapDataItem} dataItem [description]
     */
    TreeMap.prototype.createTreeSeriesReal = function (dataItem) {
        if (dataItem.children) {
            var level = dataItem.level;
            if (level < this.currentLevel + this.maxLevels) {
                this.initSeries(dataItem);
                for (var i = 0; i < dataItem.children.length; i++) {
                    var child = dataItem.children.getIndex(i);
                    if (child.children) {
                        this.createTreeSeriesReal(child);
                    }
                }
            }
        }
    };
    /**
     * @ignore
     * Overriding, as tree map series are created on the fly all the time
     */
    TreeMap.prototype.seriesAppeared = function () {
        return true;
    };
    /**
     * Initializes the treemap series.
     *
     * @todo Description
     * @param {TreeMapDataItem}  dataItem  Chart data item
     */
    TreeMap.prototype.initSeries = function (dataItem) {
        var _this = this;
        if (!dataItem.series) {
            var series = void 0;
            var template = this.seriesTemplates.getKey(dataItem.level.toString());
            if (template) {
                series = template.clone();
            }
            else {
                series = this.series.create();
            }
            dataItem.series = series;
            var level = dataItem.level;
            series.level = level;
            var dataContext = dataItem.dataContext;
            if (dataContext) {
                series.config = dataContext.config;
            }
            this.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it
            series.data = dataItem.children.values;
            series.columns.template.adapter.add("fill", function (fill, target) {
                var dataItem = target.dataItem;
                if (dataItem) {
                    var treeMapDataItem = dataItem.treeMapDataItem;
                    if (treeMapDataItem) {
                        target.fill = treeMapDataItem.color;
                        target.adapter.remove("fill"); //@todo: make it possible adapters applied once?
                        return treeMapDataItem.color;
                    }
                }
            });
            if (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {
                series.columns.template.cursorOverStyle = __WEBPACK_IMPORTED_MODULE_6__core_interaction_Mouse__["a" /* MouseCursorStyle */].pointer;
                if (this.zoomable) {
                    series.columns.template.events.on("hit", function (event) {
                        var seriesDataItem = event.target.dataItem;
                        if (dataItem.level > _this.currentLevel) {
                            _this.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);
                        }
                        else {
                            _this.zoomToSeriesDataItem(seriesDataItem);
                        }
                    }, this);
                }
            }
        }
        this._tempSeries.push(dataItem.series);
    };
    /**
     * Toggles bullets so that labels that belong to current drill level are
     * shown.
     *
     * @param {number}  duration  Animation duration (ms)
     */
    TreeMap.prototype.toggleBullets = function (duration) {
        var _this = this;
        // hide all series which are not in tempSeries
        __WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__["each"](this.series.iterator(), function (series) {
            if (_this._tempSeries.indexOf(series) == -1) {
                series.hide();
            }
            else {
                series.show();
                if (series.level > _this.currentLevel + _this.maxLevels - 1) {
                    series.bulletsContainer.hide(duration);
                }
                else {
                    series.bulletsContainer.show(duration);
                }
            }
        });
    };
    /**
     * Zooms to particular item in series.
     *
     * @param {TreeMapSeriesDataItem}  dataItem  Data item
     */
    TreeMap.prototype.zoomToSeriesDataItem = function (dataItem) {
        this.zoomToChartDataItem(dataItem.treeMapDataItem);
    };
    /**
     * Zooms to particular item.
     *
     * @ignore Exclude from docs
     * @param {TreeMapDataItem}  dataItem  Data item
     */
    TreeMap.prototype.zoomToChartDataItem = function (dataItem) {
        var _this = this;
        if (dataItem.children) {
            this.xAxis.zoomToValues(dataItem.x0, dataItem.x1);
            this.yAxis.zoomToValues(dataItem.y0, dataItem.y1);
            this.currentLevel = dataItem.level;
            this.createTreeSeries(dataItem);
            var rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;
            if (rangeChangeAnimation) {
                rangeChangeAnimation.events.once("animationended", function () {
                    _this.toggleBullets();
                });
            }
            else {
                this.toggleBullets();
            }
        }
    };
    /**
     * Sets defaults that instantiate some objects that rely on parent, so they
     * cannot be set in constructor.
     */
    TreeMap.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);
        // Add a default screen reader title for accessibility
        // This will be overridden in screen reader if there are any `titles` set
        if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["hasValue"](this.readerTitle)) {
            this.readerTitle = this.language.translate("TreeMap chart");
        }
    };
    /**
     * Returns a new/empty DataItem of the type appropriate for this object.
     *
     * @see {@link DataItem}
     * @return {XYSeriesDataItem} Data Item
     */
    TreeMap.prototype.createDataItem = function () {
        return new TreeMapDataItem();
    };
    Object.defineProperty(TreeMap.prototype, "maxLevels", {
        /**
         * @return {number} Maximum drill-down level
         */
        get: function () {
            return this.getPropertyValue("maxLevels");
        },
        /**
         * Maximum drill-down levels the chart will allow going to.
         *
         * If set, the chart will not drill-down further, even if there are sub-items
         * available.
         *
         * Set to 0 to disable drill down functionality.
         *
         * @param {number}  value  Maximum drill-down level
         */
        set: function (value) {
            this.setPropertyValue("maxLevels", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeMap.prototype, "currentLevel", {
        /**
         * @return {number} Current level
         */
        get: function () {
            return this.getPropertyValue("currentLevel");
        },
        /**
         * Current drill-down level the chart is at.
         *
         * @param {number}  value  Current level
         */
        set: function (value) {
            this.setPropertyValue("currentLevel", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeMap.prototype, "sorting", {
        get: function () {
            return this.getPropertyValue("sorting");
        },
        /**
         * Sorting direction of treemap items.
         *
         * Available options: "none", "ascending", and "descending" (default).
         *
         * @default "descending"
         * @param {"none" | "ascending" | "descending"} value [description]
         */
        set: function (value) {
            this.setPropertyValue("sorting", value, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates and returns a new series of the suitable type.
     *
     * @return {this} new series
     */
    TreeMap.prototype.createSeries = function () {
        return new __WEBPACK_IMPORTED_MODULE_4__series_TreeMapSeries__["a" /* TreeMapSeries */]();
    };
    Object.defineProperty(TreeMap.prototype, "homeText", {
        /**
         * @return {string} Home text
         */
        get: function () {
            return this._homeText;
        },
        /**
         * A text displayed on the "home" button which is used to go back to level 0
         * after drill into sub-items.
         *
         * @param {string}  value  Home text
         */
        set: function (value) {
            this._homeText = value;
            if (this._homeDataItem) {
                this._homeDataItem.name = this._homeText;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Processes JSON-based config before it is applied to the object.
     *
     * @ignore Exclude from docs
     * @param {object}  config  Config
     */
    TreeMap.prototype.processConfig = function (config) {
        if (config) {
            // Instantiate layout algorithm
            if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["hasValue"](config["layoutAlgorithm"]) && __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isString"](config["layoutAlgorithm"])) {
                switch (config["layoutAlgorithm"]) {
                    case "squarify":
                        config["layoutAlgorithm"] = this.squarify;
                        break;
                    case "binaryTree":
                        config["layoutAlgorithm"] = this.binaryTree;
                        break;
                    case "slice":
                        config["layoutAlgorithm"] = this.slice;
                        break;
                    case "dice":
                        config["layoutAlgorithm"] = this.dice;
                        break;
                    case "sliceDice":
                        config["layoutAlgorithm"] = this.sliceDice;
                        break;
                    default:
                        delete config["layoutAlgorithm"];
                        break;
                }
            }
            // Set type for navigation bar
            if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["hasValue"](config.navigationBar) && !__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["hasValue"](config.navigationBar.type)) {
                config.navigationBar.type = "NavigationBar";
            }
            _super.prototype.processConfig.call(this, config);
        }
    };
    TreeMap.prototype.handleDataItemValueChange = function () {
        this.invalidateDataItems();
    };
    TreeMap.prototype.validateDataItems = function () {
        _super.prototype.validateDataItems.call(this);
        this.layoutItems(this._homeDataItem);
        __WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__["each"](this.series.iterator(), function (series) {
            series.validateRawData();
        });
        this.zoomToChartDataItem(this._homeDataItem);
    };
    /**
     * ==========================================================================
     * TREEMAP LAYOUT FUNCTIONS
     * ==========================================================================
     * @hidden
     */
    /**
     * The functions below are from D3.js library (https://d3js.org/)
     *
     * --------------------------------------------------------------------------
     * Copyright 2017 Mike Bostock
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are met:
     *
     * 1. Redistributions of source code must retain the above copyright notice,
     *    this list of conditions and the following disclaimer.
     *
     * 2. Redistributions in binary form must reproduce the above copyright
     *    notice,this list of conditions and the following disclaimer in the
     *    documentation and/or other materials provided with the distribution.
     *
     * 3. Neither the name of the copyright holder nor the names of its
     *    contributors may be used to endorse or promote products derived from
     *    this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
     * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
     * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
     * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
     * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
     * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     * --------------------------------------------------------------------------
     * @hidden
     */
    /**
     * Treemap layout algorithm: binaryTree.
     *
     * @ignore Exclude from docs
     * @param {TreeMapDataItem}  parent  Data item
     */
    TreeMap.prototype.binaryTree = function (parent) {
        var nodes = parent.children, i, n = nodes.length, sum, sums = new Array(n + 1);
        for (sums[0] = sum = i = 0; i < n; ++i) {
            sums[i + 1] = sum += nodes.getIndex(i).value;
        }
        partition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);
        function partition(i, j, value, x0, y0, x1, y1) {
            if (i >= j - 1) {
                var node = nodes.getIndex(i);
                node.x0 = x0, node.y0 = y0;
                node.x1 = x1, node.y1 = y1;
                return;
            }
            var valueOffset = sums[i], valueTarget = (value / 2) + valueOffset, k = i + 1, hi = j - 1;
            while (k < hi) {
                var mid = k + hi >>> 1;
                if (sums[mid] < valueTarget)
                    k = mid + 1;
                else
                    hi = mid;
            }
            if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k)
                --k;
            var valueLeft = sums[k] - valueOffset, valueRight = value - valueLeft;
            if ((x1 - x0) > (y1 - y0)) {
                var xk = (x0 * valueRight + x1 * valueLeft) / value;
                partition(i, k, valueLeft, x0, y0, xk, y1);
                partition(k, j, valueRight, xk, y0, x1, y1);
            }
            else {
                var yk = (y0 * valueRight + y1 * valueLeft) / value;
                partition(i, k, valueLeft, x0, y0, x1, yk);
                partition(k, j, valueRight, x0, yk, x1, y1);
            }
        }
    };
    /**
     * Treemap layout algorithm: slice.
     *
     * @ignore Exclude from docs
     * @param {TreeMapDataItem}  parent  Data item
     */
    TreeMap.prototype.slice = function (parent) {
        var x0 = parent.x0;
        var x1 = parent.x1;
        var y0 = parent.y0;
        var y1 = parent.y1;
        var nodes = parent.children, node, i = -1, n = nodes.length, k = parent.value && (y1 - y0) / parent.value;
        while (++i < n) {
            node = nodes.getIndex(i), node.x0 = x0, node.x1 = x1;
            node.y0 = y0, node.y1 = y0 += node.value * k;
        }
    };
    /**
     * Treemap layout algorithm: dice.
     *
     * @ignore Exclude from docs
     * @param {TreeMapDataItem}  parent  Data item
     */
    TreeMap.prototype.dice = function (parent) {
        var x0 = parent.x0;
        var x1 = parent.x1;
        var y0 = parent.y0;
        var y1 = parent.y1;
        var nodes = parent.children, node, i = -1, n = nodes.length, k = parent.value && (x1 - x0) / parent.value;
        while (++i < n) {
            node = nodes.getIndex(i), node.y0 = y0, node.y1 = y1;
            node.x0 = x0, node.x1 = x0 += node.value * k;
        }
    };
    /**
     * Treemap layout algorithm: slideDice.
     *
     * @ignore Exclude from docs
     * @param {TreeMapDataItem}  parent  Data item
     */
    TreeMap.prototype.sliceDice = function (parent) {
        parent.level & 1 ? this.slice(parent) : this.dice(parent);
    };
    /**
     * Treemap layout algorithm: squarify.
     *
     * @ignore Exclude from docs
     * @param {TreeMapDataItem}  parent  Data item
     */
    TreeMap.prototype.squarify = function (parent) {
        var ratio = (1 + Math.sqrt(5)) / 2;
        var x0 = parent.x0;
        var x1 = parent.x1;
        var y0 = parent.y0;
        var y1 = parent.y1;
        var nodes = parent.children;
        var nodeValue;
        var i0 = 0;
        var i1 = 0;
        var n = nodes.length;
        var dx;
        var dy;
        var value = parent.value;
        var sumValue;
        var minValue;
        var maxValue;
        var newRatio;
        var minRatio;
        var alpha;
        var beta;
        while (i0 < n) {
            dx = x1 - x0, dy = y1 - y0;
            // Find the next non-empty node.
            do
                sumValue = nodes.getIndex(i1++).value;
            while (!sumValue && i1 < n);
            minValue = maxValue = sumValue;
            alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
            beta = sumValue * sumValue * alpha;
            minRatio = Math.max(maxValue / beta, beta / minValue);
            // Keep adding nodes while the aspect ratio maintains or improves.
            for (; i1 < n; ++i1) {
                sumValue += nodeValue = nodes.getIndex(i1).value;
                if (nodeValue < minValue) {
                    minValue = nodeValue;
                }
                if (nodeValue > maxValue) {
                    maxValue = nodeValue;
                }
                beta = sumValue * sumValue * alpha;
                newRatio = Math.max(maxValue / beta, beta / minValue);
                if (newRatio > minRatio) {
                    sumValue -= nodeValue;
                    break;
                }
                minRatio = newRatio;
            }
            // Position and record the row orientation.
            var row = this.dataItems.template.clone();
            row.value = sumValue;
            row.dice = dx < dy;
            row.children = nodes.slice(i0, i1);
            row.x0 = x0;
            row.y0 = y0;
            row.x1 = x1;
            row.y1 = y1;
            if (row.dice) {
                row.y1 = value ? y0 += dy * sumValue / value : y1;
                this.dice(row);
            }
            else {
                row.x1 = value ? x0 += dx * sumValue / value : x1, y1;
                this.slice(row);
            }
            value -= sumValue, i0 = i1;
        }
    };
    return TreeMap;
}(__WEBPACK_IMPORTED_MODULE_0__XYChart__["a" /* XYChart */]));

/**
 * Register class, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["b" /* registry */].registeredClasses["TreeMap"] = TreeMap;
//# sourceMappingURL=TreeMap.js.map

/***/ }),
/* 218 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return XYChart3DDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return XYChart3D; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__XYChart__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__axes_AxisRendererX3D__ = __webpack_require__(176);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__axes_AxisRendererY3D__ = __webpack_require__(177);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__series_ColumnSeries3D__ = __webpack_require__(178);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__ = __webpack_require__(1);
/**
 * Module for building 3D serial charts.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * Imports
 * ============================================================================
 * @hidden
 */









/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[XYChart3D]].
 *
 * @see {@link DataItem}
 */
var XYChart3DDataItem = /** @class */ (function (_super) {
    __extends(XYChart3DDataItem, _super);
    function XYChart3DDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "XYChart3DDataItem";
        _this.applyTheme();
        return _this;
    }
    return XYChart3DDataItem;
}(__WEBPACK_IMPORTED_MODULE_0__XYChart__["b" /* XYChartDataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a 3D XY chart.
 *
 * @see {@link IXYChart3DEvents} for a list of available Events
 * @see {@link IXYChart3DAdapters} for a list of available Adapters
 * @important
 */
var XYChart3D = /** @class */ (function (_super) {
    __extends(XYChart3D, _super);
    /**
     * Constructor
     */
    function XYChart3D() {
        var _this = 
        // Init
        _super.call(this) || this;
        /**
         * Type of the axis renderer to use for X axes.
         *
         * @type {[type]}
         */
        _this._axisRendererX = __WEBPACK_IMPORTED_MODULE_2__axes_AxisRendererX3D__["a" /* AxisRendererX3D */];
        /**
         * Type of the axis renderer to use for Y axes.
         * @type {[type]}
         */
        _this._axisRendererY = __WEBPACK_IMPORTED_MODULE_3__axes_AxisRendererY3D__["a" /* AxisRendererY3D */];
        _this.className = "XYChart3D";
        // Set defaults
        _this.depth = 30;
        _this.angle = 30;
        // Creeate container for columns
        var columnsContainer = _this.seriesContainer.createChild(__WEBPACK_IMPORTED_MODULE_1__core_Container__["a" /* Container */]);
        columnsContainer.shouldClone = false;
        columnsContainer.isMeasured = false;
        columnsContainer.layout = "none";
        _this.columnsContainer = columnsContainer;
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(XYChart3D.prototype, "depth", {
        /**
         * @return {number} Depth (px)
         */
        get: function () {
            return this.getPropertyValue("depth");
        },
        /**
         * Depth of the 3D chart / columns in pixels.
         *
         * @param {number}  value  Depth (px)
         */
        set: function (value) {
            this.setPropertyValue("depth", value);
            this.fixLayout();
            this.invalidateDataUsers();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYChart3D.prototype, "angle", {
        /**
         * @return {number} Angle
         */
        get: function () {
            return this.getPropertyValue("angle");
        },
        /**
         * Angle the chart is viewed at.
         *
         * @todo Description (review)
         * @param {number}  value  Angle
         */
        set: function (value) {
            this.setPropertyValue("angle", value);
            this.fixLayout();
            this.invalidateDataUsers();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYChart3D.prototype, "dx3D", {
        /**
         * A calculated horizontal 3D offset. (px)
         *
         * @readonly
         * @return {number} Offset (px)
         */
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_7__core_utils_Math__["cos"](this.angle) * this.depth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYChart3D.prototype, "dy3D", {
        /**
         * A calculated vertical 3D offset. (px)
         *
         * @readonly
         * @return {number} Offset (px)
         */
        get: function () {
            return -__WEBPACK_IMPORTED_MODULE_7__core_utils_Math__["sin"](this.angle) * this.depth;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * (Re)validates the chart.
     *
     * @ignore Exclude from docs
     */
    XYChart3D.prototype.validate = function () {
        _super.prototype.validate.call(this);
        this.fixLayout();
    };
    /**
     * Updates the layout (padding and scrollbar positions) to accommodate for
     * 3D depth and angle.
     */
    XYChart3D.prototype.fixLayout = function () {
        this.chartContainer.marginTop = -this.dy3D;
        this.chartContainer.paddingRight = this.dx3D;
        if (this.scrollbarX) {
            this.scrollbarX.dy = this.dy3D;
            this.scrollbarX.dx = this.dx3D;
        }
        if (this.scrollbarY) {
            this.scrollbarY.dy = this.dy3D;
            this.scrollbarY.dx = this.dx3D;
        }
        this.fixColumns();
    };
    /**
     * Updates column positions, offset and dimensions based on chart's angle
     * and depth.
     */
    XYChart3D.prototype.fixColumns = function () {
        var _this = this;
        var count = 1;
        __WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__["each"](this.series.iterator(), function (series) {
            if (series instanceof __WEBPACK_IMPORTED_MODULE_4__series_ColumnSeries3D__["a" /* ColumnSeries3D */]) {
                if (!series.clustered) {
                    count++;
                }
                series.depthIndex = count - 1;
            }
        });
        var s = 0;
        __WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__["each"](this.series.iterator(), function (series) {
            if (series instanceof __WEBPACK_IMPORTED_MODULE_4__series_ColumnSeries3D__["a" /* ColumnSeries3D */]) {
                series.depth = _this.depth / count;
                series.angle = _this.angle;
                series.dx = _this.depth / count * __WEBPACK_IMPORTED_MODULE_7__core_utils_Math__["cos"](_this.angle) * series.depthIndex;
                series.dy = -_this.depth / count * __WEBPACK_IMPORTED_MODULE_7__core_utils_Math__["sin"](_this.angle) * series.depthIndex;
                var i_1 = 1;
                __WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__["each"](series.columns.iterator(), function (column) {
                    column.zIndex = 1000 * i_1 + s - series.depthIndex * 100;
                    i_1++;
                });
                s++;
            }
        });
    };
    /**
     * Processes JSON-based config before it is applied to the object.
     *
     * @ignore Exclude from docs
     * @param {object}  config  Config
     */
    XYChart3D.prototype.processConfig = function (config) {
        if (config) {
            // Set up series
            if (__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["hasValue"](config.series) && __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["isArray"](config.series)) {
                for (var i = 0, len = config.series.length; i < len; i++) {
                    config.series[i].type = config.series[i].type || "ColumnSeries3D";
                }
            }
        }
        _super.prototype.processConfig.call(this, config);
    };
    return XYChart3D;
}(__WEBPACK_IMPORTED_MODULE_0__XYChart__["a" /* XYChart */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_5__core_Registry__["b" /* registry */].registeredClasses["XYChart3D"] = XYChart3D;
//# sourceMappingURL=XYChart3D.js.map

/***/ }),
/* 219 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return HeatLegend; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Container__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_rendering_fills_LinearGradient__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_Color__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__charts_axes_ValueAxis__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__charts_axes_AxisRendererX__ = __webpack_require__(66);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__charts_axes_AxisRendererY__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__core_utils_Type__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__core_utils_Colors__ = __webpack_require__(42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__core_elements_RoundedRectangle__ = __webpack_require__(29);
/**
 * HeatLegend module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();













/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * This class creates a link (waved color-filled line) between two nodes in a
 * Sankey Diagram.
 *
 * @see {@link IHeatLegendEvents} for a list of available events
 * @see {@link IHeatLegendAdapters} for a list of available Adapters
 * @important
 */
var HeatLegend = /** @class */ (function (_super) {
    __extends(HeatLegend, _super);
    /**
     * Constructor
     */
    function HeatLegend() {
        var _this = _super.call(this) || this;
        _this.className = "HeatLegend";
        _this.markerContainer = _this.createChild(__WEBPACK_IMPORTED_MODULE_0__core_Container__["a" /* Container */]);
        _this.markerContainer.shouldClone = false;
        _this.orientation = "horizontal";
        _this.markerCount = 1;
        // Create a template container and list for the a marker
        var marker = new __WEBPACK_IMPORTED_MODULE_12__core_elements_RoundedRectangle__["a" /* RoundedRectangle */]();
        marker.minHeight = 20;
        marker.minWidth = 20;
        marker.interactionsEnabled = false;
        marker.fillOpacity = 1;
        marker.cornerRadius(0, 0, 0, 0);
        _this.markerContainer.minHeight = 20;
        _this.markerContainer.minWidth = 20;
        _this.markers = new __WEBPACK_IMPORTED_MODULE_4__core_utils_List__["e" /* ListTemplate */](marker);
        _this.applyTheme();
        return _this;
    }
    HeatLegend.prototype.getMinFromRules = function (property) {
        var series = this.series;
        if (series) {
            var minValue_1;
            __WEBPACK_IMPORTED_MODULE_9__core_utils_Iterator__["eachContinue"](series.heatRules.iterator(), function (heatRule) {
                if (heatRule.property == property) {
                    minValue_1 = heatRule.min;
                    return false;
                }
                return true;
            });
            return minValue_1;
        }
    };
    HeatLegend.prototype.getMaxFromRules = function (property) {
        var series = this.series;
        if (series) {
            var maxValue_1;
            __WEBPACK_IMPORTED_MODULE_9__core_utils_Iterator__["each"](series.heatRules.iterator(), function (heatRule) {
                if (heatRule.property == property) {
                    maxValue_1 = heatRule.max;
                    return false;
                }
                return true;
            });
            return maxValue_1;
        }
    };
    /**
     *
     * @ignore Exclude from docs
     */
    HeatLegend.prototype.validate = function () {
        _super.prototype.validate.call(this);
        var series = this.series;
        var minColor = this.minColor;
        var maxColor = this.maxColor;
        if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["hasValue"](minColor)) {
            minColor = Object(__WEBPACK_IMPORTED_MODULE_3__core_utils_Color__["e" /* toColor */])(this.getMinFromRules("fill"));
        }
        if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["hasValue"](maxColor)) {
            maxColor = Object(__WEBPACK_IMPORTED_MODULE_3__core_utils_Color__["e" /* toColor */])(this.getMaxFromRules("fill"));
        }
        if (series) {
            var seriesFill = series.fill;
            if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["hasValue"](minColor) && seriesFill instanceof __WEBPACK_IMPORTED_MODULE_3__core_utils_Color__["a" /* Color */]) {
                minColor = seriesFill;
            }
            if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["hasValue"](maxColor) && seriesFill instanceof __WEBPACK_IMPORTED_MODULE_3__core_utils_Color__["a" /* Color */]) {
                maxColor = seriesFill;
            }
        }
        if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["hasValue"](maxColor)) {
            maxColor = Object(__WEBPACK_IMPORTED_MODULE_3__core_utils_Color__["e" /* toColor */])(this.getMaxFromRules("fill"));
        }
        var minOpacity = __WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["toNumber"](this.getMinFromRules("fillOpacity"));
        if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["isNumber"](minOpacity)) {
            minOpacity = 1;
        }
        var maxOpacity = __WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["toNumber"](this.getMaxFromRules("fillOpacity"));
        if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["isNumber"](maxOpacity)) {
            maxOpacity = 1;
        }
        var minStrokeOpacity = __WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["toNumber"](this.getMinFromRules("strokeOpacity"));
        if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["isNumber"](minStrokeOpacity)) {
            minStrokeOpacity = 1;
        }
        var maxStrokeOpacity = __WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["toNumber"](this.getMaxFromRules("strokeOpacity"));
        if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["isNumber"](maxStrokeOpacity)) {
            maxStrokeOpacity = 1;
        }
        var minStroke = Object(__WEBPACK_IMPORTED_MODULE_3__core_utils_Color__["e" /* toColor */])(this.getMinFromRules("stroke"));
        var maxStroke = Object(__WEBPACK_IMPORTED_MODULE_3__core_utils_Color__["e" /* toColor */])(this.getMaxFromRules("stroke"));
        //if (series) {
        for (var i = 0; i < this.markerCount; i++) {
            var marker = this.markers.getIndex(i);
            if (!marker) {
                marker = this.markers.create();
                marker.parent = this.markerContainer;
                marker.height = Object(__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__["c" /* percent */])(100);
                marker.width = Object(__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__["c" /* percent */])(100);
            }
            if (this.markerCount == 1) {
                var gradient = new __WEBPACK_IMPORTED_MODULE_1__core_rendering_fills_LinearGradient__["a" /* LinearGradient */]();
                gradient.addColor(minColor, minOpacity);
                gradient.addColor(maxColor, maxOpacity);
                if (this.orientation == "vertical") {
                    gradient.rotation = -90;
                }
                marker.fill = gradient;
                if (__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["hasValue"](minStroke) && __WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["hasValue"](maxStroke)) {
                    var strokeGradient = new __WEBPACK_IMPORTED_MODULE_1__core_rendering_fills_LinearGradient__["a" /* LinearGradient */]();
                    strokeGradient.addColor(minStroke, minStrokeOpacity);
                    strokeGradient.addColor(maxStroke, maxStrokeOpacity);
                    if (this.orientation == "vertical") {
                        strokeGradient.rotation = -90;
                    }
                    marker.stroke = strokeGradient;
                }
            }
            else {
                var color = new __WEBPACK_IMPORTED_MODULE_3__core_utils_Color__["a" /* Color */](__WEBPACK_IMPORTED_MODULE_11__core_utils_Colors__["interpolate"](minColor.rgb, maxColor.rgb, i / this.markerCount));
                marker.fill = color;
                var opacity = minOpacity + (maxOpacity - minOpacity) * i / this.markerCount;
                marker.fillOpacity = opacity;
                if (__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["hasValue"](minStroke) && __WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["hasValue"](maxStroke)) {
                    var color_1 = new __WEBPACK_IMPORTED_MODULE_3__core_utils_Color__["a" /* Color */](__WEBPACK_IMPORTED_MODULE_11__core_utils_Colors__["interpolate"](minStroke.rgb, maxStroke.rgb, i / this.markerCount));
                    marker.stroke = color_1;
                    var opacity_1 = minStrokeOpacity + (maxStrokeOpacity - minStrokeOpacity) * i / this.markerCount;
                    marker.strokeOpacity = opacity_1;
                }
            }
        }
        var renderer = this.valueAxis.renderer;
        if (this.markerCount > 1) {
            if (this.orientation == "horizontal") {
                renderer.minGridDistance = this.measuredWidth / this.markerCount;
            }
            else {
                renderer.minGridDistance = this.measuredHeight / this.markerCount;
            }
        }
        for (var i = this.markerCount; i < this.markers.length; i++) {
            this.markers.getIndex(i).parent = undefined;
        }
        //}
    };
    Object.defineProperty(HeatLegend.prototype, "minColor", {
        /**
         * Returns minColor value
         * @return {Color}
         */
        get: function () {
            return this.getPropertyValue("minColor");
        },
        /**
         * Min color of a heat legend. If a series is set for the legend, minColor is taken from series.
         *
         * @param {Color}
         */
        set: function (value) {
            if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["isObject"](value)) {
                value = Object(__WEBPACK_IMPORTED_MODULE_3__core_utils_Color__["e" /* toColor */])(value);
            }
            this.setPropertyValue("minColor", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeatLegend.prototype, "maxColor", {
        /**
         * Returns maxColor value
         * @return {Color}
         */
        get: function () {
            return this.getPropertyValue("maxColor");
        },
        /**
         * Max color of a heat legend. If a series is set for the legend, maxColor is taken from series.
         *
         * @param {Color}
         */
        set: function (value) {
            if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["isObject"](value)) {
                value = Object(__WEBPACK_IMPORTED_MODULE_3__core_utils_Color__["e" /* toColor */])(value);
            }
            this.setPropertyValue("maxColor", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeatLegend.prototype, "markerCount", {
        /**
         * Returns number of color squares (markers).
         * @return {number}
         */
        get: function () {
            return this.getPropertyValue("markerCount");
        },
        /**
         * Number of color squares (markers) in the heat legend. If only 1 marker is used, it will be filled with gradient.
         *
         * @param {number}
         */
        set: function (value) {
            this.setPropertyValue("markerCount", value, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeatLegend.prototype, "minValue", {
        /**
         * Returns minimum value of heat legend.
         * @return {number}
         */
        get: function () {
            return this.getPropertyValue("minValue");
        },
        /**
         * Minimum value of heat legend's value axis. If a series is set for the legend, min is taken from series.
         *
         * @param {number}
         */
        set: function (value) {
            this.setPropertyValue("minValue", value);
            this.valueAxis.min = value;
            this.valueAxis.invalidateDataRange();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeatLegend.prototype, "maxValue", {
        /**
         * Returns maximum value of heat legend.
         * @return {number}
         */
        get: function () {
            return this.getPropertyValue("maxValue");
        },
        /**
         * Maximum value of heat legend's value axis. If a series is set for the legend, max is taken from series.
         *
         * @param {number}
         */
        set: function (value) {
            this.setPropertyValue("maxValue", value);
            this.valueAxis.max = value;
            this.valueAxis.invalidateDataRange();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeatLegend.prototype, "orientation", {
        /**
         * Returns orientation value.
         *
         * @return {"horizontal" | "vertical"}
         */
        get: function () {
            return this.getPropertyValue("orientation");
        },
        /**
        * Heat legend orientation. Note, if you change orientation of a heat legend, you must set value axis renderer properties after that, as with orientation renderer changes.
        *
        * @param {"horizontal" | "vertical"}
        */
        set: function (value) {
            this.setPropertyValue("orientation", value, true);
            var markerContainer = this.markerContainer;
            var valueAxis = this.valueAxis;
            // HORIZONTAL
            if (value == "horizontal") {
                if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["hasValue"](this.width)) {
                    this.width = 200;
                }
                this.height = undefined;
                valueAxis.width = Object(__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__["c" /* percent */])(100);
                valueAxis.height = undefined;
                this.layout = "vertical";
                markerContainer.width = Object(__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__["c" /* percent */])(100);
                markerContainer.height = undefined;
                if (!(valueAxis.renderer instanceof __WEBPACK_IMPORTED_MODULE_7__charts_axes_AxisRendererX__["a" /* AxisRendererX */])) {
                    valueAxis.renderer = new __WEBPACK_IMPORTED_MODULE_7__charts_axes_AxisRendererX__["a" /* AxisRendererX */]();
                }
            }
            // VERTICAL
            else {
                if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["hasValue"](this.height)) {
                    this.height = 200;
                }
                this.width = undefined;
                this.layout = "horizontal";
                markerContainer.width = undefined;
                markerContainer.height = Object(__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__["c" /* percent */])(100);
                valueAxis.height = Object(__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__["c" /* percent */])(100);
                valueAxis.width = undefined;
                if (!(valueAxis.renderer instanceof __WEBPACK_IMPORTED_MODULE_8__charts_axes_AxisRendererY__["a" /* AxisRendererY */])) {
                    valueAxis.renderer = new __WEBPACK_IMPORTED_MODULE_8__charts_axes_AxisRendererY__["a" /* AxisRendererY */]();
                }
                valueAxis.renderer.inside = true;
                valueAxis.renderer.labels.template.inside = true;
            }
            var renderer = valueAxis.renderer;
            renderer.grid.template.disabled = true;
            renderer.axisFills.template.disabled = true;
            renderer.baseGrid.disabled = true;
            renderer.labels.template.padding(2, 3, 2, 3);
            renderer.minHeight = undefined;
            renderer.minWidth = undefined;
            this.markerContainer.layout = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeatLegend.prototype, "valueAxis", {
        /**
         * Returns valueAxis value.
         * @return {ValueAxis}
         */
        get: function () {
            if (!this._valueAxis) {
                this.valueAxis = this.createChild(__WEBPACK_IMPORTED_MODULE_6__charts_axes_ValueAxis__["a" /* ValueAxis */]);
                this.valueAxis.shouldClone = false;
            }
            return this._valueAxis;
        },
        /**
         * Sets a value axis of heat legend. Value axis for heat legend is created automatically.
         * @param {ValueAxis}
         */
        set: function (valueAxis) {
            this._valueAxis = valueAxis;
            valueAxis.parent = this;
            valueAxis.strictMinMax = true;
            this.orientation = this.orientation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeatLegend.prototype, "series", {
        /**
         * Returns series value.
         * @return {Series}
         */
        get: function () {
            return this._series;
        },
        /**
         * You can set series for heat legend. It will take min, max, minColor and maxColor values from this series.
         * @param {Series} series
         */
        set: function (series) {
            var _this = this;
            this._series = series;
            var dataField = "value";
            try {
                var dataFieldDefined = series.heatRules.getIndex(0).dataField;
                if (dataFieldDefined) {
                    dataField = dataFieldDefined;
                }
            }
            catch (err) {
            }
            this.updateMinMax(series.dataItem.values[dataField].low, series.dataItem.values[dataField].high);
            series.dataItem.events.on("calculatedvaluechanged", function (event) {
                _this.updateMinMax(series.dataItem.values[dataField].low, series.dataItem.values[dataField].high);
            });
            series.heatRules.events.on("insert", this.invalidate, this);
            series.heatRules.events.on("remove", this.invalidate, this);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Updates min/max of value axis.
     * @ignore
     */
    HeatLegend.prototype.updateMinMax = function (min, max) {
        var valueAxis = this.valueAxis;
        if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["isNumber"](this.minValue)) {
            valueAxis.min = min;
            valueAxis.invalidateDataRange();
        }
        if (!__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["isNumber"](this.maxValue)) {
            valueAxis.max = max;
            valueAxis.invalidateDataRange();
        }
    };
    /**
     * Processes JSON-based config before it is applied to the object.
     *
     * @ignore Exclude from docs
     * @param {object}  config  Config
     */
    HeatLegend.prototype.processConfig = function (config) {
        if (config) {
            // Set up series
            if (__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["hasValue"](config.series) && __WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["isArray"](config.series)) {
                for (var i = 0, len = config.series.length; i < len; i++) {
                    var series = config.series[i];
                    if (__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["hasValue"](series) && __WEBPACK_IMPORTED_MODULE_10__core_utils_Type__["isString"](series) && this.map.hasKey(series)) {
                        config.series[i] = this.map.getKey(series);
                    }
                }
            }
        }
        _super.prototype.processConfig.call(this, config);
    };
    return HeatLegend;
}(__WEBPACK_IMPORTED_MODULE_0__core_Container__["a" /* Container */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__core_Registry__["b" /* registry */].registeredClasses["HeatLegend"] = HeatLegend;
//# sourceMappingURL=HeatLegend.js.map

/***/ }),
/* 220 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return CandlestickSeriesDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CandlestickSeries; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ColumnSeries__ = __webpack_require__(50);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__elements_Candlestick__ = __webpack_require__(180);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_utils_InterfaceColorSet__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_Utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_Object__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_utils_Type__ = __webpack_require__(1);
/**
 * Candlestick Series module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */









/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[CandlestickSeries]].
 *
 * @see {@link DataItem}
 */
var CandlestickSeriesDataItem = /** @class */ (function (_super) {
    __extends(CandlestickSeriesDataItem, _super);
    /**
     * Defines a type of [[Component]] this data item is used for
     * @type {CandlestickSeries}
     * @todo Disabled to work around TS bug (see if we can re-enable it again)
     */
    //public _component!: CandlestickSeries;
    /**
     * Constructor
     */
    function CandlestickSeriesDataItem() {
        var _this = _super.call(this) || this;
        _this.values.lowValueX = {};
        _this.values.lowValueY = {};
        _this.values.highValueX = {};
        _this.values.highValueY = {};
        _this.className = "CandlestickSeriesDataItem";
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(CandlestickSeriesDataItem.prototype, "lowValueX", {
        /**
         * @return {number} Value
         */
        get: function () {
            return this.values.lowValueX.value;
        },
        /**
         * Low value for horizontal axis.
         *
         * @param {number}  value  Value
         */
        set: function (value) {
            this.setValue("lowValueX", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CandlestickSeriesDataItem.prototype, "lowValueY", {
        /**
         * @return {number} Value
         */
        get: function () {
            return this.values.lowValueY.value;
        },
        /**
         * Low value for vertical axis.
         *
         * @param {number}  value  Value
         */
        set: function (value) {
            this.setValue("lowValueY", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CandlestickSeriesDataItem.prototype, "highValueX", {
        /**
         * @return {number} Value
         */
        get: function () {
            return this.values.highValueX.value;
        },
        /**
         * High value for horizontal axis.
         *
         * @param {number}  value  Value
         */
        set: function (value) {
            this.setValue("highValueX", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CandlestickSeriesDataItem.prototype, "highValueY", {
        /**
         * @return {number} Value
         */
        get: function () {
            return this.values.highValueY.value;
        },
        /**
         * High value for vertical axis.
         *
         * @param {number}  value  Value
         */
        set: function (value) {
            this.setValue("highValueY", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CandlestickSeriesDataItem.prototype, "closeValueX", {
        /**
         * @return {number} Value
         */
        get: function () {
            return this.values.valueX.value;
        },
        /**
         * Close value for horizontal axis.
         *
         * This is an alias for `valueX` added for convenience only.
         *
         * @param {number}  value  Value
         */
        set: function (value) {
            this.setValue("valueX", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CandlestickSeriesDataItem.prototype, "closeValueY", {
        /**
         * @return {number} Value
         */
        get: function () {
            return this.values.valueY.value;
        },
        /**
         * Close value for vertical axis.
         *
         * This is an alias for `valueX` added for convenience only.
         *
         * @param {number}  value  Value
         */
        set: function (value) {
            this.setValue("valueY", value);
        },
        enumerable: true,
        configurable: true
    });
    return CandlestickSeriesDataItem;
}(__WEBPACK_IMPORTED_MODULE_0__ColumnSeries__["b" /* ColumnSeriesDataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Defines [[Series]] for a candlestick graph.
 *
 * @see {@link ICandlestickSeriesEvents} for a list of available Events
 * @see {@link ICandlestickSeriesAdapters} for a list of available Adapters
 * @todo Example
 * @important
 */
var CandlestickSeries = /** @class */ (function (_super) {
    __extends(CandlestickSeries, _super);
    /**
     * Constructor
     */
    function CandlestickSeries() {
        var _this = _super.call(this) || this;
        _this.className = "CandlestickSeries";
        _this.strokeOpacity = 1;
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_4__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        var positiveColor = interfaceColors.getFor("positive");
        var negativeColor = interfaceColors.getFor("negative");
        _this.dropFromOpenState.properties.fill = negativeColor;
        _this.dropFromOpenState.properties.stroke = negativeColor;
        _this.riseFromOpenState.properties.fill = positiveColor;
        _this.riseFromOpenState.properties.stroke = positiveColor;
        _this.applyTheme();
        return _this;
    }
    /**
     * Sets defaults that instantiate some objects that rely on parent, so they
     * cannot be set in constructor.
     */
    CandlestickSeries.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);
        if (!__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__["hasValue"](this.readerTitle)) {
            this.readerTitle = this.language.translate("Candlestick Series");
        }
    };
    /**
     * Returns a new/empty DataItem of the type appropriate for this object.
     *
     * @see {@link DataItem}
     * @return {CandlestickSeriesDataItem} Data Item
     */
    CandlestickSeries.prototype.createDataItem = function () {
        return new CandlestickSeriesDataItem();
    };
    /**
     * Validates data item's element, effectively redrawing it.
     *
     * @ignore Exclude from docs
     * @param {CandlestickSeriesDataItem}  dataItem  Data item
     */
    CandlestickSeries.prototype.validateDataElementReal = function (dataItem) {
        _super.prototype.validateDataElementReal.call(this, dataItem);
        var column = dataItem.column;
        if (column) {
            var lowLine_1 = column.lowLine;
            var highLine_1 = column.highLine;
            if (this.baseAxis == this.xAxis) {
                var x = column.pixelWidth / 2;
                lowLine_1.x = x;
                highLine_1.x = x;
                var open_1 = dataItem.getWorkingValue(this.yOpenField);
                var close_1 = dataItem.getWorkingValue(this.yField);
                var yOpen = this.yAxis.getY(dataItem, this.yOpenField);
                var yClose = this.yAxis.getY(dataItem, this.yField);
                var yLow = this.yAxis.getY(dataItem, this.yLowField);
                var yHigh = this.yAxis.getY(dataItem, this.yHighField);
                var pixelY = column.pixelY;
                lowLine_1.y1 = yLow - pixelY;
                highLine_1.y1 = yHigh - pixelY;
                if (open_1 < close_1) {
                    lowLine_1.y2 = yOpen - pixelY;
                    highLine_1.y2 = yClose - pixelY;
                }
                else {
                    lowLine_1.y2 = yClose - pixelY;
                    highLine_1.y2 = yOpen - pixelY;
                }
            }
            if (this.baseAxis == this.yAxis) {
                var y = column.pixelHeight / 2;
                lowLine_1.y = y;
                highLine_1.y = y;
                var open_2 = dataItem.getWorkingValue(this.xOpenField);
                var close_2 = dataItem.getWorkingValue(this.xField);
                var xOpen = this.xAxis.getX(dataItem, this.xOpenField);
                var xClose = this.xAxis.getX(dataItem, this.xField);
                var xLow = this.xAxis.getX(dataItem, this.xLowField);
                var xHigh = this.xAxis.getX(dataItem, this.xHighField);
                var pixelX = column.pixelX;
                lowLine_1.x1 = xLow - pixelX;
                highLine_1.x1 = xHigh - pixelX;
                if (open_2 < close_2) {
                    lowLine_1.x2 = xOpen - pixelX;
                    highLine_1.x2 = xClose - pixelX;
                }
                else {
                    lowLine_1.x2 = xClose - pixelX;
                    highLine_1.x2 = xOpen - pixelX;
                }
            }
            __WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__["each"](this.axisRanges.iterator(), function (axisRange) {
                // LOW LINE
                var rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);
                if (rangeColumn) {
                    var rangeLowLine = rangeColumn.lowLine;
                    rangeLowLine.x = lowLine_1.x;
                    rangeLowLine.y = lowLine_1.y;
                    rangeLowLine.x1 = lowLine_1.x1;
                    rangeLowLine.x2 = lowLine_1.x2;
                    rangeLowLine.y1 = lowLine_1.y1;
                    rangeLowLine.y2 = lowLine_1.y2;
                    // HIGH LINE
                    var rangehighLine = rangeColumn.highLine;
                    rangehighLine.x = highLine_1.x;
                    rangehighLine.y = highLine_1.y;
                    rangehighLine.x1 = highLine_1.x1;
                    rangehighLine.x2 = highLine_1.x2;
                    rangehighLine.y1 = highLine_1.y1;
                    rangehighLine.y2 = highLine_1.y2;
                }
            });
        }
    };
    Object.defineProperty(CandlestickSeries.prototype, "xLowField", {
        /**
         * A data field to look for "low" value for horizontal axis.
         *
         * @ignore Exclude from docs
         * @return {string} Field name
         */
        get: function () {
            return this._xLowField;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CandlestickSeries.prototype, "yLowField", {
        /**
         * A data field to look for "low" value for vertical axis.
         *
         * @ignore Exclude from docs
         * @return {string} Field name
         */
        get: function () {
            return this._yLowField;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CandlestickSeries.prototype, "xHighField", {
        /**
         * A data field to look for "high" value for horizontal axis.
         *
         * @ignore Exclude from docs
         * @return {string} Field name
         */
        get: function () {
            return this._xHighField;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CandlestickSeries.prototype, "yHighField", {
        /**
         * A data field to look for "high" value for vertical axis.
         *
         * @ignore Exclude from docs
         * @return {string} Field name
         */
        get: function () {
            return this._yHighField;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets up which data fields to use for data access.
     */
    CandlestickSeries.prototype.defineFields = function () {
        _super.prototype.defineFields.call(this);
        if (this.baseAxis == this.xAxis) {
            var yAxisFieldName = __WEBPACK_IMPORTED_MODULE_5__core_utils_Utils__["capitalize"](this.yAxis.axisFieldName);
            this._yLowField = ("low" + yAxisFieldName + "Y");
            this._yHighField = ("high" + yAxisFieldName + "Y");
        }
        if (this.baseAxis == this.yAxis) {
            var xAxisFieldName = __WEBPACK_IMPORTED_MODULE_5__core_utils_Utils__["capitalize"](this.xAxis.axisFieldName);
            this._xLowField = ("low" + xAxisFieldName + "X");
            this._xHighField = ("high" + xAxisFieldName + "X");
        }
        this.addValueField(this.xAxis, this._xValueFields, this._xLowField);
        this.addValueField(this.xAxis, this._xValueFields, this._xHighField);
        this.addValueField(this.yAxis, this._yValueFields, this._yLowField);
        this.addValueField(this.yAxis, this._yValueFields, this._yHighField);
    };
    /**
     * Creates elements in related legend container, that mimics the look of this
     * Series.
     *
     * @ignore Exclude from docs
     * @param {Container}  marker  Legend item container
     */
    CandlestickSeries.prototype.createLegendMarker = function (marker) {
        var w = marker.pixelWidth;
        var h = marker.pixelHeight;
        marker.removeChildren();
        var column = marker.createChild(__WEBPACK_IMPORTED_MODULE_2__elements_Candlestick__["a" /* Candlestick */]);
        column.shouldClone = false;
        column.copyFrom(this.columns.template);
        var cw;
        var ch;
        var highLine = column.lowLine;
        var lowLine = column.highLine;
        if (this.baseAxis == this.yAxis) {
            cw = w / 3;
            ch = h;
            highLine.y = h / 2;
            lowLine.y = h / 2;
            highLine.x2 = w / 3;
            lowLine.x2 = w / 3;
            lowLine.x = w / 3 * 2;
            column.column.x = w / 3;
        }
        else {
            cw = w;
            ch = h / 3;
            highLine.x = w / 2;
            lowLine.x = w / 2;
            highLine.y2 = h / 3;
            lowLine.y2 = h / 3;
            lowLine.y = h / 3 * 2;
            column.column.y = h / 3;
        }
        column.width = cw;
        column.height = ch;
        __WEBPACK_IMPORTED_MODULE_6__core_utils_Object__["copyProperties"](this, marker, __WEBPACK_IMPORTED_MODULE_1__core_Sprite__["b" /* visualProperties */]);
        __WEBPACK_IMPORTED_MODULE_6__core_utils_Object__["copyProperties"](this.columns.template, column, __WEBPACK_IMPORTED_MODULE_1__core_Sprite__["b" /* visualProperties */]);
    };
    /**
     * Returns an element to use for Candlestick
     * @ignore
     * @return {this["_column"]} Element.
     */
    CandlestickSeries.prototype.createColumnTemplate = function () {
        return new __WEBPACK_IMPORTED_MODULE_2__elements_Candlestick__["a" /* Candlestick */]();
    };
    return CandlestickSeries;
}(__WEBPACK_IMPORTED_MODULE_0__ColumnSeries__["a" /* ColumnSeries */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_3__core_Registry__["b" /* registry */].registeredClasses["CandlestickSeries"] = CandlestickSeries;
__WEBPACK_IMPORTED_MODULE_3__core_Registry__["b" /* registry */].registeredClasses["CandlestickSeriesDataItem"] = CandlestickSeriesDataItem;
//# sourceMappingURL=CandlestickSeries.js.map

/***/ }),
/* 221 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return StepLineSeriesDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return StepLineSeries; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__LineSeries__ = __webpack_require__(113);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__ = __webpack_require__(2);
/**
 * Step line series module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[StepLineSeries]].
 *
 * @see {@link DataItem}
 */
var StepLineSeriesDataItem = /** @class */ (function (_super) {
    __extends(StepLineSeriesDataItem, _super);
    /**
     * Constructor
     */
    function StepLineSeriesDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "StepLineSeriesDataItem";
        _this.applyTheme();
        return _this;
    }
    return StepLineSeriesDataItem;
}(__WEBPACK_IMPORTED_MODULE_0__LineSeries__["b" /* LineSeriesDataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Defines [[Series]] for a step line graph.
 *
 * @see {@link IStepLineSeriesEvents} for a list of available Events
 * @see {@link IStepLineSeriesAdapters} for a list of available Adapters
 * @todo Example
 * @important
 */
var StepLineSeries = /** @class */ (function (_super) {
    __extends(StepLineSeries, _super);
    /**
     * Constructor
     */
    function StepLineSeries() {
        var _this = _super.call(this) || this;
        _this.className = "StepLineSeries";
        _this.applyTheme();
        return _this;
    }
    /**
     * Returns a new/empty DataItem of the type appropriate for this object.
     *
     * @see {@link DataItem}
     * @return {StepLineSeriesDataItem} Data Item
     */
    StepLineSeries.prototype.createDataItem = function () {
        return new StepLineSeriesDataItem();
    };
    /**
     * [addPoints description]
     *
     * @todo Description
     * @param {IPoint[]}           points     [description]
     * @param {this["_dataItem"]}  dataItem   [description]
     * @param {string}             xField     [description]
     * @param {string}             yField     [description]
     * @param {boolean}            backwards  [description]
     */
    StepLineSeries.prototype.addPoints = function (points, dataItem, xField, yField, backwards) {
        var x0 = this.xAxis.getX(dataItem, xField, 0);
        var y0 = this.yAxis.getY(dataItem, yField, 0);
        var x1 = this.xAxis.getX(dataItem, xField, 1);
        var y1 = this.yAxis.getY(dataItem, yField, 1);
        x0 = __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["fitToRange"](x0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.
        y0 = __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["fitToRange"](y0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.
        x1 = __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["fitToRange"](x1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.
        y1 = __WEBPACK_IMPORTED_MODULE_2__core_utils_Math__["fitToRange"](y1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.
        // this might make an impression that points are duplicated, and they indeed are, but this is needed to handle gaps in data
        if (this.connect) {
            if (points.length > 1) {
                var prevPoint = points[points.length - 1];
                if (this.baseAxis == this.xAxis) {
                    if (backwards) {
                        points.push({ x: prevPoint.x, y: y1 });
                    }
                    else {
                        points.push({ x: x0, y: prevPoint.y });
                    }
                }
                if (this.baseAxis == this.yAxis) {
                    if (backwards) {
                        points.push({ x: x1, y: prevPoint.y });
                    }
                    else {
                        points.push({ x: prevPoint.x, y: y0 });
                    }
                }
            }
        }
        var point0 = { x: x0, y: y0 };
        var point1 = { x: x1, y: y1 };
        if (backwards) {
            points.push(point1, point0);
        }
        else {
            points.push(point0, point1);
        }
    };
    return StepLineSeries;
}(__WEBPACK_IMPORTED_MODULE_0__LineSeries__["a" /* LineSeries */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["b" /* registry */].registeredClasses["StepLineSeries"] = StepLineSeries;
__WEBPACK_IMPORTED_MODULE_1__core_Registry__["b" /* registry */].registeredClasses["StepLineSeriesDataItem"] = StepLineSeriesDataItem;
//# sourceMappingURL=StepLineSeries.js.map

/***/ }),
/* 222 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return RadarColumnSeriesDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RadarColumnSeries; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__series_ColumnSeries__ = __webpack_require__(50);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__elements_RadarColumn__ = __webpack_require__(181);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_rendering_Path__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_Object__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_utils_Type__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_utils_Array__ = __webpack_require__(12);
/**
 * Radar column series module.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */










/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[RadarColumnSeries]].
 *
 * @see {@link DataItem}
 */
var RadarColumnSeriesDataItem = /** @class */ (function (_super) {
    __extends(RadarColumnSeriesDataItem, _super);
    /**
     * Constructor
     */
    function RadarColumnSeriesDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "ColumnSeriesDataItem";
        _this.applyTheme();
        return _this;
    }
    return RadarColumnSeriesDataItem;
}(__WEBPACK_IMPORTED_MODULE_0__series_ColumnSeries__["b" /* ColumnSeriesDataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Defines [[Series]] for a 3D column graph.
 *
 * @see {@link IRadarColumnSeriesEvents} for a list of available Events
 * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters
 * @todo Example
 * @important
 */
var RadarColumnSeries = /** @class */ (function (_super) {
    __extends(RadarColumnSeries, _super);
    /**
     * Constructor
     */
    function RadarColumnSeries() {
        var _this = _super.call(this) || this;
        _this.className = "RadarColumnSeries";
        _this.applyTheme();
        return _this;
    }
    /**
     * Creates and returns a RadarColumn element to use as column in radar chart.
     *
     * @return {this["_column"]} RadarColumn.
     */
    RadarColumnSeries.prototype.createColumnTemplate = function () {
        return new __WEBPACK_IMPORTED_MODULE_2__elements_RadarColumn__["a" /* RadarColumn */]();
    };
    /**
     * (Re)validates the whole series, effectively causing it to redraw.
     *
     * @ignore Exclude from docs
     */
    RadarColumnSeries.prototype.validate = function () {
        // so that radius would be updated
        if (this.chart.invalid) {
            this.chart.validate();
        }
        _super.prototype.validate.call(this);
    };
    /**
     * Validates data item's element, effectively redrawing it.
     *
     * @ignore Exclude from docs
     * @param {RadarColumnSeriesDataItem}  dataItem  Data item
     */
    RadarColumnSeries.prototype.validateDataElementReal = function (dataItem) {
        var _this = this;
        var startAngle = this.chart.startAngle;
        var endAngle = this.chart.endAngle;
        var yField = this.yField;
        var yOpenField = this.yOpenField;
        var xField = this.xField;
        var xOpenField = this.xOpenField;
        var lAngle;
        var rAngle;
        var tRadius;
        var bRadius;
        var startLocation = this.getStartLocation(dataItem);
        var endLocation = this.getEndLocation(dataItem);
        var cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));
        startAngle = startAngle + startLocation * cellAngle;
        endAngle = endAngle - (1 - endLocation) * cellAngle;
        var template = this.columns.template;
        var percentWidth = template.percentWidth;
        if (__WEBPACK_IMPORTED_MODULE_7__core_utils_Type__["isNaN"](percentWidth)) {
            percentWidth = 100;
        }
        var offset = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["round"]((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);
        startLocation += offset;
        endLocation -= offset;
        // @todo use getPoint() instead of these
        if (this.baseAxis == this.xAxis) {
            tRadius = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["getDistance"]({ x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], "valueY"), y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], "valueY") });
            bRadius = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["getDistance"]({ x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], "valueY"), y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], "valueY") });
            lAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, "valueX");
            rAngle = this.xAxis.getAngle(dataItem, xField, endLocation, "valueX");
        }
        else {
            tRadius = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["getDistance"]({ x: this.yAxis.getX(dataItem, yField, startLocation, "valueY"), y: this.yAxis.getY(dataItem, yField, startLocation, "valueY") });
            bRadius = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["getDistance"]({ x: this.yAxis.getX(dataItem, yOpenField, endLocation, "valueY"), y: this.yAxis.getY(dataItem, yOpenField, endLocation, "valueY") });
            lAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], "valueX");
            rAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], "valueX");
        }
        if (rAngle < lAngle) {
            var temp = rAngle;
            rAngle = lAngle;
            lAngle = temp;
        }
        lAngle = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["fitToRange"](lAngle, startAngle, endAngle);
        rAngle = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["fitToRange"](rAngle, startAngle, endAngle);
        var radarColumn = dataItem.column;
        if (!radarColumn) {
            radarColumn = this.columns.create();
            dataItem.column = radarColumn;
            __WEBPACK_IMPORTED_MODULE_6__core_utils_Object__["forceCopyProperties"](this.columns.template, radarColumn, __WEBPACK_IMPORTED_MODULE_1__core_Sprite__["b" /* visualProperties */]);
            dataItem.addSprite(radarColumn);
            this.setColumnStates(radarColumn);
        }
        var slice = radarColumn.radarColumn;
        slice.startAngle = lAngle;
        var arc = rAngle - lAngle;
        if (arc > 0) {
            slice.arc = arc;
            slice.radius = tRadius;
            slice.innerRadius = bRadius;
            radarColumn.__disabled = false;
            radarColumn.parent = this.columnsContainer;
            __WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__["each"](this.axisRanges.iterator(), function (axisRange) {
                var rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);
                if (!rangeColumn) {
                    rangeColumn = _this.columns.create();
                    __WEBPACK_IMPORTED_MODULE_6__core_utils_Object__["forceCopyProperties"](_this.columns.template, rangeColumn, __WEBPACK_IMPORTED_MODULE_1__core_Sprite__["b" /* visualProperties */]);
                    __WEBPACK_IMPORTED_MODULE_6__core_utils_Object__["copyProperties"](axisRange.contents, rangeColumn, __WEBPACK_IMPORTED_MODULE_1__core_Sprite__["b" /* visualProperties */]); // need this because 3d columns are not in the same container
                    if (rangeColumn.dataItem) {
                        __WEBPACK_IMPORTED_MODULE_9__core_utils_Array__["k" /* remove */](rangeColumn.dataItem.sprites, rangeColumn);
                    }
                    dataItem.addSprite(rangeColumn);
                    _this.setColumnStates(rangeColumn);
                    dataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);
                }
                var slice = radarColumn.radarColumn;
                slice.startAngle = lAngle;
                slice.arc = arc;
                slice.radius = tRadius;
                slice.innerRadius = bRadius;
                if (slice.invalid) {
                    slice.validate(); // validate as if it was used previously, it will flicker with previous dimensions
                }
                rangeColumn.__disabled = false;
                rangeColumn.parent = _this.columnsContainer;
            });
        }
        else {
            this.disableUnusedColumns(dataItem);
        }
    };
    /**
     * Returnsan SVG path that is used as mask for the series.
     *
     * @return {string} SVG path
     */
    RadarColumnSeries.prototype.getMaskPath = function () {
        var renderer = this.yAxis.renderer;
        return __WEBPACK_IMPORTED_MODULE_4__core_rendering_Path__["arc"](renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);
    };
    /**
     * [getPoint description]
     *
     * @todo Description
     * @param {RadarColumnSeriesDataItem} dataItem  [description]
     * @param {string}                    xKey      [description]
     * @param {string}                    yKey      [description]
     * @param {number}                    locationX [description]
     * @param {number}                    locationY [description]
     * @param {string}                    stackKeyX [description]
     * @param {string}                    stackKeyY [description]
     */
    RadarColumnSeries.prototype.getPoint = function (dataItem, xKey, yKey, locationX, locationY, stackKeyX, stackKeyY) {
        if (!stackKeyX) {
            stackKeyX = "valueX";
        }
        if (!stackKeyY) {
            stackKeyY = "valueY";
        }
        var x = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);
        var y = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);
        var radius = __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["getDistance"]({ x: x, y: y });
        var angle = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);
        return { x: radius * __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["cos"](angle), y: radius * __WEBPACK_IMPORTED_MODULE_5__core_utils_Math__["sin"](angle) };
    };
    return RadarColumnSeries;
}(__WEBPACK_IMPORTED_MODULE_0__series_ColumnSeries__["a" /* ColumnSeries */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_3__core_Registry__["b" /* registry */].registeredClasses["RadarColumnSeries"] = RadarColumnSeries;
__WEBPACK_IMPORTED_MODULE_3__core_Registry__["b" /* registry */].registeredClasses["RadarColumnSeriesDataItem"] = RadarColumnSeriesDataItem;
//# sourceMappingURL=RadarColumnSeries.js.map

/***/ }),
/* 223 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return ConeSeriesDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ConeSeries; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ColumnSeries__ = __webpack_require__(50);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__elements_ConeColumn__ = __webpack_require__(182);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__ = __webpack_require__(8);
/**
 * ConeSeries module
 * Not recommended using if you use scrollbars or your chart is zoomable in some other way.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */




/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[ConeSeries]].
 *
 * @see {@link DataItem}
 */
var ConeSeriesDataItem = /** @class */ (function (_super) {
    __extends(ConeSeriesDataItem, _super);
    /**
     * Constructor
     */
    function ConeSeriesDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "ConeSeriesDataItem";
        _this.applyTheme();
        return _this;
    }
    return ConeSeriesDataItem;
}(__WEBPACK_IMPORTED_MODULE_0__ColumnSeries__["b" /* ColumnSeriesDataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Defines [[Series]] for a cone graph.
 *
 * @see {@link IConeSeriesEvents} for a list of available Events
 * @see {@link IConeSeriesAdapters} for a list of available Adapters
 * @todo Example
 * @important
 */
var ConeSeries = /** @class */ (function (_super) {
    __extends(ConeSeries, _super);
    /**
     * Constructor
     */
    function ConeSeries() {
        var _this = _super.call(this) || this;
        _this.className = "ConeSeries";
        _this.applyTheme();
        return _this;
    }
    /**
     * Returns an element to use for Candlestick
     * @ignore
     * @return {this["_column"]} Element.
     */
    ConeSeries.prototype.createColumnTemplate = function () {
        return new __WEBPACK_IMPORTED_MODULE_1__elements_ConeColumn__["a" /* ConeColumn */]();
    };
    /**
     * (Re)validates the whole series, effectively causing it to redraw.
     *
     * @ignore Exclude from docs
     */
    ConeSeries.prototype.validate = function () {
        _super.prototype.validate.call(this);
    };
    /**
     * Returns an SVG path to use as series mask.
     *
     * @return {string} SVG path
     */
    ConeSeries.prototype.getMaskPath = function () {
        var dx = 0;
        var dy = 0;
        var column = this.columns.getIndex(0);
        if (this.baseAxis == this.xAxis) {
            dy = column.coneColumn.bottom.radiusY + 1;
        }
        else {
            dx = column.coneColumn.bottom.radiusY + 1;
        }
        return __WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__["rectToPath"]({
            x: -dx,
            y: 0,
            width: this.xAxis.axisLength + dx,
            height: this.yAxis.axisLength + dy
        });
    };
    /**
     * Validates data item's elements.
     *
     * @ignore Exclude from docs
     * @param {this["_dataItem"]}  dataItem  Data item
     */
    ConeSeries.prototype.validateDataElementReal = function (dataItem) {
        _super.prototype.validateDataElementReal.call(this, dataItem);
        var coneColumn = dataItem.column.coneColumn;
        coneColumn.fill = dataItem.column.fill;
        if (this.baseAxis == this.yAxis) {
            coneColumn.orientation = "horizontal";
        }
        else {
            coneColumn.orientation = "vertical";
        }
    };
    return ConeSeries;
}(__WEBPACK_IMPORTED_MODULE_0__ColumnSeries__["a" /* ColumnSeries */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__core_Registry__["b" /* registry */].registeredClasses["ConeSeries"] = ConeSeries;
__WEBPACK_IMPORTED_MODULE_2__core_Registry__["b" /* registry */].registeredClasses["ConeSeriesDataItem"] = ConeSeriesDataItem;
//# sourceMappingURL=ConeSeries.js.map

/***/ }),
/* 224 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CircleBullet; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Bullet__ = __webpack_require__(49);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_elements_Circle__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_Registry__ = __webpack_require__(0);
/**
 * Bullet module
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Creates a bullet with a textual label.
 *
 * Uses [[Label]] instance to draw the label, so the label itself is
 * configurable.
 *
 * @see {@link IBulletEvents} for a list of available events
 * @see {@link IBulletAdapters} for a list of available Adapters
 * @todo Usage example
 * @important
 */
var CircleBullet = /** @class */ (function (_super) {
    __extends(CircleBullet, _super);
    /**
     * Constructor
     */
    function CircleBullet() {
        var _this = _super.call(this) || this;
        _this.className = "CircleBullet";
        _this.circle = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__core_elements_Circle__["a" /* Circle */]);
        _this.circle.shouldClone = false;
        _this.circle.radius = 5;
        _this.circle.isMeasured = false;
        return _this;
    }
    /**
     * Copies all proprities and related stuff from another instance of
     * [[CircleBullet]].
     *
     * @param {this}  source  Source element
     */
    CircleBullet.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);
        this.circle.copyFrom(source.circle);
    };
    return CircleBullet;
}(__WEBPACK_IMPORTED_MODULE_0__Bullet__["a" /* Bullet */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_2__core_Registry__["b" /* registry */].registeredClasses["CircleBullet"] = CircleBullet;
//# sourceMappingURL=CircleBullet.js.map

/***/ }),
/* 225 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return XYChartScrollbar; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_elements_Scrollbar__ = __webpack_require__(78);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Sprite__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_utils_Disposer__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__types_XYChart__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_rendering_filters_DesaturateFilter__ = __webpack_require__(108);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_utils_Type__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__core_rendering_Path__ = __webpack_require__(8);
/**
 * A module with functionality for buildin a scrollbar with an XY graph in it.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */











/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * A special version of the Scrollbar that has an XY chart in it.
 *
 * Used mainly as an advanced scrollbar with a preview for other XY charts.
 *
 * However, can be used as standalone element.
 *
 * @see {@link IXYChartScrollbarEvents} for a list of available events
 * @see {@link IXYChartScrollbarAdapters} for a list of available Adapters
 * @important
 */
var XYChartScrollbar = /** @class */ (function (_super) {
    __extends(XYChartScrollbar, _super);
    /**
     * Constructor
     */
    function XYChartScrollbar() {
        var _this = _super.call(this) || this;
        /**
         * A chart element Scrollbar is for.
         *
         * @type {MutableValueDisposer}
         */
        _this._chart = new __WEBPACK_IMPORTED_MODULE_3__core_utils_Disposer__["d" /* MutableValueDisposer */]();
        _this.className = "XYChartScrollbar";
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        _this.padding(0, 0, 0, 0);
        var scrollbarChart = _this.createChild(__WEBPACK_IMPORTED_MODULE_4__types_XYChart__["a" /* XYChart */]);
        scrollbarChart.shouldClone = false;
        scrollbarChart.margin(0, 0, 0, 0);
        scrollbarChart.padding(0, 0, 0, 0);
        scrollbarChart.interactionsEnabled = false;
        _this._scrollbarChart = scrollbarChart;
        _this._disposers.push(_this._scrollbarChart);
        _this.minHeight = 60;
        _this.minWidth = 60;
        var unselectedOverlay = _this.createChild(__WEBPACK_IMPORTED_MODULE_1__core_Sprite__["a" /* Sprite */]);
        unselectedOverlay.shouldClone = false;
        unselectedOverlay.element = _this.paper.add("path");
        unselectedOverlay.fill = interfaceColors.getFor("background");
        unselectedOverlay.fillOpacity = 0.8;
        unselectedOverlay.interactionsEnabled = false;
        unselectedOverlay.isMeasured = false;
        unselectedOverlay.toBack();
        _this._unselectedOverlay = unselectedOverlay;
        _this._disposers.push(_this._unselectedOverlay);
        scrollbarChart.toBack();
        _this.background.cornerRadius(0, 0, 0, 0);
        var thumbBackground = _this.thumb.background;
        thumbBackground.cornerRadius(0, 0, 0, 0);
        thumbBackground.fillOpacity = 0;
        thumbBackground.fill = interfaceColors.getFor("background");
        var hoverState = thumbBackground.states.getKey("hover");
        if (hoverState) {
            hoverState.properties.fillOpacity = 0.2;
        }
        var downState = thumbBackground.states.getKey("down");
        if (downState) {
            downState.properties.fillOpacity = 0.4;
        }
        _this._disposers.push(_this._chart);
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(XYChartScrollbar.prototype, "series", {
        /**
         * A list of series that are used to draw graph(s) on the scrollbar.
         *
         * @readonly
         * @return {List<XYSeries>} Series
         */
        get: function () {
            if (!this._series) {
                this._series = new __WEBPACK_IMPORTED_MODULE_2__core_utils_List__["b" /* List */]();
                this._series.events.on("insert", this.handleSeriesAdded, this);
                this._series.events.on("remove", this.handleSeriesRemoved, this);
            }
            return this._series;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Decorates a new series when they are pushed into a `series` list.
     *
     * @param {IListEvents<XYSeries>["insert"]} event Event
     */
    XYChartScrollbar.prototype.handleSeriesAdded = function (event) {
        var sourceSeries = event.newValue;
        var scrollbarChart = this.scrollbarChart;
        scrollbarChart.zoomOutButton.disabled = true;
        this.chart = sourceSeries.chart;
        var addXAxis = true;
        var addYAxis = true;
        // check if we haven't added clone of x or y axis before
        __WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__["each"](this.series.iterator(), function (series) {
            if (series != sourceSeries) {
                if (series.xAxis == sourceSeries.xAxis) {
                    addXAxis = false;
                }
                if (series.yAxis == sourceSeries.yAxis) {
                    addYAxis = false;
                }
            }
        });
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        var series = sourceSeries.clone();
        if (addXAxis) {
            var xAxis = sourceSeries.xAxis.clone();
            scrollbarChart.xAxes.moveValue(xAxis);
            xAxis.title.disabled = true;
            xAxis.rangeChangeDuration = 0;
            xAxis.id = sourceSeries.uid;
            xAxis.title.disabled = true;
            var renderer = xAxis.renderer;
            renderer.ticks.template.disabled = true;
            renderer.inside = true;
            renderer.line.strokeOpacity = 0;
            renderer.minLabelPosition = 0.02;
            renderer.maxLabelPosition = 0.98;
            renderer.line.disabled = true;
            renderer.axisFills.template.disabled = true;
            renderer.baseGrid.disabled = true;
            renderer.grid.template.strokeOpacity = 0.05;
            var labelsTemplate = renderer.labels.template;
            labelsTemplate.fillOpacity = 0.5;
            series.xAxis = xAxis;
        }
        else {
            // @todo find clone, otherwise there might be probs with multiple axes
        }
        if (addYAxis) {
            var yAxis = sourceSeries.yAxis.clone();
            scrollbarChart.yAxes.moveValue(yAxis);
            yAxis.title.disabled = true;
            yAxis.rangeChangeDuration = 0;
            var renderer = yAxis.renderer;
            renderer.ticks.template.disabled = true;
            renderer.inside = true;
            renderer.line.strokeOpacity = 0;
            renderer.minLabelPosition = 0.02;
            renderer.maxLabelPosition = 0.98;
            renderer.line.disabled = true;
            renderer.axisFills.template.disabled = true;
            renderer.grid.template.stroke = interfaceColors.getFor("background");
            renderer.baseGrid.disabled = true;
            renderer.grid.template.strokeOpacity = 0.05;
            var labelsTemplate = renderer.labels.template;
            labelsTemplate.fillOpacity = 0.5;
            series.yAxis = yAxis;
        }
        else {
            // @todo find clone, otherwise there might be probs with multiple axes
        }
        series.rangeChangeDuration = 0;
        series.interpolationDuration = 0;
        series.defaultState.transitionDuration = 0;
        series.events.on("validated", this.zoomOutAxes, this);
        series.defaultState.properties.visible = true;
        series.filters.push(new __WEBPACK_IMPORTED_MODULE_7__core_rendering_filters_DesaturateFilter__["a" /* DesaturateFilter */]());
        scrollbarChart.series.push(series);
    };
    /**
     * @ignore
     */
    XYChartScrollbar.prototype.updateByOrientation = function () {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__["each"](this._scrollbarChart.xAxes.iterator(), function (xAxis) {
            if (_this.orientation == "vertical") {
                var renderer = xAxis.renderer;
                renderer.grid.template.disabled = true;
                renderer.labels.template.disabled = true;
                renderer.minGridDistance = 10;
            }
        });
        __WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__["each"](this._scrollbarChart.yAxes.iterator(), function (yAxis) {
            if (_this.orientation == "horizontal") {
                var renderer = yAxis.renderer;
                renderer.grid.template.disabled = true;
                renderer.labels.template.disabled = true;
                renderer.minGridDistance = 10;
            }
        });
    };
    /**
     * Cleans up after series are removed from Scrollbar.
     *
     * @param {IListEvents<XYSeries>["remove"]}  event  Event
     */
    XYChartScrollbar.prototype.handleSeriesRemoved = function (event) {
        var sourceSeries = event.oldValue;
        sourceSeries.events.off("validated", this.zoomOutAxes, this);
    };
    Object.defineProperty(XYChartScrollbar.prototype, "scrollbarChart", {
        /**
         * A chart element that is used to display graphs in the Scrollbar.
         *
         * This is not the same as `chart`. It's a totally independent instance of
         * [[XYChart]] with separate config, series, etc.
         *
         * It can be configured just like any other [[XYChart]].
         *
         * @readonly
         * @return {XYChart} Scrollbar's internal chart
         */
        get: function () {
            return this._scrollbarChart;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XYChartScrollbar.prototype, "chart", {
        /**
         * @return {XYChart} Chart
         */
        get: function () {
            return this._chart.get();
        },
        /**
         * A chart that Scrollbar belongs to.
         *
         * @param {XYChart} chart  Chart
         */
        set: function (chart) {
            if (this._chart.get() !== chart) {
                this._chart.set(chart, chart.events.on("datavalidated", this.handleDataChanged, this));
                this.handleDataChanged();
                this._scrollbarChart.dataProvider = chart; // this makes scrollbar chart do not validate data untill charts' data is validated
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Updates Scrollbar's internal chart's data when the main chart's data
     * changes.
     *
     * @ignore Exclude from docs
     */
    XYChartScrollbar.prototype.handleDataChanged = function () {
        this.scrollbarChart.data = this.chart.data;
    };
    /**
     * Zooms out all axes on the internal chart.
     */
    XYChartScrollbar.prototype.zoomOutAxes = function () {
        var scrollbarChart = this.scrollbarChart;
        __WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__["each"](scrollbarChart.xAxes.iterator(), function (x) {
            x.zoom({ start: 0, end: 1 }, true, true);
        });
        __WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__["each"](scrollbarChart.yAxes.iterator(), function (y) {
            y.zoom({ start: 0, end: 1 }, true, true);
        });
    };
    /**
     * Updates scrollbar thumb.
     */
    XYChartScrollbar.prototype.updateThumb = function () {
        _super.prototype.updateThumb.call(this);
        if (this._unselectedOverlay) {
            var thumb = this.thumb;
            var x = thumb.pixelX;
            var y = thumb.pixelY;
            var w = thumb.pixelWidth;
            var h = thumb.pixelHeight;
            var path = void 0;
            if (this.orientation == "horizontal") {
                path = __WEBPACK_IMPORTED_MODULE_10__core_rendering_Path__["rectToPath"]({
                    x: -1,
                    y: 0,
                    width: x,
                    height: h
                });
                path += __WEBPACK_IMPORTED_MODULE_10__core_rendering_Path__["rectToPath"]({
                    x: x + w,
                    y: 0,
                    width: this.pixelWidth - x - w,
                    height: h
                });
            }
            else {
                path = __WEBPACK_IMPORTED_MODULE_10__core_rendering_Path__["rectToPath"]({
                    x: 0,
                    y: 0,
                    width: w,
                    height: y
                });
                path += __WEBPACK_IMPORTED_MODULE_10__core_rendering_Path__["rectToPath"]({
                    x: 0,
                    y: y + h,
                    width: w,
                    height: this.pixelHeight - y - h
                });
            }
            this._unselectedOverlay.element.attr({ "d": path });
        }
    };
    /**
     * Processes JSON-based config before it is applied to the object.
     *
     * @ignore Exclude from docs
     * @param {object}  config  Config
     */
    XYChartScrollbar.prototype.processConfig = function (config) {
        if (config) {
            if (__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__["hasValue"](config.series) && __WEBPACK_IMPORTED_MODULE_9__core_utils_Type__["isArray"](config.series)) {
                for (var i = 0, len = config.series.length; i < len; i++) {
                    var series = config.series[i];
                    if (__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__["hasValue"](series) && __WEBPACK_IMPORTED_MODULE_9__core_utils_Type__["isString"](series)) {
                        if (this.map.hasKey(series)) {
                            config.series[i] = this.map.getKey(series);
                        }
                        else {
                            throw Error("XYChartScrollbar error: Series with id `" + series + "` does not exist.");
                        }
                    }
                }
            }
        }
        _super.prototype.processConfig.call(this, config);
    };
    return XYChartScrollbar;
}(__WEBPACK_IMPORTED_MODULE_0__core_elements_Scrollbar__["a" /* Scrollbar */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_5__core_Registry__["b" /* registry */].registeredClasses["XYChartScrollbar"] = XYChartScrollbar;
//# sourceMappingURL=XYChartScrollbar.js.map

/***/ }),
/* 226 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return NavigationBarDataItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return NavigationBar; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Component__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_DataItem__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_utils_List__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_elements_TextLink__ = __webpack_require__(144);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_elements_Triangle__ = __webpack_require__(105);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_Registry__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_utils_Percent__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__ = __webpack_require__(3);
/**
 * Functionality for drawing simple NavigationBar.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */









/**
 * ============================================================================
 * DATA ITEM
 * ============================================================================
 * @hidden
 */
/**
 * Defines a [[DataItem]] for [[NavigationBar]].
 *
 * @see {@link DataItem}
 */
var NavigationBarDataItem = /** @class */ (function (_super) {
    __extends(NavigationBarDataItem, _super);
    /**
     * Constructor
     */
    function NavigationBarDataItem() {
        var _this = _super.call(this) || this;
        _this.className = "NavigationBarDataItem";
        _this.applyTheme();
        return _this;
    }
    Object.defineProperty(NavigationBarDataItem.prototype, "name", {
        /**
         * @return {string} Name
         */
        get: function () {
            return this.properties["name"];
        },
        /**
         * Name of the navigation bar item.
         *
         * @param {string}  value  Name
         */
        set: function (value) {
            this.setProperty("name", value);
        },
        enumerable: true,
        configurable: true
    });
    return NavigationBarDataItem;
}(__WEBPACK_IMPORTED_MODULE_1__core_DataItem__["a" /* DataItem */]));

/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * NavigationBar class can be used to create a multi-level breadcrumb-style
 * navigation control.
 *
 * @see {@link INavigationBarEvents} for a list of available events
 * @see {@link INavigationBarAdapters} for a list of available Adapters
 * @todo Implement better
 * @important
 */
var NavigationBar = /** @class */ (function (_super) {
    __extends(NavigationBar, _super);
    /**
     * Constructor
     */
    function NavigationBar() {
        var _this = 
        // Init
        _super.call(this) || this;
        _this.className = "NavigationBar";
        var interfaceColors = new __WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__["a" /* InterfaceColorSet */]();
        var textLink = new __WEBPACK_IMPORTED_MODULE_3__core_elements_TextLink__["a" /* TextLink */]();
        textLink.valign = "middle";
        textLink.paddingTop = 8;
        textLink.paddingBottom = 8;
        _this.paddingBottom = 2;
        _this.links = new __WEBPACK_IMPORTED_MODULE_2__core_utils_List__["e" /* ListTemplate */](textLink);
        _this._linksIterator = new __WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__["ListIterator"](_this.links, function () { return _this.links.create(); });
        _this._linksIterator.createNewItems = true;
        var triangle = new __WEBPACK_IMPORTED_MODULE_4__core_elements_Triangle__["a" /* Triangle */]();
        triangle.direction = "right";
        triangle.width = 8;
        triangle.height = 12;
        triangle.fill = interfaceColors.getFor("alternativeBackground");
        triangle.fillOpacity = 0.5;
        triangle.valign = "middle";
        triangle.marginLeft = 10;
        triangle.marginRight = 10;
        _this.separators = new __WEBPACK_IMPORTED_MODULE_2__core_utils_List__["e" /* ListTemplate */](triangle);
        var activeLink = new __WEBPACK_IMPORTED_MODULE_3__core_elements_TextLink__["a" /* TextLink */]();
        _this.activeLink = activeLink;
        activeLink.copyFrom(textLink);
        activeLink.valign = "middle";
        activeLink.fontWeight = "bold";
        _this.width = Object(__WEBPACK_IMPORTED_MODULE_7__core_utils_Percent__["c" /* percent */])(100);
        _this.layout = "grid";
        _this.dataFields.name = "name";
        // Apply theme
        _this.applyTheme();
        return _this;
    }
    /**
     * Completely redraws the navigation bar.
     *
     * @ignore Exclude from docs
     */
    NavigationBar.prototype.validateDataElements = function () {
        this.removeChildren();
        this._linksIterator.reset();
        _super.prototype.validateDataElements.call(this);
        //@todo: dispose
    };
    /**
     * Creates a visual element for a data item (nav item).
     *
     * @ignore Exclude from docs
     * @param {NavigationBarDataItem}  dataItem  Data item
     */
    NavigationBar.prototype.validateDataElement = function (dataItem) {
        _super.prototype.validateDataElement.call(this, dataItem);
        var textLink;
        if (dataItem.index < this.dataItems.length - 1) {
            textLink = this._linksIterator.getLast();
            textLink.parent = this;
            var separator = this.separators.create();
            separator.parent = this;
            separator.valign = "middle";
        }
        else {
            textLink = this.activeLink;
            textLink.events.copyFrom(this.links.template.events);
            textLink.hide(0);
            textLink.show();
            textLink.parent = this;
        }
        textLink.dataItem = dataItem;
        textLink.text = dataItem.name;
    };
    return NavigationBar;
}(__WEBPACK_IMPORTED_MODULE_0__core_Component__["a" /* Component */]));

/**
 * Register class in system, so that it can be instantiated using its name from
 * anywhere.
 *
 * @ignore
 */
__WEBPACK_IMPORTED_MODULE_5__core_Registry__["b" /* registry */].registeredClasses["NavigationBar"] = NavigationBar;
__WEBPACK_IMPORTED_MODULE_5__core_Registry__["b" /* registry */].registeredClasses["NavigationBarDataItem"] = NavigationBarDataItem;
//# sourceMappingURL=NavigationBar.js.map

/***/ }),
/* 227 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_SpriteState__ = __webpack_require__(70);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Component__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_elements_Scrollbar__ = __webpack_require__(78);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_elements_Tooltip__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__charts_series_Series__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__charts_types_SankeyDiagram__ = __webpack_require__(169);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_elements_AmChartsLogo__ = __webpack_require__(156);







var theme = function (object) {
    if (object instanceof __WEBPACK_IMPORTED_MODULE_0__core_SpriteState__["a" /* SpriteState */]) {
        object.transitionDuration = 400;
    }
    if (object instanceof __WEBPACK_IMPORTED_MODULE_1__core_Component__["a" /* Component */]) {
        object.rangeChangeDuration = 800;
        object.interpolationDuration = 800;
        object.sequencedInterpolation = false;
        if (object instanceof __WEBPACK_IMPORTED_MODULE_5__charts_types_SankeyDiagram__["a" /* SankeyDiagram */]) {
            object.sequencedInterpolation = true;
        }
    }
    if (object instanceof __WEBPACK_IMPORTED_MODULE_3__core_elements_Tooltip__["a" /* Tooltip */]) {
        object.animationDuration = 400;
    }
    if (object instanceof __WEBPACK_IMPORTED_MODULE_2__core_elements_Scrollbar__["a" /* Scrollbar */]) {
        object.animationDuration = 800;
    }
    if (object instanceof __WEBPACK_IMPORTED_MODULE_4__charts_series_Series__["a" /* Series */]) {
        object.defaultState.transitionDuration = 800;
        object.hiddenState.transitionDuration = 1000;
        object.hiddenState.properties.opacity = 1;
        object.interpolationDuration = 1000;
    }
    if (object instanceof __WEBPACK_IMPORTED_MODULE_6__core_elements_AmChartsLogo__["a" /* AmChartsLogo */]) {
        object.urlTarget = "_self";
        object.align = "left";
        object.valign = "bottom";
    }
};
/* harmony default export */ __webpack_exports__["a"] = (theme);
//# sourceMappingURL=animated.js.map

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {

var _core = __webpack_require__(68);

var am4core = _interopRequireWildcard(_core);

var _charts = __webpack_require__(79);

var am4charts = _interopRequireWildcard(_charts);

var _animated = __webpack_require__(85);

var _animated2 = _interopRequireDefault(_animated);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var api = __webpack_require__(33);

var abbr = $('#state-name').attr('data-abbr');

api.getData("state/graduates/" + abbr).then(function (fetchData) {

        console.log(fetchData);
        var gradData = fetchData;

        am4core.useTheme(_animated2.default);

        if ($('#education-chart').length > 0) {

                // Create chart instance
                var chart = am4core.create("education-chart", am4charts.XYChart);

                // Add data
                chart.data = gradData;

                // Create axes
                var categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());
                categoryAxis.dataFields.category = "year";
                categoryAxis.title.text = "College Graduate Data";

                // categoryAxis.renderer.grid.template.location = 0;
                // categoryAxis.renderer.minGridDistance = 20;


                var valueAxis = chart.xAxes.push(new am4charts.ValueAxis());
                valueAxis.title.text = "Graduates";
                valueAxis.strictMinMax = true;
                valueAxis.min = 0;
                // valueAxis.autoGridCount = false;
                // valueAxis.gridCount = 50;
                // valueAxis.labelFrequency = 10;

                // Create series
                var series = chart.series.push(new am4charts.ColumnSeries());
                series.dataFields.valueX = "graduateCount";
                series.dataFields.categoryY = "year";
                series.name = "Women Graduates";
                series.tooltipText = "{name}: [bold]{valueY}[/]";

                // This has no effect
                // series.stacked = true;


                // Add cursor
                chart.cursor = new am4charts.XYCursor();

                // Add legend
                chart.legend = new am4charts.Legend();
        }
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {

var _core = __webpack_require__(68);

var am4core = _interopRequireWildcard(_core);

var _charts = __webpack_require__(79);

var am4charts = _interopRequireWildcard(_charts);

var _animated = __webpack_require__(85);

var _animated2 = _interopRequireDefault(_animated);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var api = __webpack_require__(33);

am4core.useTheme(_animated2.default);

var abbr = $('#state-name').attr('data-abbr');

api.getData("state/population/" + abbr).then(function (stateData) {

    console.log(stateData);
    var popData = stateData;

    var chart = am4core.create("growth-chart", am4charts.XYChart);
    chart.paddingRight = 20;

    var data = [];
    var open = 100;
    var close = 250;

    for (var key in popData) {
        open = popData[key].population;
        close = popData[key].population;

        data.push({ date: new Date(popData[key].dateDataCreated), open: open, close: close });
    }

    chart.data = data;

    var dateAxis = chart.xAxes.push(new am4charts.DateAxis());

    var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
    valueAxis.tooltip.disabled = true;

    var series = chart.series.push(new am4charts.LineSeries());
    series.dataFields.dateX = "date";
    series.dataFields.openValueY = "open";
    series.bullets.push(new am4charts.CircleBullet());
    series.dataFields.valueY = "close";
    series.tooltipText = "Population: {openValueY.value}";
    series.sequencedInterpolation = true;
    series.fillOpacity = 0.3;
    series.defaultState.transitionDuration = 1000;
    series.tensionX = 0.8;

    var series2 = chart.series.push(new am4charts.LineSeries());
    series2.dataFields.dateX = "date";
    series2.dataFields.valueY = "open";
    series2.sequencedInterpolation = true;
    series2.defaultState.transitionDuration = 1500;
    series2.stroke = chart.colors.getIndex(6);
    series2.tensionX = 0.8;

    chart.cursor = new am4charts.XYCursor();
    chart.cursor.xAxis = dateAxis;
    chart.scrollbarX = new am4core.Scrollbar();
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {

var _core = __webpack_require__(68);

var am4core = _interopRequireWildcard(_core);

var _charts = __webpack_require__(79);

var am4charts = _interopRequireWildcard(_charts);

var _animated = __webpack_require__(85);

var _animated2 = _interopRequireDefault(_animated);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var api = __webpack_require__(33);

am4core.useTheme(_animated2.default);

var abbr = $('#state-name').attr('data-abbr');
var currentData = [];

api.getData("state/crime/" + abbr).then(function (stateData) {

    console.log(stateData);
    var crimeData = stateData;

    for (var key in crimeData) {

        if (crimeData[key].year === 2015) {
            currentData = crimeData[key];
        }
    }

    console.log(currentData);

    var chart = am4core.create("crime-chart", am4charts.XYChart);

    chart.data = [{
        "name": "Non-Violent",
        "open": 0,
        "close": currentData.nonViolentCrimeTotal,
        "balloonValue": currentData.nonViolentCrimeTotal,
        "config": {
            "fill": "#54cb6a"
        }
    }, {
        "name": "Violent",
        "open": currentData.nonViolentCrimeTotal,
        "close": currentData.totalCrime,
        "balloonValue": currentData.violentCrimeTotal,
        "config": {
            "fill": "#54cb6a"
        }
    }, {
        "name": "Total Crime",
        "open": 0,
        "close": currentData.totalCrime,
        "balloonValue": currentData.totalCrime,
        "config": {
            "fill": "#169b2f"

            //    NON VIOLENT CRIMES

        } }, {
        "name": "Property Damage",
        "open": 0,
        "close": currentData.propertyCrimeCount,
        "balloonValue": currentData.propertyCrimeCount,
        "config": {
            "fill": "#cc4b48"
        }
    }, {
        "name": "Burglary",
        "open": currentData.propertyCrimeCount,
        "close": currentData.propertyCrimeCount + currentData.burglaryCount,
        "balloonValue": currentData.burglaryCount,
        "config": {
            "fill": "#cc4b48"
        }
    }, {
        "name": "Larceny",
        "open": currentData.propertyCrimeCount + currentData.burglaryCount,
        "close": currentData.propertyCrimeCount + currentData.burglaryCount + currentData.larcenyCount,
        "balloonValue": currentData.larcenyCount,
        "config": {
            "fill": "#1c8ceb"
        }
    }, {
        "name": "Car Theft",
        "open": currentData.propertyCrimeCount + currentData.burglaryCount + currentData.larcenyCount,
        "close": currentData.propertyCrimeCount + currentData.burglaryCount + currentData.larcenyCount + currentData.motorTheftCount,
        "balloonValue": currentData.motorTheftCount,
        "config": {
            "fill": "#1c8ceb"
        }
    }, {
        "name": "Assault",
        "open": currentData.nonViolentCrimeTotal,
        "close": currentData.nonViolentCrimeTotal + currentData.assaultCount,
        "balloonValue": currentData.assaultCount,
        "config": {
            "fill": "#1c8ceb"

            //VIOLENT CRIMES
        } }, {
        "name": "Arson",
        "open": currentData.propertyCrimeCount + currentData.burglaryCount + currentData.larcenyCount + currentData.motorTheftCount,
        "close": currentData.propertyCrimeCount + currentData.burglaryCount + currentData.larcenyCount + currentData.motorTheftCount + currentData.arsonCount,
        "balloonValue": currentData.arsonCount,
        "config": {
            "fill": "#1c8ceb"
        }
    }, {
        "name": "Arson",
        "open": currentData.propertyCrimeCount + currentData.burglaryCount + currentData.larcenyCount + currentData.motorTheftCount,
        "close": currentData.propertyCrimeCount + currentData.burglaryCount + currentData.larcenyCount + currentData.motorTheftCount + currentData.arsonCount,
        "balloonValue": currentData.arsonCount,
        "config": {
            "fill": "#1c8ceb"
        }
    }, {
        "name": "Arson",
        "open": currentData.propertyCrimeCount + currentData.burglaryCount + currentData.larcenyCount + currentData.motorTheftCount,
        "close": currentData.propertyCrimeCount + currentData.burglaryCount + currentData.larcenyCount + currentData.motorTheftCount + currentData.arsonCount,
        "balloonValue": currentData.arsonCount,
        "config": {
            "fill": "#1c8ceb"
        }
    }, {
        "name": "Arson",
        "open": currentData.propertyCrimeCount + currentData.burglaryCount + currentData.larcenyCount + currentData.motorTheftCount,
        "close": currentData.propertyCrimeCount + currentData.burglaryCount + currentData.larcenyCount + currentData.motorTheftCount + currentData.arsonCount,
        "balloonValue": currentData.arsonCount,
        "config": {
            "fill": "#1c8ceb"
        }
    }];

    // Create axes
    var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
    categoryAxis.dataFields.category = "name";
    categoryAxis.title.text = "Crime Category";

    var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
    valueAxis.title.text = "Incidents";

    // Create series
    var series = chart.series.push(new am4charts.ColumnSeries());
    series.dataFields.categoryX = "name";
    series.dataFields.valueY = "close";
    series.dataFields.openValueY = "open";

    series.columns.template.configField = "config";
    series.name = "Crime - 2010";
    series.tooltipText = "{name}: [bold]{valueY}[/]";

    // series.columns.template.adapter.add("fill", (fill, target) => {
    //     return chart.colors.getIndex(target.dataItem.index);
    // });

    // Add cursor
    chart.cursor = new am4charts.XYCursor();
    chart.scrollbarX = new am4core.Scrollbar();

    // // Add legend
    // chart.legend = new am4charts.Legend();


    //     "valueAxes": [ {
    //     "axisAlpha": 0,
    //     "gridAlpha": 0.1,
    //     "position": "left"
    // } ],
    //     "startDuration": 1,
    //     "graphs": [ {
    //     "balloonText": "<span style='color:[[color]]'>[[category]]</span><br><b>$[[balloonValue]] Mln</b>",
    //     "colorField": "color",
    //     "fillAlphas": 0.8,
    //     "labelText": "$[[balloonValue]]",
    //     "lineColor": "#BBBBBB",
    //     "openField": "open",
    //     "type": "column",
    //     "valueField": "close"
    // } ],
    //     "trendLines": [ {
    //     "dashLength": 3,
    //     "finalCategory": "Income B",
    //     "finalValue": 11.13,
    //     "initialCategory": "Income A",
    //     "initialValue": 11.13,
    //     "lineColor": "#888888"
    // }, {
    //     "dashLength": 3,
    //     "finalCategory": "Expenses A",
    //     "finalValue": 15.81,
    //     "initialCategory": "Income B",
    //     "initialValue": 15.81,
    //     "lineColor": "#888888"
    // }, {
    //     "dashLength": 3,
    //     "finalCategory": "Expenses B",
    //     "finalValue": 12.92,
    //     "initialCategory": "Expenses A",
    //     "initialValue": 12.92,
    //     "lineColor": "#888888"
    // }, {
    //     "dashLength": 3,
    //     "finalCategory": "Revenue",
    //     "finalValue": 8.64,
    //     "initialCategory": "Expenses B",
    //     "initialValue": 8.64,
    //     "lineColor": "#888888"
    // } ],
    //     "columnWidth": 0.6,
    //     "categoryField": "name",
    //     "categoryAxis": {
    //     "gridPosition": "start",
    //         "axisAlpha": 0,
    //         "gridAlpha": 0.1
    // },
    // "export": {
    //     "enabled": true
    // }
    // } );

});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery Scrollify
 * Version 1.0.19
 *
 * Requires:
 * - jQuery 1.7 or higher
 *
 * https://github.com/lukehaas/Scrollify
 *
 * Copyright 2016, Luke Haas
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.



if touchScroll is false - update index

 */
(function (global,factory) {
  "use strict";
  if (true) {
    // AMD. Register as an anonymous module.
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(17)], __WEBPACK_AMD_DEFINE_RESULT__ = (function($) {
      return factory($, global, global.document);
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (typeof module === 'object' && module.exports) {
    // Node/CommonJS
    module.exports = factory(require('jquery'), global, global.document);
  } else {
    // Browser globals
    factory(jQuery, global, global.document);
  }
}(typeof window !== 'undefined' ? window : this, function ($, window, document, undefined) {
  "use strict";
  var heights = [],
    names = [],
    elements = [],
    overflow = [],
    index = 0,
    currentIndex = 0,
    interstitialIndex = 1,
    hasLocation = false,
    timeoutId,
    timeoutId2,
    $window = $(window),
    portHeight,
    top = $window.scrollTop(),
    scrollable = false,
    locked = false,
    scrolled = false,
    manualScroll,
    swipeScroll,
    util,
    disabled = false,
    scrollSamples = [],
    scrollTime = new Date().getTime(),
    firstLoad = true,
    initialised = false,
    destination = 0,
    wheelEvent = 'onwheel' in document ? 'wheel' : document.onmousewheel !== undefined ? 'mousewheel' : 'DOMMouseScroll',
    settings = {
      //section should be an identifier that is the same for each section
      section: ".section",
      sectionName: "section-name",
      interstitialSection: "",
      easing: "easeOutExpo",
      scrollSpeed: 1100,
      offset: 0,
      scrollbars: true,
      target:"html,body",
      standardScrollElements: false,
      setHeights: true,
      overflowScroll:true,
      updateHash: true,
      touchScroll:true,
      before:function() {},
      after:function() {},
      afterResize:function() {},
      afterRender:function() {}
    };
  function getportHeight() {
    return ($window.height() + settings.offset);
  }
  function animateScroll(index,instant,callbacks,toTop) {
    if(currentIndex===index) {
      callbacks = false;
    }
    if(disabled===true) {
      return true;
    }
    if(names[index]) {
      scrollable = false;
      if(firstLoad===true) {
        settings.afterRender();
        firstLoad = false;
      }
      if(callbacks) {
        if( typeof settings.before == 'function' && settings.before(index,elements) === false ){
          return true;
        }
      }
      interstitialIndex = 1;
      destination = heights[index];
      if(firstLoad===false && currentIndex>index && toTop===false) {
        //We're going backwards
        if(overflow[index]) {
          portHeight = getportHeight();

          interstitialIndex = parseInt(elements[index].outerHeight()/portHeight);

          destination = parseInt(heights[index])+(elements[index].outerHeight()-portHeight);
        }
      }


      if(settings.updateHash && settings.sectionName && !(firstLoad===true && index===0)) {
        if(history.pushState) {
            try {
              history.replaceState(null, null, names[index]);
            } catch (e) {
              if(window.console) {
                console.warn("Scrollify warning: Page must be hosted to manipulate the hash value.");
              }
            }

        } else {
          window.location.hash = names[index];
        }
      }

      currentIndex = index;
      if(instant) {
        $(settings.target).stop().scrollTop(destination);
        if(callbacks) {
          settings.after(index,elements);
        }
      } else {
        locked = true;
        if( $().velocity ) {
          $(settings.target).stop().velocity('scroll', {
            duration: settings.scrollSpeed,
            easing: settings.easing,
            offset: destination,
            mobileHA: false
          });
        } else {
          $(settings.target).stop().animate({
            scrollTop: destination
          }, settings.scrollSpeed,settings.easing);
        }

        if(window.location.hash.length && settings.sectionName && window.console) {
          try {
            if($(window.location.hash).length) {
              console.warn("Scrollify warning: ID matches hash value - this will cause the page to anchor.");
            }
          } catch (e) {}
        }
        $(settings.target).promise().done(function(){
          locked = false;
          firstLoad = false;
          if(callbacks) {
            settings.after(index,elements);
          }
        });
      }

    }
  }

  function isAccelerating(samples) {
    function average(num) {
      var sum = 0;

      var lastElements = samples.slice(Math.max(samples.length - num, 1));

      for(var i = 0; i < lastElements.length; i++){
          sum += lastElements[i];
      }

      return Math.ceil(sum/num);
    }

    var avEnd = average(10);
    var avMiddle = average(70);

    if(avEnd >= avMiddle) {
      return true;
    } else {
      return false;
    }
  }
  var scrollify = function(options) {
    initialised = true;
    $.easing['easeOutExpo'] = function(x, t, b, c, d) {
      return (t==d) ? b+c : c * (-Math.pow(2, -10 * t/d) + 1) + b;
    };

    manualScroll = {
      handleMousedown:function() {
        if(disabled===true) {
          return true;
        }
        scrollable = false;
        scrolled = false;
      },
      handleMouseup:function() {
        if(disabled===true) {
          return true;
        }
        scrollable = true;
        if(scrolled) {
          //instant,callbacks
          manualScroll.calculateNearest(false,true);
        }
      },
      handleScroll:function() {
        if(disabled===true) {
          return true;
        }
        if(timeoutId){
          clearTimeout(timeoutId);
        }

        timeoutId = setTimeout(function(){
          scrolled = true;
          if(scrollable===false) {
            return false;
          }
          scrollable = false;
          //instant,callbacks
          manualScroll.calculateNearest(false,true);
        }, 200);
      },
      calculateNearest:function(instant,callbacks) {
        top = $window.scrollTop();
        var i =1,
          max = heights.length,
          closest = 0,
          prev = Math.abs(heights[0] - top),
          diff;
        for(;i<max;i++) {
          diff = Math.abs(heights[i] - top);

          if(diff < prev) {
            prev = diff;
            closest = i;
          }
        }
        if((atBottom() && closest>index) || atTop()) {
          index = closest;
          //index, instant, callbacks, toTop
          animateScroll(closest,instant,callbacks,false);
        }
      },
      wheelHandler:function(e) {
        if(disabled===true) {
          return true;
        } else if(settings.standardScrollElements) {
          if($(e.target).is(settings.standardScrollElements) || $(e.target).closest(settings.standardScrollElements).length) {
            return true;
          }
        }
        if(!overflow[index]) {
          e.preventDefault();
        }
        var currentScrollTime = new Date().getTime();


        e = e || window.event;
        var value = e.originalEvent.wheelDelta || -e.originalEvent.deltaY || -e.originalEvent.detail;
        var delta = Math.max(-1, Math.min(1, value));

        //delta = delta || -e.originalEvent.detail / 3 || e.originalEvent.wheelDelta / 120;

        if(scrollSamples.length > 149){
          scrollSamples.shift();
        }
        //scrollSamples.push(Math.abs(delta*10));
        scrollSamples.push(Math.abs(value));

        if((currentScrollTime-scrollTime) > 200){
          scrollSamples = [];
        }
        scrollTime = currentScrollTime;


        if(locked) {
          return false;
        }
        if(delta<0) {
          if(index<heights.length-1) {
            if(atBottom()) {
              if(isAccelerating(scrollSamples)) {
                e.preventDefault();
                index++;
                locked = true;
                //index, instant, callbacks, toTop
                animateScroll(index,false,true, false);
              } else {
                return false;
              }
            }
          }
        } else if(delta>0) {
          if(index>0) {
            if(atTop()) {
              if(isAccelerating(scrollSamples)) {
                e.preventDefault();
                index--;
                locked = true;
                //index, instant, callbacks, toTop
                animateScroll(index,false,true, false);
              } else {
                return false
              }
            }
          }
        }

      },
      keyHandler:function(e) {
        if(disabled===true || document.activeElement.readOnly===false) {
          return true;
        }
        if(locked===true) {
          return false;
        }
        if(e.keyCode==38 || e.keyCode==33) {
          if(index>0) {
            if(atTop()) {
              e.preventDefault();
              index--;
              //index, instant, callbacks, toTop
              animateScroll(index,false,true,false);
            }
          }
        } else if(e.keyCode==40 || e.keyCode==34) {
          if(index<heights.length-1) {
            if(atBottom()) {
              e.preventDefault();
              index++;
              //index, instant, callbacks, toTop
              animateScroll(index,false,true,false);
            }
          }
        }
      },
      init:function() {
        if(settings.scrollbars) {
          $window.on('mousedown', manualScroll.handleMousedown);
          $window.on('mouseup', manualScroll.handleMouseup);
          $window.on('scroll', manualScroll.handleScroll);
        } else {
          $("body").css({"overflow":"hidden"});
        }
        $window.on(wheelEvent,manualScroll.wheelHandler);
        //$(document).bind(wheelEvent,manualScroll.wheelHandler);
        $window.on('keydown', manualScroll.keyHandler);
      }
    };

    swipeScroll = {
      touches : {
        "touchstart": {"y":-1,"x":-1},
        "touchmove" : {"y":-1,"x":-1},
        "touchend"  : false,
        "direction" : "undetermined"
      },
      options:{
        "distance" : 30,
        "timeGap" : 800,
        "timeStamp" : new Date().getTime()
      },
      touchHandler: function(event) {
        if(disabled===true) {
          return true;
        } else if(settings.standardScrollElements) {
          if($(event.target).is(settings.standardScrollElements) || $(event.target).closest(settings.standardScrollElements).length) {
            return true;
          }
        }
        var touch;
        if (typeof event !== 'undefined'){
          if (typeof event.touches !== 'undefined') {
            touch = event.touches[0];
            switch (event.type) {
              case 'touchstart':
                swipeScroll.touches.touchstart.y = touch.pageY;
                swipeScroll.touches.touchmove.y = -1;

                swipeScroll.touches.touchstart.x = touch.pageX;
                swipeScroll.touches.touchmove.x = -1;

                swipeScroll.options.timeStamp = new Date().getTime();
                swipeScroll.touches.touchend = false;
              case 'touchmove':
                swipeScroll.touches.touchmove.y = touch.pageY;
                swipeScroll.touches.touchmove.x = touch.pageX;
                if(swipeScroll.touches.touchstart.y!==swipeScroll.touches.touchmove.y && (Math.abs(swipeScroll.touches.touchstart.y-swipeScroll.touches.touchmove.y)>Math.abs(swipeScroll.touches.touchstart.x-swipeScroll.touches.touchmove.x))) {
                  //if(!overflow[index]) {
                    event.preventDefault();
                  //}
                  swipeScroll.touches.direction = "y";
                  if((swipeScroll.options.timeStamp+swipeScroll.options.timeGap)<(new Date().getTime()) && swipeScroll.touches.touchend == false) {

                    swipeScroll.touches.touchend = true;
                    if (swipeScroll.touches.touchstart.y > -1) {

                      if(Math.abs(swipeScroll.touches.touchmove.y-swipeScroll.touches.touchstart.y)>swipeScroll.options.distance) {
                        if(swipeScroll.touches.touchstart.y < swipeScroll.touches.touchmove.y) {

                          swipeScroll.up();

                        } else {
                          swipeScroll.down();

                        }
                      }
                    }
                  }
                }
                break;
              case 'touchend':
                if(swipeScroll.touches[event.type]===false) {
                  swipeScroll.touches[event.type] = true;
                  if (swipeScroll.touches.touchstart.y > -1 && swipeScroll.touches.touchmove.y > -1 && swipeScroll.touches.direction==="y") {

                    if(Math.abs(swipeScroll.touches.touchmove.y-swipeScroll.touches.touchstart.y)>swipeScroll.options.distance) {
                      if(swipeScroll.touches.touchstart.y < swipeScroll.touches.touchmove.y) {
                        swipeScroll.up();

                      } else {
                        swipeScroll.down();

                      }
                    }
                    swipeScroll.touches.touchstart.y = -1;
                    swipeScroll.touches.touchstart.x = -1;
                    swipeScroll.touches.direction = "undetermined";
                  }
                }
              default:
                break;
            }
          }
        }
      },
      down: function() {

        if(index<heights.length) {

          if(atBottom() && index<heights.length-1) {

            index++;
            //index, instant, callbacks, toTop
            animateScroll(index,false,true,false);
          } else {
            portHeight = getportHeight();
            if(Math.floor(elements[index].height()/portHeight)>interstitialIndex) {

              interstitialScroll(parseInt(heights[index])+(portHeight*interstitialIndex));
              interstitialIndex += 1;

            } else {
              interstitialScroll(parseInt(heights[index])+(elements[index].outerHeight()-portHeight));
            }

          }
        }
      },
      up: function() {
        if(index>=0) {
          if(atTop() && index>0) {

            index--;
            //index, instant, callbacks, toTop
            animateScroll(index,false,true,false);
          } else {

            if(interstitialIndex>2) {
              portHeight = getportHeight();

              interstitialIndex -= 1;
              interstitialScroll(parseInt(heights[index])+(portHeight*interstitialIndex));

            } else {

              interstitialIndex = 1;
              interstitialScroll(parseInt(heights[index]));
            }
          }

        }
      },
      init: function() {
        if (document.addEventListener && settings.touchScroll) {
          var eventListenerOptions = {
            passive: false
          };
          document.addEventListener('touchstart', swipeScroll.touchHandler, eventListenerOptions);
          document.addEventListener('touchmove', swipeScroll.touchHandler, eventListenerOptions);
          document.addEventListener('touchend', swipeScroll.touchHandler, eventListenerOptions);
        }
      }
    };


    util = {
      refresh:function(withCallback,scroll) {
        clearTimeout(timeoutId2);
        timeoutId2 = setTimeout(function() {
          //retain position
          sizePanels(true);
          //scroll, firstLoad
          calculatePositions(scroll,false);
          if(withCallback) {
              settings.afterResize();
          }
        },400);
      },
      handleUpdate:function() {
        //callbacks, scroll
        //changed from false,true to false,false
        util.refresh(false,false);
      },
      handleResize:function() {
        //callbacks, scroll
        util.refresh(true,false);
      },
      handleOrientation:function() {
        //callbacks, scroll
        util.refresh(true,true);
      }
    };
    settings = $.extend(settings, options);

    //retain position
    sizePanels(false);

    calculatePositions(false,true);

    if(true===hasLocation) {
      //index, instant, callbacks, toTop
      animateScroll(index,false,true,true);
    } else {
      setTimeout(function() {
        //instant,callbacks
        manualScroll.calculateNearest(true,false);
      },200);
    }
    if(heights.length) {
      manualScroll.init();
      swipeScroll.init();

      $window.on("resize",util.handleResize);
      if (document.addEventListener) {
        window.addEventListener("orientationchange", util.handleOrientation, false);
      }
    }
    function interstitialScroll(pos) {
      if( $().velocity ) {
        $(settings.target).stop().velocity('scroll', {
          duration: settings.scrollSpeed,
          easing: settings.easing,
          offset: pos,
          mobileHA: false
        });
      } else {
        $(settings.target).stop().animate({
          scrollTop: pos
        }, settings.scrollSpeed,settings.easing);
      }
    }

    function sizePanels(keepPosition) {
      if(keepPosition) {
        top = $window.scrollTop();
      }

      var selector = settings.section;
      overflow = [];
      if(settings.interstitialSection.length) {
        selector += "," + settings.interstitialSection;
      }
      if(settings.scrollbars===false) {
        settings.overflowScroll = false;
      }
      portHeight = getportHeight();
      $(selector).each(function(i) {
        var $this = $(this);

        if(settings.setHeights) {
          if($this.is(settings.interstitialSection)) {
            overflow[i] = false;
          } else {
            if(($this.css("height","auto").outerHeight()<portHeight) || $this.css("overflow")==="hidden") {
              $this.css({"height":portHeight});

              overflow[i] = false;
            } else {

              $this.css({"height":$this.height()});

              if(settings.overflowScroll) {
                overflow[i] = true;
              } else {
                overflow[i] = false;
              }
            }

          }

        } else {

          if(($this.outerHeight()<portHeight) || (settings.overflowScroll===false)) {
            overflow[i] = false;
          } else {
            overflow[i] = true;
          }
        }
      });
      if(keepPosition) {
        $window.scrollTop(top);
      }
    }
    function calculatePositions(scroll,firstLoad) {
      var selector = settings.section;
      if(settings.interstitialSection.length) {
        selector += "," + settings.interstitialSection;
      }
      heights = [];
      names = [];
      elements = [];
      $(selector).each(function(i){
          var $this = $(this);
          if(i>0) {
            heights[i] = parseInt($this.offset().top) + settings.offset;
          } else {
            heights[i] = parseInt($this.offset().top);
          }
          if(settings.sectionName && $this.data(settings.sectionName)) {
            names[i] = "#" + $this.data(settings.sectionName).toString().replace(/ /g,"-");
          } else {
            if($this.is(settings.interstitialSection)===false) {
              names[i] = "#" + (i + 1);
            } else {
              names[i] = "#";
              if(i===$(selector).length-1 && i>1) {
                heights[i] = heights[i-1] + (parseInt($($(selector)[i-1]).outerHeight()) - parseInt($(window).height())) + parseInt($this.outerHeight());
              }
            }
          }
          elements[i] = $this;
          try {
            if($(names[i]).length && window.console) {
              console.warn("Scrollify warning: Section names can't match IDs - this will cause the browser to anchor.");
            }
          } catch (e) {}

          if(window.location.hash===names[i]) {
            index = i;
            hasLocation = true;
          }

      });

      if(true===scroll) {
        //index, instant, callbacks, toTop
        animateScroll(index,false,false,false);
      }
    }

    function atTop() {
      if(!overflow[index]) {
        return true;
      }
      top = $window.scrollTop();
      if(top>parseInt(heights[index])) {
        return false;
      } else {
        return true;
      }
    }
    function atBottom() {
      if(!overflow[index]) {
        return true;
      }
      top = $window.scrollTop();
      portHeight = getportHeight();

      if(top<parseInt(heights[index])+(elements[index].outerHeight()-portHeight)-28) {

        return false;

      } else {
        return true;
      }
    }
  }

  function move(panel,instant) {
    var z = names.length;
    for(;z>=0;z--) {
      if(typeof panel === 'string') {
        if (names[z]===panel) {
          index = z;
          //index, instant, callbacks, toTop
          animateScroll(z,instant,true,true);
        }
      } else {
        if(z===panel) {
          index = z;
          //index, instant, callbacks, toTop
          animateScroll(z,instant,true,true);
        }
      }
    }
  }
  scrollify.move = function(panel) {
    if(panel===undefined) {
      return false;
    }
    if(panel.originalEvent) {
      panel = $(this).attr("href");
    }
    move(panel,false);
  };
  scrollify.instantMove = function(panel) {
    if(panel===undefined) {
      return false;
    }
    move(panel,true);
  };
  scrollify.next = function() {
    if(index<names.length) {
      index += 1;
      //index, instant, callbacks, toTop
      animateScroll(index,false,true,true);
    }
  };
  scrollify.previous = function() {
    if(index>0) {
      index -= 1;
      //index, instant, callbacks, toTop
      animateScroll(index,false,true,true);
    }
  };
  scrollify.instantNext = function() {
    if(index<names.length) {
      index += 1;
      //index, instant, callbacks, toTop
      animateScroll(index,true,true,true);
    }
  };
  scrollify.instantPrevious = function() {
    if(index>0) {
      index -= 1;
      //index, instant, callbacks, toTop
      animateScroll(index,true,true,true);
    }
  };
  scrollify.destroy = function() {
    if(!initialised) {
      return false;
    }
    if(settings.setHeights) {
      $(settings.section).each(function() {
        $(this).css("height","auto");
      });
    }
    $window.off("resize",util.handleResize);
    if(settings.scrollbars) {
      $window.off('mousedown', manualScroll.handleMousedown);
      $window.off('mouseup', manualScroll.handleMouseup);
      $window.off('scroll', manualScroll.handleScroll);
    }
    $window.off(wheelEvent,manualScroll.wheelHandler);
    $window.off('keydown', manualScroll.keyHandler);

    if (document.addEventListener && settings.touchScroll) {
      document.removeEventListener('touchstart', swipeScroll.touchHandler, false);
      document.removeEventListener('touchmove', swipeScroll.touchHandler, false);
      document.removeEventListener('touchend', swipeScroll.touchHandler, false);
    }
    heights = [];
    names = [];
    elements = [];
    overflow = [];
  };
  scrollify.update = function() {
    if(!initialised) {
      return false;
    }
    util.handleUpdate();
  };
  scrollify.current = function() {
    return elements[index];
  };
  scrollify.currentIndex = function() {
    return index;
  };
  scrollify.disable = function() {
    disabled = true;
  };
  scrollify.enable = function() {
    disabled = false;
    if (initialised) {
      //instant,callbacks
      manualScroll.calculateNearest(false,false);
    }
  };
  scrollify.isDisabled = function() {
    return disabled;
  };
  scrollify.setOptions = function(updatedOptions) {
    if(!initialised) {
      return false;
    }
    if(typeof updatedOptions === "object") {
      settings = $.extend(settings, updatedOptions);
      util.handleUpdate();
    } else if(window.console) {
      console.warn("Scrollify warning: setOptions expects an object.");
    }
  };
  $.scrollify = scrollify;
  return scrollify;
}));


/***/ })
/******/ ]);
//# sourceMappingURL=state.js.map